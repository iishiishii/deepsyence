# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install
      - name: Copy onnx wasm artifacts
        run: |
          mkdir -p public/js
          cp node_modules/onnxruntime-web/dist/*.js public/js
          cp node_modules/onnxruntime-web/dist/*.wasm public/js
      - name: Buld production bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: run build
      - name: Get package info
        shell: bash
        id: package-info
        run: echo "version=$(python scripts/get_package_version.py)" >> $GITHUB_OUTPUT
      - name: "Find Release with tag v${{ steps.package-info.outputs.version}}"
        uses: actions/github-script@v6
        id: release-exists
        env:
          APP_VERSION: ${{ steps.package-info.outputs.version}}
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: '${{ github.repository_owner }}',
              repo: '${{ github.repository }}'.split('/')[1]
            })
            const tagName = `v${process.env.APP_VERSION}`
            const releaseWithTag = releases.data.find(release => release.tag_name === tagName && (release.draft || release.prerelease))
            return releaseWithTag ? 'true' : 'false'
          result-encoding: string
      - name: Setup Pages
        uses: actions/configure-pages@v3
        if: steps.release-exists.outputs.result == 'true'
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: "build"
        if: steps.release-exists.outputs.result == 'true'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        if: steps.release-exists.outputs.result == 'true'
