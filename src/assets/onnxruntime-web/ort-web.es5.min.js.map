{"version":3,"sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/wasm/options-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/string-utils.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/./node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/external {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/global","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__2174__","_scriptDir","e","document","currentScript","src","t","S","buffer","Y","Q","P","n","W","r","q","U","B","o","u","s","ready","Promise","c","f","hasOwnProperty","l","p","d","m","b","h","g","_","window","y","importScripts","w","process","versions","node","v","ENVIRONMENT_IS_PTHREAD","A","T","locateFile","O","__dirname","normalize","readFileSync","Uint8Array","F","readFile","argv","length","replace","slice","on","Gt","ce","re","exitCode","exit","inspect","console","error","Worker","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","k","E","x","print","log","bind","M","printErr","warn","thisProgram","quit","wasmBinary","D","noExitRuntime","WebAssembly","C","R","I","j","TextDecoder","this","decode","SharedArrayBuffer","call","G","H","subarray","String","fromCharCode","z","L","charCodeAt","N","V","X","ht","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","J","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Error","byteLength","Z","$","K","ee","te","ne","ae","preRun","shift","unshift","ie","oe","ue","se","onAbort","RuntimeError","fe","startsWith","le","preloadedImages","preloadedAudios","pe","de","Nb","ib","get","me","Atomics","load","Bt","compareExchange","notify","be","ge","cb","sb","worker","_emscripten_futex_wake","he","gb","fb","zb","xc","Rb","store","Dt","vt","Sb","receiveObjectTransfer","Xb","threadInit","hc","threadCancel","fc","threadExit","Hb","setExitStatus","Zb","yb","Eb","pop","Ct","Fb","yt","postMessage","cmd","Gb","terminate","bb","xb","eb","_t","wb","hb","Yb","push","splice","Ut","Ub","onmessage","data","Lb","targetThread","Dc","transferList","Ot","ve","thread","loaded","mb","threadId","text","alert","zt","returnCode","target","filename","lineno","message","urlOrBlob","mainScriptUrlOrBlob","wasmModule","Ib","Ob","nc","now","_e","Date","gt","ye","ze","we","lb","dc","ac","bc","$b","cc","Pb","rb","jb","detached","St","start_routine","ec","arg","threadInfoStruct","stackBase","stackSize","time","mc","Ae","exchange","wait","Te","establishStackSpace","Wt","Yt","invokeEntryPoint","hrtime","__performance_now_clock_drift","Oe","ke","Ee","xe","Me","rc","De","Se","Ce","Re","Ie","Fe","sc","je","Math","ceil","qt","fill","Wb","Tb","Jb","fd","Ac","flags","offset","Ye","Pe","We","tc","qe","Ue","Be","Ge","He","arguments","jt","Pt","kt","Le","Ne","Ve","querySelector","Xe","qb","Db","pc","Et","pb","ob","getParameter","width","height","viewport","Qe","Je","Ze","$e","Ke","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","et","forEach","tt","nt","rt","at","vc","uc","it","ot","ut","toTimeString","match","Kb","getFullYear","getTimezoneOffset","max","Ft","It","Number","Rt","st","ct","ft","lt","pt","getTime","getMonth","getDate","setDate","setMonth","setFullYear","dt","toString","getDay","ab","vb","kc","jc","tb","nb","kb","ub","Ec","ic","lc","RegExp","split","substring","abs","includes","Array","set","mt","bt","Tt","oc","At","xt","da","ga","ea","apply","copyWithin","hardwareConcurrency","aa","min","grow","ba","setTimeout","stack","Mt","ca","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","Vb","yc","Bb","Mb","Bc","Cc","Cb","getContext","WebGLRenderingContext","wc","attributes","version","canvas","Qb","getExtension","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","isVertexArray","isVertexArrayOES","drawBuffers","drawBuffersWEBGL","qc","zc","getSupportedExtensions","ha","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","Ab","getSeconds","getMinutes","getHours","setTime","fa","asm","Ca","ia","Ha","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","ja","_OrtCreateSessionOptions","ka","_OrtAddSessionConfigEntry","la","_OrtReleaseSessionOptions","ma","_OrtCreateSession","na","_OrtReleaseSession","oa","_OrtGetInputCount","pa","_OrtGetOutputCount","qa","_OrtGetInputName","ra","_OrtGetOutputName","sa","_OrtFree","ta","_OrtCreateTensor","ua","_OrtGetTensorData","va","_OrtReleaseTensor","wa","_OrtCreateRunOptions","xa","_OrtAddRunConfigEntry","ya","_OrtReleaseRunOptions","za","_OrtRun","Aa","_OrtEndProfiling","Ba","_malloc","Da","___errno_location","Ea","_free","Fa","_pthread_self","Ga","_emscripten_tls_init","_emscripten_current_thread_process_queued_calls","Ia","wt","_emscripten_register_main_browser_thread_id","Ja","_emscripten_main_browser_thread_id","Ka","_emscripten_sync_run_in_main_thread_4","La","_emscripten_main_thread_process_queued_calls","Ma","_emscripten_run_in_main_runtime_thread_js","Na","__emscripten_call_on_thread","Oa","_pthread_testcancel","Pa","_pthread_exit","Qa","__emscripten_thread_init","Ra","_emscripten_get_global_libc","Sa","___pthread_tsd_run_dtors","Ta","__get_tzname","Ua","__get_daylight","Va","__get_timezone","Wa","stackSave","Xa","stackRestore","Ya","stackAlloc","Za","_emscripten_stack_set_limits","_a","_memalign","$a","__emscripten_allow_main_runtime_queued_calls","__emscripten_main_thread_futex","name","Ht","calledRun","onRuntimeInitialized","postRun","setStatus","_fflush","onExit","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","PThread","ExitStatus","run","preInit","ortWasm","undefined","fn","ctx","params","index","pending","reject","err","base64","string","charAt","b64","s64","encode","start","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","Object","keys","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","value","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","TypeError","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","count","out","random","isEmpty","toJSON","wasm","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","radixToPower","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","type","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","init","createSessionHandler","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","env","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","initWasm","promisify","handler","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","registerBackend","assign","_cacheKey","getOwnPropertyNames","sort","map","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","_attributes","Map","attr","Attribute","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","dispose","webgl","WebGLBackend","resolveBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encodeUint8","endianness","EncodingGlslLib","decodeUint8","ArrayBuffer","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","channels","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActicationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","adjustedAttributes","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","newAttributes","activationAttributes","parseInternalActivationAttributes","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","_dataType","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","createElement","createCanvas","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","scissor","readPixels","isFramebufferReady","getActiveTexture","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","GraphImpl","_from","_to","tensorValueTypeFromProto","_nodeProto","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","_severity","_content","_category","severity","content","category","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","startTime","endCallback","timer","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","__init","getRootAsShape","Shape","getSizePrefixedRootAsShape","startShape","builder","addDim","createDimVector","startDimVector","numElems","endShape","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","optionalEncoding","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","UNKNOWN","startDimensionValue","addDimType","addDimValue","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","NONE","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawDataLength","rawDataArray","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","floatsLength","graphsLength","startAttribute","addF","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","fromData","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","typeProto","tensorDataTypeStringToEnum","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","initialized","aborted","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","getLogLevel","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","path","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","revokeObjectURL","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"ort-web.es5.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__2174__) {\nreturn ","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function t(){return S.buffer!=Y&&Q(S.buffer),P}function n(){return S.buffer!=Y&&Q(S.buffer),W}function r(){return S.buffer!=Y&&Q(S.buffer),q}function a(){return S.buffer!=Y&&Q(S.buffer),U}function i(){return S.buffer!=Y&&Q(S.buffer),B}var o,u,s;e=e||{},o||(o=void 0!==e?e:{}),o.ready=new Promise((function(e,t){u=e,s=t}));var c,f={};for(c in o)o.hasOwnProperty(c)&&(f[c]=o[c]);var l=\"./this.program\";function p(e,t){throw t}var d,m,b,h,g,_=\"object\"==typeof window,y=\"function\"==typeof importScripts,w=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=o.ENVIRONMENT_IS_PTHREAD||!1,A=\"\";function T(e){return o.locateFile?o.locateFile(e,A):A+e}if(w){var O;A=y?require(\"path\").dirname(A)+\"/\":__dirname+\"/\",d=function(e,t){return h||(h=require(\"fs\")),g||(g=require(\"path\")),e=g.normalize(e),h.readFileSync(e,t?null:\"utf8\")},b=function(e){return(e=d(e,!0)).buffer||(e=new Uint8Array(e)),F(e.buffer),e},m=function(e,t,n){h||(h=require(\"fs\")),g||(g=require(\"path\")),e=g.normalize(e),h.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(l=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof Gt))throw e})),process.on(\"unhandledRejection\",ce),p=function(e,t){if(re())throw process.exitCode=e,t;process.exit(e)},o.inspect=function(){return\"[Emscripten Module object]\"};try{O=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=O.Worker}else(_||y)&&(y?A=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\"blob:\")?A.substr(0,A.lastIndexOf(\"/\")+1):\"\",w?(d=function(e,t){return h||(h=require(\"fs\")),g||(g=require(\"path\")),e=g.normalize(e),h.readFileSync(e,t?null:\"utf8\")},b=function(e){return(e=d(e,!0)).buffer||(e=new Uint8Array(e)),F(e.buffer),e},m=function(e,t,n){h||(h=require(\"fs\")),g||(g=require(\"path\")),e=g.normalize(e),h.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))}):(d=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},y&&(b=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),m=function(e,t,n){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var k,E,x=o.print||console.log.bind(console),M=o.printErr||console.warn.bind(console);for(c in f)f.hasOwnProperty(c)&&(o[c]=f[c]);f=null,o.thisProgram&&(l=o.thisProgram),o.quit&&(p=o.quit),o.wasmBinary&&(E=o.wasmBinary);var D=o.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&ce(\"no native wasm support detected\");var S,C,R,I=!1;function F(e,t){e||ce(\"Assertion failed: \"+t)}function j(e){var t=new TextDecoder(e);this.decode=function(e){return e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),t.decode.call(t,e)}}var Y,P,W,q,U,B,G=\"undefined\"!=typeof TextDecoder?new j(\"utf8\"):void 0;function H(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&G)return G.decode(e.subarray(t,n));for(r=\"\";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return e?H(n(),e,t):\"\"}function L(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++]=o}else{if(2047>=o){if(n+1>=r)break;t[n++]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++]=224|o>>12}else{if(n+3>=r)break;t[n++]=240|o>>18,t[n++]=128|o>>12&63}t[n++]=128|o>>6&63}t[n++]=128|63&o}}return t[n]=0,n-a}function N(e,t,r){return L(e,n(),t,r)}function V(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function X(e){var n=V(e)+1,r=ht(n);return r&&L(e,t(),r,n),r}function Q(e){Y=e,o.HEAP8=P=new Int8Array(e),o.HEAP16=new Int16Array(e),o.HEAP32=q=new Int32Array(e),o.HEAPU8=W=new Uint8Array(e),o.HEAPU16=new Uint16Array(e),o.HEAPU32=U=new Uint32Array(e),o.HEAPF32=new Float32Array(e),o.HEAPF64=B=new Float64Array(e)}\"undefined\"!=typeof TextDecoder&&new j(\"utf-16le\"),v&&(Y=o.buffer);var J=o.INITIAL_MEMORY||16777216;if(v)S=o.wasmMemory,Y=o.buffer;else if(o.wasmMemory)S=o.wasmMemory;else if(!((S=new WebAssembly.Memory({initial:J/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw M(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),w&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");S&&(Y=S.buffer),J=Y.byteLength,Q(Y);var Z,$=[],K=[],ee=[],te=[],ne=0;function re(){return D||0<ne}function ae(){var e=o.preRun.shift();$.unshift(e)}var ie,oe=0,ue=null,se=null;function ce(e){throw o.onAbort&&o.onAbort(e),F(!v),M(e),I=!0,R=1,e=new WebAssembly.RuntimeError(\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\"),s(e),e}function fe(){return ie.startsWith(\"data:application/octet-stream;base64,\")}function le(){var e=ie;try{if(e==ie&&E)return new Uint8Array(E);if(b)return b(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ce(e)}}o.preloadedImages={},o.preloadedAudios={},ie=\"ort-wasm-threaded.wasm\",fe()||(ie=T(ie));var pe={689380:function(){throw\"Canceled!\"}};function de(e){for(;0<e.length;){var t=e.shift();if(\"function\"==typeof t)t(o);else{var n=t.Nb;\"number\"==typeof n?void 0===t.ib?Z.get(n)():Z.get(n)(t.ib):n(void 0===t.ib?null:t.ib)}}}function me(e,n){if(0>=e||e>t().length||1&e||0>n)return-28;if(0==n)return 0;2147483647<=n&&(n=1/0);var a=Atomics.load(r(),Bt>>2),i=0;if(a==e&&Atomics.compareExchange(r(),Bt>>2,a,0)==a&&(i=1,0>=--n))return 1;if(0<=(e=Atomics.notify(r(),e>>2,n)))return e+i;throw\"Atomics.notify returned an unexpected value \"+e}function be(e){if(v)throw\"Internal Error! cleanupThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cleanupThread!\";var t=ge.cb[e];t&&(r()[e+12>>2]=0,ge.sb(t.worker))}o._emscripten_futex_wake=me;var he,ge={gb:[],fb:[],zb:[],xc:function(){},Rb:function(){for(var e=ht(228),t=0;57>t;++t)a()[e/4+t]=0;r()[e+12>>2]=e,t=e+152,r()[t>>2]=t;var n=ht(512);for(t=0;128>t;++t)a()[n/4+t]=0;Atomics.store(a(),e+100>>2,n),Atomics.store(a(),e+40>>2,e),Dt(e,!y,1),vt(e)},Sb:function(){ge.receiveObjectTransfer=ge.Xb,ge.threadInit=ge.hc,ge.threadCancel=ge.fc,ge.threadExit=ge.Hb,ge.setExitStatus=ge.Zb},cb:{},yb:[],Eb:function(){for(;0<ge.yb.length;)ge.yb.pop()();Ct()},Fb:function(e,t){Atomics.store(a(),e+56>>2,1),Atomics.store(a(),e+60>>2,0),ge.Eb(),Atomics.store(a(),e+4>>2,t),Atomics.store(a(),e+0>>2,1),me(e+0,2147483647),Dt(0,0,0)},Zb:function(e){R=e},Hb:function(e){var t=yt();t&&(ge.Fb(t,e),v&&postMessage({cmd:\"exit\"}))},fc:function(){ge.Fb(yt(),-1),postMessage({cmd:\"cancelDone\"})},Gb:function(){for(var e in ge.cb){var t=ge.cb[e];t&&t.worker&&ge.sb(t.worker)}for(ge.cb={},e=0;e<ge.gb.length;++e){var n=ge.gb[e];n.terminate()}for(ge.gb=[],e=0;e<ge.fb.length;++e)t=(n=ge.fb[e]).bb,ge.xb(t),n.terminate();ge.fb=[]},xb:function(e){if(e){if(e.eb){var t=r()[e.eb+100>>2];r()[e.eb+100>>2]=0,_t(t),_t(e.eb)}e.eb=0,e.wb&&e.hb&&_t(e.hb),e.hb=0,e.worker&&(e.worker.bb=null)}},sb:function(e){ge.Yb((function(){delete ge.cb[e.bb.eb],ge.gb.push(e),ge.fb.splice(ge.fb.indexOf(e),1),ge.xb(e.bb),e.bb=void 0}))},Yb:function(e){r()[Ut>>2]=0;try{e()}finally{r()[Ut>>2]=1}},Xb:function(){},hc:function(){for(var e in ge.zb)ge.zb[e]()},Ub:function(e,t){e.onmessage=function(n){var i=n.data,o=i.cmd;if(e.bb&&(ge.Lb=e.bb.eb),i.targetThread&&i.targetThread!=yt()){var u=ge.cb[i.Dc];u?u.worker.postMessage(n.data,i.transferList):M('Internal error! Worker sent a message \"'+o+'\" to target pthread '+i.targetThread+\", but that thread no longer exists!\")}else if(\"processQueuedMainThreadWork\"===o)Ot();else if(\"spawnThread\"===o)ve(n.data);else if(\"cleanupThread\"===o)be(i.thread);else if(\"killThread\"===o){if(n=i.thread,v)throw\"Internal Error! killThread() can only ever be called from main application thread!\";if(!n)throw\"Internal Error! Null pthread_ptr in killThread!\";r()[n+12>>2]=0,i=ge.cb[n],delete ge.cb[n],i.worker.terminate(),ge.xb(i),ge.fb.splice(ge.fb.indexOf(i.worker),1),i.worker.bb=void 0}else if(\"cancelThread\"===o){if(n=i.thread,v)throw\"Internal Error! cancelThread() can only ever be called from main application thread!\";if(!n)throw\"Internal Error! Null pthread_ptr in cancelThread!\";ge.cb[n].worker.postMessage({cmd:\"cancel\"})}else if(\"loaded\"===o)e.loaded=!0,t&&t(e),e.mb&&(e.mb(),delete e.mb);else if(\"print\"===o)x(\"Thread \"+i.threadId+\": \"+i.text);else if(\"printErr\"===o)M(\"Thread \"+i.threadId+\": \"+i.text);else if(\"alert\"===o)alert(\"Thread \"+i.threadId+\": \"+i.text);else if(\"exit\"===o)e.bb&&Atomics.load(a(),e.bb.eb+64>>2)&&ge.sb(e);else if(\"exitProcess\"===o)try{zt(i.returnCode)}catch(e){if(e instanceof Gt)return;throw e}else\"cancelDone\"===o?ge.sb(e):\"objectTransfer\"!==o&&(\"setimmediate\"===n.data.target?e.postMessage(n.data):M(\"worker sent an unknown command \"+o));ge.Lb=void 0},e.onerror=function(e){M(\"pthread sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message)},w&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})),e.on(\"exit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:o.mainScriptUrlOrBlob||_scriptDir,wasmMemory:S,wasmModule:C})},Ib:function(){var e=T(\"ort-wasm-threaded.worker.js\");ge.gb.push(new Worker(e))},Ob:function(){return 0==ge.gb.length&&(ge.Ib(),ge.Ub(ge.gb[0])),ge.gb.pop()},nc:function(e){for(e=performance.now()+e;performance.now()<e;);}};function _e(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return r()[gt()>>2]=28,-1;e=he()}return r()[t>>2]=e/1e3|0,r()[t+4>>2]=e%1e3*1e6|0,0}function ye(e,t){if(v)return ze(1,1,e,t);ee.unshift({Nb:e,ib:t})}function we(e){this.lb=e-16,this.dc=function(e){r()[this.lb+4>>2]=e},this.ac=function(e){r()[this.lb+8>>2]=e},this.bc=function(){r()[this.lb>>2]=0},this.$b=function(){t()[this.lb+12>>0]=0},this.cc=function(){t()[this.lb+13>>0]=0},this.Pb=function(e,t){this.dc(e),this.ac(t),this.bc(),this.$b(),this.cc()}}function ve(e){if(v)throw\"Internal Error! spawnThread() can only ever be called from main application thread!\";var t=ge.Ob();if(!t)return 6;if(void 0!==t.bb)throw\"Internal error!\";if(!e.rb)throw\"Internal error, no pthread ptr!\";ge.fb.push(t);for(var n=ht(512),i=0;128>i;++i)r()[n+4*i>>2]=0;var o=e.hb+e.jb,u=(i=ge.cb[e.rb]={worker:t,hb:e.hb,jb:e.jb,wb:e.wb,eb:e.rb}).eb>>2;Atomics.store(a(),u+16,e.detached),Atomics.store(a(),u+25,n),Atomics.store(a(),u+10,i.eb),Atomics.store(a(),u+20,e.jb),Atomics.store(a(),u+19,o),Atomics.store(a(),u+26,e.jb),Atomics.store(a(),u+28,o),Atomics.store(a(),u+29,e.detached),n=St()+40,Atomics.store(a(),u+43,n),t.bb=i;var s={cmd:\"run\",start_routine:e.ec,arg:e.ib,threadInfoStruct:e.rb,stackBase:e.hb,stackSize:e.jb};return t.mb=function(){s.time=performance.now(),t.postMessage(s,e.mc)},t.loaded&&(t.mb(),delete t.mb),0}function Ae(e,n,a){if(0>=e||e>t().length||1&e)return-28;if(_){if(Atomics.load(r(),e>>2)!=n)return-6;var i=performance.now();for(a=i+a,Atomics.exchange(r(),Bt>>2,e);;){if((i=performance.now())>a)return Atomics.exchange(r(),Bt>>2,0),-73;if(0==(i=Atomics.exchange(r(),Bt>>2,0)))break;if(Ot(),Atomics.load(r(),e>>2)!=n)return-6;Atomics.exchange(r(),Bt>>2,e)}return 0}if(\"timed-out\"===(e=Atomics.wait(r(),e>>2,n,a)))return-73;if(\"not-equal\"===e)return-6;if(\"ok\"===e)return 0;throw\"Atomics.wait returned an unexpected value \"+e}function Te(){w||y||(k||(k={}),k[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]||(k[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]=1,M(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")))}o.establishStackSpace=function(e,t){Wt(e,t),Yt(e)},o.invokeEntryPoint=function(e,t){return Z.get(e)(t)},he=w?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:v?function(){return performance.now()-o.__performance_now_clock_drift}:function(){return performance.now()};var Oe={},ke=[null,[],[]];function Ee(e,t){var n=ke[e];0===t||10===t?((1===e?x:M)(H(n,0)),n.length=0):n.push(t)}var xe={};function Me(e,t){return v?ze(2,1,e,t):(e=z(e),xe.rc(e,t))}function De(e,t,n){return v?ze(3,1,e,t,n):0}function Se(e,t){if(v)return ze(4,1,e,t)}function Ce(e,t,n){if(v)return ze(5,1,e,t,n)}function Re(e,t,n){return v?ze(6,1,e,t,n):0}function Ie(e,t){if(v)return ze(7,1,e,t)}function Fe(e,t){return v?ze(8,1,e,t):(e=z(e),xe.sc(e,t))}function je(e,t,r,a,i,o){if(v)t=ze(9,1,e,t,r,a,i,o);else if(o<<=12,0!=(16&a)&&0!=e%65536)t=-28;else if(0!=(32&a)){var u=65536*Math.ceil(t/65536);(e=qt(65536,u))?n().fill(0,e,e+u):e=0,e?(Oe[e]={Wb:e,Tb:t,Jb:!0,fd:i,Ac:r,flags:a,offset:o},t=e):t=-48}else t=-52;return t}function Ye(e,t){if(v)e=ze(10,1,e,t);else{var n=Oe[e];0!==t&&n?(t===n.Tb&&(Oe[e]=null,n.Jb&&_t(n.Wb)),e=0):e=-28}return e}function Pe(e,t,n){if(v)return ze(11,1,e,t,n)}function We(e,t,n){return v?ze(12,1,e,t,n):(e=z(e),xe.tc(e,t,n))}function qe(e){if(v)return ze(13,1,e)}function Ue(e,t){if(v)return ze(14,1,e,t)}function Be(e){if(v)return ze(15,1,e)}function Ge(){if(v)return ze(16,1);ce()}var He=[];function ze(e,t){for(var n=arguments.length-2,r=jt(),a=Pt(8*n),o=a>>3,u=0;u<n;u++){var s=arguments[2+u];i()[o+u]=s}return n=kt(e,n,a,t),Yt(r),n}var Le=[],Ne=[0,\"undefined\"!=typeof document?document:0,\"undefined\"!=typeof window?window:0];function Ve(e){return e=2<e?z(e):e,Ne[e]||(\"undefined\"!=typeof document?document.querySelector(e):void 0)}function Xe(e,t,n){var a=Ve(e);if(!a)return-4;if(a.qb&&(r()[a.qb>>2]=t,r()[a.qb+4>>2]=n),!a.Db&&a.pc){if(a.qb){a=r()[a.qb+8>>2],e=e?z(e):\"\";var i=jt(),o=Pt(12),u=0;if(e){u=V(e)+1;var s=ht(u);N(e,s,u),u=s}return r()[o>>2]=u,r()[o+4>>2]=t,r()[o+8>>2]=n,Et(0,a,657457152,0,u,o),Yt(i),1}return-4}return a.Db&&(a=a.Db),e=!1,a.pb&&a.pb.ob&&(e=0===(e=a.pb.ob.getParameter(2978))[0]&&0===e[1]&&e[2]===a.width&&e[3]===a.height),a.width=t,a.height=n,e&&a.pb.ob.viewport(0,0,t,n),0}function Qe(e,t,n){return v?ze(17,1,e,t,n):Xe(e,t,n)}var Je,Ze=[\"default\",\"low-power\",\"high-performance\"],$e={};function Ke(){if(!Je){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:l||\"./this.program\"};for(e in $e)void 0===$e[e]?delete t[e]:t[e]=$e[e];var n=[];for(e in t)n.push(e+\"=\"+t[e]);Je=n}return Je}function et(e,n){if(v)return ze(18,1,e,n);var a=0;return Ke().forEach((function(i,o){var u=n+a;for(o=r()[e+4*o>>2]=u,u=0;u<i.length;++u)t()[o++>>0]=i.charCodeAt(u);t()[o>>0]=0,a+=i.length+1})),0}function tt(e,t){if(v)return ze(19,1,e,t);var n=Ke();r()[e>>2]=n.length;var a=0;return n.forEach((function(e){a+=e.length+1})),r()[t>>2]=a,0}function nt(e){return v?ze(20,1,e):0}function rt(e,n){return v?ze(21,1,e,n):(e=1==e||2==e?2:ce(),t()[n>>0]=e,0)}function at(e,t,n,a){return v?ze(22,1,e,t,n,a):(e=xe.vc(e),t=xe.uc(e,t,n),r()[a>>2]=t,0)}function it(e,t,n,r,a){if(v)return ze(23,1,e,t,n,r,a)}function ot(e,t,a,i){if(v)return ze(24,1,e,t,a,i);for(var o=0,u=0;u<a;u++){for(var s=r()[t+8*u>>2],c=r()[t+(8*u+4)>>2],f=0;f<c;f++)Ee(e,n()[s+f]);o+=c}return r()[i>>2]=o,0}function ut(){function e(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(v)return ze(25,1);if(!ut.Kb){ut.Kb=!0;var t=(new Date).getFullYear(),n=new Date(t,0,1),a=new Date(t,6,1);t=n.getTimezoneOffset();var i=a.getTimezoneOffset(),o=Math.max(t,i);r()[Ft()>>2]=60*o,r()[It()>>2]=Number(t!=i),n=e(n),a=e(a),n=X(n),a=X(a),i<t?(r()[Rt()>>2]=n,r()[Rt()+4>>2]=a):(r()[Rt()>>2]=a,r()[Rt()+4>>2]=n)}}function st(e){return 0==e%4&&(0!=e%100||0==e%400)}function ct(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ft=[31,29,31,30,31,30,31,31,30,31,30,31],lt=[31,28,31,30,31,30,31,31,30,31,30,31];function pt(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(st(e.getFullYear())?ft:lt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function dt(e,n,a,i){function o(e,t,n){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=n[0]+e;return e}function u(e,t){return o(e,t,\"0\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){e=pt(new Date(e.ab+1900,0,1),e.vb);var t=new Date(e.getFullYear()+1,0,4),n=c(new Date(e.getFullYear(),0,4));return t=c(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[i+40>>2];for(var p in i={kc:r()[i>>2],jc:r()[i+4>>2],tb:r()[i+8>>2],nb:r()[i+12>>2],kb:r()[i+16>>2],ab:r()[i+20>>2],ub:r()[i+24>>2],vb:r()[i+28>>2],Ec:r()[i+32>>2],ic:r()[i+36>>2],lc:l?z(l):\"\"},a=z(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),m=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.ub].substring(0,3)},\"%A\":function(e){return d[e.ub]},\"%b\":function(e){return m[e.kb].substring(0,3)},\"%B\":function(e){return m[e.kb]},\"%C\":function(e){return u((e.ab+1900)/100|0,2)},\"%d\":function(e){return u(e.nb,2)},\"%e\":function(e){return o(e.nb,2,\" \")},\"%g\":function(e){return f(e).toString().substring(2)},\"%G\":function(e){return f(e)},\"%H\":function(e){return u(e.tb,2)},\"%I\":function(e){return 0==(e=e.tb)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){return u(e.nb+ct(st(e.ab+1900)?ft:lt,e.kb-1),3)},\"%m\":function(e){return u(e.kb+1,2)},\"%M\":function(e){return u(e.jc,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.tb&&12>e.tb?\"AM\":\"PM\"},\"%S\":function(e){return u(e.kc,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.ub||7},\"%U\":function(e){var t=new Date(e.ab+1900,0,1),n=0===t.getDay()?t:pt(t,7-t.getDay());return 0>s(n,e=new Date(e.ab+1900,e.kb,e.nb))?u(Math.ceil((31-n.getDate()+(ct(st(e.getFullYear())?ft:lt,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\"01\":\"00\"},\"%V\":function(e){var t=new Date(e.ab+1901,0,4),n=c(new Date(e.ab+1900,0,4));t=c(t);var r=pt(new Date(e.ab+1900,0,1),e.vb);return 0>s(r,n)?\"53\":0>=s(t,r)?\"01\":u(Math.ceil((n.getFullYear()<e.ab+1900?e.vb+32-n.getDate():e.vb+1-n.getDate())/7),2)},\"%w\":function(e){return e.ub},\"%W\":function(e){var t=new Date(e.ab,0,1),n=1===t.getDay()?t:pt(t,0===t.getDay()?1:7-t.getDay()+1);return 0>s(n,e=new Date(e.ab+1900,e.kb,e.nb))?u(Math.ceil((31-n.getDate()+(ct(st(e.getFullYear())?ft:lt,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\"01\":\"00\"},\"%y\":function(e){return(e.ab+1900).toString().substring(2)},\"%Y\":function(e){return e.ab+1900},\"%z\":function(e){var t=0<=(e=e.ic);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.lc},\"%%\":function(){return\"%\"}})a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](i)));return p=function(e){var t=Array(V(e)+1);return L(e,t,0,t.length),t}(a),p.length>n?0:(function(e,n){t().set(e,n)}(p,e),p.length-1)}var mt=[null,ye,Me,De,Se,Ce,Re,Ie,Fe,je,Ye,Pe,We,qe,Ue,Be,Ge,Qe,et,tt,nt,rt,at,it,ot,ut],bt={h:function(e,t,n,r){ce(\"Assertion failed: \"+z(e)+\", at: \"+[t?z(t):\"unknown filename\",n,r?z(r):\"unknown function\"])},M:function(e,t){return _e(e,t)},b:function(e){return ht(e+16)+16},d:function(e,t){return ye(e,t)},e:function(e,t){ge.yb.push((function(){Z.get(e)(t)}))},c:function(e,t,n){throw new we(e).Pb(t,n),e},Z:function(e,t,n,i){if(\"undefined\"==typeof SharedArrayBuffer)return M(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;if(!e)return M(\"pthread_create called with a null thread pointer!\"),28;var o=[];if(v&&0===o.length)return Tt(687865856,e,t,n,i);var u=0,s=0;if(t&&-1!=t){var c=r()[t>>2];c+=81920,u=r()[t+8>>2],s=0!==r()[t+12>>2]}else c=2097152;(t=0==u)?u=qt(16,c):F(0<(u-=c));for(var f=ht(228),l=0;57>l;++l)a()[(f>>2)+l]=0;return r()[e>>2]=f,r()[f+12>>2]=f,e=f+152,r()[e>>2]=e,n={hb:u,jb:c,wb:t,detached:s,ec:n,rb:f,ib:i,mc:o},v?(n.oc=\"spawnThread\",postMessage(n,o),0):ve(n)},X:function(e){throw v?ge.Hb(e):(ge.Eb(),zt(e)),\"unwind\"},Y:function(e,t){return function(e,t){if(!e)return M(\"pthread_join attempted on a null thread pointer!\"),71;if(v&&yt()==e)return M(\"PThread \"+e+\" is attempting to join to itself!\"),16;if(!v&&At()==e)return M(\"Main thread \"+e+\" is attempting to join to itself!\"),16;if(r()[e+12>>2]!==e)return M(\"pthread_join attempted on thread \"+e+\", which does not point to a valid thread, or does not exist anymore!\"),71;if(Atomics.load(a(),e+64>>2))return M(\"Attempted to join thread \"+e+\", which was already detached!\"),28;for(Te();;){var n=Atomics.load(a(),e+0>>2);if(1==n)return n=Atomics.load(a(),e+4>>2),t&&(r()[t>>2]=n),Atomics.store(a(),e+64>>2,1),v?postMessage({cmd:\"cleanupThread\",thread:e}):be(e),0;xt(),v||Ot(),Ae(e+0,n,v?100:1)}}(e,t)},L:Me,s:De,S:Se,V:Ce,u:function(){return 42},F:Re,Q:Ie,P:Fe,U:je,T:Ye,q:Pe,K:We,N:qe,v:Ue,O:Be,da:function(e,t){if(e==t)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(v)postMessage({targetThread:e,cmd:\"processThreadQueue\"});else{if(!(e=(e=ge.cb[e])&&e.worker))return;e.postMessage({cmd:\"processThreadQueue\"})}return 1},f:Ge,w:_e,ga:function(e,t){return e-t},A:function(){ce(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(){ce(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},C:function(){ce(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},z:function(){ce(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},ea:function(e,t,a){var o;for(He.length=0,a>>=2;o=n()[t++];)(o=105>o)&&1&a&&a++,He.push(o?i()[a++>>1]:r()[a]),++a;return pe[e].apply(null,He)},G:Te,n:function(){},k:Ae,j:me,W:function(){return 2147483648},i:he,D:function(e,t,r){n().copyWithin(e,t,t+r)},o:function(){return w?require(\"os\").cpus().length:navigator.hardwareConcurrency},aa:function(e,t,n){Le.length=t,n>>=3;for(var r=0;r<t;r++)Le[r]=i()[n+r];return(0>e?pe[-e-1]:mt[e]).apply(null,Le)},E:function(e){var t=n().length;if((e>>>=0)<=t||2147483648<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296),0<(a=Math.max(e,a))%65536&&(a+=65536-a%65536);e:{try{S.grow(Math.min(2147483648,a)-Y.byteLength+65535>>>16),Q(S.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},ba:function(e,t,n){return Ve(e)?Xe(e,t,n):Qe(e,t,n)},x:function(){},$:function(e,t,n){return ne+=1,setTimeout((function(){--ne,function(e){if(!I){try{e()}catch(e){if(e instanceof Gt)return;if(\"unwind\"!==e)throw e&&\"object\"==typeof e&&e.stack&&M(\"exception thrown: \"+[e,e.stack]),e}if(!re())try{v?Mt(R):zt(R)}catch(e){if(!(e instanceof Gt))throw e}}}((function(){Z.get(e)(n)}))}),t)},ca:function(e,t){t>>=2;var n=r()[t+6];return t={alpha:!!r()[t],depth:!!r()[t+1],stencil:!!r()[t+2],antialias:!!r()[t+3],premultipliedAlpha:!!r()[t+4],preserveDrawingBuffer:!!r()[t+5],powerPreference:Ze[n],failIfMajorPerformanceCaveat:!!r()[t+7],Vb:r()[t+8],yc:r()[t+9],Bb:r()[t+10],Mb:r()[t+11],Bc:r()[t+12],Cc:r()[t+13]},!(e=Ve(e))||t.Mb?0:function(e,t){e.Cb||(e.Cb=e.getContext,e.getContext=function(t,n){return\"webgl\"==t==(n=e.Cb(t,n))instanceof WebGLRenderingContext?n:null});var n=e.getContext(\"webgl\",t);return n?function(e,t){var n=ht(8);r()[n+4>>2]=yt();var a={wc:n,attributes:t,version:t.Vb,ob:e};return e.canvas&&(e.canvas.pb=a),(void 0===t.Bb||t.Bb)&&function(e){if(e||(e=void 0),!e.Qb){e.Qb=!0;var t=e.ob;!function(e){var t=e.getExtension(\"ANGLE_instanced_arrays\");t&&(e.vertexAttribDivisor=function(e,n){t.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,r,a){t.drawArraysInstancedANGLE(e,n,r,a)},e.drawElementsInstanced=function(e,n,r,a,i){t.drawElementsInstancedANGLE(e,n,r,a,i)})}(t),function(e){var t=e.getExtension(\"OES_vertex_array_object\");t&&(e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)})}(t),function(e){var t=e.getExtension(\"WEBGL_draw_buffers\");t&&(e.drawBuffers=function(e,n){t.drawBuffersWEBGL(e,n)})}(t),t.qc=t.getExtension(\"EXT_disjoint_timer_query\"),t.zc=t.getExtension(\"WEBGL_multi_draw\"),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes(\"lose_context\")||e.includes(\"debug\")||t.getExtension(e)}))}}(a),n}(n,t):0}(e,t)},I:et,J:tt,m:nt,H:rt,t:at,B:it,p:ot,R:function(e){var t=Date.now();return r()[e>>2]=t/1e3|0,r()[e+4>>2]=t%1e3*1e3|0,0},ha:function e(t,n){return t=new Date(1e3*r()[t>>2]),r()[n>>2]=t.getUTCSeconds(),r()[n+4>>2]=t.getUTCMinutes(),r()[n+8>>2]=t.getUTCHours(),r()[n+12>>2]=t.getUTCDate(),r()[n+16>>2]=t.getUTCMonth(),r()[n+20>>2]=t.getUTCFullYear()-1900,r()[n+24>>2]=t.getUTCDay(),r()[n+36>>2]=0,r()[n+32>>2]=0,t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2]=t,e.Ab||(e.Ab=X(\"GMT\")),r()[n+40>>2]=e.Ab,n},_:function(){ge.Rb()},r:function(e,t){ut(),e=new Date(1e3*r()[e>>2]),r()[t>>2]=e.getSeconds(),r()[t+4>>2]=e.getMinutes(),r()[t+8>>2]=e.getHours(),r()[t+12>>2]=e.getDate(),r()[t+16>>2]=e.getMonth(),r()[t+20>>2]=e.getFullYear()-1900,r()[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1),a=(e.getTime()-n.getTime())/864e5|0;return r()[t+28>>2]=a,r()[t+36>>2]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,a)),r()[t+32>>2]=e,e=r()[Rt()+(e?4:0)>>2],r()[t+40>>2]=e,t},a:S||o.wasmMemory,y:function(e){ut();var t=new Date(r()[e+20>>2]+1900,r()[e+16>>2],r()[e+12>>2],r()[e+8>>2],r()[e+4>>2],r()[e>>2],0),n=r()[e+32>>2],a=t.getTimezoneOffset(),i=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),s=Math.min(u,o);return 0>n?r()[e+32>>2]=Number(o!=u&&s==a):0<n!=(s==a)&&(o=Math.max(u,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-a))),r()[e+24>>2]=t.getDay(),n=(t.getTime()-i.getTime())/864e5|0,r()[e+28>>2]=n,r()[e>>2]=t.getSeconds(),r()[e+4>>2]=t.getMinutes(),r()[e+8>>2]=t.getHours(),r()[e+12>>2]=t.getDate(),r()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},fa:dt,g:function(e,t,n,r){return dt(e,t,n,r)}};!function(){function e(e,t){o.asm=e.exports,Z=o.asm.Ca,K.unshift(o.asm.ia),ge.zb.push(o.asm.Ha),C=t,v||(oe--,o.monitorRunDependencies&&o.monitorRunDependencies(oe),0==oe&&(null!==ue&&(clearInterval(ue),ue=null),se&&(e=se,se=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!E&&(_||y)){if(\"function\"==typeof fetch&&!ie.startsWith(\"file://\"))return fetch(ie,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+ie+\"'\";return e.arrayBuffer()})).catch((function(){return le()}));if(m)return new Promise((function(e,t){m(ie,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return le()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){M(\"failed to asynchronously prepare wasm: \"+e),ce(e)}))}var r={a:bt};if(v||(oe++,o.monitorRunDependencies&&o.monitorRunDependencies(oe)),o.instantiateWasm)try{return o.instantiateWasm(r,e)}catch(e){return M(\"Module.instantiateWasm callback failed with error: \"+e),!1}(E||\"function\"!=typeof WebAssembly.instantiateStreaming||fe()||ie.startsWith(\"file://\")||\"function\"!=typeof fetch?n(t):fetch(ie,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return M(\"wasm streaming compile failed: \"+e),M(\"falling back to ArrayBuffer instantiation\"),n(t)}))}))).catch(s)}(),o.___wasm_call_ctors=function(){return(o.___wasm_call_ctors=o.asm.ia).apply(null,arguments)},o._OrtInit=function(){return(o._OrtInit=o.asm.ja).apply(null,arguments)},o._OrtCreateSessionOptions=function(){return(o._OrtCreateSessionOptions=o.asm.ka).apply(null,arguments)},o._OrtAddSessionConfigEntry=function(){return(o._OrtAddSessionConfigEntry=o.asm.la).apply(null,arguments)},o._OrtReleaseSessionOptions=function(){return(o._OrtReleaseSessionOptions=o.asm.ma).apply(null,arguments)},o._OrtCreateSession=function(){return(o._OrtCreateSession=o.asm.na).apply(null,arguments)},o._OrtReleaseSession=function(){return(o._OrtReleaseSession=o.asm.oa).apply(null,arguments)},o._OrtGetInputCount=function(){return(o._OrtGetInputCount=o.asm.pa).apply(null,arguments)},o._OrtGetOutputCount=function(){return(o._OrtGetOutputCount=o.asm.qa).apply(null,arguments)},o._OrtGetInputName=function(){return(o._OrtGetInputName=o.asm.ra).apply(null,arguments)},o._OrtGetOutputName=function(){return(o._OrtGetOutputName=o.asm.sa).apply(null,arguments)},o._OrtFree=function(){return(o._OrtFree=o.asm.ta).apply(null,arguments)},o._OrtCreateTensor=function(){return(o._OrtCreateTensor=o.asm.ua).apply(null,arguments)},o._OrtGetTensorData=function(){return(o._OrtGetTensorData=o.asm.va).apply(null,arguments)},o._OrtReleaseTensor=function(){return(o._OrtReleaseTensor=o.asm.wa).apply(null,arguments)},o._OrtCreateRunOptions=function(){return(o._OrtCreateRunOptions=o.asm.xa).apply(null,arguments)},o._OrtAddRunConfigEntry=function(){return(o._OrtAddRunConfigEntry=o.asm.ya).apply(null,arguments)},o._OrtReleaseRunOptions=function(){return(o._OrtReleaseRunOptions=o.asm.za).apply(null,arguments)},o._OrtRun=function(){return(o._OrtRun=o.asm.Aa).apply(null,arguments)},o._OrtEndProfiling=function(){return(o._OrtEndProfiling=o.asm.Ba).apply(null,arguments)};var ht=o._malloc=function(){return(ht=o._malloc=o.asm.Da).apply(null,arguments)},gt=o.___errno_location=function(){return(gt=o.___errno_location=o.asm.Ea).apply(null,arguments)},_t=o._free=function(){return(_t=o._free=o.asm.Fa).apply(null,arguments)},yt=o._pthread_self=function(){return(yt=o._pthread_self=o.asm.Ga).apply(null,arguments)};o._emscripten_tls_init=function(){return(o._emscripten_tls_init=o.asm.Ha).apply(null,arguments)},o._emscripten_current_thread_process_queued_calls=function(){return(o._emscripten_current_thread_process_queued_calls=o.asm.Ia).apply(null,arguments)};var wt,vt=o._emscripten_register_main_browser_thread_id=function(){return(vt=o._emscripten_register_main_browser_thread_id=o.asm.Ja).apply(null,arguments)},At=o._emscripten_main_browser_thread_id=function(){return(At=o._emscripten_main_browser_thread_id=o.asm.Ka).apply(null,arguments)},Tt=o._emscripten_sync_run_in_main_thread_4=function(){return(Tt=o._emscripten_sync_run_in_main_thread_4=o.asm.La).apply(null,arguments)},Ot=o._emscripten_main_thread_process_queued_calls=function(){return(Ot=o._emscripten_main_thread_process_queued_calls=o.asm.Ma).apply(null,arguments)},kt=o._emscripten_run_in_main_runtime_thread_js=function(){return(kt=o._emscripten_run_in_main_runtime_thread_js=o.asm.Na).apply(null,arguments)},Et=o.__emscripten_call_on_thread=function(){return(Et=o.__emscripten_call_on_thread=o.asm.Oa).apply(null,arguments)},xt=o._pthread_testcancel=function(){return(xt=o._pthread_testcancel=o.asm.Pa).apply(null,arguments)},Mt=o._pthread_exit=function(){return(Mt=o._pthread_exit=o.asm.Qa).apply(null,arguments)},Dt=o.__emscripten_thread_init=function(){return(Dt=o.__emscripten_thread_init=o.asm.Ra).apply(null,arguments)},St=o._emscripten_get_global_libc=function(){return(St=o._emscripten_get_global_libc=o.asm.Sa).apply(null,arguments)},Ct=o.___pthread_tsd_run_dtors=function(){return(Ct=o.___pthread_tsd_run_dtors=o.asm.Ta).apply(null,arguments)},Rt=o.__get_tzname=function(){return(Rt=o.__get_tzname=o.asm.Ua).apply(null,arguments)},It=o.__get_daylight=function(){return(It=o.__get_daylight=o.asm.Va).apply(null,arguments)},Ft=o.__get_timezone=function(){return(Ft=o.__get_timezone=o.asm.Wa).apply(null,arguments)},jt=o.stackSave=function(){return(jt=o.stackSave=o.asm.Xa).apply(null,arguments)},Yt=o.stackRestore=function(){return(Yt=o.stackRestore=o.asm.Ya).apply(null,arguments)},Pt=o.stackAlloc=function(){return(Pt=o.stackAlloc=o.asm.Za).apply(null,arguments)},Wt=o._emscripten_stack_set_limits=function(){return(Wt=o._emscripten_stack_set_limits=o.asm._a).apply(null,arguments)},qt=o._memalign=function(){return(qt=o._memalign=o.asm.$a).apply(null,arguments)},Ut=o.__emscripten_allow_main_runtime_queued_calls=688928,Bt=o.__emscripten_main_thread_futex=694164;function Gt(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function Ht(){function e(){if(!wt&&(wt=!0,o.calledRun=!0,!I)&&(v||de(K),u(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!v)){if(o.postRun)for(\"function\"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;){var e=o.postRun.shift();te.unshift(e)}de(te)}}if(!(0<oe))if(v)u(o),v||de(K),postMessage({cmd:\"loaded\"});else{if(!v){if(o.preRun)for(\"function\"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)ae();de($)}0<oe||(o.setStatus?(o.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){o.setStatus(\"\")}),1),e()}),1)):e())}}function zt(e){if(R=e,v)throw postMessage({cmd:\"exitProcess\",returnCode:e}),new Gt(e);re()||(ge.Gb(),v||(de(ee),\"undefined\"!=typeof _fflush&&_fflush(0),ke[1].length&&Ee(1,10),ke[2].length&&Ee(2,10))),R=e,re()||(ge.Gb(),o.onExit&&o.onExit(e),I=!0),p(e,new Gt(e))}if(o.UTF8ToString=z,o.stringToUTF8=N,o.lengthBytesUTF8=V,o.keepRuntimeAlive=re,o.PThread=ge,o.stackSave=jt,o.stackRestore=Yt,o.stackAlloc=Pt,o.PThread=ge,o.wasmMemory=S,o.ExitStatus=Gt,se=function e(){wt||Ht(),wt||(se=e)},o.run=Ht,o.preInit)for(\"function\"==typeof o.preInit&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return v&&(D=!1,ge.Sb()),Ht(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,g;c.ready=new Promise(function(a,b){aa=a;g=b});var r={},t;for(t in c)c.hasOwnProperty(t)&&(r[t]=c[t]);var v=\"./this.program\",ba=\"object\"===typeof window,w=\"function\"===typeof importScripts,ca=\"object\"===typeof process&&\"object\"===typeof process.versions&&\"string\"===typeof process.versions.node,x=\"\",y,z,B,C,D;\r\nif(ca)x=w?require(\"path\").dirname(x)+\"/\":__dirname+\"/\",y=function(a,b){C||(C=require(\"fs\"));D||(D=require(\"path\"));a=D.normalize(a);return C.readFileSync(a,b?null:\"utf8\")},B=function(a){a=y(a,!0);a.buffer||(a=new Uint8Array(a));a.buffer||E(\"Assertion failed: undefined\");return a},z=function(a,b,e){C||(C=require(\"fs\"));D||(D=require(\"path\"));a=D.normalize(a);C.readFile(a,function(f,h){f?e(f):b(h.buffer)})},1<process.argv.length&&(v=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",\r\nfunction(a){throw a;}),process.on(\"unhandledRejection\",E),c.inspect=function(){return\"[Emscripten Module object]\"};else if(ba||w)w?x=self.location.href:\"undefined\"!==typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf(\"blob:\")?x=x.substr(0,x.lastIndexOf(\"/\")+1):x=\"\",y=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},w&&(B=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";\r\nb.send(null);return new Uint8Array(b.response)}),z=function(a,b,e){var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=function(){200==f.status||0==f.status&&f.response?b(f.response):e()};f.onerror=e;f.send(null)};var da=c.print||console.log.bind(console),F=c.printErr||console.warn.bind(console);for(t in r)r.hasOwnProperty(t)&&(c[t]=r[t]);r=null;c.thisProgram&&(v=c.thisProgram);var H;c.wasmBinary&&(H=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!1;\r\n\"object\"!==typeof WebAssembly&&E(\"no native wasm support detected\");var I,ea=!1,fa=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ha(a,b,e){var f=b+e;for(e=b;a[e]&&!(e>=f);)++e;if(16<e-b&&a.subarray&&fa)return fa.decode(a.subarray(b,e));for(f=\"\";b<e;){var h=a[b++];if(h&128){var k=a[b++]&63;if(192==(h&224))f+=String.fromCharCode((h&31)<<6|k);else{var l=a[b++]&63;h=224==(h&240)?(h&15)<<12|k<<6|l:(h&7)<<18|k<<12|l<<6|a[b++]&63;65536>h?f+=String.fromCharCode(h):(h-=65536,f+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else f+=String.fromCharCode(h)}return f}function J(a,b){return a?ha(K,a,b):\"\"}\r\nfunction L(a,b,e,f){if(!(0<f))return 0;var h=e;f=e+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var q=a.charCodeAt(++k);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;b[e++]=l}else{if(2047>=l){if(e+1>=f)break;b[e++]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;b[e++]=224|l>>12}else{if(e+3>=f)break;b[e++]=240|l>>18;b[e++]=128|l>>12&63}b[e++]=128|l>>6&63}b[e++]=128|l&63}}b[e]=0;return e-h}\r\nfunction ia(a){for(var b=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);55296<=f&&57343>=f&&(f=65536+((f&1023)<<10)|a.charCodeAt(++e)&1023);127>=f?++b:b=2047>=f?b+2:65535>=f?b+3:b+4}return b}function ja(a){var b=ia(a)+1,e=ka(b);e&&L(a,M,e,b);return e}var la,M,K,N;\r\nfunction ma(){var a=I.buffer;la=a;c.HEAP8=M=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=N=new Int32Array(a);c.HEAPU8=K=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=new Float64Array(a)}var na,oa=[],pa=[],qa=[],ra=[];function sa(){var a=c.preRun.shift();oa.unshift(a)}var O=0,ta=null,P=null;c.preloadedImages={};c.preloadedAudios={};\r\nfunction E(a){if(c.onAbort)c.onAbort(a);F(a);ea=!0;a=new WebAssembly.RuntimeError(\"abort(\"+a+\"). Build with -s ASSERTIONS=1 for more info.\");g(a);throw a;}function ua(){return Q.startsWith(\"data:application/octet-stream;base64,\")}var Q;Q=\"ort-wasm.wasm\";if(!ua()){var va=Q;Q=c.locateFile?c.locateFile(va,x):x+va}function wa(){var a=Q;try{if(a==Q&&H)return new Uint8Array(H);if(B)return B(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){E(b)}}\r\nfunction xa(){if(!H&&(ba||w)){if(\"function\"===typeof fetch&&!Q.startsWith(\"file://\"))return fetch(Q,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+Q+\"'\";return a.arrayBuffer()}).catch(function(){return wa()});if(z)return new Promise(function(a,b){z(Q,function(e){a(new Uint8Array(e))},b)})}return Promise.resolve().then(function(){return wa()})}\r\nfunction ya(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(c);else{var e=b.Ea;\"number\"===typeof e?void 0===b.xa?na.get(e)():na.get(e)(b.xa):e(void 0===b.xa?null:b.xa)}}}function za(a){this.ya=a-16;this.Na=function(b){N[this.ya+4>>2]=b};this.Ka=function(b){N[this.ya+8>>2]=b};this.La=function(){N[this.ya>>2]=0};this.Ja=function(){M[this.ya+12>>0]=0};this.Ma=function(){M[this.ya+13>>0]=0};this.Ga=function(b,e){this.Na(b);this.Ka(e);this.La();this.Ja();this.Ma()}}\r\nvar Aa=0,Ba={},Ca=[null,[],[]],R={},S;S=ca?function(){var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:function(){return performance.now()};var Da={};function Ea(){if(!Fa){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:v||\"./this.program\"},b;for(b in Da)void 0===Da[b]?delete a[b]:a[b]=Da[b];var e=[];for(b in a)e.push(b+\"=\"+a[b]);Fa=e}return Fa}var Fa;\r\nfunction T(a,b){a=new Date(1E3*N[a>>2]);N[b>>2]=a.getUTCSeconds();N[b+4>>2]=a.getUTCMinutes();N[b+8>>2]=a.getUTCHours();N[b+12>>2]=a.getUTCDate();N[b+16>>2]=a.getUTCMonth();N[b+20>>2]=a.getUTCFullYear()-1900;N[b+24>>2]=a.getUTCDay();N[b+36>>2]=0;N[b+32>>2]=0;N[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;T.Da||(T.Da=ja(\"GMT\"));N[b+40>>2]=T.Da;return b}\r\nfunction Ga(){function a(l){return(l=l.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?l[1]:\"GMT\"}if(!Ka){Ka=!0;var b=(new Date).getFullYear(),e=new Date(b,0,1),f=new Date(b,6,1);b=e.getTimezoneOffset();var h=f.getTimezoneOffset(),k=Math.max(b,h);N[La()>>2]=60*k;N[Ma()>>2]=Number(b!=h);e=a(e);f=a(f);e=ja(e);f=ja(f);h<b?(N[U()>>2]=e,N[U()+4>>2]=f):(N[U()>>2]=f,N[U()+4>>2]=e)}}var Ka;function V(a){return 0===a%4&&(0!==a%100||0===a%400)}function Na(a,b){for(var e=0,f=0;f<=b;e+=a[f++]);return e}\r\nvar W=[31,29,31,30,31,30,31,31,30,31,30,31],X=[31,28,31,30,31,30,31,31,30,31,30,31];function Y(a,b){for(a=new Date(a.getTime());0<b;){var e=a.getMonth(),f=(V(a.getFullYear())?W:X)[e];if(b>f-a.getDate())b-=f-a.getDate()+1,a.setDate(1),11>e?a.setMonth(e+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\r\nfunction Oa(a,b,e,f){function h(d,m,n){for(d=\"number\"===typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function k(d,m){return h(d,m,\"0\")}function l(d,m){function n(Ha){return 0>Ha?-1:0<Ha?1:0}var A;0===(A=n(d.getFullYear()-m.getFullYear()))&&0===(A=n(d.getMonth()-m.getMonth()))&&(A=n(d.getDate()-m.getDate()));return A}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function G(d){d=Y(new Date(d.va+1900,0,1),d.Ca);var m=new Date(d.getFullYear()+1,0,4),n=q(new Date(d.getFullYear(),0,4));m=q(m);return 0>=l(n,d)?0>=l(m,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var u=N[f+40>>2];f={Qa:N[f>>2],Pa:N[f+4>>2],Aa:N[f+8>>2],za:N[f+12>>2],wa:N[f+16>>2],va:N[f+20>>2],Ba:N[f+24>>2],Ca:N[f+28>>2],Ya:N[f+32>>2],Oa:N[f+\r\n36>>2],Ra:u?J(u):\"\"};e=J(e);u={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var p in u)e=e.replace(new RegExp(p,\"g\"),u[p]);var Ia=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),\r\nJa=\"January February March April May June July August September October November December\".split(\" \");u={\"%a\":function(d){return Ia[d.Ba].substring(0,3)},\"%A\":function(d){return Ia[d.Ba]},\"%b\":function(d){return Ja[d.wa].substring(0,3)},\"%B\":function(d){return Ja[d.wa]},\"%C\":function(d){return k((d.va+1900)/100|0,2)},\"%d\":function(d){return k(d.za,2)},\"%e\":function(d){return h(d.za,2,\" \")},\"%g\":function(d){return G(d).toString().substring(2)},\"%G\":function(d){return G(d)},\"%H\":function(d){return k(d.Aa,\r\n2)},\"%I\":function(d){d=d.Aa;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":function(d){return k(d.za+Na(V(d.va+1900)?W:X,d.wa-1),3)},\"%m\":function(d){return k(d.wa+1,2)},\"%M\":function(d){return k(d.Pa,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.Aa&&12>d.Aa?\"AM\":\"PM\"},\"%S\":function(d){return k(d.Qa,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.Ba||7},\"%U\":function(d){var m=new Date(d.va+1900,0,1),n=0===m.getDay()?m:Y(m,7-m.getDay());d=new Date(d.va+1900,d.wa,d.za);return 0>\r\nl(n,d)?k(Math.ceil((31-n.getDate()+(Na(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%V\":function(d){var m=new Date(d.va+1901,0,4),n=q(new Date(d.va+1900,0,4));m=q(m);var A=Y(new Date(d.va+1900,0,1),d.Ca);return 0>l(A,n)?\"53\":0>=l(m,A)?\"01\":k(Math.ceil((n.getFullYear()<d.va+1900?d.Ca+32-n.getDate():d.Ca+1-n.getDate())/7),2)},\"%w\":function(d){return d.Ba},\"%W\":function(d){var m=new Date(d.va,0,1),n=1===m.getDay()?m:Y(m,0===m.getDay()?1:7-m.getDay()+1);d=new Date(d.va+\r\n1900,d.wa,d.za);return 0>l(n,d)?k(Math.ceil((31-n.getDate()+(Na(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%y\":function(d){return(d.va+1900).toString().substring(2)},\"%Y\":function(d){return d.va+1900},\"%z\":function(d){d=d.Oa;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Ra},\"%%\":function(){return\"%\"}};for(p in u)e.includes(p)&&(e=e.replace(new RegExp(p,\"g\"),u[p](f)));p=Pa(e);if(p.length>b)return 0;\r\nM.set(p,a);return p.length-1}function Pa(a){var b=Array(ia(a)+1);L(a,b,0,b.length);return b}\r\nvar Ta={a:function(a){return ka(a+16)+16},c:function(a,b){qa.unshift({Ea:a,xa:b})},d:function(a,b){qa.unshift({Ea:a,xa:b})},b:function(a,b,e){(new za(a)).Ga(b,e);Aa++;throw a;},D:function(a,b){a=J(a);return R.Sa(a,b)},m:function(){return 0},I:function(){},L:function(){},o:function(){return 42},x:function(){return 0},H:function(){},G:function(a,b){a=J(a);return R.Ta(a,b)},K:function(a,b,e,f,h,k){k<<=12;if(0!==(f&16)&&0!==a%65536)b=-28;else if(0!==(f&32)){a=65536*Math.ceil(b/65536);var l=Qa(65536,a);\r\nl?(K.fill(0,l,l+a),a=l):a=0;a?(Ba[a]={Ia:a,Ha:b,Fa:!0,fd:h,Xa:e,flags:f,offset:k},b=a):b=-48}else b=-52;return b},J:function(a,b){var e=Ba[a];0!==b&&e?(b===e.Ha&&(Ba[a]=null,e.Fa&&Ra(e.Ia)),a=0):a=-28;return a},j:function(){},C:function(a,b,e){a=J(a);return R.Ua(a,b,e)},E:function(){},r:function(){},F:function(){},h:function(){E()},p:function(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=S();else return N[Sa()>>2]=28,-1;N[b>>2]=a/1E3|0;N[b+4>>2]=a%1E3*1E6|0;return 0},s:function(a,b){return a-\r\nb},P:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},g:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Q:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},O:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},\r\nM:function(){return 2147483648},v:function(a,b,e){K.copyWithin(a,b,b+e)},i:function(a){var b=K.length;a>>>=0;if(2147483648<a)return!1;for(var e=1;4>=e;e*=2){var f=b*(1+.2/e);f=Math.min(f,a+100663296);f=Math.max(a,f);0<f%65536&&(f+=65536-f%65536);a:{try{I.grow(Math.min(2147483648,f)-la.byteLength+65535>>>16);ma();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},B:function(a){for(var b=S();S()-b<a;);},z:function(a,b){var e=0;Ea().forEach(function(f,h){var k=b+e;h=N[a+4*h>>2]=k;for(k=0;k<f.length;++k)M[h++>>\r\n0]=f.charCodeAt(k);M[h>>0]=0;e+=f.length+1});return 0},A:function(a,b){var e=Ea();N[a>>2]=e.length;var f=0;e.forEach(function(h){f+=h.length+1});N[b>>2]=f;return 0},f:function(){return 0},y:function(a,b){a=1==a||2==a?2:E();M[b>>0]=a;return 0},n:function(a,b,e,f){a=R.Wa(a);b=R.Va(a,b,e);N[f>>2]=b;return 0},u:function(){},q:function(a,b,e,f){for(var h=0,k=0;k<e;k++){for(var l=N[b+8*k>>2],q=N[b+(8*k+4)>>2],G=0;G<q;G++){var u=K[l+G],p=Ca[a];0===u||10===u?((1===a?da:F)(ha(p,0)),p.length=0):p.push(u)}h+=\r\nq}N[f>>2]=h;return 0},w:function(a){var b=Date.now();N[a>>2]=b/1E3|0;N[a+4>>2]=b%1E3*1E3|0;return 0},t:T,l:function(a,b){Ga();a=new Date(1E3*N[a>>2]);N[b>>2]=a.getSeconds();N[b+4>>2]=a.getMinutes();N[b+8>>2]=a.getHours();N[b+12>>2]=a.getDate();N[b+16>>2]=a.getMonth();N[b+20>>2]=a.getFullYear()-1900;N[b+24>>2]=a.getDay();var e=new Date(a.getFullYear(),0,1);N[b+28>>2]=(a.getTime()-e.getTime())/864E5|0;N[b+36>>2]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=\r\ne.getTimezoneOffset();a=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0;N[b+32>>2]=a;a=N[U()+(a?4:0)>>2];N[b+40>>2]=a;return b},k:function(a){Ga();var b=new Date(N[a+20>>2]+1900,N[a+16>>2],N[a+12>>2],N[a+8>>2],N[a+4>>2],N[a>>2],0),e=N[a+32>>2],f=b.getTimezoneOffset(),h=new Date(b.getFullYear(),0,1),k=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),l=h.getTimezoneOffset(),q=Math.min(l,k);0>e?N[a+32>>2]=Number(k!=l&&q==f):0<e!=(q==f)&&(k=Math.max(l,k),b.setTime(b.getTime()+6E4*((0<e?q:k)-f)));N[a+\r\n24>>2]=b.getDay();N[a+28>>2]=(b.getTime()-h.getTime())/864E5|0;N[a>>2]=b.getSeconds();N[a+4>>2]=b.getMinutes();N[a+8>>2]=b.getHours();N[a+12>>2]=b.getDate();N[a+16>>2]=b.getMonth();return b.getTime()/1E3|0},N:Oa,e:function(a,b,e,f){return Oa(a,b,e,f)}};\r\n(function(){function a(h){c.asm=h.exports;I=c.asm.R;ma();na=c.asm.ua;pa.unshift(c.asm.S);O--;c.monitorRunDependencies&&c.monitorRunDependencies(O);0==O&&(null!==ta&&(clearInterval(ta),ta=null),P&&(h=P,P=null,h()))}function b(h){a(h.instance)}function e(h){return xa().then(function(k){return WebAssembly.instantiate(k,f)}).then(h,function(k){F(\"failed to asynchronously prepare wasm: \"+k);E(k)})}var f={a:Ta};O++;c.monitorRunDependencies&&c.monitorRunDependencies(O);if(c.instantiateWasm)try{return c.instantiateWasm(f,\r\na)}catch(h){return F(\"Module.instantiateWasm callback failed with error: \"+h),!1}(function(){return H||\"function\"!==typeof WebAssembly.instantiateStreaming||ua()||Q.startsWith(\"file://\")||\"function\"!==typeof fetch?e(b):fetch(Q,{credentials:\"same-origin\"}).then(function(h){return WebAssembly.instantiateStreaming(h,f).then(b,function(k){F(\"wasm streaming compile failed: \"+k);F(\"falling back to ArrayBuffer instantiation\");return e(b)})})})().catch(g);return{}})();\r\nc.___wasm_call_ctors=function(){return(c.___wasm_call_ctors=c.asm.S).apply(null,arguments)};c._OrtInit=function(){return(c._OrtInit=c.asm.T).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.U).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.V).apply(null,arguments)};c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.W).apply(null,arguments)};\r\nc._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.X).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Y).apply(null,arguments)};c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Z).apply(null,arguments)};c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm._).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.$).apply(null,arguments)};\r\nc._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.aa).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm.ba).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.ca).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.da).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.ea).apply(null,arguments)};\r\nc._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.fa).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.ga).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.ha).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.ia).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.ja).apply(null,arguments)};\r\nvar ka=c._malloc=function(){return(ka=c._malloc=c.asm.ka).apply(null,arguments)},Sa=c.___errno_location=function(){return(Sa=c.___errno_location=c.asm.la).apply(null,arguments)},Ra=c._free=function(){return(Ra=c._free=c.asm.ma).apply(null,arguments)},U=c.__get_tzname=function(){return(U=c.__get_tzname=c.asm.na).apply(null,arguments)},Ma=c.__get_daylight=function(){return(Ma=c.__get_daylight=c.asm.oa).apply(null,arguments)},La=c.__get_timezone=function(){return(La=c.__get_timezone=c.asm.pa).apply(null,\r\narguments)},Ua=c.stackSave=function(){return(Ua=c.stackSave=c.asm.qa).apply(null,arguments)},Va=c.stackRestore=function(){return(Va=c.stackRestore=c.asm.ra).apply(null,arguments)},Wa=c.stackAlloc=function(){return(Wa=c.stackAlloc=c.asm.sa).apply(null,arguments)},Qa=c._memalign=function(){return(Qa=c._memalign=c.asm.ta).apply(null,arguments)};c.UTF8ToString=J;c.stringToUTF8=function(a,b,e){return L(a,K,b,e)};c.lengthBytesUTF8=ia;c.stackSave=Ua;c.stackRestore=Va;c.stackAlloc=Wa;var Z;\r\nP=function Xa(){Z||Ya();Z||(P=Xa)};\r\nfunction Ya(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!ea)){ya(pa);aa(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();ra.unshift(b)}ya(ra)}}if(!(0<O)){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)sa();ya(oa);0<O||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){c.setStatus(\"\")},1);a()},1)):a())}}c.run=Ya;\r\nif(c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();Ya();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable import/no-internal-modules */\r\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {Session} from './onnxjs/session';\r\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\r\n\r\nclass OnnxjsBackend implements Backend {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  async init(): Promise<void> {}\r\n\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\r\n    // onnxruntime-common).\r\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\r\n    //       Currently we allow this to happen to make test runner work.\r\n    const session = new Session(options as unknown as Session.Config);\r\n\r\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\r\n    if (typeof pathOrBuffer === 'string') {\r\n      await session.loadModel(pathOrBuffer);\r\n    } else {\r\n      await session.loadModel(pathOrBuffer);\r\n    }\r\n\r\n    return new OnnxjsSessionHandler(session);\r\n  }\r\n}\r\n\r\nexport const onnxjsBackend = new OnnxjsBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {cpus} from 'os';\r\nimport {promisify} from 'util';\r\nimport {initWasm} from './wasm/proxy-wrapper';\r\n\r\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\r\n\r\n/**\r\n * This function initializes all flags for WebAssembly.\r\n *\r\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\r\n * being created, to override default value.\r\n */\r\nexport const initializeFlags = (): void => {\r\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\r\n    env.wasm.initTimeout = 0;\r\n  }\r\n\r\n  if (typeof env.wasm.simd !== 'boolean') {\r\n    env.wasm.simd = true;\r\n  }\r\n\r\n  if (typeof env.wasm.proxy !== 'boolean') {\r\n    env.wasm.proxy = false;\r\n  }\r\n\r\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\r\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\r\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\r\n  }\r\n};\r\n\r\nclass OnnxruntimeWebAssemblyBackend implements Backend {\r\n  async init(): Promise<void> {\r\n    // populate wasm flags\r\n    initializeFlags();\r\n\r\n    // init wasm\r\n    await initWasm();\r\n  }\r\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    let buffer: Uint8Array;\r\n    if (typeof pathOrBuffer === 'string') {\r\n      if (typeof fetch === 'undefined') {\r\n        // node\r\n        buffer = await promisify(readFile)(pathOrBuffer);\r\n      } else {\r\n        // browser\r\n        const response = await fetch(pathOrBuffer);\r\n        const arrayBuffer = await response.arrayBuffer();\r\n        buffer = new Uint8Array(arrayBuffer);\r\n      }\r\n    } else {\r\n      buffer = pathOrBuffer;\r\n    }\r\n\r\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\r\n    await handler.loadModel(buffer, options);\r\n    return Promise.resolve(handler);\r\n  }\r\n}\r\n\r\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\r\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\r\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\r\n// So we import code inside the if-clause to allow terser remove the code safely.\r\n\r\nexport * from 'onnxruntime-common';\r\nimport {registerBackend} from 'onnxruntime-common';\r\n\r\nif (!BUILD_DEFS.DISABLE_WEBGL) {\r\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\r\n  registerBackend('webgl', onnxjsBackend, -1);\r\n}\r\nif (!BUILD_DEFS.DISABLE_WASM) {\r\n  const wasmBackend = require('./backend-wasm').wasmBackend;\r\n  registerBackend('wasm', wasmBackend, 0);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nclass AttributeWithCacheKeyImpl {\r\n  constructor(attribute: Record<string, unknown>) {\r\n    Object.assign(this, attribute);\r\n  }\r\n\r\n  private _cacheKey: string;\r\n  public get cacheKey(): string {\r\n    if (!this._cacheKey) {\r\n      this._cacheKey =\r\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\r\n    }\r\n    return this._cacheKey;\r\n  }\r\n}\r\n\r\nexport interface AttributeWithCacheKey {\r\n  readonly cacheKey: string;\r\n}\r\n\r\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\r\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {Tensor} from './tensor';\r\nimport {decodeUtf8String, LongUtil} from './util';\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        if (attr instanceof onnx.AttributeProto) {\r\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        } else if (attr instanceof ortFbs.Attribute) {\r\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        }\r\n      }\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\r\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\r\n    switch (type) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\r\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\r\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\r\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const tensorProtos = value as onnx.ITensorProto[];\r\n        return tensorProtos.map(value => Tensor.fromProto(value));\r\n      } else if (attr instanceof ortFbs.Attribute) {\r\n        const tensorProtos = value as ortFbs.Tensor[];\r\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\r\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\r\n      // string attributes are returned as string, so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8String = value as Uint8Array;\r\n        return decodeUtf8String(utf8String);\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\r\n      // format strings attributes are returned as string[], so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8Strings = value as Uint8Array[];\r\n        return utf8Strings.map(decodeUtf8String);\r\n      }\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\r\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\r\n  }\r\n\r\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\r\n    switch (attr.type()) {\r\n      case ortFbs.AttributeType.FLOAT:\r\n        return attr.f();\r\n      case ortFbs.AttributeType.INT:\r\n        return attr.i();\r\n      case ortFbs.AttributeType.STRING:\r\n        return attr.s();\r\n      case ortFbs.AttributeType.TENSOR:\r\n        return attr.t();\r\n      case ortFbs.AttributeType.GRAPH:\r\n        return attr.g();\r\n      case ortFbs.AttributeType.FLOATS:\r\n        return attr.floatsArray();\r\n      case ortFbs.AttributeType.INTS: {\r\n        const ints = [];\r\n        for (let i = 0; i < attr.intsLength(); i++) {\r\n          ints.push(attr.ints(i)!);\r\n        }\r\n        return ints;\r\n      }\r\n      case ortFbs.AttributeType.STRINGS: {\r\n        const strings = [];\r\n        for (let i = 0; i < attr.stringsLength(); i++) {\r\n          strings.push(attr.strings(i));\r\n        }\r\n        return strings;\r\n      }\r\n      case ortFbs.AttributeType.TENSORS: {\r\n        const tensors = [];\r\n        for (let i = 0; i < attr.tensorsLength(); i++) {\r\n          tensors.push(attr.tensors(i)!);\r\n        }\r\n        return tensors;\r\n      }\r\n      // case ortFbs.AttributeType.GRAPHS:\r\n      // TODO: Subgraph not supported yet.\r\n      // const graphs = [];\r\n      // for (let i = 0; i < attr.graphsLength(); i++) {\r\n      //   graphs.push(attr.graphs(i)!);\r\n      // }\r\n      // return graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGLBackend} from './backends/backend-webgl';\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\nexport const backend: {[name: string]: Backend} = {\r\n  webgl: new WebGLBackend(),\r\n};\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\r\n  if (!hint) {\r\n    return resolveBackend(['webgl']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    const backend = backendObj[backendHint];\r\n    let init = backend.initialize();\r\n    if (typeof init === 'object' && 'then' in init) {\r\n      init = await init;\r\n    }\r\n    if (init) {\r\n      backendsCache.set(backendHint, backend);\r\n      return backend;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend {\r\n  glContext: WebGLContext;\r\n\r\n  get contextId(): 'webgl'|'webgl2'|undefined {\r\n    return env.webgl.contextId;\r\n  }\r\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\r\n    env.webgl.contextId = value;\r\n  }\r\n\r\n  get matmulMaxBatchSize(): number|undefined {\r\n    return env.webgl.matmulMaxBatchSize;\r\n  }\r\n  set matmulMaxBatchSize(value: number|undefined) {\r\n    env.webgl.matmulMaxBatchSize = value;\r\n  }\r\n\r\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\r\n    return env.webgl.textureCacheMode;\r\n  }\r\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\r\n    env.webgl.textureCacheMode = value;\r\n  }\r\n\r\n  get pack(): boolean|undefined {\r\n    return env.webgl.pack;\r\n  }\r\n  set pack(value: boolean|undefined) {\r\n    env.webgl.pack = value;\r\n  }\r\n\r\n  get async(): boolean|undefined {\r\n    return env.webgl.async;\r\n  }\r\n  set async(value: boolean|undefined) {\r\n    env.webgl.async = value;\r\n  }\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      if (typeof this.pack !== 'boolean') {\r\n        this.pack = false;\r\n      }\r\n      if (typeof this.async !== 'boolean') {\r\n        this.async = false;\r\n      }\r\n\r\n      Logger.setWithEnv(env);\r\n\r\n      Logger.verbose(\r\n          'WebGLBackend',\r\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\r\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\r\n              this.async}.`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\nimport {squeezeShape} from './texture-layout-strategy';\r\nimport {TextureLayout} from './types';\r\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.offsetToCoords(),\r\n      ...this.coordsToOffset(),\r\n      ...this.toVec(),\r\n      ...this.valueFrom(),\r\n      // TODO return these only when packing is enabled.\r\n      ...this.getCommonUtilFuncs(),\r\n      ...this.getInputsSamplingSnippets(),\r\n      ...this.getOutputSamplingSnippet()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'offsetToCoords';\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'coordsToOffset';\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates code for output sampler.\r\n   */\r\n\r\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    if (outputLayout.isPacked) {\r\n      return this.getPackedOutputSamplingSnippet(outputLayout);\r\n    } else {\r\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates code for packed output sampler.\r\n   */\r\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRGBASource = `\r\n      void setOutput(vec4 val) {\r\n        ${glsl.output} = val;\r\n      }\r\n    `;\r\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\r\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates code for unpacked output sampler.\r\n   */\r\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] =\r\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 4:\r\n        result[funcName] = this.getOutputUnpacked4DCoords(\r\n            outShape as [number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 5:\r\n        result[funcName] = this.getOutputUnpacked5DCoords(\r\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 6:\r\n        result[funcName] = this.getOutputUnpacked6DCoords(\r\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRSource = `\r\n        void setOutput(float val) {\r\n          ${glsl.output} = vec4(val, 0, 0, 0);\r\n        }\r\n    `;\r\n    const floatTextureSetRFuncName = 'floatTextureSetR';\r\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Scalar output coordinates.\r\n   */\r\n  protected getOutputScalarCoords(): GlslLibRoutine {\r\n    return new GlslLibRoutine(`\r\n      int getOutputCoords() {\r\n        return 0;\r\n      }\r\n    `);\r\n  }\r\n\r\n  /**\r\n   * 1D packed output coordinates.\r\n   */\r\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = texShape;\r\n    let source = '';\r\n    if (packedTexShape[0] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    if (packedTexShape[1] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 2D packed output coordinates.\r\n   */\r\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\r\n      source = `\r\n        ivec2 getOutputCoords() {\r\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    const packedTexShape = texShape;\r\n    // texels needed to accommodate a logical row\r\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\r\n\r\n    /**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */\r\n    source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 3D packed output coordinates.\r\n   */\r\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\r\n    const source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          int b = index / ${texelsInBatch};\r\n          index -= b * ${texelsInBatch};\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec3(b, r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * ND packed output coordinates.\r\n   */\r\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n\r\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\r\n    let texelsInBatchN = texelsInBatch;\r\n    let batches = '';\r\n    let coords = 'b, r, c';\r\n\r\n    for (let b = 2; b < shape.length - 1; b++) {\r\n      texelsInBatchN *= shape[shape.length - b - 1];\r\n      batches = `\r\n      int b${b} = index / ${texelsInBatchN};\r\n      index -= b${b} * ${texelsInBatchN};\r\n    ` + batches;\r\n      coords = `b${b}, ` + coords;\r\n    }\r\n    const source = `\r\n      ivec${shape.length} getOutputCoords() {\r\n        ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n        ${batches}\r\n\r\n        int b = index / ${texelsInBatch};\r\n        index -= b * ${texelsInBatch};\r\n\r\n        // reverse r and c order for packed texture\r\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n        int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n        return ivec${shape.length}(${coords});\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D output coordinates.\r\n   */\r\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D output coordinates.\r\n   */\r\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          int r = index / ${shape[1]};\r\n          int c = index - r * ${shape[1]};\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D output coordinates.\r\n   */\r\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec3(r, c, d);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D output coordinates.\r\n   */\r\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec4 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec4(r, c, d, d2);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D output coordinates.\r\n   */\r\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec5 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec5(r, c, d, d2, d3);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D output coordinates.\r\n   */\r\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\r\n    number, number\r\n  ]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n     ivec6 getOutputCoords() {\r\n         ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                               vec2(${texShape[0]}, ${texShape[1]}));\r\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n         ${coordsFromIndexSnippet}\r\n         return ivec6(r, c, d, d2, d3, d4);\r\n       }\r\n     `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Generates code for common UV coords computation utility functions.\r\n   */\r\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    let funcName = 'uvFromFlat';\r\n    result[funcName] = new GlslLibRoutine(`\r\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\r\n      int texC = index / texNumR;\r\n      int texR = index - texC * texNumR;\r\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\r\n      //       v.\r\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\r\n    }\r\n    `);\r\n    funcName = 'packedUVfrom1D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\r\n        int texelIndex = index / 2;\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom2D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\r\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom3D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\r\n          int texelsInBatch, int texelsInLogicalRow, int b,\r\n          int row, int col) {\r\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = index / texNumC;\r\n        int texC = index - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'sampleTexture';\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    result[funcName] = new GlslLibRoutine(`\r\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\r\n            return ${glsl.texture2D}(textureSampler, uv).r;\r\n        }`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for inputs\r\n   */\r\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\r\n      const inputLayout = this.context.inputTextureLayouts[i];\r\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\r\n      if (inputLayout.isPacked) {\r\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      } else {\r\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      }\r\n\r\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\r\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\r\n        if (inputLayout.isPacked) {\r\n          result[outCoordFuncName] =\r\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        } else {\r\n          result[outCoordFuncName] =\r\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for output coordinates of samplers\r\n   */\r\n  protected getPackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texName = name;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\r\n\r\n    const inRank = inShape.length;\r\n    const outRank = outShape.length;\r\n\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n\r\n    let output = 'return outputValue;';\r\n    const inSize = ShapeUtil.size(inShape);\r\n    const isInputScalar = inSize === 1;\r\n    const outSize = ShapeUtil.size(outShape);\r\n    const isOutputScalar = outSize === 1;\r\n\r\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\r\n      output = `\r\n        return vec4(outputValue.xy, outputValue.xy);\r\n      `;\r\n    } else if (isInputScalar && !isOutputScalar) {\r\n      if (outRank === 1) {\r\n        output = `\r\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\r\n        `;\r\n      } else {\r\n        output = `\r\n          return vec4(outputValue.x);\r\n        `;\r\n      }\r\n    } else if (broadcastDims.length) {\r\n      const rows = inRank - 2;\r\n      const cols = inRank - 1;\r\n\r\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.x);';\r\n      } else if (broadcastDims.indexOf(rows) > -1) {\r\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\r\n            'outputValue.x, outputValue.y);';\r\n      } else if (broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\r\n      }\r\n    }\r\n\r\n    const swapLastDimsSnippet = `\r\n        int lastDim = coords.${fields[outRank - 1]};\r\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\r\n        coords.${fields[outRank - 2]} = lastDim;\r\n      `;\r\n    const source = `\r\n      vec4 ${funcName}() {\r\n        ${type} coords = getOutputCoords();\r\n        ${swapLastDimsSnippet}\r\n        ${coordsSnippet}\r\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        ${output}\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked output coordinates of samplers\r\n   */\r\n  protected getUnpackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const inTexShape = [inputLayout.width, inputLayout.height];\r\n    const inRank = inputLayout.unpackedShape.length;\r\n    const outRank = outputLayout.unpackedShape.length;\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\r\n\r\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, TexCoords);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n    const source = `\r\n        float ${funcName}() {\r\n          ${type} coords = getOutputCoords();\r\n          ${coordsSnippet}\r\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for packed operations.\r\n   */\r\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    switch (inputLayout.unpackedShape.length) {\r\n      case 0:\r\n        return this.getPackedSamplerScalar(funcName, name);\r\n      case 1:\r\n        return this.getPackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getPackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getPackedSampler3D(funcName, name, inputLayout);\r\n      default:\r\n        return this.getPackedSamplerND(funcName, name, inputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked operations.\r\n   */\r\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    switch (shape.length) {\r\n      case 0:\r\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\r\n      case 1:\r\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\r\n      case 4:\r\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\r\n      case 5:\r\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\r\n      case 6:\r\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\r\n      default:\r\n        // TODO support more dimensionalities\r\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Packed scalar snippet.\r\n   */\r\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const source = `\r\n          vec4 ${funcName}() {\r\n            return ${glsl.texture2D}(${name}, halfCR);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Packed 1D snippet.\r\n   */\r\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[1], texShape[0]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int index) {\r\n      vec2 uv = packedUVfrom1D(\r\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 2D snippet.\r\n   */\r\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const texNumR = texShape[0];\r\n    const texNumC = texShape[1];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\r\n        return ${glsl.texture2D}(${name}, uv);\r\n      }`;\r\n\r\n      return new GlslLibRoutine(packedSampler);\r\n    }\r\n    const packedTexShape = texShape;\r\n    const valuesPerRow = Math.ceil(shape[1] / 2);\r\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 3D snippet.\r\n   */\r\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    if (shape[0] === 1) {\r\n      const squeezedShape = shape.slice(1);\r\n      const keptDims = [1, 2];\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['b', 'row', 'col'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\r\n      const packedSampler = `${samplerRoutine.routineBody}\r\n      vec4 ${funcName}(int b, int row, int col) {\r\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n      } `;\r\n      const source = packedSampler;\r\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\r\n    }\r\n    const texNumR = packedTexShape[0];\r\n    const texNumC = packedTexShape[1];\r\n\r\n    const valuesPerRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\r\n      vec2 uv = packedUVfrom3D(\r\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);}`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\r\n  }\r\n  /*\r\n   * Packed ND snippet.\r\n   */\r\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const rank = shape.length;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texNumR = packedTexShape[1];\r\n    const texNumC = packedTexShape[0];\r\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\r\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\r\n    let params = 'int b, int row, int col';\r\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\r\n    for (let b = 2; b < rank - 1; b++) {\r\n      params = `int b${b}, ` + params;\r\n      texelsInBatch *= shape[rank - b - 1];\r\n      index = `b${b} * ${texelsInBatch} + ` + index;\r\n    }\r\n    const packedSampler = `vec4 ${funcName}(${params}) {\r\n      int index = ${index};\r\n      int texR = index / ${texNumC};\r\n      int texC = index - texR * ${texNumC};\r\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked scalar snippet.\r\n   */\r\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\r\n    if (texNumR === 1 && texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, halfCR);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}() {\r\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D snippet.\r\n   */\r\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const tNumR = inputLayout.width;\r\n    const tNumC = inputLayout.height;\r\n\r\n    if (tNumC === 1 && tNumR === 1) {\r\n      const source = `\r\n        float ${funcName}(int index) {\r\n          return sampleTexture(${name}, halfCR);\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    if (tNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    if (tNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    const source = `\r\n        float ${funcName}(int index) {\r\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n\r\n    // TODO: modify row/col order for other dimensions.\r\n    const texShape = [inputLayout.height, inputLayout.width];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const texNumR = texShape[1];\r\n      const texNumC = texShape[0];\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const params = ['col', 'row'];\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const texNumR = texShape[1];\r\n    const texNumC = texShape[0];\r\n    if (texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    if (texNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}(int row, int col) {\r\n          int index = col * ${shape[1]} + row;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride0 = shape[1] * shape[2];\r\n    const stride1 = shape[2];\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['batch', 'col', 'row'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\r\n      // TODO: revisit the logic here to make it simpler\r\n      const revDims = keptDims.reverse();\r\n      const source = `\r\n          ${routine.routineBody}\r\n          float ${funcName}(int batch, int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, revDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, routine.dependencies);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int depth, int row, int col) {\r\n            // Explicitly use integer operations as dot() only works on floats.\r\n            int index = depth * ${stride0} + col * ${stride1} + row;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride2 = shape[3];\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    //\r\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\r\n    //\r\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    // if (newShape.length < shape.length) {\r\n    //   const newInputShape = squeezeInputShape(shape, newShape);\r\n    //   const params = ['row', 'col', 'depth', 'depth2'];\r\n    //   // Deep copy of input texture layout.\r\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n    //   newInputLayout.unpackedShape = newInputShape;\r\n    //   const source = `\r\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\r\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n    //       }\r\n    //     `;\r\n    //   return new GlslLibRoutine(\r\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    // }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2) {\r\n          int index = row * ${stride0} + col * ${stride1} +\r\n              depth2 * ${stride2} + depth;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D snippet.\r\n   */\r\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride3 = shape[4];\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n          depth3 * ${stride3} + depth2;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D snippet.\r\n   */\r\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride4 = shape[5];\r\n    const stride3 = shape[4] * stride4;\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n            float ${funcName}(int row, int col, int depth,\r\n              int depth2, int depth3, int depth4) {\r\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n            }\r\n          `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int row, int col, int depth,\r\n            int depth2, int depth3, int depth4) {\r\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine} {\r\n    const output = this.context.outputTextureLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const layout = this.context.inputTextureLayouts[i];\r\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n\r\n  /**\r\n   * Produces a packed value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}_Pack`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        vec4 ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset_${varName}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          return ${glsl.texture2D}(${varName}, coords);\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ProgramInfo, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: readonly number[];\r\n  outputShape: readonly number[];\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(\r\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\r\n      public outputTextureLayout: TextureLayout) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(\r\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\r\n      outputTextureLayout: TextureLayout) {\r\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = '';\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + '\\n';\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n    const vec2 halfCR = vec2(0.5, 0.5);\r\n\r\n    // Custom vector types to handle higher dimenalities.\r\n    struct ivec5\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n    };\r\n\r\n    struct ivec6\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n      int v;\r\n    };\r\n\r\n    int imod(int x, int y) {\r\n      return x - y * (x / y);\r\n    }\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {createPackProgramInfoLoader} from './ops/pack';\r\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\r\n\r\nimport {encodeAsUint8} from './ops/uint8-encode';\r\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\r\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\r\n\r\nconst getProgramInfoUniqueKey =\r\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\r\n      const inputs =\r\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\r\n              .join('_');\r\n      let key = programInfo.name;\r\n      if (programInfo.cacheHint) {\r\n        key += '[' + programInfo.cacheHint + ']';\r\n      }\r\n      key += ':' + inputs;\r\n      return key;\r\n    };\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  /**\r\n   * @returns [width, height]\r\n   */\r\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\r\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\r\n  }\r\n\r\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\r\n    if (inputs.length < program.inputNames.length) {\r\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\r\n    }\r\n    if (program.inputNames.length !== program.inputTypes.length) {\r\n      throw new Error('input names size does not match input types');\r\n    }\r\n\r\n    // create texture info for input\r\n    const inputTextureDatas: TextureData[] = [];\r\n    for (let i = 0; i < program.inputNames.length; ++i) {\r\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\r\n    }\r\n\r\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\r\n    let artifact = this.session.programManager.getArtifact(key);\r\n    const programInfo = artifact ?\r\n        artifact.programInfo :\r\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\r\n                                                                    (program as ProgramInfo));\r\n\r\n    // create texture info for output\r\n    const outputTextureLayout = createTextureLayoutFromTextureType(\r\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\r\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\r\n\r\n    if (!artifact) {\r\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\r\n      this.session.programManager.setArtifact(key, artifact);\r\n    }\r\n\r\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\r\n    return outputTextureData;\r\n  }\r\n\r\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\r\n    const outputTextureData = this.executeProgram(program, inputs);\r\n    return outputTextureData.tensor;\r\n  }\r\n\r\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    // input should match\r\n    for (let i = 0; i < inputs.length; ++i) {\r\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\r\n        throw new Error(`input[${i}] property packed inconsistent`);\r\n      }\r\n    }\r\n\r\n    // output should match\r\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\r\n      throw new Error('output property packed inconsistent');\r\n    }\r\n\r\n    this.session.programManager.run(artifact, inputs, output);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\r\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\r\n\r\n    if (!td) {\r\n      // check if we have texture data in different type\r\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\r\n      if (td) {\r\n        if (textureType === TextureType.packed) {\r\n          return this.pack(td);\r\n        } else {\r\n          return this.unpack(td);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!td) {\r\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\r\n\r\n      if (textureType === TextureType.packedLastDimension) {\r\n        const group = 1;\r\n        const channels = 4;\r\n        const shape = tensor.dims;\r\n        if (shape.length === 4) {\r\n          // pre-processing for kernel data of Conv.\r\n          //\r\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\r\n          // 1. implement texture based const-folding\r\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\r\n          // 3. run the program before dotProduct.\r\n          //\r\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\r\n          const adjustedLayout =\r\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\r\n          let buffer = tensor.numberData;\r\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\r\n            const numFeatureMaps = shape[0];\r\n            const oldRowSize = shape[1] * shape[2] * shape[3];\r\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n            const newSize = numFeatureMaps * newRowSize;\r\n            buffer = new Float32Array(newSize);\r\n            for (let f = 0; f < numFeatureMaps; ++f) {\r\n              const oldOffset = f * oldRowSize;\r\n              const newOffset = f * newRowSize + f % group * oldRowSize;\r\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n            }\r\n          }\r\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\r\n        }\r\n      }\r\n\r\n      if (textureType === TextureType.packed) {\r\n        const unpackedTextureLayout =\r\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\r\n        const unpackedTextureData = this.createTextureData(\r\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n        td = this.pack(unpackedTextureData);\r\n      } else {\r\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n      }\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureLayout: TextureLayout = {\r\n      channels: inputTD.channels,\r\n      height: inputTD.height,\r\n      width: inputTD.width,\r\n      // handle reshaping into scalar Tensors\r\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n      strides: ShapeUtil.computeStrides(reshapedDims),\r\n      unpackedShape: reshapedDims,\r\n    };\r\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\r\n\r\n    // check if the reshape is 'cheap'\r\n    if (isReshapeCheap(input.dims, reshapedDims)) {\r\n      const newTextureLayout: TextureLayout = {\r\n        channels: inputTD.channels,\r\n        height: inputTD.height,\r\n        width: inputTD.width,\r\n        // handle reshaping into scalar Tensors\r\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n        strides: ShapeUtil.computeStrides(reshapedDims),\r\n        unpackedShape: reshapedDims,\r\n        isPacked: true\r\n      };\r\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n      return newTextureData.tensor;\r\n    }\r\n\r\n    const squeezedInputShape = processDims3D(input.dims);\r\n    const squeezedOutputShape = processDims3D(reshapedDims);\r\n\r\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\r\n    const squeezedOutputTensor = this.run(\r\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\r\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\r\n    return outputTensor;\r\n  }\r\n\r\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\r\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\r\n    return textureData;\r\n  }\r\n\r\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ?\r\n        this.session.getTextureData(tensorId, isPacked) :\r\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td, isPacked);\r\n    } else {\r\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\r\n    }\r\n  }\r\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\r\n    return !!this.getTextureData(tensor.dataId, isPacked);\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (textureData.isPacked) {\r\n      return this.readTexture(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\r\n    if (textureData.isPacked) {\r\n      return this.readTextureAsync(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  pack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n\r\n  unpack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {cast, parseCastAttributes} from './ops/cast';\r\nimport {concat, parseConcatAttributes} from './ops/concat';\r\nimport {conv, parseConvAttributes} from './ops/conv';\r\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\r\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\r\nimport {gather, parseGatherAttributes} from './ops/gather';\r\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\r\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\r\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\r\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\r\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\r\nimport {averagePool, parseAveragePoolAttributes} from './ops/pool';\r\nimport {globalAveragePool, parseGlobalAveragePoolAttributes} from './ops/pool';\r\nimport {maxPool, parseMaxPoolAttributes} from './ops/pool';\r\nimport {globalMaxPool} from './ops/pool';\r\nimport {reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\r\nimport {parseReduceAttributes} from './ops/reduce';\r\nimport {reshape} from './ops/reshape';\r\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\r\nimport {shape} from './ops/shape';\r\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\r\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\r\nimport {parseSplitAttributes, split} from './ops/split';\r\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\r\nimport {sum} from './ops/sum';\r\nimport {tile} from './ops/tile';\r\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\r\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\r\n  ['Abs', '', '6+', unaryOps.abs],\r\n  ['Acos', '', '7+', unaryOps.acos],\r\n  ['Add', '', '7+', binaryOps.add],\r\n  ['And', '', '7+', binaryOps.and],\r\n  ['Asin', '', '7+', unaryOps.asin],\r\n  ['Atan', '', '7+', unaryOps.atan],\r\n  // TODO: support new attributes for AveragePool-10\r\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\r\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\r\n  ['Cast', '', '6+', cast, parseCastAttributes],\r\n  ['Ceil', '', '6+', unaryOps.ceil],\r\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\r\n  ['Clip', '', '11+', unaryOps.clipV11],\r\n  ['Concat', '', '4+', concat, parseConcatAttributes],\r\n  ['Conv', '', '1+', conv, parseConvAttributes],\r\n  ['Cos', '', '7+', unaryOps.cos],\r\n  ['Div', '', '7+', binaryOps.div],\r\n  ['Dropout', '', '7+', unaryOps.identity],\r\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\r\n  ['Equal', '', '7+', binaryOps.equal],\r\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\r\n  ['Exp', '', '6+', unaryOps.exp],\r\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\r\n  ['Floor', '', '6+', unaryOps.floor],\r\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\r\n  ['Gather', '', '1+', gather, parseGatherAttributes],\r\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\r\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\r\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\r\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\r\n  ['Greater', '', '7+', binaryOps.greater],\r\n  ['Identity', '', '1+', unaryOps.identity],\r\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\r\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\r\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\r\n  ['Less', '', '7+', binaryOps.less],\r\n  ['Log', '', '6+', unaryOps.log],\r\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\r\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\r\n  ['Mul', '', '7+', binaryOps.mul],\r\n  ['Neg', '', '6+', unaryOps.neg],\r\n  ['Not', '', '1+', unaryOps.not],\r\n  ['Or', '', '7+', binaryOps.or],\r\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\r\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\r\n  ['Pow', '', '7+', binaryOps.pow],\r\n  ['PRelu', '', '7+', binaryOps.pRelu],\r\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\r\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\r\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\r\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\r\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\r\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\r\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\r\n  ['Relu', '', '6+', unaryOps.relu],\r\n  ['Reshape', '', '5+', reshape],\r\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\r\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\r\n  ['Shape', '', '1+', shape],\r\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\r\n  ['Sin', '', '7+', unaryOps.sin],\r\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\r\n  // The \"semantic\" meaning of axis has changed in opset-13.\r\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\r\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data is split.\r\n  // When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2-12', split, parseSplitAttributes],\r\n  ['Sqrt', '', '6+', unaryOps.sqrt],\r\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\r\n  ['Squeeze', '', '13+', squeezeV13],\r\n  ['Sub', '', '7+', binaryOps.sub],\r\n  ['Sum', '', '6+', sum],\r\n  ['Tan', '', '7+', unaryOps.tan],\r\n  ['Tanh', '', '6+', unaryOps.tanh],\r\n  ['Tile', '', '6+', tile],\r\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\r\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\r\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\r\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\r\n  ['Unsqueeze', '', '13+', unsqueezeV13],\r\n  ['Xor', '', '7+', binaryOps.xor],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n  momentum: number;\r\n  spatial: number;\r\n}\r\n\r\nconst batchNormalizationProgramMetadata = {\r\n  name: 'BatchNormalization',\r\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n  inputTypes:\r\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\r\n};\r\n\r\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...batchNormalizationProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\r\n    (node: Graph.Node): BatchNormalizationAttributes => {\r\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\r\n      const momentum = node.attributes.getFloat('momentum', 0.9);\r\n      const spatial = node.attributes.getInt('spatial', 1);\r\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\r\n    };\r\n\r\nconst createBatchNormalizationProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\r\n        ProgramInfo => {\r\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n          const rank = inputs[0].dims.length;\r\n          const [scaleWidth, scaleHeight] =\r\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\r\n          const shaderSource = `\r\n  float process(int[${rank}] indices) {\r\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\r\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\r\n  }`;\r\n          return {\r\n            ...batchNormalizationProgramMetadata,\r\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 5) {\r\n    throw new Error('BatchNormalization requires 5 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n  const mean = inputs[3];\r\n  const var_ = inputs[4];\r\n\r\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n      var_.dims.length !== 1) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n      var_.dims[0] !== X.dims[1]) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = 'add_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = 'div_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = 'mul_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = 'sub_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = 'equal_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(equal(v1, v2));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = 'greater_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = 'less_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = 'and_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = 'or_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = 'xor_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = 'prelu_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nconst createBinaryProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        cacheHint: cacheKey,\r\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\r\n      };\r\n    };\r\n\r\nconst createBinaryProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      let outputShape = inputs[0].dims;\r\n\r\n      const usePackedTexture = handler.session.pack;\r\n\r\n      if (isBroadcast) {\r\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n        if (!calculatedShape) {\r\n          throw new Error('Can\\'t perform binary op on the given tensors');\r\n        }\r\n        outputShape = calculatedShape;\r\n        const outputRank = outputShape.length;\r\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\r\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\r\n\r\n        const glsl = getGlsl(handler.session.backend.glContext.version);\r\n        const shaderSource = usePackedTexture ? `\r\n      ${glslFunc.body}\r\n      void main() {\r\n        vec4 a = getAAtOutCoords();\r\n        vec4 b = getBAtOutCoords();\r\n        vec4 result = ${glslFunc.name}(a, b);\r\n        ${glsl.output} = result;\r\n      }` :\r\n                                                `\r\n      ${glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\r\n      }`;\r\n\r\n        return {\r\n          name: glslFunc.name,\r\n          inputNames: ['A', 'B'],\r\n          inputTypes: [textureType, textureType],\r\n          output: {dims: outputShape, type: outputTensorType, textureType},\r\n          shaderSource,\r\n          hasMain: usePackedTexture\r\n        };\r\n      }\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n    ${glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\r\n\r\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\r\n\r\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\r\n\r\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\r\n\r\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\r\n\r\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\r\n\r\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\r\n\r\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\r\n\r\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\r\n\r\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\r\n\r\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\r\n\r\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ProtoUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const cast: OperatorImplementation<Tensor.DataType> =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\r\n      validateInputs(inputs);\r\n      return [handler.cast(inputs[0], to)];\r\n    };\r\n\r\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\r\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Cast requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\nimport {ConcatAttributes} from './concat';\r\n\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat (packed)',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.packed),\r\n  cacheHint\r\n});\r\n\r\nconst createPackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const coords = getChannels('coords', rank);\r\n      const dtype = getCoordsDataType(rank);\r\n      const unpackChannel = unpackFromChannel();\r\n\r\n      const shapes = inputs.map(i => i.dims);\r\n      const channels = getGlChannels(rank);\r\n      const offsets: number[] = new Array(shapes.length - 1);\r\n\r\n      offsets[0] = shapes[0][axis];\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\r\n      }\r\n\r\n      const channel = channels[axis];\r\n      const lastChannels = channels.slice(-2);\r\n      const allChannels = channels.join();\r\n\r\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\r\n        return getChannel(\r\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\r\n        }`;\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        const shift = offsets[i - 1];\r\n        getValueSnippet += `\r\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\r\n              return getChannel(\r\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\r\n            }`;\r\n      }\r\n      const lastIndex = offsets.length;\r\n      const shift = offsets[offsets.length - 1];\r\n      getValueSnippet += `\r\n            return getChannel(\r\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\r\n\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n      const shaderSource = `\r\n          ${unpackChannel}\r\n          float getValue(${channels.map(x => 'int ' + x)}) {\r\n            ${getValueSnippet}\r\n          }\r\n\r\n          void main() {\r\n            ${dtype} coords = getOutputCoords();\r\n            int lastDim = coords.${channels[rank - 1]};\r\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\r\n            coords.${channels[rank - 2]} = lastDim;\r\n\r\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\r\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.g = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\r\n              result.a = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\r\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.b = getValue(${coords});\r\n            }\r\n            ${glsl.output} = result;\r\n          }\r\n        `;\r\n\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createPackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\r\n  const channelIdx = channels.indexOf(channel);\r\n  const res = channels.map((c, idx) => {\r\n    if (idx === channelIdx) {\r\n      return `${c} - ${shift}`;\r\n    } else {\r\n      return c;\r\n    }\r\n  });\r\n  return res.join();\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\r\n\r\nexport interface ConcatAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const concat: OperatorImplementation<ConcatAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\r\n        const output =\r\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      } else {\r\n        const output =\r\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      }\r\n    };\r\n\r\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n\r\n      const sizeInConcatAxis = new Array<number>(inputs.length);\r\n      let previousSum = 0;\r\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n        previousSum += inputs[i].dims[axis];\r\n        sizeInConcatAxis[i] = previousSum;\r\n      }\r\n\r\n      let getTextureIndexWhereDataResidesMethod = '';\r\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n      if (inputs.length < 5) {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n      } else {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\r\n      }\r\n\r\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\r\n      const shaderSource = `\r\n        ${fetchDataFromCorrectTextureMethod}\r\n        ${getSizeInConcatAxisValueFromIndexMethod}\r\n        ${getTextureIndexWhereDataResidesMethod}\r\n        float process(int indices[${rank}]) {\r\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\r\n\r\n          if(textureIndex != 0) {\r\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\r\n          }\r\n\r\n          return fetchDataFromCorrectTexture(textureIndex, indices);\r\n        }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\r\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\r\n`);\r\n  return `int getTextureWhereDataResides(int index) {\r\n      ${searchAxis.join('')}\r\n    }`;\r\n};\r\n\r\n// TODO: Implement BinarySearch in GLSL\r\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\r\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n\r\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\r\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return _X${i}(indices); }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\r\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\r\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    } else if (i === sizeInConcatAxis.length - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return ${sizeInConcatAxis[i]}; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n\r\n  const inputType = inputs[0].type;\r\n  const inputDimensionality = inputs[0].dims.length;\r\n\r\n  // TODO: Support string concat\r\n  if (inputType === 'string') {\r\n    throw new Error('string tensor is not supported yet');\r\n  }\r\n\r\n  for (const input of inputs) {\r\n    // make sure types of all inputs match\r\n    if (input.type !== inputType) {\r\n      throw new Error('input tensors should be one type');\r\n    }\r\n\r\n    // make sure the dimensionality of all inputs are the same\r\n    if (input.dims.length !== inputDimensionality) {\r\n      throw new Error('input tensors should have the same shape');\r\n    }\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'GroupedConv',\r\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedGroupedConvProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\r\n      const xShape = inputs[0].dims.slice();\r\n      const wShape = inputs[1].dims.slice();\r\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\r\n      Logger.verbose(\r\n          'GroupedConv',\r\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\r\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\r\n      const outputShape =\r\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n    ivec2 xRCCorner = coords.zw * strides - pads;\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n\r\n    float value = 0.0;\r\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\r\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\r\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\r\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\r\n\r\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\r\n          continue;\r\n        }\r\n\r\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\r\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\r\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\r\n            continue;\r\n          }\r\n\r\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\r\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\r\n          value += xVal*wVal;\r\n        }\r\n      }\r\n    }\r\n    ${processBias}\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createUnpackedGroupedConvProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const conv2DPackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n    };\r\n\r\nexport const conv2DPacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n\r\n      // run im2col\r\n      const im2colOutput = inferenceHandler.run(\r\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\r\n          [inputs[0]]);\r\n\r\n      // reshape kernel\r\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\r\n\r\n      // run matmul\r\n      const matmulInputs =\r\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n\r\n      // reshape output\r\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n      return outputReshaped;\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\r\nimport {conv2DPacked} from './conv-pack';\r\nimport {createDotProductProgramInfoLoader} from './dot-product';\r\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createIm2ColProgramInfoLoader} from './im2col';\r\nimport {createMatmulProgramInfoLoader} from './matmul';\r\n\r\n\r\nexport const calculateOutputShape =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\r\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\r\n      const batchSize = inputShape[0];\r\n      const inputSpatialShape = inputShape.slice(2);\r\n      const spatialRank = inputSpatialShape.length;\r\n      const outChannels = kernelShape[0];\r\n      const kernelSpatialShape = kernelShape.slice(2);\r\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n      const outputSpatialShape =\r\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n      return outputShape;\r\n    };\r\n\r\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly dilations: readonly number[];\r\n  readonly group: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly pads: readonly number[];\r\n  readonly strides: readonly number[];\r\n}\r\n\r\nexport const conv: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\r\n      return conv2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst conv2d: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\r\n      const packMode = inferenceHandler.session.pack;\r\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\r\n      if (adjustedAttributes.group > 1) {\r\n        const result = inferenceHandler.run(\r\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\r\n        return [result];\r\n      } else if (isPointwise && packMode) {\r\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\r\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else {\r\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      }\r\n    };\r\n\r\nconst conv2DUnpackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\r\n    };\r\n\r\nconst conv2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const xIm2Col = inferenceHandler.run(\r\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\r\n\r\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\r\n      const output = inferenceHandler.run(\r\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\r\n      return output;\r\n    };\r\n\r\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\r\n  const attributes = node.attributes;\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n  const dilations = attributes.getInts('dilations', [1, 1]);\r\n  const group = attributes.getInt('group', 1);\r\n  const kernelShape = attributes.getInts('kernel_shape', []);\r\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n  const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('Conv input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('Conv input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface DepthToSpaceAttributes {\r\n  mode: 'DCR'|'CRD';\r\n  blocksize: number;\r\n}\r\n\r\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const blocksize = attributes.blocksize;\r\n      const blocksizeSqr = blocksize * blocksize;\r\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\r\n      const firstReshapeShape = attributes.mode === 'DCR' ?\r\n          [\r\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ] :\r\n          [\r\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ];\r\n\r\n      // const transpose = new WebGLTranspose();\r\n      // const attributes = new Attribute(undefined);\r\n      // attributes.set('perm', 'ints', transposePerm);\r\n      // transpose.initialize(attributes);\r\n\r\n      // First reshape\r\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\r\n\r\n      // transpose\r\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\r\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\r\n\r\n      // Second reshape\r\n      const secondReshapeShape = [\r\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\r\n        inputs[0].dims[3] * blocksize\r\n      ];\r\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\r\n      return [result];\r\n    };\r\n\r\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\r\n    (node: Graph.Node): DepthToSpaceAttributes => {\r\n      // processing node attributes\r\n      const blocksize = node.attributes.getInt('blocksize');\r\n      if (blocksize < 1) {\r\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\r\n      }\r\n      const mode = node.attributes.getString('mode', 'DCR');\r\n      if (mode !== 'DCR' && mode !== 'CRD') {\r\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\r\n      }\r\n      return {mode, blocksize};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (inputs.length !== 1) {\r\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\r\n  }\r\n\r\n  // Input has to be a 4-D tensor\r\n  // TODO: Support string depth-to-space.\r\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\r\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {calculateIm2ColDims} from './im2col';\r\n\r\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\r\n  name: 'ConvDotProduct',\r\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.packedLastDimension],\r\n  cacheKey: attributes.activationCacheKey\r\n});\r\n\r\nconst createDotProductProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\r\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\r\n      const [kWidth, kHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\r\n\r\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\r\n      const [im2colWidth, im2colHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\r\n      const rank = outputShape.length;\r\n\r\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\r\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n${activationFunction}\r\nfloat process(int indices[${rank}]) {\r\n  int b[1];\r\n  b[0] = indices[1];\r\n  int im2col[4];\r\n  im2col[0] = indices[0];\r\n  im2col[1] = indices[2];\r\n  im2col[2] = indices[3];\r\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\r\n          im2colStrides[2]};\r\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\r\n  float value = ${initValue};\r\n  for (int i = 0; i < ${sharedDim}; ++i) {\r\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\r\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\r\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n    ++im2colOffset;\r\n    ++kernelOffset;\r\n  }\r\n  ${applyActivation}\r\n  return value;\r\n}`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createDotProductProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\r\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\r\n      return {\r\n        ...metadata,\r\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const flatten: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\r\n      validateInputs(inputs, axis);\r\n\r\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\r\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\r\n    };\r\n\r\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getInt('axis', 1);  // default axis is 1\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Flatten requires 1 input.');\r\n  }\r\n\r\n  const r = inputs[0].dims.length;\r\n  if (r === 0) {\r\n    throw new Error('scalar tensor is not supported.');\r\n  }\r\n\r\n  if (axis < -r || axis > r) {\r\n    throw new Error('Invalid axis');\r\n  }\r\n\r\n  // TODO: Support string type\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('string tensor is not supported.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {GlslValueFunction} from '../glsl-definitions';\r\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\r\n\r\nexport interface InternalActivationAttributes {\r\n  readonly activation: string;\r\n  readonly clipMin?: number;\r\n  readonly clipMax?: number;\r\n  readonly activationCacheKey: string;\r\n}\r\n\r\nexport function getActicationSnippet(attributes: InternalActivationAttributes) {\r\n  let func: GlslValueFunction;\r\n  switch (attributes.activation) {\r\n    case 'Relu':\r\n      func = glslRelu();\r\n      break;\r\n    case 'Sigmoid':\r\n      func = glslSigmoid();\r\n      break;\r\n    case 'Clip':\r\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\r\n      break;\r\n    // TODO: adding other activations that can be fused.\r\n    default:\r\n      return {activationFunction: '', applyActivation: ''};\r\n  }\r\n\r\n  const activationName = func.name;\r\n  const activationFunction = func.body;\r\n  const applyActivation = `value = ${activationName}_(value);`;\r\n  return {activationFunction, applyActivation};\r\n}\r\n\r\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\r\n  const activation = attributes.getString('activation', '');\r\n\r\n  if (activation === 'Clip') {\r\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\r\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\r\n  }\r\n  return {activation, activationCacheKey: activation};\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\ninterface GatherAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const gather: OperatorImplementation<GatherAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes.axis);\r\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\r\n\r\nconst gatherProgramMetadata = {\r\n  name: 'Gather',\r\n  inputNames: ['A', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createGatherProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const indexDataShape = inputs[1].dims.slice();\r\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\r\n      const indexCopyOps: string[] = [];\r\n      for (let i = 0; i < outputShape.length; i++) {\r\n        // outputShape is divided into three parts: A, B, C\r\n        // |0        axis|  axis + indexDataShape.length |          end|\r\n        // |     A       |             B                 |      C      |\r\n        //\r\n        // inputIdx: [A, inputs[1][B], C]\r\n        if (i < axis) {  // A\r\n          outputShape[i] = inputShape[i];\r\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n        } else {\r\n          if (i < axis + indexDataShape.length) {  // B\r\n            outputShape[i] = indexDataShape[i - axis];\r\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n          } else {                                                       // C\r\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n          }\r\n        }\r\n      }\r\n\r\n      const orank = outputShape.length || 1;\r\n      const irank = inputShape.length;\r\n      const iDrank = indexDataShape.length || 1;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createGatherProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\r\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Gather requires 2 inputs.');\r\n  }\r\n  const tensorRank = inputs[0].dims.length;\r\n  if (tensorRank < 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (axis < -tensorRank || axis > tensorRank - 1) {\r\n    throw new Error('Invalid axis.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface GemmAttributes extends AttributeWithCacheKey {\r\n  transA: boolean;\r\n  transB: boolean;\r\n  alpha: number;\r\n  beta: number;\r\n  isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n\r\nexport const gemm: OperatorImplementation<GemmAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\r\n  const transA = node.attributes.getInt('transA', 0) !== 0;\r\n  const transB = node.attributes.getInt('transB', 0) !== 0;\r\n  const alpha = node.attributes.getFloat('alpha', 1.0);\r\n  const beta = node.attributes.getFloat('beta', 1.0);\r\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\r\n};\r\n\r\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, false);\r\n\r\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, true);\r\n\r\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\r\n  const metadata = {\r\n    name: 'Gemm',\r\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                                      [TextureType.unpacked, TextureType.unpacked],\r\n    key: attributes.cacheKey\r\n  };\r\n\r\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\r\n};\r\n\r\nconst createGemmProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\r\n      const aShape = inputs[0].dims.slice();\r\n      const bShape = inputs[1].dims.slice();\r\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n      const outputShape = [M, N];\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use gemm on the given tensors');\r\n      }\r\n      let sharedDim = aShape[aShape.length - 1];\r\n      let line = '';\r\n      if (attributes.transA) {\r\n        sharedDim = aShape[0];\r\n      }\r\n      if (attributes.transA && attributes.transB) {\r\n        line = 'value += _A_T(a) * _B_T(b);';\r\n      } else if (attributes.transA && !attributes.transB) {\r\n        line = 'value += _A_T(a) * _B(b);';\r\n      } else if (!attributes.transA && attributes.transB) {\r\n        line = 'value += _A(a) * _B_T(b);';\r\n      } else if (!attributes.transA && !attributes.transB) {\r\n        line = 'value += _A(a) * _B(b);';\r\n      }\r\n      const rank = outputShape.length;\r\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\r\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\r\n      const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        variables: [\r\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\r\n        ],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\r\n  if (!inputs) {\r\n    throw new Error('Input is missing');\r\n  }\r\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n    throw new Error('Invaid input shape.');\r\n  }\r\n  if (!attributes.isOptionalC && inputs.length !== 3) {\r\n    throw new Error('Gemm requires 3 inputs');\r\n  }\r\n\r\n  // 'C' can be of dimensionality 1 or 2 only\r\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n    throw new Error('Invalid input shape of C');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n\r\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n    throw new Error('Input types are mismatched');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {ConvAttributes} from './conv';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col (packed)',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed],\r\n  cacheHint,\r\n});\r\n\r\nconst createPackedIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n      const rowDim = 2;\r\n      const colDim = 3;\r\n      const rank = outputShape.length;\r\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\r\n      const kernelSize = wshape[2] * wshape[3];\r\n      const unpackChannel = unpackFromChannel();\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      let unrolled = '';\r\n\r\n      for (let row = 0; row <= 1; row++) {\r\n        for (let col = 0; col <= 1; col++) {\r\n          unrolled += `\r\n            blockIndex = rc.x + ${col};\r\n            pos = rc.y + ${row};\r\n\r\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\r\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\r\n                ${attributes.pads[0]};\r\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\r\n\r\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\r\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\r\n                  ${attributes.pads[1]};\r\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\r\n\r\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\r\n\r\n                  ch = int(float(pos)/ ${kernelSize}.);\r\n                    innerDims = vec2(d0, d1);\r\n                    result[${row * 2 + col}] = getChannel(\r\n                      getA(0, ch, int(innerDims.x),\r\n                      int(innerDims.y)), innerDims);\r\n                }\r\n              }\r\n            }\r\n\r\n          `;\r\n        }\r\n      }\r\n\r\n      const shaderSource = `\r\n      ${unpackChannel}\r\n\r\n      void main() {\r\n        ivec2 rc = getOutputCoords();\r\n          vec4 result = vec4(0.0);\r\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n          vec2 innerDims;\r\n          ${unrolled}\r\n          ${glsl.output} = result;\r\n      }\r\n            `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {ConvAttributes} from './conv';\r\n\r\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n  cacheHint,\r\n});\r\n\r\nconst createIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n\r\n      const rank = outputShape.length;\r\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\r\n\r\n      const shaderSource = `\r\n        const int XC = ${xshape[1]};\r\n        const int XH = ${xshape[2]};\r\n        const int XW = ${xshape[3]};\r\n        const int KH = ${attributes.kernelShape[0]};\r\n        const int KW = ${attributes.kernelShape[1]};\r\n        const int dilationH = ${attributes.dilations[0]};\r\n        const int dilationW = ${attributes.dilations[1]};\r\n        const int strideH = ${attributes.strides[0]};\r\n        const int strideW = ${attributes.strides[1]};\r\n        const int padH = ${attributes.pads[0]};\r\n        const int padW = ${attributes.pads[1]};\r\n        const int KHKW = KH*KW;\r\n        const int XCKHKW = XC * KHKW;\r\n        const int outputChannels = 4;\r\n        vec4 process(int indices[${rank}]) {\r\n          int b  = indices[0]; // batch size\r\n          int oh = indices[1] * strideH - padH; //output height\r\n          int ow = indices[2] * strideW - padW; //output width\r\n          int p = indices[3] * outputChannels; //patch\r\n          vec4 value = vec4(0.0);\r\n          for(int i=0; i < outputChannels; ++i) {\r\n            if(p < XCKHKW) {\r\n              int patchC = p / KHKW;\r\n              int patchH = (p - patchC*KHKW) / KW;\r\n              int patchW = (p - patchC*KHKW) - patchH * KW;\r\n              int xh2 = oh + patchH * dilationH;\r\n              int xw2 = ow + patchW * dilationW;\r\n              int x[${xshape.length}];\r\n              x[0] = b;\r\n              x[1] = patchC;\r\n              x[2] = xh2;\r\n              x[3] = xw2;\r\n              if(xh2 >= 0 &&\r\n                  xh2 < XH &&\r\n                  xw2 >= 0 &&\r\n                  xw2 < XW) {\r\n                value[i] = _X(x);\r\n              }\r\n            }\r\n            ++p;\r\n          }\r\n          return value;\r\n        }\r\n        `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n\r\n\r\nexport const calculateIm2ColDims =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\r\n        number[] =>\r\n            [outputShape[0], outputShape[2], outputShape[3],\r\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\r\n  scale: number;\r\n  bias: number[];\r\n}\r\n\r\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output =\r\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\r\n    (node: Graph.Node): ImageScalerAttributes => {\r\n      const scale = node.attributes.getFloat('scale');\r\n      const bias = node.attributes.getFloats('bias');\r\n      return createAttributeWithCacheKey({scale, bias});\r\n    };\r\n\r\nconst imageScalerProgramMetadata = {\r\n  name: 'ImageScaler',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createImageScalerProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\r\n        ProgramInfo => {\r\n          const outputShape = inputs[0].dims.slice();\r\n          const rank = outputShape.length;\r\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\r\n          const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            variables: [\r\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\r\n              {name: 'scale', type: 'float', data: attributes.scale}\r\n            ],\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst createImageScalerProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\r\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\r\n    };\r\n\r\nconst createGetBiasMethod = (numChannels: number): string => {\r\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n  for (let i = 0; i < numChannels; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (channel == ${i}) { return bias[${i}]; }`);\r\n    } else if (i === numChannels - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return bias[${i}]; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (channel == ${i}) { return bias[${i}]; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('ImageScaler requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const instanceNormalization: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\r\n      const output = inferenceHandler.run(\r\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\r\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\r\n      return [output];\r\n    };\r\n\r\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getFloat('epsilon', 1e-5);\r\n\r\nconst meanAndVarianceProgramMetadata = {\r\n  name: 'InstanceNormalization_MeanAndVariance',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\r\n  const xDims = input.dims.slice();\r\n  const channel = xDims[1];\r\n  const channelSize = xDims[2] * xDims[3];\r\n  const outputShape = [xDims[0], channel];\r\n\r\n  const shaderSource = `\r\n      vec4 process(int[2] indices) {\r\n        vec4 v = vec4(0.0);\r\n        int a[4];\r\n        a[0] = indices[0];\r\n        a[1] = indices[1];\r\n        float temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += x;\r\n          }\r\n        }\r\n        float mean = temp / float(${channelSize});\r\n        temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += (x - mean) * (x - mean);\r\n          }\r\n        }\r\n        v.r = mean;\r\n        v.g = temp / float(${channelSize});\r\n\r\n        return v;\r\n      }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\r\n  ...meanAndVarianceProgramMetadata,\r\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\r\n});\r\n\r\nconst computeOutputProgramMetadata = {\r\n  name: 'InstanceNormalization_ComputeOutput',\r\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createComputeOutputProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\r\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\r\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\r\n      const shaderSource = `\r\n      vec4 get_MeanAndVariance(int[2] mv) {\r\n        int offset = indicesToOffset_MeanAndVariance(mv);\r\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\r\n        return ${glsl.texture2D}(MeanAndVariance, coords);\r\n      }\r\n\r\n      float process(int[4] indices) {\r\n        int mv[2];\r\n        mv[0] = indices[0];\r\n        mv[1] = indices[1];\r\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\r\n        float mean = mean_and_variance.r;\r\n        float variance = mean_and_variance.g;\r\n\r\n        int sb[1];\r\n        sb[0] = indices[1];\r\n        float scale = _Scale(sb);\r\n        float b = _B(sb);\r\n\r\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createComputeOutputProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\r\n        ProgramInfoLoader => {\r\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\r\n          return {\r\n            ...metadata,\r\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 3) {\r\n    throw new Error('InstanceNormalization requires 3 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n\r\n  // input should at least have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n    throw new Error('Input shapes are mismatched.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Only support 4-D input shape.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {getBiasForMatmul} from './matmul';\r\n\r\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul (packed)',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\r\n                        [TextureType.packed, TextureType.packed],\r\n  cacheHint\r\n});\r\n\r\nconst createPackedMatmulProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n      const aShape = inputs[0].dims;\r\n      const bShape = inputs[1].dims;\r\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use matmul on the given tensors');\r\n      }\r\n      const sharedDim = aShape[aShape.length - 1];\r\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\r\n      const aRank = aShape.length;\r\n      const bRank = bShape.length;\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const coordsDataType = getCoordsDataType(outputShape.length);\r\n      const outRank = outputShape.length;\r\n      const allGlChannels = getGlChannels();\r\n      const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\r\n\r\n      const getBiasForMatmulSnippet =\r\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\r\n\r\n      const getBcastedSamplerForMatmulSnippet =\r\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\r\n\r\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\r\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\r\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\r\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\r\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\r\n      `;\r\n      const shaderSource = `\r\n            ${getBcastedSamplerForMatmulSnippet}\r\n            ${getBiasForMatmulSnippet}\r\n            ${activationFunction}\r\n            void main() {\r\n              ${getOutputCoordsSnippet}\r\n\r\n              vec4 value = vec4(0);\r\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\r\n                vec4 a = ${getSamplerAInLoopSnippet};\r\n                vec4 b = ${getSamplerBInLoopSnippet};\r\n\r\n                value += (a.rrbb * b.rgrg);\r\n                value += (a.ggaa * b.baba);\r\n              }\r\n              ${processBias}\r\n              ${applyActivation}\r\n              ${glsl.output} = value;\r\n            }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedMatmulProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\r\n      };\r\n    };\r\n\r\nfunction getBcastSamplerForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\r\n  let unpackedACoordsSnippet = [];\r\n  let unpackedBCoordsSnippet = [];\r\n\r\n  const inAShape = inputs[0].dims;\r\n  const inBShape = inputs[1].dims;\r\n\r\n  const inARank = inAShape.length;\r\n  const inBRank = inBShape.length;\r\n\r\n  const outRank = outShape.length;\r\n  const rankADiff = outRank - inARank;\r\n  const rankBDiff = outRank - inBRank;\r\n\r\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\r\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\r\n  unpackedACoordsSnippet.join(', ');\r\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\r\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\r\n  unpackedBCoordsSnippet.join(', ');\r\n\r\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\r\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\r\n\r\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\r\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\r\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\r\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\r\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\r\n\r\n  const getBcastSamplerMatmulSource = `\r\nvec4 getAAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsASnippet}\r\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\r\n  return outputValue;\r\n}\r\n\r\nvec4 getBAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsBSnippet}\r\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\r\n  return outputValue;\r\n}`;\r\n\r\n  return getBcastSamplerMatmulSource;\r\n}\r\n\r\nfunction getA(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += `rc.${allGlChannels[rank - 2]}, ` +\r\n      'i*2';\r\n  return res;\r\n}\r\n\r\nfunction getB(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += 'i*2, ' +\r\n      `rc.${allGlChannels[rank - 1]}`;\r\n  return res;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\nimport {getActicationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      if (inferenceHandler.session.pack) {\r\n        return [inferenceHandler.run(\r\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\r\n      } else {\r\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\r\n      }\r\n    };\r\n\r\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\r\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\r\n\r\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nfunction createMatmulProgramInfo(\r\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\r\n  const aShape = inputs[0].dims;\r\n  const bShape = inputs[1].dims;\r\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n  if (!outputShape) {\r\n    throw new Error('Can\\'t use matmul on the given tensors');\r\n  }\r\n  const coordsDataType = getCoordsDataType(outputShape.length);\r\n  const allGlChannels = getGlChannels();\r\n  const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\r\n\r\n  const hasBias = inputs.length > 2;\r\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n  const getBiasForMatmulSnippet =\r\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\r\n\r\n  const rank = outputShape.length;\r\n  const arank = aShape.length;\r\n  const brank = bShape.length;\r\n  const sharedDim = aShape[aShape.length - 1];\r\n  const shaderSource = `\r\n    ${activationFunction}\r\n    ${getBiasForMatmulSnippet}\r\n    float process(int indices[${rank}]) {\r\n        int a[${arank}];\r\n        int b[${brank}];\r\n        bcastMatmulIndices_A(indices, a);\r\n        bcastMatmulIndices_B(indices, b);\r\n\r\n        float value;\r\n        for (int k=0; k<${sharedDim}; ++k) {\r\n            a[${arank - 1}] = k;\r\n            b[${brank - 2}] = k;\r\n            value += _A(a) * _B(b);\r\n        }\r\n        ${processBias}\r\n        ${applyActivation}\r\n        return value;\r\n    }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createMatmulProgramInfoLoader(\r\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\r\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('MatMul requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n    throw new Error('shared dimension does not match.');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n\r\n  if (inputs[0].type !== inputs[1].type) {\r\n    throw new Error('inputs types should match');\r\n  }\r\n};\r\n\r\nexport function getBiasForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\r\n    isPacked: boolean): string {\r\n  let unpackedCoordsSnippet = '';\r\n  const inRank = inShape.length;\r\n  const outRank = outShape.length;\r\n  const rankDiff = outRank - inRank;\r\n  if (outRank < 2 && inRank > 0) {\r\n    unpackedCoordsSnippet = 'coords';\r\n  } else {\r\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\r\n  }\r\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\r\n  const inSize = ShapeUtil.size(inShape);\r\n  const isInputScalar = inSize === 1;\r\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\r\n  if (isInputScalar) {\r\n    output = 'vec4(outputValue.x)';\r\n  }\r\n  const getBiasForMatmulSource = isPacked ? `\r\nvec4 getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\r\n  return ${output};\r\n}` :\r\n                                            `\r\nfloat getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  return getBias(coords.x);\r\n}`;\r\n\r\n  return getBiasForMatmulSource;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels} from './packing-utils';\r\n\r\nconst packProgramMetadata = {\r\n  name: 'pack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpackedReversed]\r\n};\r\n\r\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const inputShape = input.dims;\r\n\r\n  const inputRank = inputShape.length;\r\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\r\n  const outputRank = input.dims.length;\r\n\r\n  const coordsDataType = getCoordsDataType(outputRank);\r\n  const channels = getChannels('rc', outputRank);\r\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\r\n\r\n  let reversedInputWH;\r\n  if (inputRank === 0) {\r\n    reversedInputWH = [1, 1];\r\n  } else if (inputRank === 1) {\r\n    reversedInputWH = [inputShape[0], 1];\r\n  } else {\r\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\r\n  }\r\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\r\n  const output = getOutput(inputShape, channels);\r\n\r\n  const shaderSource = `\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          if(${outOfBoundsCondition}) {\r\n            ${glsl.output} = vec4(0);\r\n          } else {\r\n            ${setup}\r\n\r\n            ${glsl.output} = vec4(${output});\r\n          }\r\n        }\r\n      `;\r\n  return {\r\n    ...packProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\r\n\r\n/**\r\n * check output coordinate location and return false if it is outside input's width/height boundary\r\n */\r\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\r\n  if (rank === 0) {\r\n    return 'false';\r\n  }\r\n  if (rank === 1) {\r\n    return `rc > ${shape[0]}`;\r\n  }\r\n\r\n  let cond = '';\r\n  for (let i = rank - 2; i < rank; i++) {\r\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\r\n    if (i < rank - 1) {\r\n      cond += '||';\r\n    }\r\n  }\r\n\r\n  return cond;\r\n}\r\n\r\n/**\r\n * code snippet to sample input texture with output coordiantes\r\n */\r\nfunction getOutput(shape: readonly number[], dims: string[]): string {\r\n  const rank = shape.length;\r\n\r\n  if (rank === 0) {\r\n    return 'getA(), 0, 0, 0';\r\n  }\r\n\r\n  if (rank === 1) {\r\n    return `getA(rc),\r\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\r\n            0, 0`;\r\n  }\r\n\r\n  const coord00 = 'r, c';\r\n  const coord01 = 'r, cp1';\r\n  const coord10 = 'rp1, c';\r\n  const coord11 = 'rp1, cp1';\r\n  let D = '';\r\n  if (rank > 2) {\r\n    for (let i = 0; i < rank - 2; ++i) {\r\n      D = D + `${dims[i]},`;\r\n    }\r\n  }\r\n  return `getA(${D}${coord00}),\r\n          rEdge ? 0. : getA(${D}${coord10}),\r\n          cEdge ? 0. : getA(${D}${coord01}),\r\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\r\n}\r\n\r\n/**\r\n * code snippet to setup 4 coordinates and edge conditions\r\n */\r\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\r\n  if (rank === 0 || rank === 1) {\r\n    return '';\r\n  }\r\n  // rank >= 2 for width+height pack.\r\n  else {\r\n    const setup = `\r\n    int r = ${dims[rank - 2]};\r\n    int c = ${dims[rank - 1]};\r\n    int rp1 = ${dims[rank - 2]} + 1;\r\n    int cp1 = ${dims[rank - 1]} + 1;\r\n    bool rEdge = rp1 >= ${cols};\r\n    bool cEdge = cp1 >= ${rows};\r\n    `;\r\n    return setup;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlChannels} from '../utils';\r\n\r\nexport function getVecChannels(name: string, rank: number): string[] {\r\n  return getGlChannels(rank).map(d => `${name}.${d}`);\r\n}\r\n\r\nexport function getChannels(name: string, rank: number): string[] {\r\n  if (rank === 1) {\r\n    return [name];\r\n  }\r\n  return getVecChannels(name, rank);\r\n}\r\n\r\nexport function unpackFromChannel(): string {\r\n  return `\r\n    float getChannel(vec4 frag, int dim) {\r\n      int modCoord = imod(dim, 2);\r\n      return modCoord == 0 ? frag.r : frag.g;\r\n    }\r\n\r\n    float getChannel(vec4 frag, vec2 innerDims) {\r\n      vec2 modCoord = mod(innerDims, 2.);\r\n      return modCoord.x == 0. ?\r\n        (modCoord.y == 0. ? frag.r : frag.g) :\r\n        (modCoord.y == 0. ? frag.b : frag.a);\r\n    }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface PadAttributes extends AttributeWithCacheKey {\r\n  readonly mode: string;\r\n  readonly pads: number[];\r\n  readonly value: number;\r\n}\r\n\r\nconst padProgramMetadata = {\r\n  name: 'Pad',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const padV2: OperatorImplementation<PadAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\r\n      validateInputsV2(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...padProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\r\n  const mode = node.attributes.getString('mode', 'constant');\r\n  const value = node.attributes.getFloat('value', 0.0);\r\n  const pads = node.attributes.getInts('pads');\r\n  return createAttributeWithCacheKey({mode, value, pads});\r\n};\r\n\r\nexport const padV11: OperatorImplementation<string> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\r\n      validateInputsV11(inputs);\r\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\r\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\r\n    };\r\n\r\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\r\n    node.attributes.getString('mode', 'constant');\r\n\r\nconst generatePadAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\r\n        throw new Error('dynamic pad attributes are not allowed');\r\n      }\r\n\r\n      const pads = Array.from(inputs[1].integerData);\r\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\r\n\r\n      return createAttributeWithCacheKey({mode, pads, value});\r\n    };\r\n\r\nconst createPadProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\r\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\r\n      const rank = outputShape.length;\r\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\r\n      const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n      return {\r\n        name: 'Pad',\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputsV2 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pad requires 1 input');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst validateInputsV11 = (inputs: Tensor[]): void => {\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Pad requires 2 or 3 inputs');\r\n  }\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n  const strides = ShapeUtil.computeStrides(input.dims);\r\n\r\n  switch (attributes.mode) {\r\n    case 'constant':\r\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\r\n    case 'reflect':\r\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\r\n    case 'edge':\r\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n};\r\n\r\nconst getPadConstant =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\r\n     value: number): string => {\r\n      const rank = shape.length;\r\n      let block = '';\r\n      for (let i = rank - 1; i >= 0; --i) {\r\n        block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  return constant;\r\n        if (k >= ${shape[i]}) return constant;\r\n        offset += k * ${strides[i]};\r\n        `;\r\n      }\r\n      return `\r\n      float padA(int m[${rank}]) {\r\n        const float constant = float(${value});\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n    };\r\n\r\nconst getPadReflect =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n\r\nconst getPadEdge =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  k = 0;\r\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n        offset += k * ${strides[i]};\r\n      `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly ceilMode: number;\r\n  readonly countIncludePad: boolean;\r\n  readonly kernelShape: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly pads: readonly number[];\r\n}\r\n\r\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n\r\n      // TODO: support attribute 'ceil_mode'\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\r\n    };\r\n\r\nconst createAveragePoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\r\n          const op1 = 'value += _X(x);';\r\n          let op2 = '';\r\n          if (adjustedAttributes.countIncludePad) {\r\n            op2 += `value /= float(${kernelSize});`;\r\n          } else {\r\n            op2 += `value /= float(${kernelSize} - pad);`;\r\n          }\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\r\n          const shaderSource = `\r\n        ${poolingCode}\r\n      `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata = {\r\n        name: 'GlobalAveragePool',\r\n        inputNames: ['X'],\r\n        inputTypes: [TextureType.unpacked],\r\n        cacheHint: `${attributes.countIncludePad}`\r\n      };\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      return createAttributeWithCacheKey(\r\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\r\n    };\r\n\r\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\r\n  readonly storageOrder: number;\r\n  readonly dilations: number[];\r\n}\r\n\r\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\r\n    (node: Graph.Node): MaxPoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n      const storageOrder = node.attributes.getInt('storage_order', 0);\r\n      const dilations = node.attributes.getInts('dilations', []);\r\n\r\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n      if (storageOrder !== 0) {\r\n        throw new Error('column major storage order is not yet supported for MaxPool');\r\n      }\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\r\n    };\r\n\r\nconst createMaxPoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const op1 = `\r\n      value = max(_X(x), value);\r\n    `;\r\n          const op2 = '';\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\r\n          const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst getAdjustedPoolAttributesAndOutputShape =\r\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\r\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\r\n          const inputShape = inputs[0].dims.slice();\r\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\r\n          const kernelShape = attributes.kernelShape.slice();\r\n          const strides = attributes.strides.slice();\r\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\r\n          const pads = attributes.pads.slice();\r\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\r\n\r\n          const outputShape = PoolConvUtil.computePoolOutputShape(\r\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n          const newAttributes = Object.assign({}, attributes);\r\n          if (hasDilations) {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\r\n          } else {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\r\n          }\r\n          return [newAttributes, outputShape];\r\n        };\r\n\r\nconst globalMaxPoolAttributes = {\r\n  autoPad: '',\r\n  ceilMode: 0,\r\n  countIncludePad: false,\r\n  kernelShape: [],\r\n  strides: [],\r\n  pads: [],\r\n  storageOrder: 0,\r\n  dilations: [],\r\n  cacheKey: ''\r\n};\r\n\r\nconst globalMaxPoolMetadata = {\r\n  name: 'GlobalMaxPool',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...globalMaxPoolMetadata,\r\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\r\n      },\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pool ops requires 1 input.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst generatePoolingCode =\r\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\r\n        string => {\r\n          const rank = inputDims.length;\r\n          if (attributes.kernelShape.length <= 2) {\r\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\r\n            const sw = attributes.strides[attributes.strides.length - 1];\r\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\r\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\r\n            const dimW = inputDims[rank - 1];\r\n            let codeW = '';\r\n            let codeH = '';\r\n            let codeHEnd = '';\r\n            if (pwStart + pwEnd !== 0) {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n              pad++;\r\n              continue;\r\n            }\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            ${op1}\r\n          }`;\r\n            }\r\n\r\n            if (attributes.kernelShape.length === 2) {\r\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\r\n              const sh = attributes.strides[attributes.strides.length - 2];\r\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\r\n              const phEnd = attributes.pads[attributes.pads.length - 2];\r\n              const dimH = inputDims[rank - 2];\r\n              if (phStart + phEnd !== 0) {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                pad+= ${kw};\r\n                continue;\r\n              }\r\n          `;\r\n              } else {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n            `;\r\n              }\r\n              codeHEnd = `\r\n          }\r\n        `;\r\n            }\r\n\r\n            const poolingCode = `\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          ${codeH}\r\n          ${codeW}\r\n          ${codeHEnd}\r\n          ${op2}\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          } else {\r\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\r\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\r\n            const stridesRank = kernelStrides.length;\r\n            const padsRank = attributes.pads.length;\r\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n            const copyInputDims = copyArray(inputDims, 'inputDims');\r\n            const copyPads = copyArray(attributes.pads, 'pads');\r\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n            const copyStrides = copyArray(attributes.strides, 'strides');\r\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\r\n            let padCode = '';\r\n            if (hasPads) {\r\n              padCode = `\r\n            if (x[j] >= inputDims[j] || x[j] < 0) {\r\n              pad++;\r\n              isPad = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!isPad) {\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              padCode = `\r\n          }\r\n          ${op1}\r\n        `;\r\n            }\r\n            const poolingCode = `\r\n        ${offsetToIndicesFunction}\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n          int offset[${stridesRank}];\r\n          int pads[${padsRank}];\r\n          int inputDims[${rank}];\r\n          int kernelStrides[${stridesRank}];\r\n          int strides[${stridesRank}];\r\n          ${copyPads}\r\n          ${copyInputDims}\r\n          ${copyStrides}\r\n          ${copyKernelStrides}\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          bool isPad = false;\r\n          for (int i = 0; i < ${kernelSize}; i++) {\r\n            offsetToIndices(i, kernelStrides, offset);\r\n            isPad = false;\r\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n              ${padCode}\r\n          }\r\n          ${op2}\r\n\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          }\r\n        };\r\n\r\nconst copyArray = (array: readonly number[], arrayName: string): string => {\r\n  let block = '';\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n};\r\n\r\nconst offsetToIndices = (rank: number): string => `\r\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n    if (${rank} == 0) {\r\n      return;\r\n    }\r\n    for (int i = 0; i < ${rank} - 1; ++i) {\r\n      indices[i] = offset / strides[i];\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[${rank} - 1] = offset;\r\n  }`;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ReduceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly keepDims: boolean;\r\n}\r\n\r\n// return [init ops, reduce ops, final ops]\r\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\r\n\r\nconst reduce =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\r\n     reduceOp: ReduceOp): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const reduceProgramMetadata = {\r\n        name,\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n      };\r\n\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...reduceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () =>\r\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\r\n  const axes = node.attributes.getInts('axes', []);\r\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\r\n  return createAttributeWithCacheKey({axes, keepDims});\r\n};\r\n\r\nconst createReduceProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\r\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const outputShape: number[] = [];\r\n      const iRank = inputs[0].dims.length || 1;\r\n\r\n      const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\r\n      const ops = reduceOp(inputs, axes);\r\n      let reduceOps = ops[1];\r\n\r\n      for (let k = 0; k < inputs[0].dims.length; k++) {\r\n        // if this axis is reduced\r\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n          if (attributes.keepDims) {\r\n            outputShape.push(1);\r\n          }  // else { remove the axis from outputShape; }\r\n\r\n          // loop over the d-th axis\r\n          reduceOps = `\r\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n            inputIdx[${k}] = j${k};\r\n            ${reduceOps}\r\n          }`;\r\n        } else {\r\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n          outputShape.push(inputs[0].dims[k]);\r\n        }\r\n      }\r\n\r\n      const oRank = outputShape.length || 1;\r\n\r\n      const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n      return {\r\n        ...reduceProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Reduce op requires 1 input.');\r\n  }\r\n\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\r\n    };\r\n\r\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        let size = 1.0;\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            size *= inputs[0].dims[k];\r\n          }\r\n        }\r\n\r\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\r\n    };\r\n\r\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\r\n    };\r\n\r\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\r\n    };\r\n\r\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\r\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\r\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\r\n\r\nconst createPackedReshape3DProgramInfo =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\r\n        ProgramInfo => {\r\n          const inputShape3D = input3D.dims as [number, number, number];\r\n          const squeezedOutputShape = outputShape3D as [number, number, number];\r\n\r\n          let mainLoop = '';\r\n          for (let i = 0; i < 4; i++) {\r\n            let outputCoords = '';\r\n            switch (i) {\r\n              case 0:\r\n                outputCoords = 'outputCoords = rc;';\r\n                break;\r\n              case 1:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\r\n                break;\r\n              case 2:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\r\n                break;\r\n              case 3:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\r\n                break;\r\n              default:\r\n                throw new Error();\r\n            }\r\n\r\n            mainLoop += `\r\n        ${outputCoords}\r\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\r\n          int flattenedIndex = getFlattenedIndex(outputCoords);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\r\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\r\n\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n          }\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n          const shaderSource = `\r\n      ${getReshapedInputCoords(inputShape3D)}\r\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\r\n      ${unpackFromChannel()}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.0);\r\n\r\n        ivec3 outputCoords;\r\n        int rows = ${squeezedOutputShape[2]};\r\n        int cols = ${squeezedOutputShape[1]};\r\n\r\n        ${mainLoop}\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n\r\n          return {\r\n            ...metadata,\r\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\r\n            shaderSource,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nexport const createPackedReshape3DProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\r\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\r\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\r\n    };\r\n\r\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\r\n  if (shape.length === 0) {\r\n    return [1, 1, 1];\r\n  }\r\n  // TODO: squeeze other shapes to 2D case\r\n  let batch = 1;\r\n  for (let i = 0; i < shape.length - 2; ++i) {\r\n    batch *= shape[i];\r\n  }\r\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\n\r\n// For packed reshape, we need to re-arrange texel data for output shape.\r\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\r\n// for the reshaped new tensor, we just need to re-arrange the last h and\r\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\r\n// first convert it to 3D by collapsing other dimension to batch dim, then\r\n// process with the last two dimensions.\r\n// Note: we only need the shape tensor to calculate output shape, so the\r\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\r\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\r\n// the same between input shape and output shape, the packed reshape can be\r\n// treated as no-op.\r\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\r\n  let isCheapReshape = false;\r\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\r\n    isCheapReshape = true;\r\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\r\n  } else {  // 2D +\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\r\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\r\n  }\r\n\r\n  return isCheapReshape;\r\n}\r\n\r\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n  const coords = ['b', 'r', 'c'];\r\n  const index = 'index';\r\n  const coordsFromIndexSnippet = strides\r\n                                     .map((stride, i) => {\r\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\r\n                                       const line2 = i === strides.length - 1 ?\r\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\r\n                                           `index -= ${coords[i]} * ${stride}`;\r\n                                       return `${line1}; ${line2};`;\r\n                                     })\r\n                                     .join('');\r\n\r\n  return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(b, r, c);\r\n    }\r\n  `;\r\n}\r\n\r\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n\r\n  return `\r\n  int getFlattenedIndex(ivec3 coords) {\r\n    // reverse y, z order\r\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\r\n  }\r\n`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n  if (handler.session.pack) {\r\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\r\n  } else {\r\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\r\n\r\nconst resizeProgramMetadata = {\r\n  name: 'Resize',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const resize: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...resizeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\r\n\r\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\r\n\r\nconst createPackedResizeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\r\n\r\n      const isSame =\r\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\r\n      if (isSame) {\r\n        return {\r\n          ...resizeProgramMetadata,\r\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n          hasMain: true,\r\n          shaderSource: `void main() {\r\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\r\n                    ${glsl.output} = v;\r\n                }`\r\n        };\r\n      }\r\n\r\n      const dim = outputShape.length;\r\n      if (dim < 2) {\r\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\r\n      }\r\n\r\n      const outputHeight = outputShape[dim - 2];\r\n      const outputWidth = outputShape[dim - 1];\r\n\r\n      const inputShape = inputs[0].dims;\r\n      if (dim !== inputShape.length) {\r\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\r\n      }\r\n      const inputHeight = inputShape[dim - 2];\r\n      const inputWidth = inputShape[dim - 1];\r\n\r\n      const scalesHeight = scales[dim - 2];\r\n      const scalesWidth = scales[dim - 1];\r\n\r\n      let getSourceFracIndex = '';\r\n\r\n      if (attributes.mode !== 'linear') {\r\n        // TODO: support other modes\r\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\r\n      }\r\n      switch (attributes.coordinateTransformMode) {\r\n        case 'asymmetric':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return vec4(coords) / scaleWHWH;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'align_corners':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\r\n                            ${outputHeight}.0 - 1.0);\r\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\r\n                            ${inputHeight}.0 - 1.0);\r\n                        vec4 new_scale = original / resized;\r\n                        return vec4(coords) * new_scale;\r\n                    }\r\n                `;\r\n          break;\r\n        default:\r\n          // TODO:supporting other coordinateTransformModes\r\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\r\n                                '${attributes.coordinateTransformMode}'`);\r\n      }\r\n\r\n      const coordsDataType = getCoordsDataType(dim);\r\n      const unpackChannel = unpackFromChannel();\r\n      const shaderSource = `\r\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\r\n            const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\r\n            ${unpackChannel}\r\n            ${getSourceFracIndex}\r\n            float getAValue(int x10, int r, int c, int d) {\r\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\r\n            }\r\n            void main() {\r\n                ${coordsDataType} rc = getOutputCoords();\r\n\r\n                int batch = rc[0];\r\n                int depth = rc[1];\r\n\r\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\r\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\r\n\r\n                // calculate the source index in fraction\r\n                vec4 sourceFrac = getSourceFracIndex(coords);\r\n\r\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\r\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\r\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\r\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\r\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\r\n\r\n                bool hasNextRow = rc.w < ${outputHeight - 1};\r\n                bool hasNextCol = rc.z < ${outputWidth - 1};\r\n\r\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\r\n                vec4 topLeft = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\r\n                vec4 topRight = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\r\n                vec4 bottomLeft = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\r\n                vec4 bottomRight = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\r\n\r\n                // calculate the interpolation fraction on u and v direction\r\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\r\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\r\n\r\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\r\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\r\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\r\n\r\n                ${glsl.output} = vec4(newValue);\r\n            }\r\n        `;\r\n      return {\r\n        ...resizeProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n\r\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\r\n  const x = inputs[0];\r\n  const xDims = x.dims;\r\n\r\n  let scales = attributes.scales;\r\n  let outputSizes: number[]|undefined;\r\n  if (scales.length === 0) {\r\n    const scalesTensor = inputs[attributes.scalesInputIdx];\r\n    if (scalesTensor && scalesTensor.size !== 0) {\r\n      if (inputs[attributes.sizesInputIdx]) {\r\n        throw new Error('Only one of scales or sizes must be provided as input.');\r\n      }\r\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\r\n    } else {\r\n      const sizesTensor = inputs[attributes.sizesInputIdx];\r\n      if (!sizesTensor || sizesTensor.size === 0) {\r\n        throw new Error('Either scales or sizes MUST be provided as input.');\r\n      }\r\n\r\n      outputSizes = Array.from(sizesTensor.integerData);\r\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\r\n    }\r\n  } else {\r\n    if (inputs[attributes.sizesInputIdx]) {\r\n      throw new Error('Only one of scales or sizes must be provided as input.');\r\n    }\r\n  }\r\n\r\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\r\n\r\n  return [scales, yDims];\r\n};\r\n\r\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\r\n  const scales = Array.from(scale.floatData);\r\n  scalesValidation(scales, mode, isResize);\r\n  return scales;\r\n};\r\n\r\nconst parseScalesDataFromOutputSize =\r\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\r\n      const length = xDims.length;\r\n      const scales = new Array<number>(length);\r\n\r\n      for (let i = 0, end = length; i < end; i++) {\r\n        if (xDims[i] === 0) {\r\n          if (yDims[i] !== 0) {\r\n            throw new Error('Input dim is zero but required output dim is non-zero.');\r\n          }\r\n          scales[i] = 1;\r\n        } else {\r\n          scales[i] = yDims[i] / xDims[i];\r\n        }\r\n      }\r\n      scalesValidation(scales, mode, isResize);\r\n      return scales;\r\n    };\r\n\r\n// roi data is not used yet. but leave here for future usage.\r\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\r\n//     let roi: number[] = [];\r\n//     if (attributes.needRoiInput) {\r\n//         if (attributes.roiInputIdx <= 0) {\r\n//             throw new Error('Invalid roi input index.');\r\n//         }\r\n//         const roiTensor = inputs[attributes.roiInputIdx];\r\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\r\n//     } else {\r\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\r\n//     }\r\n//     return roi;\r\n// };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Shape requires 1 input.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SliceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly ends: number[];\r\n  readonly starts: number[];\r\n}\r\n\r\nconst sliceProgramMetadata = {\r\n  name: 'Slice',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const slice: OperatorImplementation<SliceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...sliceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\r\n  const starts = node.attributes.getInts('starts');\r\n  const ends = node.attributes.getInts('ends');\r\n  const axes = node.attributes.getInts('axes', []);\r\n  return createAttributeWithCacheKey({starts, ends, axes});\r\n};\r\n\r\nconst createSliceProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\r\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\r\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\r\n      const starts = attributes.starts.map((start, i) => {\r\n        if (start > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\r\n      });\r\n      const ends = attributes.ends.map((end, i) => {\r\n        if (end > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\r\n      });\r\n\r\n      const outputShape = input.dims.slice();\r\n\r\n      const sliceOps: string[] = [];\r\n      for (let i = 0; i < normalizedAxes.length; i++) {\r\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\r\n        if (starts[i] > 0) {\r\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\r\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n      return {\r\n        ...sliceProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Slice requires 1 input.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV10(inputs);\r\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...sliceProgramMetadata,\r\n        cacheHint: attributes.cacheKey,\r\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n      },\r\n      [inputs[0]]);\r\n  return [output];\r\n};\r\n\r\nconst generateSliceAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\r\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\r\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\r\n        throw new Error('dynamic slice attributes are not allowed');\r\n      }\r\n\r\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n        throw new Error('currently non-1 steps is not supported for Slice');\r\n      }\r\n\r\n      const starts = Array.from(inputs[1].integerData);\r\n      const ends = Array.from(inputs[2].integerData);\r\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n      const cacheKey = `${axes};${starts};${ends}`;\r\n      return {starts, ends, axes, cacheKey};\r\n    };\r\n\r\nconst validateInputsV10 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n    throw new Error('Invalid input number.');\r\n  }\r\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nconst softmaxComputeMaxProgramMetadata = {\r\n  name: 'SoftmaxComputeMax',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst softmaxComputeScaleProgramMetadata = {\r\n  name: 'SoftmaxComputeScale',\r\n  inputNames: ['A', 'Max'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst softmaxProgramMetadata = {\r\n  name: 'SoftMax',\r\n  inputNames: ['A', 'Max', 'Norm'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\r\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n\r\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\r\n      return output;\r\n    };\r\n\r\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\r\n\r\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\r\n\r\n// The \"semantic\" meaning of axis has changed in opset-13.\r\n// Please compare: https://github.com/onnx/onnx/blob/master/docs/Operators.md#Softmax\r\n// with https://github.com/onnx/onnx/blob/master/docs/Changelog.md#Softmax-11 for detailed explanations\r\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\r\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\r\n// the innermost dim\r\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const rank = inputShape.length;\r\n\r\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\r\n      const transposedInputShape: number[] = [];\r\n      let perm: number[] = [];\r\n      let transposedInputs: Tensor[] = [];\r\n      let transposeAttribute: TransposeAttributes;\r\n\r\n      if (isTransposeRequired) {\r\n        perm = Array.from({length: rank}).map((_, i) => i);\r\n\r\n        // swap the innermost dim with the dim corresponding to axis\r\n        perm[axis] = rank - 1;\r\n        perm[rank - 1] = axis;\r\n\r\n        perm.map(p => transposedInputShape.push(inputShape[p]));\r\n\r\n        transposeAttribute = createAttributeWithCacheKey({perm});\r\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\r\n      }\r\n\r\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\r\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\r\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\r\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\r\n\r\n      const output = computeSoftmax(\r\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\r\n\r\n      if (isTransposeRequired) {\r\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\r\n        return reversedOutput;\r\n      } else {\r\n        return output;\r\n      }\r\n    };\r\n\r\nconst computeSoftmax =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\r\n     featureCount: number): Tensor[] => {\r\n      const computeMaxProgramInfo =\r\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\r\n      const max = inferenceHandler.run(\r\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\r\n          inputs);\r\n\r\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          [logicalRowCount]);\r\n      const scale = inferenceHandler.run(\r\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\r\n          [inputs[0], max]);\r\n\r\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          computeScaleProgramInfo.output.dims);\r\n      const output = inferenceHandler.run(\r\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\r\n          [inputs[0], max, scale]);\r\n      return [output];\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the maximum value of each of the 'N' rows\r\n */\r\nconst createComputeMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\r\n        ${textureHeight} )));\r\n        for(int i=1; i<${featureCount}; ++i)\r\n        {\r\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight})));\r\n          if(current > max)\r\n          max = current;\r\n        }\r\n\r\n        return max;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeMaxProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the normalization factor for each of the 'N' rows\r\n */\r\nconst createComputScaleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float norm_factor = 0.0;\r\n        float max = _Max(indices);\r\n        for(int i=0; i<${featureCount}; ++i)\r\n        {\r\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight}))) - max);\r\n        }\r\n\r\n        return norm_factor;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeScaleProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createSoftMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = input.dims.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${featureCount};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n      return {\r\n        ...softmaxProgramMetadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Softmax requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SplitAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n  readonly split: number[];\r\n  readonly numOutputs: number;\r\n}\r\n\r\nconst splitProgramMetadata = {\r\n  name: 'Split',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const split: OperatorImplementation<SplitAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\r\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < count; ++i) {\r\n        output.push(inferenceHandler.run(\r\n            {\r\n              ...splitProgramMetadata,\r\n              cacheHint: `${attributes.cacheKey};${i}`,\r\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\r\n            },\r\n            inputs));\r\n      }\r\n\r\n      return output;\r\n    };\r\n\r\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\r\n  const axis = node.attributes.getInt('axis', 0);\r\n  const split = node.attributes.getInts('split', []);\r\n  const numOutputs = node.outputs.length;\r\n  return createAttributeWithCacheKey({axis, split, numOutputs});\r\n};\r\n\r\nconst getProgramCount =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\r\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\r\n      return offsets.length;\r\n    };\r\n\r\nconst createSplitProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\r\n        ProgramInfo => {\r\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\r\n          const offset = offsets[index];\r\n          const outputShape = shapes[index];\r\n          const rank = outputShape.length;\r\n          const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }\r\n    `;\r\n          return {\r\n            ...splitProgramMetadata,\r\n            cacheHint: `${attributes.cacheKey}:${index}`,\r\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Split requires one input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const squeeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Squeeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Squeeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const sumProgramMetadata = {\r\n    name: 'Sum',\r\n    inputNames: inputs.map((v, i) => `X${i}`),\r\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\r\n  return [output];\r\n};\r\n\r\nconst createSumProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const outputShape = inputs[0].dims.slice();\r\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n      const shaderSource = `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n      return {\r\n        ...sumProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length === 0) {\r\n    throw new Error('Sum requires inputs.');\r\n  }\r\n\r\n  const length = inputs[0].dims.length;\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (length !== inputs[i].dims.length) {\r\n      throw new Error('Input shapes are mismatched.');\r\n    }\r\n\r\n    for (let j = 0; j < length; j++) {\r\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n        throw new Error('Input shapes are not matched.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (inputs[0].type !== inputs[i].type) {\r\n      throw new Error('Input types are not matched.');\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {NUMBER_TYPES} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const tileProgramMetadata = {\r\n    name: 'Tile',\r\n    inputNames: ['A'],\r\n    inputTypes: [TextureType.unpacked],\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst createTileProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const outputShape = new Array(inputShape.length);\r\n\r\n      const tileOps: string[] = [];\r\n      for (let i = 0; i < inputShape.length; i++) {\r\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        int inputIdx[${rank}];\r\n        ${tileOps.join('\\n')}\r\n        return _A(inputIdx);\r\n      }\r\n    `;\r\n      return {\r\n        ...tileProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Tile requires 2 input.');\r\n  }\r\n  if (inputs[1].dims.length !== 1) {\r\n    throw new Error('The second input shape must 1 dimension.');\r\n  }\r\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invalid repeat type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface TransposeAttributes extends AttributeWithCacheKey {\r\n  readonly perm: number[];\r\n}\r\n\r\nconst transposeProgramMetadata = {\r\n  name: 'Transpose',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const transpose: OperatorImplementation<TransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...transposeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\r\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\r\n\r\nconst createTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\r\n      const inputShape = input.dims;\r\n      perm = getAdjustedPerm(inputShape, perm);\r\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\r\n      const rank = inputShape.length;\r\n      // A dims=[${inputs[0].dims.toString()}]\r\n      // out Dims=[${unpackedOutputShape.toString()}]\r\n      // based on perm=[${perm.toString()}]\r\n      const shaderSource = `\r\n      ${getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n      return {\r\n        ...transposeProgramMetadata,\r\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\r\n  if (perm && perm.length !== inputShape.length) {\r\n    perm = [...(inputShape.keys())].reverse();\r\n  }\r\n  return perm;\r\n};\r\n\r\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\r\n  perm = getAdjustedPerm(inputShape, perm);\r\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\r\n};\r\n\r\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\r\n  const reverseFunc = [];\r\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n  for (let i = 0; i < rank; ++i) {\r\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n  }\r\n  reverseFunc.push('\\t}');\r\n  return reverseFunc.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Transpose requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('input should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureType} from '../types';\r\n\r\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\r\n  const outputShape = input.shape;\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  /**\r\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n   */\r\n  const shaderSource = `\r\n    const float FLOAT_MAX = 1.70141184e38;\r\n    const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n    bool isNaN(float val) {\r\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n    }\r\n\r\n    highp vec4 encodeAsUint8(highp float v) {\r\n      if (isNaN(v)) {\r\n        return vec4(255, 255, 255, 255);\r\n      }\r\n\r\n      highp float av = abs(v);\r\n\r\n      if(av < FLOAT_MIN) {\r\n        return vec4(0.0, 0.0, 0.0, 0.0);\r\n      } else if(v > FLOAT_MAX) {\r\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n      } else if(v < -FLOAT_MAX) {\r\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n      }\r\n\r\n      highp vec4 c = vec4(0,0,0,0);\r\n\r\n      highp float e = floor(log2(av));\r\n      highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n      c[2] = floor(128.0 * m);\r\n      m -= c[2] / 128.0;\r\n      c[1] = floor(32768.0 * m);\r\n      m -= c[1] / 32768.0;\r\n      c[0] = floor(8388608.0 * m);\r\n\r\n      highp float ebias = e + 127.0;\r\n      c[3] = floor(ebias / 2.0);\r\n      ebias -= c[3] * 2.0;\r\n      c[2] += floor(ebias) * 128.0;\r\n\r\n      c[3] += 128.0 * step(0.0, -v);\r\n\r\n      return c / 255.0;\r\n    }\r\n\r\n    void main() {\r\n      float value = ${glsl.texture2D}(X,TexCoords).r;\r\n      ${glsl.output} = encodeAsUint8(value);\r\n    }`;\r\n  const programInfo = {\r\n    name: 'Uint8Encode',\r\n    inputTypes: [TextureType.unpacked],\r\n    inputNames: ['X'],\r\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\r\n    shaderSource,\r\n    hasMain: true\r\n  };\r\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {Tensor} from '../../../tensor';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslElu(alpha: number): GlslValueFunction {\r\n  const name = 'elu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslClip(min: number, max: number): GlslValueFunction {\r\n  const name = 'clip';\r\n  const body = `\r\n  const float min = float(${min});\r\n  const float max = float(${max});\r\n\r\n  float ${name}_(float a) {\r\n    return clamp(a, min, max);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return clamp(v, min, max);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = 'indentity';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\r\n  const name = 'leakyRelu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a < 0.0 ? a * alpha : a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = 'neg';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = 'not';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}_(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}_(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = 'relu';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = 'sigmoid';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = 'tanh';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return ${name}(a);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return ${name}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\n/////\r\n/////\r\n/////\r\n\r\nconst createElementwiseProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\r\n        ProgramInfo => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n          return {\r\n            ...metadata,\r\n            output: {dims: input.dims, type: input.type, textureType},\r\n            shaderSource: `\r\n     ${glslFunc.body}\r\n     void main() {\r\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n       v = ${glslFunc.name}_(v);\r\n       ${glsl.output} = v;\r\n     }\r\n     `,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nconst createElementwiseProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\r\n        ProgramInfoLoader => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\r\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\r\n        };\r\n\r\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\r\n\r\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\r\n\r\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\r\n\r\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\r\n\r\nexport interface ClipAttributes extends AttributeWithCacheKey {\r\n  readonly min: number;\r\n  readonly max: number;\r\n}\r\n\r\nexport const clip =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(\r\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\r\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\r\n\r\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\r\n  return clip(handler, [inputs[0]], attributes);\r\n};\r\n\r\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\r\n  if (inputs.length >= 3 &&\r\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\r\n    throw new Error('dynamic clip attributes are not allowed');\r\n  }\r\n\r\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\r\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\r\n  return createAttributeWithCacheKey({min, max});\r\n};\r\n\r\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\r\n\r\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\r\n\r\nexport interface EluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const elu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\r\n\r\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\r\n\r\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\r\n\r\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\r\n\r\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const leakyRelu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\r\n\r\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\r\n\r\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\r\n\r\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\r\n\r\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\r\n\r\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\r\n\r\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\r\n\r\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\r\n\r\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\r\n\r\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst unpackProgramMetadata = {\r\n  name: 'unpack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const rank = input.dims.length;\r\n\r\n  const channels = getChannels('rc', rank);\r\n  const innerDims = channels.slice(-2);\r\n  const coordsDataType = getCoordsDataType(rank);\r\n  const unpackChannel = unpackFromChannel();\r\n  const isScalar = (input.dims.length === 0);\r\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\r\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const shaderSource = `\r\n    ${unpackChannel}\r\n    void main() {\r\n      ${coordsDataType} rc = getOutputCoords();\r\n\r\n       // Sample the texture with the coords to get the rgba channel value.\r\n       vec4 packedInput = getA(${sourceCoords});\r\n\r\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\r\n     }\r\n   `;\r\n\r\n  return {\r\n    ...unpackProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\r\n\r\nfunction getSourceCoords(rank: number, dims: string[]): string {\r\n  if (rank === 1) {\r\n    return 'rc';\r\n  }\r\n\r\n  let coords = '';\r\n  for (let i = 0; i < rank; i++) {\r\n    coords += dims[i];\r\n    if (i < rank - 1) {\r\n      coords += ',';\r\n    }\r\n  }\r\n  return coords;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const unsqueeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Unsqueeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Unsqueeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\r\n  readonly opset: number;\r\n  readonly isResize: boolean;\r\n  readonly mode: string;\r\n  readonly scales: number[];\r\n  readonly extrapolationValue: number;\r\n  readonly coordinateTransformMode: string;\r\n  readonly useExtrapolation: boolean;\r\n  readonly needRoiInput: boolean;\r\n  readonly nearestMode: string;\r\n  readonly cubicCoefficientA: number;\r\n  readonly excludeOutside: boolean;\r\n  readonly useNearest2xOptimization: boolean;\r\n  readonly roiInputIdx: number;\r\n  readonly scalesInputIdx: number;\r\n  readonly sizesInputIdx: number;\r\n}\r\n\r\nconst upsampleProgramMetadata = {\r\n  name: 'Upsample',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...upsampleProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\r\n\r\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\r\n\r\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\r\n  const isResize = (opset >= 10);\r\n\r\n  // processing node attributes\r\n  const mode = node.attributes.getString('mode', 'nearest');\r\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\r\n    throw new Error(`unrecognized mode: ${mode}`);\r\n  }\r\n\r\n  let scales: number[] = [];\r\n  if (opset < 9) {\r\n    scales = node.attributes.getFloats('scales');\r\n    scalesValidation(scales, mode, isResize);\r\n  }\r\n\r\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\r\n\r\n  const coordinateTransformMode =\r\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\r\n  if ([\r\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\r\n      ].indexOf(coordinateTransformMode) === -1) {\r\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\r\n  }\r\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\r\n  const useExtrapolation = needRoiInput;\r\n\r\n  const nearestMode =\r\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\r\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\r\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\r\n  }\r\n\r\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\r\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\r\n  if (excludeOutside && mode !== 'cubic') {\r\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\r\n  }\r\n\r\n  const useNearest2xOptimization =\r\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\r\n\r\n  let roiInputIdx = 0;\r\n  let scalesInputIdx = 0;\r\n  let sizesInputIdx = 0;\r\n\r\n  if (opset > 10) {\r\n    roiInputIdx = 1;\r\n    scalesInputIdx = 2;\r\n    sizesInputIdx = 3;\r\n  } else if (opset === 9) {\r\n    scalesInputIdx = 1;\r\n  }\r\n\r\n  return createAttributeWithCacheKey({\r\n    opset,\r\n    isResize,\r\n    mode,\r\n    scales,\r\n    extrapolationValue,\r\n    coordinateTransformMode,\r\n    useExtrapolation,\r\n    needRoiInput,\r\n    nearestMode,\r\n    cubicCoefficientA,\r\n    excludeOutside,\r\n    useNearest2xOptimization,\r\n    roiInputIdx,\r\n    scalesInputIdx,\r\n    sizesInputIdx\r\n  });\r\n};\r\n\r\nconst createUpsampleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [inputWidth, inputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\r\n\r\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\r\n      const [outputWidth, outputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\r\n      const dim = outputShape.length;\r\n\r\n      const outputPitches = new Array<number>(dim);\r\n      const inputPitches = new Array<number>(dim);\r\n      let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n      for (let d = dim - 1; d >= 0; d--) {\r\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n        precalculatedPitches += `\r\n        output_pitches[${d}] = ${outputPitches[d]};\r\n        input_pitches[${d}] = ${inputPitches[d]};\r\n        `;\r\n      }\r\n      const getInputFloatFunction = `\r\n      float getInputFloat(int index) {\r\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\r\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n        return value;\r\n      }\r\n      `;\r\n\r\n      const shaderSource = attributes.mode === 'nearest' ?\r\n          // nearest\r\n          `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[${dim}]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int d, m;\r\n      for (int dim = 0; dim < ${dim}; ++dim) {\r\n        d = output_index / output_pitches[dim];\r\n        m = output_index - d * output_pitches[dim];\r\n        output_index = m;\r\n\r\n        if (scales[dim] != 1 && d > 0) {\r\n          int d2 = d / scales[dim];\r\n          m = d - d2 * scales[dim];\r\n          d = d2;\r\n        }\r\n        input_index += input_pitches[dim] * d;\r\n      }\r\n\r\n      return getInputFloat(input_index);\r\n    }` :\r\n          dim === 4 ?\r\n          // bilinear 4D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[4]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m / output_pitches[1];\r\n      m = m - index_of_dim1 * output_pitches[1];\r\n      index_of_dim2 = m / output_pitches[2];\r\n      m = m - index_of_dim2 * output_pitches[2];\r\n      index_of_dim3 = m;\r\n\r\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n      index_of_input_dim2 = index_of_dim2 / scales[2];\r\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n      index_of_input_dim3 = index_of_dim3 / scales[3];\r\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n      input_index = index_of_dim0 * input_pitches[0] +\r\n            index_of_dim1 * input_pitches[1] +\r\n            index_of_input_dim2 * input_pitches[2] +\r\n            index_of_input_dim3;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim2 = false;\r\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n        // It's the end in dimension 2\r\n        x01 = x00;\r\n        end_of_dim2 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[2]);\r\n      }\r\n\r\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n        // It's the end in dimension 3\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n    }` :\r\n              // bilinear 2D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[2]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m;\r\n\r\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n      index_of_input_dim0 = index_of_dim0 / scales[0];\r\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n      index_of_input_dim1 = index_of_dim1 / scales[1];\r\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim0 = false;\r\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n        // It's the end in dimension 0\r\n        x01 = x00;\r\n        end_of_dim0 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[0]);\r\n      }\r\n\r\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n        // It's the end in dimension 1\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n    }`;\r\n      return {\r\n        ...upsampleProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        variables: [{\r\n          name: 'scales',\r\n          type: 'int',\r\n          arrayLength: attributes.scales.length,\r\n          data: attributes.scales.map(x => Math.ceil(x))\r\n        }]\r\n      };\r\n    };\r\n\r\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\r\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\r\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\r\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\r\n    throw new Error('invalid inputs.');\r\n  }\r\n\r\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input tensor types.');\r\n  }\r\n};\r\n\r\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\r\n  if (!isResize) {\r\n    for (const scale of scales) {\r\n      if (scale < 1) {\r\n        throw new Error('Scale value should be greater than or equal to 1.');\r\n      }\r\n    }\r\n  } else {\r\n    for (const scale of scales) {\r\n      if (scale <= 0) {\r\n        throw new Error('Scale value should be greater than 0.');\r\n      }\r\n    }\r\n  }\r\n  if (mode === 'linear' || mode === 'cubic') {\r\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\r\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\r\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\r\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(\r\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\r\n      public textureLayoutStrategy: TextureLayoutStrategy) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(output);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.glContext.draw();\r\n      });\r\n    }, this.glContext);\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    const width = td.width;\r\n    const height = td.height;\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, width, height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\r\n      void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      const value = variables.find(v => v.name === name)?.data;\r\n      if (type !== 'sampler2D' && !value) {\r\n        throw new Error(`variable '${name}' does not have data defined in program info`);\r\n      }\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1f(location, value as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1i(location, value as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  initializers: Set<Tensor.Id>;\r\n  pack?: boolean;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n    this.pack = backend.pack;\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  addInitializer(tensorId: Tensor.Id): void {\r\n    this.initializers.add(tensorId);\r\n  }\r\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\r\n    if (isPacked) {\r\n      return this.packedTextureDataCache.get(tensorId);\r\n    } else {\r\n      return this.unpackedTextureDataCache.get(tensorId);\r\n    }\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    if (isPacked) {\r\n      this.packedTextureDataCache.set(tensorId, textureData);\r\n    } else {\r\n      this.unpackedTextureDataCache.set(tensorId, textureData);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  /* eslint-disable @typescript-eslint/naming-convention */\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\nimport {assert} from '../../util';\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis?: number;\r\n  isPacked?: boolean;\r\n  reverseWH?: boolean;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n\r\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const wh = this.computeTexture(shape, prefs);\r\n    if (prefs && prefs.isPacked) {\r\n      wh[0] /= 2;\r\n      wh[1] /= 2;\r\n    }\r\n    if (prefs && prefs.reverseWH) {\r\n      return [wh[1], wh[0]];\r\n    }\r\n    return wh;\r\n  }\r\n\r\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const isPacked = prefs && prefs.isPacked;\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return isPacked ? [2, 2] : [1, 1];\r\n    }\r\n    let maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    let logShape = shape.slice(0);\r\n    if (isPacked) {\r\n      maxTextureSize = maxTextureSize * 2;\r\n\r\n      // This logic ensures we accurately count the number of packed texels needed\r\n      // to accommodate the tensor. We can only pack values in the same texel if\r\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\r\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\r\n      // fact that the texels containing the third row are half empty.\r\n      logShape = logShape.map(\r\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\r\n\r\n      // Packed texture height is at least 2 (the channel height of a single\r\n      // texel).\r\n      if (logShape.length === 1) {\r\n        logShape = [2, logShape[0]];\r\n      }\r\n    }\r\n\r\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\r\n    if (logShape.length !== 2) {\r\n      const squeezeResult = squeezeShape(logShape);\r\n      logShape = squeezeResult.newShape;\r\n    }\r\n\r\n    const size = sizeFromShape(logShape);\r\n    if (logShape.length <= 1 && size <= maxTextureSize) {\r\n      return [1, size];\r\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\r\n      return logShape as [number, number];\r\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1], logShape[2]];\r\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\r\n        logShape[3] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\r\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\r\n    } else {\r\n      if (isPacked) {\r\n        // For packed textures size equals the number of channels required to\r\n        // accommodate the texture data. However in order to squarify such that\r\n        // inner dimensions stay even, we rewrite size to equal the number of\r\n        // texels. Then in the return statement we rehydrate the squarified\r\n        // dimensions to channel units.\r\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\r\n      }\r\n      return sizeToSquarishShape(size);\r\n    }\r\n  }\r\n}\r\n\r\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\r\n  const newShape: number[] = [];\r\n  const keptDims: number[] = [];\r\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\r\n  let j = 0;\r\n  for (let i = 0; i < shape.length; ++i) {\r\n    if (axes != null) {\r\n      if (axes[j] === i && shape[i] !== 1) {\r\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n      }\r\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n        newShape.push(shape[i]);\r\n        keptDims.push(i);\r\n      }\r\n      if (axes[j] <= i) {\r\n        j++;\r\n      }\r\n    }\r\n    if (shape[i] !== 1) {\r\n      newShape.push(shape[i]);\r\n      keptDims.push(i);\r\n    }\r\n  }\r\n  return {newShape, keptDims};\r\n}\r\n\r\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\r\n  const rank = shape.length;\r\n\r\n  // Normalize input\r\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\r\n\r\n  // Check for valid range\r\n  assert(\r\n      axis.every(ax => ax >= -rank && ax < rank),\r\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n          `got axis ${axis}`);\r\n\r\n  // Check for only integers\r\n  assert(\r\n      axis.every(isInt),\r\n      () => 'All values in axis param must be integers but ' +\r\n          `got axis ${axis}`);\r\n\r\n  // Handle negative axis.\r\n  return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\nexport function isInt(a: number): boolean {\r\n  return a % 1 === 0;\r\n}\r\nexport function sizeFromShape(shape: number[]): number {\r\n  if (shape.length === 0) {\r\n    // Scalar.\r\n    return 1;\r\n  }\r\n  let size = shape[0];\r\n  for (let i = 1; i < shape.length; i++) {\r\n    size *= shape[i];\r\n  }\r\n  return size;\r\n}\r\nexport function getRowsCols(shape: number[]): [number, number] {\r\n  if (shape.length === 0) {\r\n    throw Error('Cannot get rows and columns of an empty shape array.');\r\n  }\r\n\r\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nexport function sizeToSquarishShape(size: number): [number, number] {\r\n  const width = Math.ceil(Math.sqrt(size));\r\n  return [width, Math.ceil(size / width)];\r\n}\r\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\r\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ShapeUtil} from '../../util';\r\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureLayout, TextureType} from './types';\r\n\r\nexport const createTextureLayoutFromTextureType =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\r\n     textureType: TextureType): TextureLayout => {\r\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\r\n      const isPacked = textureType === TextureType.packed;\r\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\r\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\r\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\r\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\r\n          undefined;\r\n      return createTextureLayoutFromShape(\r\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\r\n    };\r\n\r\nexport const calculateTextureWidthAndHeight =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\r\n        [number, number] => {\r\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\r\n          return [layout.width, layout.height];\r\n        };\r\n\r\n/**\r\n * Create a TextureLayout object from shape.\r\n */\r\nexport const createTextureLayoutFromShape =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\r\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\r\n      const isPacked = !!(prefs && prefs.isPacked);\r\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\r\n      const rank = shape.length;\r\n      let inferredDims = shape.slice(0);\r\n      if (rank === 0) {\r\n        inferredDims = [1];\r\n      }\r\n      if (channels === 1) {\r\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n        unpackedShape = shape;\r\n      } else if (isPacked) {\r\n        if (channels !== 4) {\r\n          throw new Error('a packed texture must be 4-channel');\r\n        }\r\n        unpackedShape = shape;\r\n        if (rank > 0) {\r\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\r\n        }\r\n        if (rank > 1) {\r\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\r\n        }\r\n      } else if (!unpackedShape) {\r\n        throw new Error('Unpacked shape is needed when using channels > 1');\r\n      }\r\n      return {\r\n        width,\r\n        height,\r\n        channels,\r\n        isPacked,\r\n        shape: inferredDims,\r\n        strides: ShapeUtil.computeStrides(inferredDims),\r\n        unpackedShape,\r\n        reversedWH: (prefs && prefs.reverseWH)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\r\n      throw new Error('not implemented');\r\n    }\r\n    const width = layout.width;\r\n    const height = layout.height;\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\r\n    const dataId = td.tensor.dataId;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (this.pendingRead.has(dataId)) {\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\r\n      this.pendingRead.set(dataId, []);\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      // add a fence waiting for the data to be ready\r\n      await this.glContext.createAndWaitForFence();\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      const tensorData = this.toTensorData(dataType, data);\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      this.pendingRead.delete(dataId);\r\n      subscribers?.forEach(resolve => resolve(tensorData));\r\n      return tensorData;\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return data instanceof Int16Array ? data : Int16Array.from(data);\r\n      case 'int32':\r\n        return data instanceof Int32Array ? data : Int32Array.from(data);\r\n      case 'int8':\r\n        return data instanceof Int8Array ? data : Int8Array.from(data);\r\n      case 'uint16':\r\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\r\n      case 'uint32':\r\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\r\n      case 'float32':\r\n        return data instanceof Float32Array ? data : Float32Array.from(data);\r\n      case 'float64':\r\n        return data instanceof Float64Array ? data : Float64Array.from(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../tensor';\r\n\r\n/**\r\n * Layout info is used for mapping n-dimensional array to 2D textures\r\n * The layout is created by the TextureLayoutStrategy based on\r\n * the Tensor's dimensions and strides\r\n */\r\nexport interface TextureLayout {\r\n  width: number;\r\n  height: number;\r\n  /**\r\n   * specify the number of value that encoded in a single pixel\r\n   */\r\n  channels: 1|2|3|4;\r\n  /**\r\n   * whether in packed mode or not\r\n   */\r\n  isPacked?: boolean;\r\n  /**\r\n   * the normalized shape\r\n   */\r\n  shape: readonly number[];\r\n  /**\r\n   * the stride of each dimensions, calculated according to shape\r\n   */\r\n  strides: readonly number[];\r\n  /**\r\n   * the original shape(dims) of the corresponding tensor\r\n   */\r\n  unpackedShape: readonly number[];\r\n\r\n  reversedWH?: boolean;\r\n}\r\nexport interface TextureData extends TextureLayout {\r\n  tensor: Tensor;\r\n  texture: WebGLTexture;\r\n}\r\n\r\nexport enum TextureType {\r\n  unpacked,              // <-- normal unpacked texture\r\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\r\n  packed,                // <-- normal packed texture\r\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\r\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\r\n}\r\n\r\nexport interface TensorInfo {\r\n  id?: Tensor.Id;\r\n  dims: readonly number[];\r\n  type: Tensor.DataType;\r\n  textureType: TextureType;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * A set of metadata of a shader program.\r\n */\r\nexport interface ProgramMetadata {\r\n  /**\r\n   * the name of the program. used for debugging and profiling\r\n   */\r\n  name: string;\r\n  /**\r\n   * texture types for each input\r\n   */\r\n  inputTypes: TextureType[];\r\n  /**\r\n   * names of each input\r\n   */\r\n  inputNames: string[];\r\n  /**\r\n   * an optional string as a cache hint in the artifact cache\r\n   */\r\n  cacheHint?: string;\r\n}\r\n\r\n/**\r\n * A ProgramInfoLoader allows\r\n */\r\nexport interface ProgramInfoLoader extends ProgramMetadata {\r\n  /**\r\n   * a function to get the program info\r\n   */\r\n  get(): ProgramInfo;\r\n}\r\n\r\n/**\r\n * A set of data that represent a shader program\r\n */\r\nexport interface ProgramInfo extends ProgramMetadata {\r\n  /**\r\n   * information of uniform variables\r\n   */\r\n  variables?: ProgramVariable[];\r\n  /**\r\n   * tensor info for output\r\n   */\r\n  output: TensorInfo;\r\n  /**\r\n   * the shader's processing source code\r\n   */\r\n  shaderSource: string;\r\n  /**\r\n   * whether the shader source contains a customized main function implementation\r\n   */\r\n  hasMain?: boolean;\r\n}\r\n\r\nexport interface VariableInfo {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * Information of uniforms that shader uses\r\n */\r\nexport interface UniformInfo {\r\n  type: 'sampler2D'|VariableInfo['type'];\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface UniformLocation extends UniformInfo {\r\n  location: WebGLUniformLocation;\r\n}\r\n\r\n/**\r\n * Artifact is the result of compilation\r\n * It does not contain input of output data\r\n * However anything that could be run as a \"program\"\r\n */\r\nexport interface Artifact {\r\n  programInfo: ProgramInfo;\r\n  program: WebGLProgram;\r\n  uniformLocations: UniformLocation[];\r\n  attribLocations: {position: number; textureCoord: number};\r\n}\r\nexport declare namespace Artifact {\r\n  type UniformLocations = Artifact['uniformLocations'];\r\n  type AttribLocations = Artifact['attribLocations'];\r\n}\r\n\r\nexport interface UniformData {\r\n  [name: string]: number|number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {assert} from '../../util';\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n\r\nexport async function repeatedTry(\r\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let tryCount = 0;\r\n\r\n    const tryFn = () => {\r\n      if (checkFn()) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      tryCount++;\r\n\r\n      const nextBackoff = delayFn(tryCount);\r\n\r\n      if (maxCounter != null && tryCount >= maxCounter) {\r\n        reject();\r\n        return;\r\n      }\r\n      setTimeout(tryFn, nextBackoff);\r\n    };\r\n\r\n    tryFn();\r\n  });\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name at output coordinates.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\r\n}\r\n\r\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\r\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\r\n  // Deep copy.\r\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\r\n  newInputShape = squeezedShape;\r\n  return newInputShape;\r\n}\r\n\r\n/** Returns a list of squeezed parameters for shader functions */\r\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\r\n  return keptDims.map(d => params[d]).join(', ');\r\n}\r\n\r\n/** Returns the data type for different ranks. */\r\nexport function getCoordsDataType(rank: number): string {\r\n  if (rank <= 1) {\r\n    return 'int';\r\n  } else if (rank === 2) {\r\n    return 'ivec2';\r\n  } else if (rank === 3) {\r\n    return 'ivec3';\r\n  } else if (rank === 4) {\r\n    return 'ivec4';\r\n  } else if (rank === 5) {\r\n    return 'ivec5';\r\n  } else if (rank === 6) {\r\n    return 'ivec6';\r\n  } else {\r\n    throw Error(`GPU for rank ${rank} is not yet supported`);\r\n  }\r\n}\r\n\r\nexport function getGlChannels(rank = 6): string[] {\r\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  context = context || createNewWebGLContext(contextId);\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const canvas = createCanvas();\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\nimport {repeatedTry} from './utils';\r\n\r\nexport interface FenceContext {\r\n  query: WebGLSync|null;\r\n  isFencePassed(): boolean;\r\n}\r\n\r\ntype PollItem = {\r\n  isDoneFn: () => boolean; resolveFn: () => void;\r\n};\r\n\r\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\r\n  let i = 0;\r\n  for (; i < arr.length; ++i) {\r\n    const isDone = arr[i]();\r\n    if (!isDone) {\r\n      break;\r\n    }\r\n  }\r\n  return i - 1;\r\n}\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  // eslint-disable-next-line camelcase\r\n  textureFloatExtension: OES_texture_float|null;\r\n  // eslint-disable-next-line camelcase\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: unknown|null;\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\r\nShader source:\r\n${shaderSource}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\r\n    ]);\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error('both float32 and float16 TextureType are not supported');\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n\r\n  beginTimer(): WebGLQuery {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      const query = gl2.createQuery() as WebGLQuery;\r\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n      return query;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported.');\r\n    }\r\n  }\r\n\r\n  endTimer() {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\r\n      return;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n  }\r\n\r\n  isTimerResultAvailable(query: WebGLQuery): boolean {\r\n    let available = false, disjoint = false;\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\r\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n\r\n    return available && !disjoint;\r\n  }\r\n\r\n  getTimerResult(query: WebGLQuery): number {\r\n    let timeElapsed = 0;\r\n    if (this.version === 2) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\r\n      gl2.deleteQuery(query);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n    // return miliseconds\r\n    return timeElapsed / 1000000;\r\n  }\r\n\r\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\r\n    await repeatedTry(() => this.isTimerResultAvailable(query));\r\n    return this.getTimerResult(query);\r\n  }\r\n\r\n  public async createAndWaitForFence(): Promise<void> {\r\n    const fenceContext = this.createFence(this.gl);\r\n    return this.pollFence(fenceContext);\r\n  }\r\n\r\n  private createFence(gl: WebGLRenderingContext): FenceContext {\r\n    let isFencePassed: () => boolean;\r\n    const gl2 = gl as WebGL2RenderingContext;\r\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n    gl.flush();\r\n    if (query === null) {\r\n      isFencePassed = () => true;\r\n    } else {\r\n      isFencePassed = () => {\r\n        const status = gl2.clientWaitSync(query, 0, 0);\r\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\r\n      };\r\n    }\r\n    return {query, isFencePassed};\r\n  }\r\n\r\n  async pollFence(fenceContext: FenceContext) {\r\n    return new Promise<void>(resolve => {\r\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\r\n    });\r\n  }\r\n\r\n  private itemsToPoll: PollItem[] = [];\r\n\r\n  pollItems(): void {\r\n    // Find the last query that has finished.\r\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\r\n    for (let i = 0; i <= index; ++i) {\r\n      const {resolveFn} = this.itemsToPoll[i];\r\n      resolveFn();\r\n    }\r\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\r\n  }\r\n\r\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\r\n    this.itemsToPoll.push({isDoneFn, resolveFn});\r\n    if (this.itemsToPoll.length > 1) {\r\n      // We already have a running loop that polls.\r\n      return;\r\n    }\r\n    // Start a new loop that polls.\r\n    await repeatedTry(() => {\r\n      this.pollItems();\r\n      // End the loop if no more items to poll.\r\n      return this.itemsToPoll.length === 0;\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event(\r\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\r\n        const outputIndex = this.graph.getOutputIndices()[i];\r\n        const outputTensor = this._values[outputIndex];\r\n        if (outputTensor === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        if (outputIndex === 0) {\r\n          await outputTensor.getData();\r\n        } else {\r\n          // eslint-disable-next-line no-unused-expressions\r\n          outputTensor.data;\r\n        }\r\n        output.push(outputTensor);\r\n      }\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Attribute} from './attribute';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil, ProtoUtil, MIN_CLIP, MAX_CLIP} from './util';\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: readonly number[];\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: readonly number[];\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: readonly number[];\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: readonly number[];\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    fuseConvActivationNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Graph {\r\n  getInputIndices(): readonly number[];\r\n  getInputNames(): readonly string[];\r\n  getOutputIndices(): readonly number[];\r\n  getOutputNames(): readonly string[];\r\n  getValues(): readonly Graph.Value[];\r\n  getNodes(): readonly Graph.Node[];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\r\n      new GraphImpl(graphProto, initializer),\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\r\n    if (_nodeProto instanceof onnx.NodeProto) {\r\n      this.name = _nodeProto.name;\r\n      this.opType = _nodeProto.opType;\r\n      this.attributes = new Attribute(_nodeProto.attribute);\r\n    } else if (_nodeProto instanceof ortFbs.Node) {\r\n      this.name = name ?? _nodeProto.name()!;\r\n      this.opType = _nodeProto.opType()!;\r\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\r\n    }\r\n\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): readonly number[] {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): readonly string[] {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): readonly number[] {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): readonly string[] {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): readonly Graph.Value[] {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): readonly Graph.Node[] {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    if (graph instanceof onnx.GraphProto) {\r\n      this.buildGraphFromOnnxFormat(graph);\r\n    } else if (graph instanceof ortFbs.Graph) {\r\n      this.buildGraphFromOrtFormat(graph);\r\n    } else {\r\n      throw new TypeError('Graph type is not supported.');\r\n    }\r\n  }\r\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    const inputValueNames = [];\r\n    for (let i = 0; i < graph.inputsLength(); i++) {\r\n      const inputName = graph.inputs(i);\r\n      if (dataIndices.has(inputName)) {\r\n        throw new Error(`duplicated input name: ${inputName}`);\r\n      }\r\n      // Find the input typeInfo from nodeargs\r\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\r\n        if (graph.nodeArgs(j)?.name() === inputName) {\r\n          const value = new Value();\r\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\r\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\r\n            throw new Error('Unexpected value type for the nodeArg.');\r\n          }\r\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\r\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\r\n          const shape = valueInfo.shape()!;\r\n          const dims = [];\r\n          for (let k = 0; k < shape.dimLength()!; k++) {\r\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\r\n          }\r\n          value.type = {shape: {dims}, tensorType: type};\r\n          const currentIndex = this._allData.push(value) - 1;\r\n          dataIndices.set(inputName, currentIndex);\r\n          inputValueNames.push(inputName);\r\n        }\r\n      }\r\n    }\r\n    // check initializers\r\n    for (let i = 0; i < graph.initializersLength(); i++) {\r\n      const initializer = graph.initializers(i)!;\r\n      let index = dataIndices.get(initializer.name()!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\r\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\r\n        value.type = {shape: {dims}, tensorType: type};\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(initializer.name()!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    for (let i = 0; i < graph.outputsLength(); i++) {\r\n      const outputName = graph.outputs(i);\r\n      if (dataIndices.has(outputName)) {\r\n        throw new Error(`duplicated output name: ${outputName}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value()) - 1;\r\n      dataIndices.set(outputName, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(outputName);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.nodes) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (let i = 0; i < graph.nodesLength(); i++) {\r\n      const nodeProto = graph.nodes(i);\r\n      let name = nodeProto!.name();\r\n      if (!name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            // an unique name is found. break.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(name)) {\r\n        throw new Error(`duplicated node name: ${name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\r\n      nodesIndices.set(name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i);\r\n      if (nodeProto == null) {\r\n        throw new Error(`No node exists at index ${i}`);\r\n      }\r\n      if (nodeProto?.outputsLength() === 0) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\r\n        const output = nodeProto?.outputs(j);\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType() === 'Constant') {\r\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (nodeProto.outputsLength() !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i)!;\r\n\r\n      if (nodeProto.inputsLength() === 0) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\r\n        const input = nodeProto.inputs(j)!;\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error('node outputs should not be initialized');\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error('model graph is cyclic');\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n    this.fuseConvActivationNodes();\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      if (!this._nodes[i].executeNode) {\r\n        // delete this node and shift all subsequent nodes up\r\n        offset++;\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n        this._nodes.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        // update the value table\r\n        this._nodes[i].inputs.forEach(value => {\r\n          const ind = this._allData[value]._to.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allData[value]._to[ind] = i;\r\n          }\r\n        });\r\n        this._nodes[i].outputs.forEach(value => {\r\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\r\n            this._allData[value]._from! = i;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\r\n   * An input validation must be done before calling this function.\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\r\n    // should not happen\r\n    if (delIndex === -1) {\r\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\r\n    }\r\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error('Dropout nodes should only contain one input. ');\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  isActivation(n: Node): boolean {\r\n    switch (n.opType) {\r\n      // TODO: add other activation methods\r\n      case 'Relu':\r\n      case 'Sigmoid':\r\n      case 'Clip':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  fuseConvActivationNodes() {\r\n    for (const node of this._nodes) {\r\n      if (node.opType === 'Conv') {\r\n        const next = this._allData[node.outputs[0]]._to;\r\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\r\n          const child = this._nodes[next[0]];\r\n          if (child.opType === 'Clip') {\r\n            if (child.inputs.length === 1) {\r\n              try {\r\n                node.attributes.set(\r\n                    'activation_params', 'floats',\r\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\r\n              } catch (e) {\r\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\r\n              }\r\n            } else if (\r\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\r\n                this._allData[child.inputs[2]].tensor !== undefined) {\r\n              node.attributes.set('activation_params', 'floats', [\r\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\r\n              ]);\r\n            } else {\r\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\r\n              continue;\r\n            }\r\n          }\r\n          node.attributes.set('activation', 'string', (child.opType));\r\n          this.deleteNode(next[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {WebGLContext} from './backends/webgl/webgl-context';\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n    fatal: 'f';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'warning' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n    fatal(content: string): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n  fatal(content: string): void;\r\n  fatal(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n\r\n  /**\r\n   * Set the logger's behavior from ort-common env\r\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\r\n   */\r\n  setWithEnv(env: Env): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      case 'fatal':\r\n        return '\\x1b[101mf\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000,\r\n  fatal: 6000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'warning',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category),\r\n    fatal: log.fatal.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n  export function fatal(content: string): void;\r\n  export function fatal(category: string, content: string): void;\r\n  export function fatal(arg0: string, arg1?: string) {\r\n    log('fatal', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n\r\n  export function setWithEnv(env: Env): void {\r\n    const config: Logger.Config = {};\r\n    if (env.logLevel) {\r\n      config.minimalSeverity = env.logLevel as Logger.Severity;\r\n    }\r\n    set('', config);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void|Promise<void>;\r\n  }\r\n}\r\n// TODO\r\n// class WebGLEvent implements Profiler.Event {}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\r\n\r\n  end() {\r\n    return this.endCallback(this);\r\n  }\r\n\r\n  async checkTimer(): Promise<number> {\r\n    if (this.ctx === undefined || this.timer === undefined) {\r\n      throw new Error('No webgl timer found');\r\n    } else {\r\n      this.ctx.endTimer();\r\n      return this.ctx.waitForQueryAndGetTime(this.timer);\r\n    }\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\r\n      |Promise<T> {\r\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\r\n    let isPromise = false;\r\n\r\n    const res = func();\r\n\r\n    // we consider a then-able object is a promise\r\n    if (res && typeof (res as Promise<T>).then === 'function') {\r\n      isPromise = true;\r\n      return new Promise<T>((resolve, reject) => {\r\n        (res as Promise<T>)\r\n            .then(\r\n                async value => {  // fulfilled\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  resolve(value);\r\n                },\r\n                async reason => {  // rejected\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  reject(reason);\r\n                });\r\n      });\r\n    }\r\n    if (!isPromise && event) {\r\n      const eventRes = event.end();\r\n      if (eventRes && typeof eventRes.then === 'function') {\r\n        return new Promise<T>((resolve, reject) => {\r\n          (eventRes).then(\r\n              () => {  // fulfilled\r\n                resolve(res);\r\n              },\r\n              (reason) => {  // rejected\r\n                reject(reason);\r\n              });\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    if (ctx === undefined) {\r\n      const startTime = now();\r\n      this.flush(startTime);\r\n      return new Event(category, name, startTime, e => this.endSync(e));\r\n    } else {\r\n      const timer: WebGLQuery = ctx.beginTimer();\r\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\r\n    }\r\n  }\r\n\r\n  // end the specific event\r\n  private async end(event: Event): Promise<void> {\r\n    const endTime: number = await event.checkTimer();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private endSync(event: Event): void {\r\n    const endTime: number = now();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {LongUtil} from './util';\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\r\n    if (!isOrtFormat) {\r\n      // isOrtFormat === false || isOrtFormat === undefined\r\n      try {\r\n        this.loadFromOnnxFormat(buf, graphInitializer);\r\n        return;\r\n      } catch (e) {\r\n        if (isOrtFormat !== undefined) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.loadFromOrtFormat(buf, graphInitializer);\r\n  }\r\n\r\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets =\r\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const fb = new flatbuffers.ByteBuffer(buf);\r\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\r\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n    this._opsets = [];\r\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\r\n      const opsetId = ortModel.opsetImport(i)!;\r\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\r\n    }\r\n\r\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): readonly OpSet[] {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\r\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\r\n\r\nexport interface Operator {\r\n  readonly impl: OperatorImplementation<unknown>;\r\n  readonly context: Graph.Node|unknown;\r\n}\r\n\r\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from './graph';\r\nimport {OperatorImplementation, OperatorInitialization} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\n\r\nexport declare namespace OpSet {\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\r\n\r\n  /**\r\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\r\n   * operatorInitialization (optional)\r\n   */\r\n  type ResolveRule = [\r\n    string, Domain, string, OperatorImplementation<Graph.Node>\r\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\r\n}\r\n\r\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opImpl = rule[3];\r\n    const opInit = rule[4];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return {opImpl, opInit};\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n/* eslint-disable */\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum AttributeType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    INT = 2,\r\n    STRING = 3,\r\n    TENSOR = 4,\r\n    GRAPH = 5,\r\n    FLOATS = 6,\r\n    INTS = 7,\r\n    STRINGS = 8,\r\n    TENSORS = 9,\r\n    GRAPHS = 10,\r\n    SPARSE_TENSOR = 11,\r\n    SPARSE_TENSORS = 12\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TensorDataType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    UINT8 = 2,\r\n    INT8 = 3,\r\n    UINT16 = 4,\r\n    INT16 = 5,\r\n    INT32 = 6,\r\n    INT64 = 7,\r\n    STRING = 8,\r\n    BOOL = 9,\r\n    FLOAT16 = 10,\r\n    DOUBLE = 11,\r\n    UINT32 = 12,\r\n    UINT64 = 13,\r\n    COMPLEX64 = 14,\r\n    COMPLEX128 = 15,\r\n    BFLOAT16 = 16\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum NodeType {Primitive = 0, Fused = 1}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\r\n}\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Shape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Shape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Dimension= obj\r\n     * @returns onnxruntime.experimental.fbs.Dimension\r\n     */\r\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimOffset\r\n     */\r\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, dimOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Shape.startShape(builder);\r\n      Shape.addDim(builder, dimOffset);\r\n      return Shape.endShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Dimension {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Dimension\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\r\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\r\n     */\r\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimension(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimension(\r\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\r\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Dimension.startDimension(builder);\r\n      Dimension.addValue(builder, valueOffset);\r\n      Dimension.addDenotation(builder, denotationOffset);\r\n      return Dimension.endDimension(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class DimensionValue {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns DimensionValue\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\r\n     */\r\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dimValue(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    dimParam(): string|null;\r\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimensionValue(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\r\n     */\r\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\r\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long dimValue\r\n     */\r\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimParamOffset\r\n     */\r\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimParamOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimensionValue(\r\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\r\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      DimensionValue.startDimensionValue(builder);\r\n      DimensionValue.addDimType(builder, dimType);\r\n      DimensionValue.addDimValue(builder, dimValue);\r\n      DimensionValue.addDimParam(builder, dimParamOffset);\r\n      return DimensionValue.endDimensionValue(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TensorTypeAndShape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\r\n        TensorTypeAndShape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Shape= obj\r\n     * @returns onnxruntime.experimental.fbs.Shape|null\r\n     */\r\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset shapeOffset\r\n     */\r\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, shapeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensorTypeAndShape(\r\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\r\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\r\n      TensorTypeAndShape.addElemType(builder, elemType);\r\n      TensorTypeAndShape.addShape(builder, shapeOffset);\r\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class MapType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns MapType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startMapType(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\r\n     */\r\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueTypeOffset\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, valueTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createMapType(\r\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\r\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      MapType.startMapType(builder);\r\n      MapType.addKeyType(builder, keyType);\r\n      MapType.addValueType(builder, valueTypeOffset);\r\n      return MapType.endMapType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SequenceType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SequenceType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSequenceType(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset elemTypeOffset\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, elemTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SequenceType.startSequenceType(builder);\r\n      SequenceType.addElemType(builder, elemTypeOffset);\r\n      return SequenceType.endSequenceType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class EdgeEnd {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns EdgeEnd\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      return this.bb!.readUint32(this.bb_pos);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    srcArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 4);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dstArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number node_index\r\n     * @param number src_arg_index\r\n     * @param number dst_arg_index\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createEdgeEnd(\r\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\r\n        dst_arg_index: number): flatbuffers.Offset {\r\n      builder.prep(4, 12);\r\n      builder.writeInt32(dst_arg_index);\r\n      builder.writeInt32(src_arg_index);\r\n      builder.writeInt32(node_index);\r\n      return builder.offset();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class NodeEdge {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns NodeEdge\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNodeEdge(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number nodeIndex\r\n     */\r\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\r\n      builder.addFieldInt32(0, nodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputEdgesOffset\r\n     */\r\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputEdgesOffset\r\n     */\r\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNodeEdge(\r\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\r\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      NodeEdge.startNodeEdge(builder);\r\n      NodeEdge.addNodeIndex(builder, nodeIndex);\r\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\r\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\r\n      return NodeEdge.endNodeEdge(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Node {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Node\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sinceVersion(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    index(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    opType(): string|null;\r\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    opType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.NodeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.NodeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    executionProviderType(): string|null;\r\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Attribute= obj\r\n     * @returns onnxruntime.experimental.fbs.Attribute\r\n     */\r\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\r\n        |null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    attributesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    inputArgCounts(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputArgCountsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Int32Array\r\n     */\r\n    inputArgCountsArray(): Int32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ?\r\n          new Int32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    implicitInputs(index: number): string;\r\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    implicitInputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNode(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number sinceVersion\r\n     */\r\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\r\n      builder.addFieldInt32(3, sinceVersion, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number index\r\n     */\r\n    static addIndex(builder: flatbuffers.Builder, index: number) {\r\n      builder.addFieldInt32(4, index, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opTypeOffset\r\n     */\r\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, opTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.NodeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\r\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset executionProviderTypeOffset\r\n     */\r\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset attributesOffset\r\n     */\r\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, attributesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputArgCountsOffset\r\n     */\r\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset implicitInputsOffset\r\n     */\r\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNode(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\r\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Node.startNode(builder);\r\n      Node.addName(builder, nameOffset);\r\n      Node.addDocString(builder, docStringOffset);\r\n      Node.addDomain(builder, domainOffset);\r\n      Node.addSinceVersion(builder, sinceVersion);\r\n      Node.addIndex(builder, index);\r\n      Node.addOpType(builder, opTypeOffset);\r\n      Node.addType(builder, type);\r\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\r\n      Node.addInputs(builder, inputsOffset);\r\n      Node.addOutputs(builder, outputsOffset);\r\n      Node.addAttributes(builder, attributesOffset);\r\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\r\n      Node.addImplicitInputs(builder, implicitInputsOffset);\r\n      return Node.endNode(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class ValueInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns ValueInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startValueInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset typeOffset\r\n     */\r\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, typeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createValueInfo(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      ValueInfo.startValueInfo(builder);\r\n      ValueInfo.addName(builder, nameOffset);\r\n      ValueInfo.addDocString(builder, docStringOffset);\r\n      ValueInfo.addType(builder, typeOffset);\r\n      return ValueInfo.endValueInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TypeInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TypeInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\r\n     */\r\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Table obj\r\n     * @returns ?flatbuffers.Table\r\n     */\r\n    value<T extends flatbuffers.Table>(obj: T): T|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTypeInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\r\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTypeInfo(\r\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\r\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TypeInfo.startTypeInfo(builder);\r\n      TypeInfo.addDenotation(builder, denotationOffset);\r\n      TypeInfo.addValueType(builder, valueType);\r\n      TypeInfo.addValue(builder, valueOffset);\r\n      return TypeInfo.endTypeInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class OperatorSetId {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns OperatorSetId\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    version(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startOperatorSetId(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long version\r\n     */\r\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createOperatorSetId(\r\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\r\n      OperatorSetId.startOperatorSetId(builder);\r\n      OperatorSetId.addDomain(builder, domainOffset);\r\n      OperatorSetId.addVersion(builder, version);\r\n      return OperatorSetId.endOperatorSetId(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Tensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Tensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    rawData(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    rawDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint8Array\r\n     */\r\n    rawDataArray(): Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ?\r\n          new Uint8Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    stringData(index: number): string;\r\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(6);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\r\n     */\r\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset rawDataOffset\r\n     */\r\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, rawDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(1, data.length, 1);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt8(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(1, numElems, 1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringDataOffset\r\n     */\r\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, stringDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensor(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\r\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Tensor.startTensor(builder);\r\n      Tensor.addName(builder, nameOffset);\r\n      Tensor.addDocString(builder, docStringOffset);\r\n      Tensor.addDims(builder, dimsOffset);\r\n      Tensor.addDataType(builder, dataType);\r\n      Tensor.addRawData(builder, rawDataOffset);\r\n      Tensor.addStringData(builder, stringDataOffset);\r\n      return Tensor.endTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SparseTensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SparseTensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSparseTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valuesOffset\r\n     */\r\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valuesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset indicesOffset\r\n     */\r\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, indicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSparseTensor(\r\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SparseTensor.startSparseTensor(builder);\r\n      SparseTensor.addValues(builder, valuesOffset);\r\n      SparseTensor.addIndices(builder, indicesOffset);\r\n      SparseTensor.addDims(builder, dimsOffset);\r\n      return SparseTensor.endSparseTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Attribute {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Attribute\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.AttributeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.AttributeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    f(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    i(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    s(): string|null;\r\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    s(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    floats(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    floatsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Float32Array\r\n     */\r\n    floatsArray(): Float32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ?\r\n          new Float32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    ints(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    intsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    strings(index: number): string;\r\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    tensorsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph\r\n     */\r\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    graphsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startAttribute(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.AttributeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\r\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number f\r\n     */\r\n    static addF(builder: flatbuffers.Builder, f: number) {\r\n      builder.addFieldFloat32(3, f, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long i\r\n     */\r\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\r\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sOffset\r\n     */\r\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, sOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tOffset\r\n     */\r\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, tOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset gOffset\r\n     */\r\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, gOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset floatsOffset\r\n     */\r\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, floatsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addFloat32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset intsOffset\r\n     */\r\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, intsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringsOffset\r\n     */\r\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, stringsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tensorsOffset\r\n     */\r\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, tensorsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphsOffset\r\n     */\r\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, graphsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createAttribute(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\r\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\r\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\r\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Attribute.startAttribute(builder);\r\n      Attribute.addName(builder, nameOffset);\r\n      Attribute.addDocString(builder, docStringOffset);\r\n      Attribute.addType(builder, type);\r\n      Attribute.addF(builder, f);\r\n      Attribute.addI(builder, i);\r\n      Attribute.addS(builder, sOffset);\r\n      Attribute.addT(builder, tOffset);\r\n      Attribute.addG(builder, gOffset);\r\n      Attribute.addFloats(builder, floatsOffset);\r\n      Attribute.addInts(builder, intsOffset);\r\n      Attribute.addStrings(builder, stringsOffset);\r\n      Attribute.addTensors(builder, tensorsOffset);\r\n      Attribute.addGraphs(builder, graphsOffset);\r\n      return Attribute.endAttribute(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Graph {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Graph\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    initializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.ValueInfo\r\n     */\r\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeArgsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Node= obj\r\n     * @returns onnxruntime.experimental.fbs.Node\r\n     */\r\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    maxNodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\r\n     * @returns onnxruntime.experimental.fbs.NodeEdge\r\n     */\r\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\r\n     * @returns onnxruntime.experimental.fbs.SparseTensor\r\n     */\r\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\r\n        onnxruntime.experimental.fbs.SparseTensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sparseInitializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startGraph(builder: flatbuffers.Builder) {\r\n      builder.startObject(8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset initializersOffset\r\n     */\r\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, initializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeArgsOffset\r\n     */\r\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodesOffset\r\n     */\r\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, nodesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number maxNodeIndex\r\n     */\r\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\r\n      builder.addFieldInt32(3, maxNodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeEdgesOffset\r\n     */\r\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sparseInitializersOffset\r\n     */\r\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createGraph(\r\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\r\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\r\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Graph.startGraph(builder);\r\n      Graph.addInitializers(builder, initializersOffset);\r\n      Graph.addNodeArgs(builder, nodeArgsOffset);\r\n      Graph.addNodes(builder, nodesOffset);\r\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\r\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\r\n      Graph.addInputs(builder, inputsOffset);\r\n      Graph.addOutputs(builder, outputsOffset);\r\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\r\n      return Graph.endGraph(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Model {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Model\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    irVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\r\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\r\n     */\r\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\r\n        onnxruntime.experimental.fbs.OperatorSetId|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    opsetImportLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerName(): string|null;\r\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerVersion(): string|null;\r\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    modelVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphDocString(): string|null;\r\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startModel(builder: flatbuffers.Builder) {\r\n      builder.startObject(9);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long irVersion\r\n     */\r\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opsetImportOffset\r\n     */\r\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, opsetImportOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerNameOffset\r\n     */\r\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, producerNameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerVersionOffset\r\n     */\r\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(3, producerVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long modelVersion\r\n     */\r\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphOffset\r\n     */\r\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, graphOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphDocStringOffset\r\n     */\r\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createModel(\r\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\r\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\r\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Model.startModel(builder);\r\n      Model.addIrVersion(builder, irVersion);\r\n      Model.addOpsetImport(builder, opsetImportOffset);\r\n      Model.addProducerName(builder, producerNameOffset);\r\n      Model.addProducerVersion(builder, producerVersionOffset);\r\n      Model.addDomain(builder, domainOffset);\r\n      Model.addModelVersion(builder, modelVersion);\r\n      Model.addDocString(builder, docStringOffset);\r\n      Model.addGraph(builder, graphOffset);\r\n      Model.addGraphDocString(builder, graphDocStringOffset);\r\n      return Model.endModel(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class KernelCreateInfos {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns KernelCreateInfos\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\r\n        KernelCreateInfos {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    nodeIndices(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndicesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint32Array\r\n     */\r\n    nodeIndicesArray(): Uint32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ?\r\n          new Uint32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    kernelDefHashes(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    kernelDefHashesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeIndicesOffset\r\n     */\r\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelDefHashesOffset\r\n     */\r\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createKernelCreateInfos(\r\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\r\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      KernelCreateInfos.startKernelCreateInfos(builder);\r\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\r\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\r\n      return KernelCreateInfos.endKernelCreateInfos(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SubGraphSessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SubGraphSessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\r\n        SubGraphSessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphId(): string|null;\r\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphIdOffset\r\n     */\r\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, graphIdOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      builder.requiredField(offset, 4);  // graph_id\r\n      return offset;\r\n    }\r\n\r\n    static createSubGraphSessionState(\r\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SubGraphSessionState.startSubGraphSessionState(builder);\r\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\r\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\r\n      return SubGraphSessionState.endSubGraphSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\r\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\r\n     */\r\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\r\n     */\r\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\r\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    subGraphSessionStatesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelsOffset\r\n     */\r\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, kernelsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\r\n     */\r\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSessionState(\r\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\r\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SessionState.startSessionState(builder);\r\n      SessionState.addKernels(builder, kernelsOffset);\r\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\r\n      return SessionState.endSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class InferenceSession {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns InferenceSession\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns boolean\r\n     */\r\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\r\n      return bb.__has_identifier('ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    ortVersion(): string|null;\r\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Model= obj\r\n     * @returns onnxruntime.experimental.fbs.Model|null\r\n     */\r\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startInferenceSession(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset ortVersionOffset\r\n     */\r\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, ortVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset modelOffset\r\n     */\r\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, modelOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM', true);\r\n    }\r\n\r\n    static createInferenceSession(\r\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      InferenceSession.startInferenceSession(builder);\r\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\r\n      InferenceSession.addModel(builder, modelOffset);\r\n      InferenceSession.addSessionState(builder, sessionStateOffset);\r\n      return InferenceSession.endInferenceSession(builder);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\nimport {Session} from './session';\r\nimport {Tensor as OnnxjsTensor} from './tensor';\r\n\r\nexport class OnnxjsSessionHandler implements SessionHandler {\r\n  constructor(private session: Session) {\r\n    this.inputNames = this.session.inputNames;\r\n    this.outputNames = this.session.outputNames;\r\n  }\r\n\r\n  async dispose(): Promise<void> {}\r\n  inputNames: readonly string[];\r\n  outputNames: readonly string[];\r\n  async run(\r\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\r\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\r\n    const inputMap = new Map<string, OnnxjsTensor>();\r\n    for (const name in feeds) {\r\n      if (Object.hasOwnProperty.call(feeds, name)) {\r\n        const feed = feeds[name];\r\n        inputMap.set(\r\n            name,\r\n            new OnnxjsTensor(\r\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\r\n                feed.data as OnnxjsTensor.NumberType));\r\n      }\r\n    }\r\n    const outputMap = await this.session.run(inputMap);\r\n    const output: SessionHandler.ReturnType = {};\r\n    outputMap.forEach((tensor, name) => {\r\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\r\n    });\r\n    return output;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {resolveBackend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<readonly number[]>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this._model.graph.getInputNames();\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this._model.graph.getOutputNames();\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await resolveBackend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        const isOrtFormat = arg.endsWith('.ort');\r\n        if (typeof fetch === 'undefined') {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(buf, isOrtFormat);\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(new Uint8Array(buf), isOrtFormat);\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(arr);\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\r\n      boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error('expected number of outputs do not match number of generated outputs');\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Guid} from 'guid-typescript';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export type Id = Guid;\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError('data type is not string');\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not float (float32, float64)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError('type cannot be non-number (string)');\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: readonly number[];\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): readonly number[] {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: readonly number[],\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Guid = Guid.create()) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError('Input dims doesn\\'t match data length.');\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError('cache should be a string array');\r\n      }\r\n\r\n      if (empty) {\r\n        this.cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        value.data[i] = decodeUtf8String(str);\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error('array length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n\r\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\r\n    if (!ortTensor) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\r\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\r\n        value.data[i] = ortTensor.stringData(i);\r\n      }\r\n\r\n    } else if (\r\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource = new DataView(\r\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\r\n      const elementSize = sizeofProto(ortTensor.dataType());\r\n      const length = ortTensor.rawDataLength() / elementSize;\r\n\r\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (\r\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\r\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Evaluates the given expression and asserts error message if condition is unmet.\r\nexport function assert(expr: boolean, msg: () => string) {\r\n  if (!expr) {\r\n    throw new Error(typeof msg === 'string' ? msg : msg());\r\n  }\r\n}\r\n\r\nexport class ArrayUtil {\r\n  /**\r\n   * Verifies if 2 input arrays contain the same elements.\r\n   * @param n1 Array 1\r\n   * @param n2 Array 2\r\n   * @returns Whether these 2 are equal\r\n   */\r\n  static arraysEqual(\r\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array,\r\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array) {\r\n    if (n1.length !== n2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n      if (n1[i] !== n2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\r\n      [readonly number[], readonly number[]] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]), b.get([])));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]);\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]);\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA);\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB);\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determine the broadcasted dims in input shape based on the given output shape.\r\n   * Note that this function only returns the broadcasted dims.\r\n   * @param inputShape The input shape\r\n   * @param outputShape The output shape\r\n   * @returns The broadcasted dims in input shape.\r\n   */\r\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\r\n    const inRank = inputShape.length;\r\n    const dims: number[] = [];\r\n    for (let i = 0; i < inRank; i++) {\r\n      const dim = inRank - 1 - i;\r\n      const a = inputShape[dim] || 1;\r\n      const b = outputShape[outputShape.length - 1 - i] || 1;\r\n      if (b > 1 && a === 1) {\r\n        dims.unshift(dim);\r\n      }\r\n    }\r\n    return dims;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error('sourceIndex out of bounds');\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error('targetIndex out of bounds');\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error('source indices to be copied are outside bounds');\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error('target array is too small to hold result');\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\r\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\r\n    switch (type) {\r\n      case 'int8':\r\n        return onnx.TensorProto.DataType.INT8;\r\n      case 'uint8':\r\n        return onnx.TensorProto.DataType.UINT8;\r\n      case 'bool':\r\n        return onnx.TensorProto.DataType.BOOL;\r\n      case 'int16':\r\n        return onnx.TensorProto.DataType.INT16;\r\n      case 'uint16':\r\n        return onnx.TensorProto.DataType.UINT16;\r\n      case 'int32':\r\n        return onnx.TensorProto.DataType.INT32;\r\n      case 'uint32':\r\n        return onnx.TensorProto.DataType.UINT32;\r\n      case 'float32':\r\n        return onnx.TensorProto.DataType.FLOAT;\r\n      case 'float64':\r\n        return onnx.TensorProto.DataType.DOUBLE;\r\n      case 'string':\r\n        return onnx.TensorProto.DataType.STRING;\r\n      case 'int64':\r\n        return onnx.TensorProto.DataType.INT64;\r\n      case 'uint64':\r\n        return onnx.TensorProto.DataType.UINT64;\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${type}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n\r\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\r\n    const dims = [];\r\n    for (let i = 0; i < tensor.dimsLength(); i++) {\r\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\r\n    const attributes = [];\r\n    for (let i = 0; i < node.attributesLength(); i++) {\r\n      attributes.push(node.attributes(i)!);\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\r\n  // which values are signed integers.\r\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\r\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\r\n    if (Long.isLong(n)) {\r\n      return n.toNumber();\r\n    } else if (n instanceof flatbuffers.Long) {\r\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\r\n    }\r\n    return n;\r\n  }\r\n  static isLong(n: unknown) {\r\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: readonly number[]): readonly number[] {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error('Index incrementing unsupported for scalar Tensor');\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error('Incorrect axis to increment on');\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error('cannot reshape to a scalar Tensor');\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error('squeeze an axis of size different than 1');\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error('\\'axes\\' has an out of range axis');\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error('\\'axes\\' has a duplicate axis');\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error('cannot split tensor to equal sized parts');\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      dilations: number[], pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust dilation value\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < dilations.length) {\r\n        if (dilations[dim] < 0) {\r\n          throw new Error('dilations should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        dilations.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\r\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport const MIN_CLIP = -3.4028234663852886e+38;\r\nexport const MAX_CLIP = 3.4028234663852886e+38;\r\n\r\nexport function decodeUtf8String(buffer: Uint8Array): string {\r\n  return new TextDecoder().decode(buffer);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\ninterface ExtraOptionsHandler {\r\n  (name: string, value: string): void;\r\n}\r\n\r\nexport const iterateExtraOptions =\r\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\r\n     handler: ExtraOptionsHandler): void => {\r\n      if (typeof options == 'object' && options !== null) {\r\n        if (seen.has(options)) {\r\n          throw new Error('Circular reference in options');\r\n        } else {\r\n          seen.add(options);\r\n        }\r\n      }\r\n\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        const name = (prefix) ? prefix + key : key;\r\n        if (typeof value === 'object') {\r\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\r\n        } else if (typeof value === 'string' || typeof value === 'number') {\r\n          handler(name, value.toString());\r\n        } else if (typeof value === 'boolean') {\r\n          handler(name, (value) ? '1' : '0');\r\n        } else {\r\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\r\n        }\r\n      });\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env, InferenceSession} from 'onnxruntime-common';\r\nimport {OrtWasmMessage, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport * as core from './wasm-core-impl';\r\nimport {initializeWebAssembly} from './wasm-factory';\r\n\r\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\r\nlet proxyWorker: Worker|undefined;\r\nlet initializing = false;\r\nlet initialized = false;\r\nlet aborted = false;\r\n\r\n// resolve; reject\r\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\r\n\r\nlet initWasmCallbacks: PromiseCallbacks;\r\nlet initOrtCallbacks: PromiseCallbacks;\r\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\r\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\r\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\r\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\r\n\r\nconst ensureWorker = (): void => {\r\n  if (initializing || !initialized || aborted || !proxyWorker) {\r\n    throw new Error('worker not ready');\r\n  }\r\n};\r\n\r\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\r\n  switch (ev.data.type) {\r\n    case 'init-wasm':\r\n      initializing = false;\r\n      if (ev.data.err) {\r\n        aborted = true;\r\n        initWasmCallbacks[1](ev.data.err);\r\n      } else {\r\n        initialized = true;\r\n        initWasmCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'init-ort':\r\n      if (ev.data.err) {\r\n        initOrtCallbacks[1](ev.data.err);\r\n      } else {\r\n        initOrtCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'create':\r\n      if (ev.data.err) {\r\n        createSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'release':\r\n      if (ev.data.err) {\r\n        releaseSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        releaseSessionCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    case 'run':\r\n      if (ev.data.err) {\r\n        runCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        runCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'end-profiling':\r\n      if (ev.data.err) {\r\n        endProfilingCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        endProfilingCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    default:\r\n  }\r\n};\r\n\r\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\r\n\r\nexport const initWasm = async(): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    if (initialized) {\r\n      return;\r\n    }\r\n    if (initializing) {\r\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\r\n    }\r\n    if (aborted) {\r\n      throw new Error('previous call to \\'initWasm()\\' failed.');\r\n    }\r\n\r\n    initializing = true;\r\n\r\n    // overwrite wasm filepaths\r\n    if (env.wasm.wasmPaths === undefined) {\r\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\r\n        env.wasm.wasmPaths = scriptSrc.substr(0, (scriptSrc as string).lastIndexOf('/') + 1);\r\n      }\r\n    }\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      proxyWorker?.terminate();\r\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\r\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\r\n      proxyWorker.onmessage = onProxyWorkerMessage;\r\n      initWasmCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\r\n      proxyWorker.postMessage(message);\r\n    });\r\n\r\n  } else {\r\n    return initializeWebAssembly(env.wasm);\r\n  }\r\n};\r\n\r\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      initOrtCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.initOrt(numThreads, loggingLevel);\r\n  }\r\n};\r\n\r\nexport const createSession =\r\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\r\n      createSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\r\n      proxyWorker!.postMessage(message, [model.buffer]);\r\n    });\r\n  } else {\r\n    return core.createSession(model, options);\r\n  }\r\n};\r\n\r\nexport const releaseSession = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      releaseSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.releaseSession(sessionId);\r\n  }\r\n};\r\n\r\nexport const run = async(\r\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\r\n      runCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\r\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\r\n    });\r\n  } else {\r\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\r\n  }\r\n};\r\n\r\nexport const endProfiling = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      endProfilingCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.endProfiling(sessionId);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {iterateExtraOptions} from './options-utils';\r\nimport {allocWasmString} from './string-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let runOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const runOptions: InferenceSession.RunOptions = options || {};\r\n\r\n  try {\r\n    if (options?.logSeverityLevel === undefined) {\r\n      runOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      runOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.terminate === undefined) {\r\n      runOptions.terminate = false;\r\n    }\r\n\r\n    let tagDataOffset = 0;\r\n    if (options?.tag !== undefined) {\r\n      tagDataOffset = allocWasmString(options.tag, allocs);\r\n    }\r\n\r\n    runOptionsHandle = wasm._OrtCreateRunOptions(\r\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\r\n    if (runOptionsHandle === 0) {\r\n      throw new Error('Can\\'t create run options');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [runOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    allocs.forEach(wasm._free);\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\n\r\nimport {createSession, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\r\n\r\nlet ortInit: boolean;\r\n\r\n\r\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\r\n  switch (logLevel) {\r\n    case 'verbose':\r\n      return 0;\r\n    case 'info':\r\n      return 1;\r\n    case 'warning':\r\n      return 2;\r\n    case 'error':\r\n      return 3;\r\n    case 'fatal':\r\n      return 4;\r\n    default:\r\n      throw new Error(`unsupported logging level: ${logLevel}`);\r\n  }\r\n};\r\n\r\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\r\n  private sessionId: number;\r\n\r\n  inputNames: string[];\r\n  outputNames: string[];\r\n\r\n  async loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\r\n    if (!ortInit) {\r\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\r\n      ortInit = true;\r\n    }\r\n\r\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\r\n  }\r\n\r\n  async dispose(): Promise<void> {\r\n    return releaseSession(this.sessionId);\r\n  }\r\n\r\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\r\n      Promise<SessionHandler.ReturnType> {\r\n    const inputArray: Tensor[] = [];\r\n    const inputIndices: number[] = [];\r\n    Object.entries(feeds).forEach(kvp => {\r\n      const name = kvp[0];\r\n      const tensor = kvp[1];\r\n      const index = this.inputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid input '${name}'`);\r\n      }\r\n      inputArray.push(tensor);\r\n      inputIndices.push(index);\r\n    });\r\n\r\n    const outputIndices: number[] = [];\r\n    Object.entries(fetches).forEach(kvp => {\r\n      const name = kvp[0];\r\n      // TODO: support pre-allocated output\r\n      const index = this.outputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid output '${name}'`);\r\n      }\r\n      outputIndices.push(index);\r\n    });\r\n\r\n    const outputs =\r\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\r\n\r\n    const result: SessionHandler.ReturnType = {};\r\n    for (let i = 0; i < outputs.length; i++) {\r\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  startProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n\r\n  endProfiling(): void {\r\n    void endProfiling(this.sessionId);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {iterateExtraOptions} from './options-utils';\r\nimport {allocWasmString} from './string-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\r\n  switch (graphOptimizationLevel) {\r\n    case 'disabled':\r\n      return 0;\r\n    case 'basic':\r\n      return 1;\r\n    case 'extended':\r\n      return 2;\r\n    case 'all':\r\n      return 99;\r\n    default:\r\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\r\n  }\r\n};\r\n\r\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\r\n  switch (executionMode) {\r\n    case 'sequential':\r\n      return 0;\r\n    case 'parallel':\r\n      return 1;\r\n    default:\r\n      throw new Error(`unsupported execution mode: ${executionMode}`);\r\n  }\r\n};\r\n\r\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\r\n  if (!options.extra) {\r\n    options.extra = {};\r\n  }\r\n  if (!options.extra.session) {\r\n    options.extra.session = {};\r\n  }\r\n  const session = options.extra.session as Record<string, string>;\r\n  if (!session.use_ort_model_bytes_directly) {\r\n    // eslint-disable-next-line camelcase\r\n    session.use_ort_model_bytes_directly = '1';\r\n  }\r\n};\r\n\r\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let sessionOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\r\n  appendDefaultOptions(sessionOptions);\r\n\r\n  try {\r\n    if (options?.graphOptimizationLevel === undefined) {\r\n      sessionOptions.graphOptimizationLevel = 'all';\r\n    }\r\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\r\n\r\n    if (options?.enableCpuMemArena === undefined) {\r\n      sessionOptions.enableCpuMemArena = true;\r\n    }\r\n\r\n    if (options?.enableMemPattern === undefined) {\r\n      sessionOptions.enableMemPattern = true;\r\n    }\r\n\r\n    if (options?.executionMode === undefined) {\r\n      sessionOptions.executionMode = 'sequential';\r\n    }\r\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\r\n\r\n    let logIdDataOffset = 0;\r\n    if (options?.logId !== undefined) {\r\n      logIdDataOffset = allocWasmString(options.logId, allocs);\r\n    }\r\n\r\n    if (options?.logSeverityLevel === undefined) {\r\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.enableProfiling === undefined) {\r\n      sessionOptions.enableProfiling = false;\r\n    }\r\n\r\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\r\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\r\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\r\n        sessionOptions.logVerbosityLevel!);\r\n    if (sessionOptionsHandle === 0) {\r\n      throw new Error('Can\\'t create session options');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [sessionOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (sessionOptionsHandle !== 0) {\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n    }\r\n    allocs.forEach(wasm._free);\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const allocWasmString = (data: string, allocs: number[]): number => {\r\n  const wasm = getInstance();\r\n\r\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\r\n  const dataOffset = wasm._malloc(dataLength);\r\n  wasm.stringToUTF8(data, dataOffset, dataLength);\r\n  allocs.push(dataOffset);\r\n\r\n  return dataOffset;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\r\nimport {SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport {setRunOptions} from './run-options';\r\nimport {setSessionOptions} from './session-options';\r\nimport {allocWasmString} from './string-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\n/**\r\n * initialize ORT environment.\r\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\r\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\r\n */\r\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\r\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\r\n  if (errorCode !== 0) {\r\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\r\n  }\r\n};\r\n\r\n/**\r\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\r\n */\r\ntype SessionMetadata = [number, number[], number[]];\r\n\r\nconst activeSessions = new Map<number, SessionMetadata>();\r\n\r\n/**\r\n * create an instance of InferenceSession.\r\n * @returns the metadata of InferenceSession. 0-value handle for failure.\r\n */\r\nexport const createSession =\r\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\r\n      const wasm = getInstance();\r\n      const modelDataOffset = wasm._malloc(model.byteLength);\r\n      let sessionHandle = 0;\r\n      let sessionOptionsHandle = 0;\r\n      let allocs: number[] = [];\r\n\r\n      try {\r\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\r\n\r\n        wasm.HEAPU8.set(model, modelDataOffset);\r\n        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\r\n        if (sessionHandle === 0) {\r\n          throw new Error('Can\\'t create a session');\r\n        }\r\n      } finally {\r\n        wasm._free(modelDataOffset);\r\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n        allocs.forEach(wasm._free);\r\n      }\r\n\r\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\r\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\r\n\r\n      const inputNames = [];\r\n      const inputNamesUTF8Encoded = [];\r\n      const outputNames = [];\r\n      const outputNamesUTF8Encoded = [];\r\n      for (let i = 0; i < inputCount; i++) {\r\n        const name = wasm._OrtGetInputName(sessionHandle, i);\r\n        if (name === 0) {\r\n          throw new Error('Can\\'t get an input name');\r\n        }\r\n        inputNamesUTF8Encoded.push(name);\r\n        inputNames.push(wasm.UTF8ToString(name));\r\n      }\r\n      for (let i = 0; i < outputCount; i++) {\r\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\r\n        if (name === 0) {\r\n          throw new Error('Can\\'t get an output name');\r\n        }\r\n        outputNamesUTF8Encoded.push(name);\r\n        outputNames.push(wasm.UTF8ToString(name));\r\n      }\r\n\r\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\r\n      return [sessionHandle, inputNames, outputNames];\r\n    };\r\n\r\nexport const releaseSession = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error('invalid session id');\r\n  }\r\n  const sessionHandle = session[0];\r\n  const inputNamesUTF8Encoded = session[1];\r\n  const outputNamesUTF8Encoded = session[2];\r\n\r\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n  wasm._OrtReleaseSession(sessionHandle);\r\n  activeSessions.delete(sessionId);\r\n};\r\n\r\n/**\r\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\r\n */\r\nconst enum DataType {\r\n  undefined = 0,\r\n  float = 1,\r\n  uint8 = 2,\r\n  int8 = 3,\r\n  uint16 = 4,\r\n  int16 = 5,\r\n  int32 = 6,\r\n  int64 = 7,\r\n  string = 8,\r\n  bool = 9,\r\n  float16 = 10,\r\n  double = 11,\r\n  uint32 = 12,\r\n  uint64 = 13,\r\n  complex64 = 14,\r\n  complex128 = 15,\r\n  bfloat16 = 16\r\n}\r\n\r\n\r\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\r\n  switch (type) {\r\n    case 'int8':\r\n      return DataType.int8;\r\n    case 'uint8':\r\n      return DataType.uint8;\r\n    case 'bool':\r\n      return DataType.bool;\r\n    case 'int16':\r\n      return DataType.int16;\r\n    case 'uint16':\r\n      return DataType.uint16;\r\n    case 'int32':\r\n      return DataType.int32;\r\n    case 'uint32':\r\n      return DataType.uint32;\r\n    case 'float32':\r\n      return DataType.float;\r\n    case 'float64':\r\n      return DataType.double;\r\n    case 'string':\r\n      return DataType.string;\r\n    case 'int64':\r\n      return DataType.int64;\r\n    case 'uint64':\r\n      return DataType.uint64;\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${type}`);\r\n  }\r\n};\r\n\r\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\r\n  switch (typeProto) {\r\n    case DataType.int8:\r\n      return 'int8';\r\n    case DataType.uint8:\r\n      return 'uint8';\r\n    case DataType.bool:\r\n      return 'bool';\r\n    case DataType.int16:\r\n      return 'int16';\r\n    case DataType.uint16:\r\n      return 'uint16';\r\n    case DataType.int32:\r\n      return 'int32';\r\n    case DataType.uint32:\r\n      return 'uint32';\r\n    case DataType.float:\r\n      return 'float32';\r\n    case DataType.double:\r\n      return 'float64';\r\n    case DataType.string:\r\n      return 'string';\r\n    case DataType.int64:\r\n      return 'int32';\r\n    case DataType.uint64:\r\n      return 'uint32';\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${typeProto}`);\r\n  }\r\n};\r\n\r\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\r\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\r\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\r\n      switch (type) {\r\n        case 'float32':\r\n          return Float32Array;\r\n        case 'uint8':\r\n          return Uint8Array;\r\n        case 'int8':\r\n          return Int8Array;\r\n        case 'uint16':\r\n          return Uint16Array;\r\n        case 'int16':\r\n          return Int16Array;\r\n        case 'int32':\r\n          return Int32Array;\r\n        case 'bool':\r\n          return Uint8Array;\r\n        case 'float64':\r\n          return Float64Array;\r\n        case 'uint32':\r\n          return Uint32Array;\r\n        case 'int64':\r\n          return BigInt64Array;\r\n        case 'uint64':\r\n          return BigUint64Array;\r\n        default:\r\n          throw new Error(`unsupported type: ${type}`);\r\n      }\r\n    };\r\n\r\n/**\r\n * perform inference run\r\n */\r\nexport const run =\r\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\r\n      const wasm = getInstance();\r\n      const session = activeSessions.get(sessionId);\r\n      if (!session) {\r\n        throw new Error('invalid session id');\r\n      }\r\n      const sessionHandle = session[0];\r\n      const inputNamesUTF8Encoded = session[1];\r\n      const outputNamesUTF8Encoded = session[2];\r\n\r\n      const inputCount = inputIndices.length;\r\n      const outputCount = outputIndices.length;\r\n\r\n      let runOptionsHandle = 0;\r\n      let runOptionsAllocs: number[] = [];\r\n\r\n      const inputValues: number[] = [];\r\n      const inputAllocs: number[] = [];\r\n\r\n      try {\r\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\r\n\r\n        // create input tensors\r\n        for (let i = 0; i < inputCount; i++) {\r\n          const dataType = inputs[i][0];\r\n          const dims = inputs[i][1];\r\n          const data = inputs[i][2];\r\n\r\n          let dataOffset: number;\r\n          let dataByteLength: number;\r\n\r\n          if (Array.isArray(data)) {\r\n            // string tensor\r\n            dataByteLength = 4 * data.length;\r\n            dataOffset = wasm._malloc(dataByteLength);\r\n            inputAllocs.push(dataOffset);\r\n            let dataIndex = dataOffset / 4;\r\n            for (let i = 0; i < data.length; i++) {\r\n              if (typeof data[i] !== 'string') {\r\n                throw new TypeError(`tensor data at index ${i} is not a string`);\r\n              }\r\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\r\n            }\r\n          } else {\r\n            dataByteLength = data.byteLength;\r\n            dataOffset = wasm._malloc(dataByteLength);\r\n            inputAllocs.push(dataOffset);\r\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\r\n          }\r\n\r\n          const stack = wasm.stackSave();\r\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\r\n          try {\r\n            let dimIndex = dimsOffset / 4;\r\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\r\n            const tensor = wasm._OrtCreateTensor(\r\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\r\n            if (tensor === 0) {\r\n              throw new Error('Can\\'t create a tensor');\r\n            }\r\n            inputValues.push(tensor);\r\n          } finally {\r\n            wasm.stackRestore(stack);\r\n          }\r\n        }\r\n\r\n        const beforeRunStack = wasm.stackSave();\r\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\r\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\r\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\r\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\r\n\r\n        try {\r\n          let inputValuesIndex = inputValuesOffset / 4;\r\n          let inputNamesIndex = inputNamesOffset / 4;\r\n          let outputValuesIndex = outputValuesOffset / 4;\r\n          let outputNamesIndex = outputNamesOffset / 4;\r\n          for (let i = 0; i < inputCount; i++) {\r\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\r\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\r\n          }\r\n          for (let i = 0; i < outputCount; i++) {\r\n            wasm.HEAPU32[outputValuesIndex++] = 0;\r\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\r\n          }\r\n\r\n          // support RunOptions\r\n          let errorCode = wasm._OrtRun(\r\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\r\n              outputValuesOffset, runOptionsHandle);\r\n\r\n          const output: SerializableTensor[] = [];\r\n\r\n          if (errorCode === 0) {\r\n            for (let i = 0; i < outputCount; i++) {\r\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\r\n\r\n              const beforeGetTensorDataStack = wasm.stackSave();\r\n              // stack allocate 4 pointer value\r\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\r\n\r\n              let type: Tensor.Type|undefined, dataOffset = 0;\r\n              try {\r\n                errorCode = wasm._OrtGetTensorData(\r\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\r\n                if (errorCode !== 0) {\r\n                  throw new Error(`Can't get a tensor data. error code = ${errorCode}`);\r\n                }\r\n                let tensorDataIndex = tensorDataOffset / 4;\r\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\r\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\r\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\r\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\r\n                const dims = [];\r\n                for (let i = 0; i < dimsLength; i++) {\r\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\r\n                }\r\n                wasm._OrtFree(dimsOffset);\r\n\r\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\r\n                type = tensorDataTypeEnumToString(dataType);\r\n                if (type === 'string') {\r\n                  const stringData: string[] = [];\r\n                  let dataIndex = dataOffset / 4;\r\n                  for (let i = 0; i < size; i++) {\r\n                    const offset = wasm.HEAPU32[dataIndex++];\r\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\r\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\r\n                  }\r\n                  output.push([type, dims, stringData]);\r\n                } else {\r\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\r\n                  const data = new typedArrayConstructor(size);\r\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\r\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\r\n                  output.push([type, dims, data]);\r\n                }\r\n              } finally {\r\n                wasm.stackRestore(beforeGetTensorDataStack);\r\n                if (type === 'string' && dataOffset) {\r\n                  wasm._free(dataOffset);\r\n                }\r\n                wasm._OrtReleaseTensor(tensor);\r\n              }\r\n            }\r\n          }\r\n\r\n          if (errorCode === 0) {\r\n            return output;\r\n          } else {\r\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\r\n          }\r\n        } finally {\r\n          wasm.stackRestore(beforeRunStack);\r\n        }\r\n      } finally {\r\n        inputValues.forEach(wasm._OrtReleaseTensor);\r\n        inputAllocs.forEach(wasm._free);\r\n\r\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n        runOptionsAllocs.forEach(wasm._free);\r\n      }\r\n    };\r\n\r\n/**\r\n * end profiling\r\n */\r\nexport const endProfiling = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error('invalid session id');\r\n  }\r\n  const sessionHandle = session[0];\r\n\r\n  // profile file name is not used yet, but it must be freed.\r\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\r\n  if (profileFileName === 0) {\r\n    throw new Error('Can\\'t get an profile file name');\r\n  }\r\n  wasm._OrtFree(profileFileName);\r\n};\r\n\r\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\r\n  const buffers: ArrayBufferLike[] = [];\r\n  for (const tensor of tensors) {\r\n    const data = tensor[2];\r\n    if (!Array.isArray(data) && data.buffer) {\r\n      buffers.push(data.buffer);\r\n    }\r\n  }\r\n  return buffers;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\nimport * as path from 'path';\r\n\r\nimport {OrtWasmModule} from './binding/ort-wasm';\r\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\r\nimport ortWasmFactory from './binding/ort-wasm.js';\r\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\r\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\r\n\r\nlet wasm: OrtWasmModule|undefined;\r\nlet initialized = false;\r\nlet initializing = false;\r\nlet aborted = false;\r\n\r\nconst isMultiThreadSupported = (): boolean => {\r\n  try {\r\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\r\n    if (typeof SharedArrayBuffer === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    // Test for transferability of SABs (for browsers. needed for Firefox)\r\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\r\n    if (typeof MessageChannel !== 'undefined') {\r\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\r\n    }\r\n\r\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing threaded instructions.\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\r\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isSimdSupported = (): boolean => {\r\n  try {\r\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing SIMD instructions.\r\n\r\n    // The binary data is generated from the following code by wat2wasm:\r\n    //\r\n    // (module\r\n    //   (type $t0 (func))\r\n    //   (func $f0 (type $t0)\r\n    //     (drop\r\n    //       (i32x4.dot_i16x8_s\r\n    //         (i8x16.splat\r\n    //           (i32.const 0))\r\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\r\n\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\r\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\r\n  if (useThreads) {\r\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\r\n  } else {\r\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\r\n  }\r\n};\r\n\r\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\r\n  }\r\n  if (aborted) {\r\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  // wasm flags are already initialized\r\n  const timeout = flags.initTimeout!;\r\n  const numThreads = flags.numThreads!;\r\n  const simd = flags.simd!;\r\n\r\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\r\n  const useSimd = simd && isSimdSupported();\r\n\r\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\r\n  const wasmFileName = getWasmFileName(false, useThreads);\r\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\r\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\r\n\r\n  let isTimeout = false;\r\n\r\n  const tasks: Array<Promise<void>> = [];\r\n\r\n  // promise for timeout\r\n  if (timeout > 0) {\r\n    tasks.push(new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        isTimeout = true;\r\n        resolve();\r\n      }, timeout);\r\n    }));\r\n  }\r\n\r\n  // promise for module initialization\r\n  tasks.push(new Promise((resolve, reject) => {\r\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\r\n    const config: Partial<OrtWasmModule> = {\r\n      locateFile: (fileName: string, scriptDirectory: string) => {\r\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\r\n            typeof Blob !== 'undefined') {\r\n          return URL.createObjectURL(new Blob(\r\n              [\r\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\r\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n                require('./binding/ort-wasm-threaded.worker.js')\r\n              ],\r\n              {type: 'text/javascript'}));\r\n        }\r\n\r\n        if (fileName === wasmFileName) {\r\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\r\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\r\n        }\r\n\r\n        return scriptDirectory + fileName;\r\n      }\r\n    };\r\n\r\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\r\n      if (typeof Blob === 'undefined') {\r\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\r\n      } else {\r\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\r\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\r\n      }\r\n    }\r\n\r\n    factory(config).then(\r\n        // wasm module initialized successfully\r\n        module => {\r\n          initializing = false;\r\n          initialized = true;\r\n          wasm = module;\r\n          resolve();\r\n        },\r\n        // wasm module failed to initialize\r\n        (what) => {\r\n          initializing = false;\r\n          aborted = true;\r\n          reject(what);\r\n        });\r\n  }));\r\n\r\n  await Promise.race(tasks);\r\n\r\n  if (isTimeout) {\r\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\r\n  }\r\n};\r\n\r\nexport const getInstance = (): OrtWasmModule => {\r\n  if (initialized && wasm) {\r\n    return wasm;\r\n  }\r\n\r\n  throw new Error('WebAssembly is not initialized yet.');\r\n};\r\n\r\nexport const dispose = (): void => {\r\n  if (initialized && !initializing && !aborted) {\r\n    initializing = true;\r\n\r\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\r\n    wasm = undefined;\r\n\r\n    initializing = false;\r\n    initialized = false;\r\n    aborted = true;\r\n  }\r\n};\r\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.10.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={474:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return R.buffer!=j&&Q(R.buffer),L}function r(){return R.buffer!=j&&Q(R.buffer),W}function a(){return R.buffer!=j&&Q(R.buffer),H}function i(){return R.buffer!=j&&Q(R.buffer),Y}function o(){return R.buffer!=j&&Q(R.buffer),z}var u,s,c;e=e||{},u||(u=void 0!==e?e:{}),u.ready=new Promise((function(e,t){s=e,c=t}));var l,f={};for(l in u)u.hasOwnProperty(l)&&(f[l]=u[l]);var p=\\\"./this.program\\\";function d(e,t){throw t}var m,h,g,b,y,v=\\\"object\\\"==typeof window,_=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A=\\\"\\\";function E(e){return u.locateFile?u.locateFile(e,A):A+e}if(w){var S;A=_?n(908).dirname(A)+\\\"/\\\":\\\"//\\\",m=function(e,t){return b||(b=n(384)),y||(y=n(908)),e=y.normalize(e),b.readFileSync(e,t?null:\\\"utf8\\\")},g=function(e){return(e=m(e,!0)).buffer||(e=new Uint8Array(e)),F(e.buffer),e},h=function(e,t,r){b||(b=n(384)),y||(y=n(908)),e=y.normalize(e),b.readFile(e,(function(e,n){e?r(e):t(n.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof Bt))throw e})),process.on(\\\"unhandledRejection\\\",le),d=function(e,t){if(ae())throw process.exitCode=e,t;process.exit(e)},u.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{S=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=S.Worker}else(v||_)&&(_?A=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\\\"blob:\\\")?A.substr(0,A.lastIndexOf(\\\"/\\\")+1):\\\"\\\",w?(m=function(e,t){return b||(b=n(384)),y||(y=n(908)),e=y.normalize(e),b.readFileSync(e,t?null:\\\"utf8\\\")},g=function(e){return(e=m(e,!0)).buffer||(e=new Uint8Array(e)),F(e.buffer),e},h=function(e,t,r){b||(b=n(384)),y||(y=n(908)),e=y.normalize(e),b.readFile(e,(function(e,n){e?r(e):t(n.buffer)}))}):(m=function(e){var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},_&&(g=function(e){var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),h=function(e,t,n){var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var T,M,k=u.print||console.log.bind(console),x=u.printErr||console.warn.bind(console);for(l in f)f.hasOwnProperty(l)&&(u[l]=f[l]);f=null,u.thisProgram&&(p=u.thisProgram),u.quit&&(d=u.quit),u.wasmBinary&&(M=u.wasmBinary);var D=u.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&le(\\\"no native wasm support detected\\\");var R,C,P,I=!1;function F(e,t){e||le(\\\"Assertion failed: \\\"+t)}function U(e){var t=new TextDecoder(e);this.decode=function(e){return e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),t.decode.call(t,e)}}var j,L,W,H,Y,z,B=\\\"undefined\\\"!=typeof TextDecoder?new U(\\\"utf8\\\"):void 0;function G(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&B)return B.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function N(e,t){return e?G(r(),e,t):\\\"\\\"}function q(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++]=o}else{if(2047>=o){if(n+1>=r)break;t[n++]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++]=224|o>>12}else{if(n+3>=r)break;t[n++]=240|o>>18,t[n++]=128|o>>12&63}t[n++]=128|o>>6&63}t[n++]=128|63&o}}return t[n]=0,n-a}function V(e,t,n){return q(e,r(),t,n)}function X(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function J(e){var n=X(e)+1,r=bt(n);return r&&q(e,t(),r,n),r}function Q(e){j=e,u.HEAP8=L=new Int8Array(e),u.HEAP16=new Int16Array(e),u.HEAP32=H=new Int32Array(e),u.HEAPU8=W=new Uint8Array(e),u.HEAPU16=new Uint16Array(e),u.HEAPU32=Y=new Uint32Array(e),u.HEAPF32=new Float32Array(e),u.HEAPF64=z=new Float64Array(e)}\\\"undefined\\\"!=typeof TextDecoder&&new U(\\\"utf-16le\\\"),O&&(j=u.buffer);var Z=u.INITIAL_MEMORY||16777216;if(O)R=u.wasmMemory,j=u.buffer;else if(u.wasmMemory)R=u.wasmMemory;else if(!((R=new WebAssembly.Memory({initial:Z/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");R&&(j=R.buffer),Z=j.byteLength,Q(j);var K,$=[],ee=[],te=[],ne=[],re=0;function ae(){return D||0<re}function ie(){var e=u.preRun.shift();$.unshift(e)}var oe,ue=0,se=null,ce=null;function le(e){throw u.onAbort&&u.onAbort(e),F(!O),x(e),I=!0,P=1,e=new WebAssembly.RuntimeError(\\\"abort(\\\"+e+\\\"). Build with -s ASSERTIONS=1 for more info.\\\"),c(e),e}function fe(){return oe.startsWith(\\\"data:application/octet-stream;base64,\\\")}function pe(){var e=oe;try{if(e==oe&&M)return new Uint8Array(M);if(g)return g(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){le(e)}}u.preloadedImages={},u.preloadedAudios={},oe=\\\"ort-wasm-threaded.wasm\\\",fe()||(oe=E(oe));var de={689380:function(){throw\\\"Canceled!\\\"}};function me(e){for(;0<e.length;){var t=e.shift();if(\\\"function\\\"==typeof t)t(u);else{var n=t.Nb;\\\"number\\\"==typeof n?void 0===t.ib?K.get(n)():K.get(n)(t.ib):n(void 0===t.ib?null:t.ib)}}}function he(e,n){if(0>=e||e>t().length||1&e||0>n)return-28;if(0==n)return 0;2147483647<=n&&(n=1/0);var r=Atomics.load(a(),zt>>2),i=0;if(r==e&&Atomics.compareExchange(a(),zt>>2,r,0)==r&&(i=1,0>=--n))return 1;if(0<=(e=Atomics.notify(a(),e>>2,n)))return e+i;throw\\\"Atomics.notify returned an unexpected value \\\"+e}function ge(e){if(O)throw\\\"Internal Error! cleanupThread() can only ever be called from main application thread!\\\";if(!e)throw\\\"Internal Error! Null pthread_ptr in cleanupThread!\\\";var t=ye.cb[e];t&&(a()[e+12>>2]=0,ye.sb(t.worker))}u._emscripten_futex_wake=he;var be,ye={gb:[],fb:[],zb:[],xc:function(){},Rb:function(){for(var e=bt(228),t=0;57>t;++t)i()[e/4+t]=0;a()[e+12>>2]=e,t=e+152,a()[t>>2]=t;var n=bt(512);for(t=0;128>t;++t)i()[n/4+t]=0;Atomics.store(i(),e+100>>2,n),Atomics.store(i(),e+40>>2,e),Dt(e,!_,1),Ot(e)},Sb:function(){ye.receiveObjectTransfer=ye.Xb,ye.threadInit=ye.hc,ye.threadCancel=ye.fc,ye.threadExit=ye.Hb,ye.setExitStatus=ye.Zb},cb:{},yb:[],Eb:function(){for(;0<ye.yb.length;)ye.yb.pop()();Ct()},Fb:function(e,t){Atomics.store(i(),e+56>>2,1),Atomics.store(i(),e+60>>2,0),ye.Eb(),Atomics.store(i(),e+4>>2,t),Atomics.store(i(),e+0>>2,1),he(e+0,2147483647),Dt(0,0,0)},Zb:function(e){P=e},Hb:function(e){var t=_t();t&&(ye.Fb(t,e),O&&postMessage({cmd:\\\"exit\\\"}))},fc:function(){ye.Fb(_t(),-1),postMessage({cmd:\\\"cancelDone\\\"})},Gb:function(){for(var e in ye.cb){var t=ye.cb[e];t&&t.worker&&ye.sb(t.worker)}for(ye.cb={},e=0;e<ye.gb.length;++e){var n=ye.gb[e];n.terminate()}for(ye.gb=[],e=0;e<ye.fb.length;++e)t=(n=ye.fb[e]).bb,ye.xb(t),n.terminate();ye.fb=[]},xb:function(e){if(e){if(e.eb){var t=a()[e.eb+100>>2];a()[e.eb+100>>2]=0,vt(t),vt(e.eb)}e.eb=0,e.wb&&e.hb&&vt(e.hb),e.hb=0,e.worker&&(e.worker.bb=null)}},sb:function(e){ye.Yb((function(){delete ye.cb[e.bb.eb],ye.gb.push(e),ye.fb.splice(ye.fb.indexOf(e),1),ye.xb(e.bb),e.bb=void 0}))},Yb:function(e){a()[Yt>>2]=0;try{e()}finally{a()[Yt>>2]=1}},Xb:function(){},hc:function(){for(var e in ye.zb)ye.zb[e]()},Ub:function(e,t){e.onmessage=function(n){var r=n.data,o=r.cmd;if(e.bb&&(ye.Lb=e.bb.eb),r.targetThread&&r.targetThread!=_t()){var u=ye.cb[r.Dc];u?u.worker.postMessage(n.data,r.transferList):x('Internal error! Worker sent a message \\\"'+o+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else if(\\\"processQueuedMainThreadWork\\\"===o)St();else if(\\\"spawnThread\\\"===o)Oe(n.data);else if(\\\"cleanupThread\\\"===o)ge(r.thread);else if(\\\"killThread\\\"===o){if(n=r.thread,O)throw\\\"Internal Error! killThread() can only ever be called from main application thread!\\\";if(!n)throw\\\"Internal Error! Null pthread_ptr in killThread!\\\";a()[n+12>>2]=0,r=ye.cb[n],delete ye.cb[n],r.worker.terminate(),ye.xb(r),ye.fb.splice(ye.fb.indexOf(r.worker),1),r.worker.bb=void 0}else if(\\\"cancelThread\\\"===o){if(n=r.thread,O)throw\\\"Internal Error! cancelThread() can only ever be called from main application thread!\\\";if(!n)throw\\\"Internal Error! Null pthread_ptr in cancelThread!\\\";ye.cb[n].worker.postMessage({cmd:\\\"cancel\\\"})}else if(\\\"loaded\\\"===o)e.loaded=!0,t&&t(e),e.mb&&(e.mb(),delete e.mb);else if(\\\"print\\\"===o)k(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text);else if(\\\"printErr\\\"===o)x(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text);else if(\\\"alert\\\"===o)alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text);else if(\\\"exit\\\"===o)e.bb&&Atomics.load(i(),e.bb.eb+64>>2)&&ye.sb(e);else if(\\\"exitProcess\\\"===o)try{Nt(r.returnCode)}catch(e){if(e instanceof Bt)return;throw e}else\\\"cancelDone\\\"===o?ye.sb(e):\\\"objectTransfer\\\"!==o&&(\\\"setimmediate\\\"===n.data.target?e.postMessage(n.data):x(\\\"worker sent an unknown command \\\"+o));ye.Lb=void 0},e.onerror=function(e){x(\\\"pthread sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message)},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"exit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:R,wasmModule:C})},Ib:function(){var e=E(\\\"ort-wasm-threaded.worker.js\\\");ye.gb.push(new Worker(e))},Ob:function(){return 0==ye.gb.length&&(ye.Ib(),ye.Ub(ye.gb[0])),ye.gb.pop()},nc:function(e){for(e=performance.now()+e;performance.now()<e;);}};function ve(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return a()[yt()>>2]=28,-1;e=be()}return a()[t>>2]=e/1e3|0,a()[t+4>>2]=e%1e3*1e6|0,0}function _e(e,t){if(O)return Ne(1,1,e,t);te.unshift({Nb:e,ib:t})}function we(e){this.lb=e-16,this.dc=function(e){a()[this.lb+4>>2]=e},this.ac=function(e){a()[this.lb+8>>2]=e},this.bc=function(){a()[this.lb>>2]=0},this.$b=function(){t()[this.lb+12>>0]=0},this.cc=function(){t()[this.lb+13>>0]=0},this.Pb=function(e,t){this.dc(e),this.ac(t),this.bc(),this.$b(),this.cc()}}function Oe(e){if(O)throw\\\"Internal Error! spawnThread() can only ever be called from main application thread!\\\";var t=ye.Ob();if(!t)return 6;if(void 0!==t.bb)throw\\\"Internal error!\\\";if(!e.rb)throw\\\"Internal error, no pthread ptr!\\\";ye.fb.push(t);for(var n=bt(512),r=0;128>r;++r)a()[n+4*r>>2]=0;var o=e.hb+e.jb,u=(r=ye.cb[e.rb]={worker:t,hb:e.hb,jb:e.jb,wb:e.wb,eb:e.rb}).eb>>2;Atomics.store(i(),u+16,e.detached),Atomics.store(i(),u+25,n),Atomics.store(i(),u+10,r.eb),Atomics.store(i(),u+20,e.jb),Atomics.store(i(),u+19,o),Atomics.store(i(),u+26,e.jb),Atomics.store(i(),u+28,o),Atomics.store(i(),u+29,e.detached),n=Rt()+40,Atomics.store(i(),u+43,n),t.bb=r;var s={cmd:\\\"run\\\",start_routine:e.ec,arg:e.ib,threadInfoStruct:e.rb,stackBase:e.hb,stackSize:e.jb};return t.mb=function(){s.time=performance.now(),t.postMessage(s,e.mc)},t.loaded&&(t.mb(),delete t.mb),0}function Ae(e,n,r){if(0>=e||e>t().length||1&e)return-28;if(v){if(Atomics.load(a(),e>>2)!=n)return-6;var i=performance.now();for(r=i+r,Atomics.exchange(a(),zt>>2,e);;){if((i=performance.now())>r)return Atomics.exchange(a(),zt>>2,0),-73;if(0==(i=Atomics.exchange(a(),zt>>2,0)))break;if(St(),Atomics.load(a(),e>>2)!=n)return-6;Atomics.exchange(a(),zt>>2,e)}return 0}if(\\\"timed-out\\\"===(e=Atomics.wait(a(),e>>2,n,r)))return-73;if(\\\"not-equal\\\"===e)return-6;if(\\\"ok\\\"===e)return 0;throw\\\"Atomics.wait returned an unexpected value \\\"+e}function Ee(){w||_||(T||(T={}),T[\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\"]||(T[\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\"]=1,x(\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\")))}u.establishStackSpace=function(e,t){Wt(e,t),jt(e)},u.invokeEntryPoint=function(e,t){return K.get(e)(t)},be=w?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?function(){return performance.now()-u.__performance_now_clock_drift}:function(){return performance.now()};var Se={},Te=[null,[],[]];function Me(e,t){var n=Te[e];0===t||10===t?((1===e?k:x)(G(n,0)),n.length=0):n.push(t)}var ke={};function xe(e,t){return O?Ne(2,1,e,t):(e=N(e),ke.rc(e,t))}function De(e,t,n){return O?Ne(3,1,e,t,n):0}function Re(e,t){if(O)return Ne(4,1,e,t)}function Ce(e,t,n){if(O)return Ne(5,1,e,t,n)}function Pe(e,t,n){return O?Ne(6,1,e,t,n):0}function Ie(e,t){if(O)return Ne(7,1,e,t)}function Fe(e,t){return O?Ne(8,1,e,t):(e=N(e),ke.sc(e,t))}function Ue(e,t,n,a,i,o){if(O)t=Ne(9,1,e,t,n,a,i,o);else if(o<<=12,0!=(16&a)&&0!=e%65536)t=-28;else if(0!=(32&a)){var u=65536*Math.ceil(t/65536);(e=Ht(65536,u))?r().fill(0,e,e+u):e=0,e?(Se[e]={Wb:e,Tb:t,Jb:!0,fd:i,Ac:n,flags:a,offset:o},t=e):t=-48}else t=-52;return t}function je(e,t){if(O)e=Ne(10,1,e,t);else{var n=Se[e];0!==t&&n?(t===n.Tb&&(Se[e]=null,n.Jb&&vt(n.Wb)),e=0):e=-28}return e}function Le(e,t,n){if(O)return Ne(11,1,e,t,n)}function We(e,t,n){return O?Ne(12,1,e,t,n):(e=N(e),ke.tc(e,t,n))}function He(e){if(O)return Ne(13,1,e)}function Ye(e,t){if(O)return Ne(14,1,e,t)}function ze(e){if(O)return Ne(15,1,e)}function Be(){if(O)return Ne(16,1);le()}var Ge=[];function Ne(e,t){for(var n=arguments.length-2,r=Ut(),a=Lt(8*n),i=a>>3,u=0;u<n;u++){var s=arguments[2+u];o()[i+u]=s}return n=Tt(e,n,a,t),jt(r),n}var qe=[],Ve=[0,\\\"undefined\\\"!=typeof document?document:0,\\\"undefined\\\"!=typeof window?window:0];function Xe(e){return e=2<e?N(e):e,Ve[e]||(\\\"undefined\\\"!=typeof document?document.querySelector(e):void 0)}function Je(e,t,n){var r=Xe(e);if(!r)return-4;if(r.qb&&(a()[r.qb>>2]=t,a()[r.qb+4>>2]=n),!r.Db&&r.pc){if(r.qb){r=a()[r.qb+8>>2],e=e?N(e):\\\"\\\";var i=Ut(),o=Lt(12),u=0;if(e){u=X(e)+1;var s=bt(u);V(e,s,u),u=s}return a()[o>>2]=u,a()[o+4>>2]=t,a()[o+8>>2]=n,Mt(0,r,657457152,0,u,o),jt(i),1}return-4}return r.Db&&(r=r.Db),e=!1,r.pb&&r.pb.ob&&(e=0===(e=r.pb.ob.getParameter(2978))[0]&&0===e[1]&&e[2]===r.width&&e[3]===r.height),r.width=t,r.height=n,e&&r.pb.ob.viewport(0,0,t,n),0}function Qe(e,t,n){return O?Ne(17,1,e,t,n):Je(e,t,n)}var Ze,Ke=[\\\"default\\\",\\\"low-power\\\",\\\"high-performance\\\"],$e={};function et(){if(!Ze){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in $e)void 0===$e[e]?delete t[e]:t[e]=$e[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Ze=n}return Ze}function tt(e,n){if(O)return Ne(18,1,e,n);var r=0;return et().forEach((function(i,o){var u=n+r;for(o=a()[e+4*o>>2]=u,u=0;u<i.length;++u)t()[o++>>0]=i.charCodeAt(u);t()[o>>0]=0,r+=i.length+1})),0}function nt(e,t){if(O)return Ne(19,1,e,t);var n=et();a()[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),a()[t>>2]=r,0}function rt(e){return O?Ne(20,1,e):0}function at(e,n){return O?Ne(21,1,e,n):(e=1==e||2==e?2:le(),t()[n>>0]=e,0)}function it(e,t,n,r){return O?Ne(22,1,e,t,n,r):(e=ke.vc(e),t=ke.uc(e,t,n),a()[r>>2]=t,0)}function ot(e,t,n,r,a){if(O)return Ne(23,1,e,t,n,r,a)}function ut(e,t,n,i){if(O)return Ne(24,1,e,t,n,i);for(var o=0,u=0;u<n;u++){for(var s=a()[t+8*u>>2],c=a()[t+(8*u+4)>>2],l=0;l<c;l++)Me(e,r()[s+l]);o+=c}return a()[i>>2]=o,0}function st(){function e(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return Ne(25,1);if(!st.Kb){st.Kb=!0;var t=(new Date).getFullYear(),n=new Date(t,0,1),r=new Date(t,6,1);t=n.getTimezoneOffset();var i=r.getTimezoneOffset(),o=Math.max(t,i);a()[Ft()>>2]=60*o,a()[It()>>2]=Number(t!=i),n=e(n),r=e(r),n=J(n),r=J(r),i<t?(a()[Pt()>>2]=n,a()[Pt()+4>>2]=r):(a()[Pt()>>2]=r,a()[Pt()+4>>2]=n)}}function ct(e){return 0==e%4&&(0!=e%100||0==e%400)}function lt(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ft=[31,29,31,30,31,30,31,31,30,31,30,31],pt=[31,28,31,30,31,30,31,31,30,31,30,31];function dt(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(ct(e.getFullYear())?ft:pt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function mt(e,n,r,i){function o(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function u(e,t){return o(e,t,\\\"0\\\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){e=dt(new Date(e.ab+1900,0,1),e.vb);var t=new Date(e.getFullYear()+1,0,4),n=c(new Date(e.getFullYear(),0,4));return t=c(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[i+40>>2];for(var p in i={kc:a()[i>>2],jc:a()[i+4>>2],tb:a()[i+8>>2],nb:a()[i+12>>2],kb:a()[i+16>>2],ab:a()[i+20>>2],ub:a()[i+24>>2],vb:a()[i+28>>2],Ec:a()[i+32>>2],ic:a()[i+36>>2],lc:f?N(f):\\\"\\\"},r=N(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.ub].substring(0,3)},\\\"%A\\\":function(e){return d[e.ub]},\\\"%b\\\":function(e){return m[e.kb].substring(0,3)},\\\"%B\\\":function(e){return m[e.kb]},\\\"%C\\\":function(e){return u((e.ab+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.nb,2)},\\\"%e\\\":function(e){return o(e.nb,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return u(e.tb,2)},\\\"%I\\\":function(e){return 0==(e=e.tb)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){return u(e.nb+lt(ct(e.ab+1900)?ft:pt,e.kb-1),3)},\\\"%m\\\":function(e){return u(e.kb+1,2)},\\\"%M\\\":function(e){return u(e.jc,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.tb&&12>e.tb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.kc,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ub||7},\\\"%U\\\":function(e){var t=new Date(e.ab+1900,0,1),n=0===t.getDay()?t:dt(t,7-t.getDay());return 0>s(n,e=new Date(e.ab+1900,e.kb,e.nb))?u(Math.ceil((31-n.getDate()+(lt(ct(e.getFullYear())?ft:pt,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%V\\\":function(e){var t=new Date(e.ab+1901,0,4),n=c(new Date(e.ab+1900,0,4));t=c(t);var r=dt(new Date(e.ab+1900,0,1),e.vb);return 0>s(r,n)?\\\"53\\\":0>=s(t,r)?\\\"01\\\":u(Math.ceil((n.getFullYear()<e.ab+1900?e.vb+32-n.getDate():e.vb+1-n.getDate())/7),2)},\\\"%w\\\":function(e){return e.ub},\\\"%W\\\":function(e){var t=new Date(e.ab,0,1),n=1===t.getDay()?t:dt(t,0===t.getDay()?1:7-t.getDay()+1);return 0>s(n,e=new Date(e.ab+1900,e.kb,e.nb))?u(Math.ceil((31-n.getDate()+(lt(ct(e.getFullYear())?ft:pt,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%y\\\":function(e){return(e.ab+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.ab+1900},\\\"%z\\\":function(e){var t=0<=(e=e.ic);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.lc},\\\"%%\\\":function(){return\\\"%\\\"}})r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](i)));return p=function(e){var t=Array(X(e)+1);return q(e,t,0,t.length),t}(r),p.length>n?0:(function(e,n){t().set(e,n)}(p,e),p.length-1)}var ht=[null,_e,xe,De,Re,Ce,Pe,Ie,Fe,Ue,je,Le,We,He,Ye,ze,Be,Qe,tt,nt,rt,at,it,ot,ut,st],gt={h:function(e,t,n,r){le(\\\"Assertion failed: \\\"+N(e)+\\\", at: \\\"+[t?N(t):\\\"unknown filename\\\",n,r?N(r):\\\"unknown function\\\"])},M:function(e,t){return ve(e,t)},b:function(e){return bt(e+16)+16},d:function(e,t){return _e(e,t)},e:function(e,t){ye.yb.push((function(){K.get(e)(t)}))},c:function(e,t,n){throw new we(e).Pb(t,n),e},Z:function(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;if(!e)return x(\\\"pthread_create called with a null thread pointer!\\\"),28;var o=[];if(O&&0===o.length)return Et(687865856,e,t,n,r);var u=0,s=0;if(t&&-1!=t){var c=a()[t>>2];c+=81920,u=a()[t+8>>2],s=0!==a()[t+12>>2]}else c=2097152;(t=0==u)?u=Ht(16,c):F(0<(u-=c));for(var l=bt(228),f=0;57>f;++f)i()[(l>>2)+f]=0;return a()[e>>2]=l,a()[l+12>>2]=l,e=l+152,a()[e>>2]=e,n={hb:u,jb:c,wb:t,detached:s,ec:n,rb:l,ib:r,mc:o},O?(n.oc=\\\"spawnThread\\\",postMessage(n,o),0):Oe(n)},X:function(e){throw O?ye.Hb(e):(ye.Eb(),Nt(e)),\\\"unwind\\\"},Y:function(e,t){return function(e,t){if(!e)return x(\\\"pthread_join attempted on a null thread pointer!\\\"),71;if(O&&_t()==e)return x(\\\"PThread \\\"+e+\\\" is attempting to join to itself!\\\"),16;if(!O&&At()==e)return x(\\\"Main thread \\\"+e+\\\" is attempting to join to itself!\\\"),16;if(a()[e+12>>2]!==e)return x(\\\"pthread_join attempted on thread \\\"+e+\\\", which does not point to a valid thread, or does not exist anymore!\\\"),71;if(Atomics.load(i(),e+64>>2))return x(\\\"Attempted to join thread \\\"+e+\\\", which was already detached!\\\"),28;for(Ee();;){var n=Atomics.load(i(),e+0>>2);if(1==n)return n=Atomics.load(i(),e+4>>2),t&&(a()[t>>2]=n),Atomics.store(i(),e+64>>2,1),O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ge(e),0;kt(),O||St(),Ae(e+0,n,O?100:1)}}(e,t)},L:xe,s:De,S:Re,V:Ce,u:function(){return 42},F:Pe,Q:Ie,P:Fe,U:Ue,T:je,q:Le,K:We,N:He,v:Ye,O:ze,da:function(e,t){if(e==t)postMessage({cmd:\\\"processQueuedMainThreadWork\\\"});else if(O)postMessage({targetThread:e,cmd:\\\"processThreadQueue\\\"});else{if(!(e=(e=ye.cb[e])&&e.worker))return;e.postMessage({cmd:\\\"processThreadQueue\\\"})}return 1},f:Be,w:ve,ga:function(e,t){return e-t},A:function(){le(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){le(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},C:function(){le(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},z:function(){le(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},ea:function(e,t,n){var i;for(Ge.length=0,n>>=2;i=r()[t++];)(i=105>i)&&1&n&&n++,Ge.push(i?o()[n++>>1]:a()[n]),++n;return de[e].apply(null,Ge)},G:Ee,n:function(){},k:Ae,j:he,W:function(){return 2147483648},i:be,D:function(e,t,n){r().copyWithin(e,t,t+n)},o:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},aa:function(e,t,n){qe.length=t,n>>=3;for(var r=0;r<t;r++)qe[r]=o()[n+r];return(0>e?de[-e-1]:ht[e]).apply(null,qe)},E:function(e){var t=r().length;if((e>>>=0)<=t||2147483648<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296),0<(a=Math.max(e,a))%65536&&(a+=65536-a%65536);e:{try{R.grow(Math.min(2147483648,a)-j.byteLength+65535>>>16),Q(R.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},ba:function(e,t,n){return Xe(e)?Je(e,t,n):Qe(e,t,n)},x:function(){},$:function(e,t,n){return re+=1,setTimeout((function(){--re,function(e){if(!I){try{e()}catch(e){if(e instanceof Bt)return;if(\\\"unwind\\\"!==e)throw e&&\\\"object\\\"==typeof e&&e.stack&&x(\\\"exception thrown: \\\"+[e,e.stack]),e}if(!ae())try{O?xt(P):Nt(P)}catch(e){if(!(e instanceof Bt))throw e}}}((function(){K.get(e)(n)}))}),t)},ca:function(e,t){t>>=2;var n=a()[t+6];return t={alpha:!!a()[t],depth:!!a()[t+1],stencil:!!a()[t+2],antialias:!!a()[t+3],premultipliedAlpha:!!a()[t+4],preserveDrawingBuffer:!!a()[t+5],powerPreference:Ke[n],failIfMajorPerformanceCaveat:!!a()[t+7],Vb:a()[t+8],yc:a()[t+9],Bb:a()[t+10],Mb:a()[t+11],Bc:a()[t+12],Cc:a()[t+13]},!(e=Xe(e))||t.Mb?0:function(e,t){e.Cb||(e.Cb=e.getContext,e.getContext=function(t,n){return\\\"webgl\\\"==t==(n=e.Cb(t,n))instanceof WebGLRenderingContext?n:null});var n=e.getContext(\\\"webgl\\\",t);return n?function(e,t){var n=bt(8);a()[n+4>>2]=_t();var r={wc:n,attributes:t,version:t.Vb,ob:e};return e.canvas&&(e.canvas.pb=r),(void 0===t.Bb||t.Bb)&&function(e){if(e||(e=void 0),!e.Qb){e.Qb=!0;var t=e.ob;!function(e){var t=e.getExtension(\\\"ANGLE_instanced_arrays\\\");t&&(e.vertexAttribDivisor=function(e,n){t.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,r,a){t.drawArraysInstancedANGLE(e,n,r,a)},e.drawElementsInstanced=function(e,n,r,a,i){t.drawElementsInstancedANGLE(e,n,r,a,i)})}(t),function(e){var t=e.getExtension(\\\"OES_vertex_array_object\\\");t&&(e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)})}(t),function(e){var t=e.getExtension(\\\"WEBGL_draw_buffers\\\");t&&(e.drawBuffers=function(e,n){t.drawBuffersWEBGL(e,n)})}(t),t.qc=t.getExtension(\\\"EXT_disjoint_timer_query\\\"),t.zc=t.getExtension(\\\"WEBGL_multi_draw\\\"),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes(\\\"lose_context\\\")||e.includes(\\\"debug\\\")||t.getExtension(e)}))}}(r),n}(n,t):0}(e,t)},I:tt,J:nt,m:rt,H:at,t:it,B:ot,p:ut,R:function(e){var t=Date.now();return a()[e>>2]=t/1e3|0,a()[e+4>>2]=t%1e3*1e3|0,0},ha:function e(t,n){return t=new Date(1e3*a()[t>>2]),a()[n>>2]=t.getUTCSeconds(),a()[n+4>>2]=t.getUTCMinutes(),a()[n+8>>2]=t.getUTCHours(),a()[n+12>>2]=t.getUTCDate(),a()[n+16>>2]=t.getUTCMonth(),a()[n+20>>2]=t.getUTCFullYear()-1900,a()[n+24>>2]=t.getUTCDay(),a()[n+36>>2]=0,a()[n+32>>2]=0,t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[n+28>>2]=t,e.Ab||(e.Ab=J(\\\"GMT\\\")),a()[n+40>>2]=e.Ab,n},_:function(){ye.Rb()},r:function(e,t){st(),e=new Date(1e3*a()[e>>2]),a()[t>>2]=e.getSeconds(),a()[t+4>>2]=e.getMinutes(),a()[t+8>>2]=e.getHours(),a()[t+12>>2]=e.getDate(),a()[t+16>>2]=e.getMonth(),a()[t+20>>2]=e.getFullYear()-1900,a()[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;return a()[t+28>>2]=r,a()[t+36>>2]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2]=e,e=a()[Pt()+(e?4:0)>>2],a()[t+40>>2]=e,t},a:R||u.wasmMemory,y:function(e){st();var t=new Date(a()[e+20>>2]+1900,a()[e+16>>2],a()[e+12>>2],a()[e+8>>2],a()[e+4>>2],a()[e>>2],0),n=a()[e+32>>2],r=t.getTimezoneOffset(),i=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),s=Math.min(u,o);return 0>n?a()[e+32>>2]=Number(o!=u&&s==r):0<n!=(s==r)&&(o=Math.max(u,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-r))),a()[e+24>>2]=t.getDay(),n=(t.getTime()-i.getTime())/864e5|0,a()[e+28>>2]=n,a()[e>>2]=t.getSeconds(),a()[e+4>>2]=t.getMinutes(),a()[e+8>>2]=t.getHours(),a()[e+12>>2]=t.getDate(),a()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},fa:mt,g:function(e,t,n,r){return mt(e,t,n,r)}};!function(){function e(e,t){u.asm=e.exports,K=u.asm.Ca,ee.unshift(u.asm.ia),ye.zb.push(u.asm.Ha),C=t,O||(ue--,u.monitorRunDependencies&&u.monitorRunDependencies(ue),0==ue&&(null!==se&&(clearInterval(se),se=null),ce&&(e=ce,ce=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(v||_)){if(\\\"function\\\"==typeof fetch&&!oe.startsWith(\\\"file://\\\"))return fetch(oe,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+oe+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return pe()}));if(h)return new Promise((function(e,t){h(oe,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return pe()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){x(\\\"failed to asynchronously prepare wasm: \\\"+e),le(e)}))}var r={a:gt};if(O||(ue++,u.monitorRunDependencies&&u.monitorRunDependencies(ue)),u.instantiateWasm)try{return u.instantiateWasm(r,e)}catch(e){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||fe()||oe.startsWith(\\\"file://\\\")||\\\"function\\\"!=typeof fetch?n(t):fetch(oe,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return x(\\\"wasm streaming compile failed: \\\"+e),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.ia).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.ja).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.ka).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.la).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm.ma).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.na).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.oa).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.pa).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.qa).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.ra).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.sa).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.ta).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.ua).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.va).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.wa).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.xa).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.ya).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.za).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.Aa).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.Ba).apply(null,arguments)};var bt=u._malloc=function(){return(bt=u._malloc=u.asm.Da).apply(null,arguments)},yt=u.___errno_location=function(){return(yt=u.___errno_location=u.asm.Ea).apply(null,arguments)},vt=u._free=function(){return(vt=u._free=u.asm.Fa).apply(null,arguments)},_t=u._pthread_self=function(){return(_t=u._pthread_self=u.asm.Ga).apply(null,arguments)};u._emscripten_tls_init=function(){return(u._emscripten_tls_init=u.asm.Ha).apply(null,arguments)},u._emscripten_current_thread_process_queued_calls=function(){return(u._emscripten_current_thread_process_queued_calls=u.asm.Ia).apply(null,arguments)};var wt,Ot=u._emscripten_register_main_browser_thread_id=function(){return(Ot=u._emscripten_register_main_browser_thread_id=u.asm.Ja).apply(null,arguments)},At=u._emscripten_main_browser_thread_id=function(){return(At=u._emscripten_main_browser_thread_id=u.asm.Ka).apply(null,arguments)},Et=u._emscripten_sync_run_in_main_thread_4=function(){return(Et=u._emscripten_sync_run_in_main_thread_4=u.asm.La).apply(null,arguments)},St=u._emscripten_main_thread_process_queued_calls=function(){return(St=u._emscripten_main_thread_process_queued_calls=u.asm.Ma).apply(null,arguments)},Tt=u._emscripten_run_in_main_runtime_thread_js=function(){return(Tt=u._emscripten_run_in_main_runtime_thread_js=u.asm.Na).apply(null,arguments)},Mt=u.__emscripten_call_on_thread=function(){return(Mt=u.__emscripten_call_on_thread=u.asm.Oa).apply(null,arguments)},kt=u._pthread_testcancel=function(){return(kt=u._pthread_testcancel=u.asm.Pa).apply(null,arguments)},xt=u._pthread_exit=function(){return(xt=u._pthread_exit=u.asm.Qa).apply(null,arguments)},Dt=u.__emscripten_thread_init=function(){return(Dt=u.__emscripten_thread_init=u.asm.Ra).apply(null,arguments)},Rt=u._emscripten_get_global_libc=function(){return(Rt=u._emscripten_get_global_libc=u.asm.Sa).apply(null,arguments)},Ct=u.___pthread_tsd_run_dtors=function(){return(Ct=u.___pthread_tsd_run_dtors=u.asm.Ta).apply(null,arguments)},Pt=u.__get_tzname=function(){return(Pt=u.__get_tzname=u.asm.Ua).apply(null,arguments)},It=u.__get_daylight=function(){return(It=u.__get_daylight=u.asm.Va).apply(null,arguments)},Ft=u.__get_timezone=function(){return(Ft=u.__get_timezone=u.asm.Wa).apply(null,arguments)},Ut=u.stackSave=function(){return(Ut=u.stackSave=u.asm.Xa).apply(null,arguments)},jt=u.stackRestore=function(){return(jt=u.stackRestore=u.asm.Ya).apply(null,arguments)},Lt=u.stackAlloc=function(){return(Lt=u.stackAlloc=u.asm.Za).apply(null,arguments)},Wt=u._emscripten_stack_set_limits=function(){return(Wt=u._emscripten_stack_set_limits=u.asm._a).apply(null,arguments)},Ht=u._memalign=function(){return(Ht=u._memalign=u.asm.$a).apply(null,arguments)},Yt=u.__emscripten_allow_main_runtime_queued_calls=688928,zt=u.__emscripten_main_thread_futex=694164;function Bt(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function Gt(){function e(){if(!wt&&(wt=!0,u.calledRun=!0,!I)&&(O||me(ee),s(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\\\"function\\\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var e=u.postRun.shift();ne.unshift(e)}me(ne)}}if(!(0<ue))if(O)s(u),O||me(ee),postMessage({cmd:\\\"loaded\\\"});else{if(!O){if(u.preRun)for(\\\"function\\\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)ie();me($)}0<ue||(u.setStatus?(u.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){u.setStatus(\\\"\\\")}),1),e()}),1)):e())}}function Nt(e){if(P=e,O)throw postMessage({cmd:\\\"exitProcess\\\",returnCode:e}),new Bt(e);ae()||(ye.Gb(),O||(me(te),\\\"undefined\\\"!=typeof _fflush&&_fflush(0),Te[1].length&&Me(1,10),Te[2].length&&Me(2,10))),P=e,ae()||(ye.Gb(),u.onExit&&u.onExit(e),I=!0),d(e,new Bt(e))}if(u.UTF8ToString=N,u.stringToUTF8=V,u.lengthBytesUTF8=X,u.keepRuntimeAlive=ae,u.PThread=ye,u.stackSave=Ut,u.stackRestore=jt,u.stackAlloc=Lt,u.PThread=ye,u.wasmMemory=R,u.ExitStatus=Bt,ce=function e(){wt||Gt(),wt||(ce=e)},u.run=Gt,u.preInit)for(\\\"function\\\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return O&&(D=!1,ye.Sb()),Gt(),e.ready});e.exports=r},118:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={};if(\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node){var a=require(\\\"worker_threads\\\"),t=a.parentPort;t.on(\\\"message\\\",(function(e){onmessage({data:e})}));var r=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:a.Worker,importScripts:function(e){(0,eval)(r.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=function(a,t){var r=new WebAssembly.Instance(e.wasmModule,a);return t(r),e.wasmModule=null,r.exports},self.onmessage=function(a){try{if(\\\"load\\\"===a.data.cmd){if(e.wasmModule=a.data.wasmModule,e.wasmMemory=a.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof a.data.urlOrBlob)importScripts(a.data.urlOrBlob);else{var t=URL.createObjectURL(a.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e).then((function(a){e=a}))}else if(\\\"objectTransfer\\\"===a.data.cmd)e.PThread.receiveObjectTransfer(a.data);else if(\\\"run\\\"===a.data.cmd){e.__performance_now_clock_drift=performance.now()-a.data.time,e.__emscripten_thread_init(a.data.threadInfoStruct,0,0);var r=a.data.stackBase,o=a.data.stackBase+a.data.stackSize;e.establishStackSpace(o,r),e.PThread.receiveObjectTransfer(a.data),e.PThread.threadInit();try{var n=e.invokeEntryPoint(a.data.start_routine,a.data.arg);e.keepRuntimeAlive()?e.PThread.setExitStatus(n):e.PThread.threadExit(n)}catch(a){if(\\\"Canceled!\\\"===a)e.PThread.threadCancel();else if(\\\"unwind\\\"!=a){if(!(a instanceof e.ExitStatus))throw e.PThread.threadExit(-2),a;e.keepRuntimeAlive()||e.PThread.threadExit(a.status)}}}else\\\"cancel\\\"===a.data.cmd?e._pthread_self()&&e.PThread.threadCancel():\\\"setimmediate\\\"===a.data.target||(\\\"processThreadQueue\\\"===a.data.cmd?e._pthread_self()&&e._emscripten_current_thread_process_queued_calls():(s(\\\"worker.js received unknown command \\\"+a.data.cmd),s(a.data)))}catch(e){throw s(\\\"worker.js onmessage() captured an uncaught exception: \\\"+e),e&&e.stack&&s(e.stack),e}};\\\\n'},932:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var i,o={};for(i in t)t.hasOwnProperty(i)&&(o[i]=t[i]);var u,s,c,l,f,p=\\\"./this.program\\\",d=\\\"object\\\"==typeof window,m=\\\"function\\\"==typeof importScripts,h=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,g=\\\"\\\";h?(g=m?n(908).dirname(g)+\\\"/\\\":\\\"//\\\",u=function(e,t){return l||(l=n(384)),f||(f=n(908)),e=f.normalize(e),l.readFileSync(e,t?null:\\\"utf8\\\")},c=function(e){return(e=u(e,!0)).buffer||(e=new Uint8Array(e)),e.buffer||B(\\\"Assertion failed: undefined\\\"),e},s=function(e,t,r){l||(l=n(384)),f||(f=n(908)),e=f.normalize(e),l.readFile(e,(function(e,n){e?r(e):t(n.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",B),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||m)&&(m?g=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(g=document.currentScript.src),_scriptDir&&(g=_scriptDir),g=0!==g.indexOf(\\\"blob:\\\")?g.substr(0,g.lastIndexOf(\\\"/\\\")+1):\\\"\\\",u=function(e){var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},m&&(c=function(e){var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),s=function(e,t,n){var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var b,y=t.print||console.log.bind(console),v=t.printErr||console.warn.bind(console);for(i in o)o.hasOwnProperty(i)&&(t[i]=o[i]);o=null,t.thisProgram&&(p=t.thisProgram),t.wasmBinary&&(b=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&B(\\\"no native wasm support detected\\\");var _,w,O,A,E,S=!1,T=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function M(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&T)return T.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function k(e,t){return e?M(A,e,t):\\\"\\\"}function x(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++]=o}else{if(2047>=o){if(n+1>=r)break;t[n++]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++]=224|o>>12}else{if(n+3>=r)break;t[n++]=240|o>>18,t[n++]=128|o>>12&63}t[n++]=128|o>>6&63}t[n++]=128|63&o}}return t[n]=0,n-a}function D(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function R(e){var t=D(e)+1,n=pe(t);return n&&x(e,O,n,t),n}function C(){var e=_.buffer;w=e,t.HEAP8=O=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=E=new Int32Array(e),t.HEAPU8=A=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var P,I=[],F=[],U=[],j=[];function L(){var e=t.preRun.shift();I.unshift(e)}var W,H=0,Y=null,z=null;function B(e){throw t.onAbort&&t.onAbort(e),v(e),S=!0,e=new WebAssembly.RuntimeError(\\\"abort(\\\"+e+\\\"). Build with -s ASSERTIONS=1 for more info.\\\"),a(e),e}function G(){return W.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(t.preloadedImages={},t.preloadedAudios={},W=\\\"ort-wasm.wasm\\\",!G()){var N=W;W=t.locateFile?t.locateFile(N,g):g+N}function q(){var e=W;try{if(e==W&&b)return new Uint8Array(b);if(c)return c(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){B(e)}}function V(e){for(;0<e.length;){var n=e.shift();if(\\\"function\\\"==typeof n)n(t);else{var r=n.Ea;\\\"number\\\"==typeof r?void 0===n.xa?P.get(r)():P.get(r)(n.xa):r(void 0===n.xa?null:n.xa)}}}function X(e){this.ya=e-16,this.Na=function(e){E[this.ya+4>>2]=e},this.Ka=function(e){E[this.ya+8>>2]=e},this.La=function(){E[this.ya>>2]=0},this.Ja=function(){O[this.ya+12>>0]=0},this.Ma=function(){O[this.ya+13>>0]=0},this.Ga=function(e,t){this.Na(e),this.Ka(t),this.La(),this.Ja(),this.Ma()}}var J,Q={},Z=[null,[],[]],K={};J=h?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:function(){return performance.now()};var $,ee,te={};function ne(){if(!$){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in te)void 0===te[e]?delete t[e]:t[e]=te[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);$=n}return $}function re(){function e(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(!ee){ee=!0;var t=(new Date).getFullYear(),n=new Date(t,0,1),r=new Date(t,6,1);t=n.getTimezoneOffset();var a=r.getTimezoneOffset(),i=Math.max(t,a);E[be()>>2]=60*i,E[ge()>>2]=Number(t!=a),n=e(n),r=e(r),n=R(n),r=R(r),a<t?(E[he()>>2]=n,E[he()+4>>2]=r):(E[he()>>2]=r,E[he()+4>>2]=n)}}function ae(e){return 0==e%4&&(0!=e%100||0==e%400)}function ie(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var oe=[31,29,31,30,31,30,31,31,30,31,30,31],ue=[31,28,31,30,31,30,31,31,30,31,30,31];function se(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(ae(e.getFullYear())?oe:ue)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function ce(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function i(e,t){return a(e,t,\\\"0\\\")}function o(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){e=se(new Date(e.va+1900,0,1),e.Ca);var t=new Date(e.getFullYear()+1,0,4),n=u(new Date(e.getFullYear(),0,4));return t=u(t),0>=o(n,e)?0>=o(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=E[r+40>>2];for(var l in r={Qa:E[r>>2],Pa:E[r+4>>2],Aa:E[r+8>>2],za:E[r+12>>2],wa:E[r+16>>2],va:E[r+20>>2],Ba:E[r+24>>2],Ca:E[r+28>>2],Ya:E[r+32>>2],Oa:E[r+36>>2],Ra:c?k(c):\\\"\\\"},n=k(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.Ba].substring(0,3)},\\\"%A\\\":function(e){return f[e.Ba]},\\\"%b\\\":function(e){return p[e.wa].substring(0,3)},\\\"%B\\\":function(e){return p[e.wa]},\\\"%C\\\":function(e){return i((e.va+1900)/100|0,2)},\\\"%d\\\":function(e){return i(e.za,2)},\\\"%e\\\":function(e){return a(e.za,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return i(e.Aa,2)},\\\"%I\\\":function(e){return 0==(e=e.Aa)?e=12:12<e&&(e-=12),i(e,2)},\\\"%j\\\":function(e){return i(e.za+ie(ae(e.va+1900)?oe:ue,e.wa-1),3)},\\\"%m\\\":function(e){return i(e.wa+1,2)},\\\"%M\\\":function(e){return i(e.Pa,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Aa&&12>e.Aa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return i(e.Qa,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ba||7},\\\"%U\\\":function(e){var t=new Date(e.va+1900,0,1),n=0===t.getDay()?t:se(t,7-t.getDay());return 0>o(n,e=new Date(e.va+1900,e.wa,e.za))?i(Math.ceil((31-n.getDate()+(ie(ae(e.getFullYear())?oe:ue,e.getMonth()-1)-31)+e.getDate())/7),2):0===o(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%V\\\":function(e){var t=new Date(e.va+1901,0,4),n=u(new Date(e.va+1900,0,4));t=u(t);var r=se(new Date(e.va+1900,0,1),e.Ca);return 0>o(r,n)?\\\"53\\\":0>=o(t,r)?\\\"01\\\":i(Math.ceil((n.getFullYear()<e.va+1900?e.Ca+32-n.getDate():e.Ca+1-n.getDate())/7),2)},\\\"%w\\\":function(e){return e.Ba},\\\"%W\\\":function(e){var t=new Date(e.va,0,1),n=1===t.getDay()?t:se(t,0===t.getDay()?1:7-t.getDay()+1);return 0>o(n,e=new Date(e.va+1900,e.wa,e.za))?i(Math.ceil((31-n.getDate()+(ie(ae(e.getFullYear())?oe:ue,e.getMonth()-1)-31)+e.getDate())/7),2):0===o(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%y\\\":function(e){return(e.va+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.va+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Oa);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Ra},\\\"%%\\\":function(){return\\\"%\\\"}})n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(D(e)+1);return x(e,t,0,t.length),t}(n),l.length>t?0:(O.set(l,e),l.length-1)}var le={a:function(e){return pe(e+16)+16},c:function(e,t){U.unshift({Ea:e,xa:t})},d:function(e,t){U.unshift({Ea:e,xa:t})},b:function(e,t,n){throw new X(e).Ga(t,n),e},D:function(e,t){return e=k(e),K.Sa(e,t)},m:function(){return 0},I:function(){},L:function(){},o:function(){return 42},x:function(){return 0},H:function(){},G:function(e,t){return e=k(e),K.Ta(e,t)},K:function(e,t,n,r,a,i){if(i<<=12,0!=(16&r)&&0!=e%65536)t=-28;else if(0!=(32&r)){e=65536*Math.ceil(t/65536);var o=we(65536,e);o?(A.fill(0,o,o+e),e=o):e=0,e?(Q[e]={Ia:e,Ha:t,Fa:!0,fd:a,Xa:n,flags:r,offset:i},t=e):t=-48}else t=-52;return t},J:function(e,t){var n=Q[e];return 0!==t&&n?(t===n.Ha&&(Q[e]=null,n.Fa&&me(n.Ia)),e=0):e=-28,e},j:function(){},C:function(e,t,n){return e=k(e),K.Ua(e,t,n)},E:function(){},r:function(){},F:function(){},h:function(){B()},p:function(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return E[de()>>2]=28,-1;e=J()}return E[t>>2]=e/1e3|0,E[t+4>>2]=e%1e3*1e6|0,0},s:function(e,t){return e-t},P:function(){B(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},g:function(){B(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},Q:function(){B(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},O:function(){B(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},M:function(){return 2147483648},v:function(e,t,n){A.copyWithin(e,t,t+n)},i:function(e){var t=A.length;if(2147483648<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296),0<(r=Math.max(e,r))%65536&&(r+=65536-r%65536);e:{try{_.grow(Math.min(2147483648,r)-w.byteLength+65535>>>16),C();var a=1;break e}catch(e){}a=void 0}if(a)return!0}return!1},B:function(e){for(var t=J();J()-t<e;);},z:function(e,t){var n=0;return ne().forEach((function(r,a){var i=t+n;for(a=E[e+4*a>>2]=i,i=0;i<r.length;++i)O[a++>>0]=r.charCodeAt(i);O[a>>0]=0,n+=r.length+1})),0},A:function(e,t){var n=ne();E[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),E[t>>2]=r,0},f:function(){return 0},y:function(e,t){return e=1==e||2==e?2:B(),O[t>>0]=e,0},n:function(e,t,n,r){return e=K.Wa(e),t=K.Va(e,t,n),E[r>>2]=t,0},u:function(){},q:function(e,t,n,r){for(var a=0,i=0;i<n;i++){for(var o=E[t+8*i>>2],u=E[t+(8*i+4)>>2],s=0;s<u;s++){var c=A[o+s],l=Z[e];0===c||10===c?((1===e?y:v)(M(l,0)),l.length=0):l.push(c)}a+=u}return E[r>>2]=a,0},w:function(e){var t=Date.now();return E[e>>2]=t/1e3|0,E[e+4>>2]=t%1e3*1e3|0,0},t:function e(t,n){return t=new Date(1e3*E[t>>2]),E[n>>2]=t.getUTCSeconds(),E[n+4>>2]=t.getUTCMinutes(),E[n+8>>2]=t.getUTCHours(),E[n+12>>2]=t.getUTCDate(),E[n+16>>2]=t.getUTCMonth(),E[n+20>>2]=t.getUTCFullYear()-1900,E[n+24>>2]=t.getUTCDay(),E[n+36>>2]=0,E[n+32>>2]=0,E[n+28>>2]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,e.Da||(e.Da=R(\\\"GMT\\\")),E[n+40>>2]=e.Da,n},l:function(e,t){re(),e=new Date(1e3*E[e>>2]),E[t>>2]=e.getSeconds(),E[t+4>>2]=e.getMinutes(),E[t+8>>2]=e.getHours(),E[t+12>>2]=e.getDate(),E[t+16>>2]=e.getMonth(),E[t+20>>2]=e.getFullYear()-1900,E[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1);E[t+28>>2]=(e.getTime()-n.getTime())/864e5|0,E[t+36>>2]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();return e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),E[t+32>>2]=e,e=E[he()+(e?4:0)>>2],E[t+40>>2]=e,t},k:function(e){re();var t=new Date(E[e+20>>2]+1900,E[e+16>>2],E[e+12>>2],E[e+8>>2],E[e+4>>2],E[e>>2],0),n=E[e+32>>2],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),u=Math.min(o,i);return 0>n?E[e+32>>2]=Number(i!=o&&u==r):0<n!=(u==r)&&(i=Math.max(o,i),t.setTime(t.getTime()+6e4*((0<n?u:i)-r))),E[e+24>>2]=t.getDay(),E[e+28>>2]=(t.getTime()-a.getTime())/864e5|0,E[e>>2]=t.getSeconds(),E[e+4>>2]=t.getMinutes(),E[e+8>>2]=t.getHours(),E[e+12>>2]=t.getDate(),E[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},N:ce,e:function(e,t,n,r){return ce(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,_=t.asm.R,C(),P=t.asm.ua,F.unshift(t.asm.S),H--,t.monitorRunDependencies&&t.monitorRunDependencies(H),0==H&&(null!==Y&&(clearInterval(Y),Y=null),z&&(e=z,z=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!b&&(d||m)){if(\\\"function\\\"==typeof fetch&&!W.startsWith(\\\"file://\\\"))return fetch(W,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+W+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return q()}));if(s)return new Promise((function(e,t){s(W,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return q()}))}().then((function(e){return WebAssembly.instantiate(e,i)})).then(e,(function(e){v(\\\"failed to asynchronously prepare wasm: \\\"+e),B(e)}))}var i={a:le};if(H++,t.monitorRunDependencies&&t.monitorRunDependencies(H),t.instantiateWasm)try{return t.instantiateWasm(i,e)}catch(e){return v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(b||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||G()||W.startsWith(\\\"file://\\\")||\\\"function\\\"!=typeof fetch?r(n):fetch(W,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,i).then(n,(function(e){return v(\\\"wasm streaming compile failed: \\\"+e),v(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.S).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.T).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.U).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.V).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.W).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.X).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.Y).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.Z).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm._).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.$).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.aa).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.ba).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.ca).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.da).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.ea).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.fa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.ga).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ha).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.ia).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ja).apply(null,arguments)};var fe,pe=t._malloc=function(){return(pe=t._malloc=t.asm.ka).apply(null,arguments)},de=t.___errno_location=function(){return(de=t.___errno_location=t.asm.la).apply(null,arguments)},me=t._free=function(){return(me=t._free=t.asm.ma).apply(null,arguments)},he=t.__get_tzname=function(){return(he=t.__get_tzname=t.asm.na).apply(null,arguments)},ge=t.__get_daylight=function(){return(ge=t.__get_daylight=t.asm.oa).apply(null,arguments)},be=t.__get_timezone=function(){return(be=t.__get_timezone=t.asm.pa).apply(null,arguments)},ye=t.stackSave=function(){return(ye=t.stackSave=t.asm.qa).apply(null,arguments)},ve=t.stackRestore=function(){return(ve=t.stackRestore=t.asm.ra).apply(null,arguments)},_e=t.stackAlloc=function(){return(_e=t.stackAlloc=t.asm.sa).apply(null,arguments)},we=t._memalign=function(){return(we=t._memalign=t.asm.ta).apply(null,arguments)};function Oe(){function e(){if(!fe&&(fe=!0,t.calledRun=!0,!S)){if(V(F),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();j.unshift(e)}V(j)}}if(!(0<H)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)L();V(I),0<H||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.UTF8ToString=k,t.stringToUTF8=function(e,t,n){return x(e,A,t,n)},t.lengthBytesUTF8=D,t.stackSave=ye,t.stackRestore=ve,t.stackAlloc=_e,z=function e(){fe||Oe(),fe||(z=e)},t.run=Oe,t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return Oe(),e.ready});e.exports=r},967:function(e,t){\\\"use strict\\\";var n=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=function(e,r,a,i){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var o=n(e,2),u=o[0],s=o[1],c=r?r+u:u;if(\\\"object\\\"==typeof s)t.iterateExtraOptions(s,c+\\\".\\\",a,i);else if(\\\"string\\\"==typeof s||\\\"number\\\"==typeof s)i(c,s.toString());else{if(\\\"boolean\\\"!=typeof s)throw new Error(\\\"Can't handle extra config type: \\\"+typeof s);i(c,s?\\\"1\\\":\\\"0\\\")}}))}},586:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;var r=n(967),a=n(983),i=n(361);t.setRunOptions=function(e){var t=i.getInstance(),n=0,o=[],u=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\"+e.logSeverityLevel);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\"+e.logVerbosityLevel);void 0===(null==e?void 0:e.terminate)&&(u.terminate=!1);var s=0;if(void 0!==(null==e?void 0:e.tag)&&(s=a.allocWasmString(e.tag,o)),0===(n=t._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,s)))throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,(function(e,r){var i=a.allocWasmString(e,o),u=a.allocWasmString(r,o);if(0!==t._OrtAddRunConfigEntry(n,i,u))throw new Error(\\\"Can't set a run config entry: \\\"+e+\\\" - \\\"+r)})),[n,o]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),o.forEach(t._free),e}}},919:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;var r=n(967),a=n(983),i=n(361);t.setSessionOptions=function(e){var t=i.getInstance(),n=0,o=[],u=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")}(u);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(u.graphOptimizationLevel=\\\"all\\\");var s=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\"+e)}}(u.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(u.executionMode=\\\"sequential\\\");var c=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\"+e)}}(u.executionMode),l=0;if(void 0!==(null==e?void 0:e.logId)&&(l=a.allocWasmString(e.logId,o)),void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\"+e.logSeverityLevel);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\"+e.logVerbosityLevel);if(void 0===(null==e?void 0:e.enableProfiling)&&(u.enableProfiling=!1),0===(n=t._OrtCreateSessionOptions(s,!!u.enableCpuMemArena,!!u.enableMemPattern,c,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel)))throw new Error(\\\"Can't create session options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,(function(e,r){var i=a.allocWasmString(e,o),u=a.allocWasmString(r,o);if(0!==t._OrtAddSessionConfigEntry(n,i,u))throw new Error(\\\"Can't set a session config entry: \\\"+e+\\\" - \\\"+r)})),[n,o]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),o.forEach(t._free),e}}},983:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;var r=n(361);t.allocWasmString=function(e,t){var n=r.getInstance(),a=n.lengthBytesUTF8(e)+1,i=n._malloc(a);return n.stringToUTF8(e,i,a),t.push(i),i}},349:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},a=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.initOrt=void 0;var i=n(586),o=n(919),u=n(983),s=n(361);t.initOrt=function(e,t){var n=s.getInstance()._OrtInit(e,t);if(0!==n)throw new Error(\\\"Can't initialize onnxruntime. error code = \\\"+n)};var c=new Map;t.createSession=function(e,t){var n,a=s.getInstance(),i=a._malloc(e.byteLength),u=0,l=0,f=[];try{if(l=(n=r(o.setSessionOptions(t),2))[0],f=n[1],a.HEAPU8.set(e,i),0===(u=a._OrtCreateSession(i,e.byteLength,l)))throw new Error(\\\"Can't create a session\\\")}finally{a._free(i),a._OrtReleaseSessionOptions(l),f.forEach(a._free)}for(var p=a._OrtGetInputCount(u),d=a._OrtGetOutputCount(u),m=[],h=[],g=[],b=[],y=0;y<p;y++){var v=a._OrtGetInputName(u,y);if(0===v)throw new Error(\\\"Can't get an input name\\\");h.push(v),m.push(a.UTF8ToString(v))}for(y=0;y<d;y++){var _=a._OrtGetOutputName(u,y);if(0===_)throw new Error(\\\"Can't get an output name\\\");b.push(_),g.push(a.UTF8ToString(_))}return c.set(u,[u,h,b]),[u,m,g]},t.releaseSession=function(e){var t=s.getInstance(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=n[1],i=n[2];a.forEach(t._OrtFree),i.forEach(t._OrtFree),t._OrtReleaseSession(r),c.delete(e)};var l=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:case 7:return\\\"int32\\\";case 12:case 13:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";default:throw new Error(\\\"unsupported data type: \\\"+e)}},f=function(e){switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\"+e)}};t.run=function(e,t,n,a,o){var p,d=s.getInstance(),m=c.get(e);if(!m)throw new Error(\\\"invalid session id\\\");var h=m[0],g=m[1],b=m[2],y=t.length,v=a.length,_=0,w=[],O=[],A=[];try{_=(p=r(i.setRunOptions(o),2))[0],w=p[1];for(var E=function(e){var t=n[e][0],r=n[e][1],a=n[e][2],i=void 0,o=void 0;if(Array.isArray(a)){o=4*a.length,i=d._malloc(o),A.push(i);for(var s=i/4,c=0;c<a.length;c++){if(\\\"string\\\"!=typeof a[c])throw new TypeError(\\\"tensor data at index \\\"+c+\\\" is not a string\\\");d.HEAPU32[s++]=u.allocWasmString(a[c],A)}}else o=a.byteLength,i=d._malloc(o),A.push(i),d.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,o),i);var l=d.stackSave(),f=d.stackAlloc(4*r.length);try{var p=f/4;r.forEach((function(e){return d.HEAP32[p++]=e}));var m=d._OrtCreateTensor(function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\"+e)}}(t),i,o,f,r.length);if(0===m)throw new Error(\\\"Can't create a tensor\\\");O.push(m)}finally{d.stackRestore(l)}},S=0;S<y;S++)E(S);var T=d.stackSave(),M=d.stackAlloc(4*y),k=d.stackAlloc(4*y),x=d.stackAlloc(4*v),D=d.stackAlloc(4*v);try{var R=M/4,C=k/4,P=x/4,I=D/4;for(S=0;S<y;S++)d.HEAPU32[R++]=O[S],d.HEAPU32[C++]=g[t[S]];for(S=0;S<v;S++)d.HEAPU32[P++]=0,d.HEAPU32[I++]=b[a[S]];var F=d._OrtRun(h,k,M,y,D,v,x,_),U=[];if(0===F)for(S=0;S<v;S++){var j=d.HEAPU32[x/4+S],L=d.stackSave(),W=d.stackAlloc(16),H=void 0,Y=0;try{if(0!==(F=d._OrtGetTensorData(j,W,W+4,W+8,W+12)))throw new Error(\\\"Can't get a tensor data. error code = \\\"+F);var z=W/4,B=d.HEAPU32[z++];Y=d.HEAPU32[z++];for(var G=d.HEAPU32[z++],N=d.HEAPU32[z++],q=[],V=0;V<N;V++)q.push(d.HEAPU32[G/4+V]);d._OrtFree(G);var X=0===q.length?1:q.reduce((function(e,t){return e*t}));if(\\\"string\\\"===(H=l(B))){for(var J=[],Q=Y/4,Z=0;Z<X;Z++){var K=d.HEAPU32[Q++],$=Z===X-1?void 0:d.HEAPU32[Q]-K;J.push(d.UTF8ToString(K,$))}U.push([H,q,J])}else{var ee=new(f(H))(X);new Uint8Array(ee.buffer,ee.byteOffset,ee.byteLength).set(d.HEAPU8.subarray(Y,Y+ee.byteLength)),U.push([H,q,ee])}}finally{d.stackRestore(L),\\\"string\\\"===H&&Y&&d._free(Y),d._OrtReleaseTensor(j)}}if(0===F)return U;throw new Error(\\\"failed to call OrtRun(). error code = \\\"+F+\\\".\\\")}finally{d.stackRestore(T)}}finally{O.forEach(d._OrtReleaseTensor),A.forEach(d._free),d._OrtReleaseRunOptions(_),w.forEach(d._free)}},t.endProfiling=function(e){var t=s.getInstance(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=function(e){var t,n,r=[];try{for(var i=a(e),o=i.next();!o.done;o=i.next()){var u=o.value[2];!Array.isArray(u)&&u.buffer&&r.push(u.buffer)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,u)}s((r=r.apply(e,t||[])).next())}))},u=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},\\\"function\\\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var c,l=i(n(449)),f=s(n(932)),p=n(474),d=!1,m=!1,h=!1,g=function(e,t){return t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"};t.initializeWebAssembly=function(e){return o(void 0,void 0,void 0,(function(){var t,r,a,i,o,s,b,y,v,_,w;return u(this,(function(u){switch(u.label){case 0:if(d)return[2,Promise.resolve()];if(m)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return m=!0,t=e.initTimeout,r=e.numThreads,a=e.simd,i=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),o=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),s=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,b=g(!1,i),y=g(o,i),v=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[y]:void 0,_=!1,w=[],t>0&&w.push(new Promise((function(e){setTimeout((function(){_=!0,e()}),t)}))),w.push(new Promise((function(e,t){var r=i?p:f.default,a={locateFile:function(e,t){return i&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(118)],{type:\\\"text/javascript\\\"})):e===b?null!=v?v:(null!=s?s:t)+y:t+e}};if(i)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=l.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{var o=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\"+r.toString()+\\\"})();\\\";a.mainScriptUrlOrBlob=new Blob([o],{type:\\\"text/javascript\\\"})}r(a).then((function(t){m=!1,d=!0,c=t,e()}),(function(e){m=!1,h=!0,t(e)}))}))),[4,Promise.race(w)];case 1:if(u.sent(),_)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\"+t+\\\"ms\\\");return[2]}}))}))},t.getInstance=function(){if(d&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=function(){var e;!d||m||h||(m=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,m=!1,d=!1,h=!0)}},384:function(){},993:function(){},908:function(){},953:function(){},925:function(){},449:function(){}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),function(){\\\"use strict\\\";var e=n(349),t=n(361);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":t.initializeWebAssembly(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}));break;case\\\"init-ort\\\":try{var r=n.data.in,a=r.numThreads,i=r.loggingLevel;e.initOrt(a,i),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create\\\":try{var o=n.data.in,u=o.model,s=o.options,c=e.createSession(u,s);postMessage({type:\\\"create\\\",out:c})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var l=n.data.in;e.releaseSession(l),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var f=n.data.in,p=f.sessionId,d=f.inputIndices,m=f.inputs,h=f.outputIndices,g=(s=f.options,e.run(p,d,m,h,s));postMessage({type:\\\"run\\\",out:g},e.extractTransferableBuffers(g))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{l=n.data.in,e.endProfiling(l),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","module.exports = __WEBPACK_EXTERNAL_MODULE__2174__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}