{"version":3,"sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/./node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","length","splice","push","env","constructor","this","wasm","webgl","logLevelInternal","logLevel","value","indexOf","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","set","Tensor","arg0","arg1","arg2","type","data","dims","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","reshape","InferenceSession","handler","async","feeds","fetches","options","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","static","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","buffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","initializing","aborted","e","err","join","resolveBackend","startProfiling","endProfiling","_scriptDir","document","currentScript","src","t","S","Y","Q","P","n","W","r","q","a","U","B","o","u","s","ready","Promise","c","f","l","p","d","m","b","h","g","_","window","y","importScripts","w","process","versions","node","ENVIRONMENT_IS_PTHREAD","A","T","locateFile","O","__dirname","normalize","readFileSync","F","readFile","argv","replace","slice","on","Gt","ce","re","exitCode","exit","inspect","console","error","Worker","location","href","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","k","E","x","print","log","bind","M","printErr","warn","thisProgram","quit","wasmBinary","D","noExitRuntime","WebAssembly","C","R","I","j","TextDecoder","decode","G","H","subarray","String","fromCharCode","z","L","charCodeAt","N","V","X","ht","HEAP8","HEAP16","HEAP32","HEAPU8","HEAPU16","HEAPU32","HEAPF32","HEAPF64","J","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Z","$","K","ee","te","ne","ae","preRun","shift","unshift","ie","oe","ue","se","onAbort","RuntimeError","fe","startsWith","le","preloadedImages","preloadedAudios","pe","de","Nb","ib","me","Atomics","load","Bt","compareExchange","notify","be","ge","cb","sb","worker","_emscripten_futex_wake","he","gb","fb","zb","xc","Rb","store","Dt","vt","Sb","receiveObjectTransfer","Xb","threadInit","hc","threadCancel","fc","threadExit","Hb","setExitStatus","Zb","yb","Eb","pop","Ct","Fb","yt","postMessage","cmd","Gb","terminate","bb","xb","eb","_t","wb","hb","Yb","Ut","Ub","onmessage","Lb","targetThread","Dc","transferList","Ot","ve","thread","loaded","mb","threadId","text","alert","zt","returnCode","target","filename","lineno","message","urlOrBlob","mainScriptUrlOrBlob","wasmModule","Ib","Ob","nc","now","_e","Date","gt","ye","ze","we","lb","dc","ac","bc","$b","cc","Pb","rb","jb","detached","St","start_routine","ec","arg","threadInfoStruct","stackBase","stackSize","time","mc","Ae","exchange","wait","Te","establishStackSpace","Wt","Yt","invokeEntryPoint","hrtime","__performance_now_clock_drift","Oe","ke","Ee","xe","Me","rc","De","Se","Ce","Re","Ie","Fe","sc","je","Math","ceil","qt","fill","Wb","Tb","Jb","fd","Ac","flags","offset","Ye","Pe","We","tc","qe","Ue","Be","Ge","He","arguments","jt","Pt","kt","Le","Ne","Ve","querySelector","Xe","qb","Db","pc","Et","pb","ob","getParameter","width","height","viewport","Qe","Je","Ze","$e","Ke","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","et","forEach","tt","nt","rt","at","vc","uc","it","ot","ut","toTimeString","match","Kb","getFullYear","getTimezoneOffset","max","Ft","It","Rt","st","ct","ft","lt","pt","getTime","getMonth","getDate","setDate","setMonth","setFullYear","dt","toString","getDay","ab","vb","kc","jc","tb","nb","kb","ub","Ec","ic","lc","RegExp","split","substring","abs","includes","mt","bt","Tt","oc","At","xt","da","ga","ea","apply","copyWithin","hardwareConcurrency","aa","min","grow","ba","setTimeout","stack","Mt","ca","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","Vb","yc","Bb","Mb","Bc","Cc","Cb","getContext","WebGLRenderingContext","wc","attributes","version","canvas","Qb","getExtension","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","isVertexArray","isVertexArrayOES","drawBuffers","drawBuffersWEBGL","qc","zc","getSupportedExtensions","ha","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","Ab","getSeconds","getMinutes","getHours","setTime","fa","asm","Ca","ia","Ha","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","ja","_OrtCreateSessionOptions","ka","_OrtAddSessionConfigEntry","la","_OrtReleaseSessionOptions","ma","_OrtCreateSession","na","_OrtReleaseSession","oa","_OrtGetInputCount","pa","_OrtGetOutputCount","qa","_OrtGetInputName","ra","_OrtGetOutputName","sa","_OrtFree","ta","_OrtCreateTensor","ua","_OrtGetTensorData","va","_OrtReleaseTensor","wa","_OrtCreateRunOptions","xa","_OrtAddRunConfigEntry","ya","_OrtReleaseRunOptions","za","_OrtRun","Aa","_OrtEndProfiling","Ba","_malloc","Da","___errno_location","Ea","_free","Fa","_pthread_self","Ga","_emscripten_tls_init","_emscripten_current_thread_process_queued_calls","Ia","wt","_emscripten_register_main_browser_thread_id","Ja","_emscripten_main_browser_thread_id","Ka","_emscripten_sync_run_in_main_thread_4","La","_emscripten_main_thread_process_queued_calls","Ma","_emscripten_run_in_main_runtime_thread_js","Na","__emscripten_call_on_thread","Oa","_pthread_testcancel","Pa","_pthread_exit","Qa","__emscripten_thread_init","Ra","_emscripten_get_global_libc","Sa","___pthread_tsd_run_dtors","Ta","__get_tzname","Ua","__get_daylight","Va","__get_timezone","Wa","stackSave","Xa","stackRestore","Ya","stackAlloc","Za","_emscripten_stack_set_limits","_a","_memalign","$a","__emscripten_allow_main_runtime_queued_calls","__emscripten_main_thread_futex","Ht","calledRun","onRuntimeInitialized","postRun","setStatus","_fflush","onExit","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","PThread","ExitStatus","preInit","ortWasm","fn","ctx","params","index","pending","reject","base64","string","charAt","b64","s64","encode","start","end","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","count","out","random","isEmpty","toJSON","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","radixToPower","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","elemType","shape","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","onnxjsBackend","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","wasmBackend","initWasm","promisify","OnnxruntimeWebAssemblySessionHandler","AttributeWithCacheKeyImpl","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","_attributes","attr","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","initialize","dispose","isBackend","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","decodeUint8","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActicationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","adjustedAttributes","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","newAttributes","activationAttributes","parseInternalActivationAttributes","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","createElement","createCanvas","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","scissor","readPixels","isFramebufferReady","getActiveTexture","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","toISOString","previousConfig","Event","startTime","endCallback","timer","checkTimer","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","eventRes","endSync","toFixed","currentTime","previousPointer","started","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","__init","builder","numElems","startShape","addDim","endShape","DimensionValue","optionalEncoding","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","UNKNOWN","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","NONE","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","rawDataOffset","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","floatsLength","graphsLength","sOffset","tOffset","gOffset","floatsOffset","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","getLogLevel","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","path","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","revokeObjectURL","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":";;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAa,IAAID,IAEjBD,EAAU,IAAIC,IARhB,CASGK,MAAM,WACT,M,+ICRA,MAAMC,EAAW,GACXC,EAA2B,GAWpBC,EAAkB,CAACC,EAAMC,EAASC,KAC3C,IAAID,GAAmC,mBAAjBA,EAAQE,MAA+D,mBAAjCF,EAAQG,qBAsBpE,MAAM,IAAIC,UAAU,uBAtBpB,CACI,MAAMC,EAAiBT,EAASG,GAChC,QAAuBO,IAAnBD,EAGC,IAAIA,EAAeL,UAAYA,EAChC,OAGA,MAAM,IAAIO,MAAM,YAAYR,4BAEhC,GARIH,EAASG,GAAQ,CAAEC,UAASC,YAQ5BA,GAAY,EAAG,CACf,IAAK,IAAIO,EAAI,EAAGA,EAAIX,EAAyBY,OAAQD,IACjD,GAAIZ,EAASC,EAAyBW,IAAIP,UAAYA,EAElD,YADAJ,EAAyBa,OAAOF,EAAG,EAAGT,GAI9CF,EAAyBc,KAAKZ,MC3B7Ba,EAAM,ICJZ,MACHC,cACIC,KAAKC,KAAO,GACZD,KAAKE,MAAQ,GACbF,KAAKG,iBAAmB,UAGxBC,aAASC,GACT,QAAcb,IAAVa,EAAJ,CAGA,GAAqB,iBAAVA,IAA2F,IAArE,CAAC,UAAW,OAAQ,UAAW,QAAS,SAASC,QAAQD,GACtF,MAAM,IAAIZ,MAAM,8BAA8BY,KAElDL,KAAKG,iBAAmBE,GAExBD,eACA,OAAOJ,KAAKG,mBCjBdI,EAAoD,oBAAlBC,eAA+D,mBAAvBA,cAAcC,KACxFC,EAAsD,oBAAnBC,gBAAiE,mBAAxBA,eAAeF,KAE3FG,EAAwC,IAAIC,IAAI,CAClD,CAAC,UAAWC,cACZ,CAAC,QAASC,YACV,CAAC,OAAQC,WACT,CAAC,SAAUC,aACX,CAAC,QAASC,YACV,CAAC,QAASC,YACV,CAAC,OAAQJ,YACT,CAAC,UAAWK,cACZ,CAAC,SAAUC,eAGTC,EAAwC,IAAIT,IAAI,CAClD,CAACC,aAAc,WACf,CAACC,WAAY,SACb,CAACC,UAAW,QACZ,CAACC,YAAa,UACd,CAACC,WAAY,SACb,CAACC,WAAY,SACb,CAACC,aAAc,WACf,CAACC,YAAa,YAEdd,IACAK,EAAsCW,IAAI,QAASf,eACnDc,EAAsCC,IAAIf,cAAe,UAEzDE,IACAE,EAAsCW,IAAI,SAAUZ,gBACpDW,EAAsCC,IAAIZ,eAAgB,WAqBvD,MAAMa,EACTzB,YAAY0B,EAAMC,EAAMC,GACpB,IAAIC,EACAC,EACAC,EAEJ,GAAoB,iBAATL,EAMP,GAFAG,EAAOH,EACPK,EAAOH,EACM,WAATF,EAAmB,CAEnB,IAAKM,MAAMC,QAAQN,GACf,MAAM,IAAIpC,UAAU,kDAIxBuC,EAAOH,MAEN,CAED,MAAMO,EAAwBrB,EAAsCsB,IAAIT,GACxE,QAA8BjC,IAA1ByC,EACA,MAAM,IAAI3C,UAAU,4BAA4BmC,MAEpD,GAAIM,MAAMC,QAAQN,GAKdG,EAAOI,EAAsBxB,KAAKiB,OAEjC,MAAIA,aAAgBO,GAIrB,MAAM,IAAI3C,UAAU,KAAKsC,mCAAsCK,KAH/DJ,EAAOH,QAYf,GADAI,EAAOJ,EACHK,MAAMC,QAAQP,GAAO,CAErB,GAAoB,IAAhBA,EAAK9B,OACL,MAAM,IAAIL,UAAU,uDAExB,MAAM6C,SAA0BV,EAAK,GACrC,GAAyB,WAArBU,EACAP,EAAO,SACPC,EAAOJ,MAEN,IAAyB,YAArBU,EAQL,MAAM,IAAI7C,UAAU,uCAAuC6C,MAP3DP,EAAO,OAIPC,EAAOd,WAAWN,KAAKgB,QAM1B,CAED,MAAMW,EAAad,EAAsCY,IAAIT,EAAK1B,aAClE,QAAmBP,IAAf4C,EACA,MAAM,IAAI9C,UAAU,qCAAqCmC,EAAK1B,gBAElE6B,EAAOQ,EACPP,EAAOJ,EAIf,QAAajC,IAATsC,EAEAA,EAAO,CAACD,EAAKlC,aAEZ,IAAKoC,MAAMC,QAAQF,GACpB,MAAM,IAAIxC,UAAU,0CAGxB,MAAM+C,EArGQ,CAACP,IACnB,IAAIO,EAAO,EACX,IAAK,IAAI3C,EAAI,EAAGA,EAAIoC,EAAKnC,OAAQD,IAAK,CAClC,MAAM4C,EAAMR,EAAKpC,GACjB,GAAmB,iBAAR4C,IAAqBC,OAAOC,cAAcF,GACjD,MAAM,IAAIhD,UAAU,QAAQI,+BAA+B4C,KAE/D,GAAIA,EAAM,EACN,MAAM,IAAIG,WAAW,QAAQ/C,2CAA2C4C,KAE5ED,GAAQC,EAEZ,OAAOD,GAyFUK,CAAcZ,GAC3B,GAAIO,IAASR,EAAKlC,OACd,MAAM,IAAIF,MAAM,iBAAiB4C,iCAAoCR,EAAKlC,YAE9EK,KAAK8B,KAAOA,EACZ9B,KAAK4B,KAAOA,EACZ5B,KAAK6B,KAAOA,EACZ7B,KAAKqC,KAAOA,EAIhBM,QAAQb,GACJ,OAAO,IAAIN,EAAOxB,KAAK4B,KAAM5B,KAAK6B,KAAMC,ICrJzC,MAAM,EAASN,ECAf,MAAMoB,EACT7C,YAAY8C,GACR7C,KAAK6C,QAAUA,EAEnBC,UAAUC,EAAOrB,EAAMC,GACnB,MAAMqB,EAAU,GAChB,IAAIC,EAAU,GAEd,GAAqB,iBAAVF,GAAgC,OAAVA,GAAkBA,aAAiB,GAAUhB,MAAMC,QAAQe,GACxF,MAAM,IAAIzD,UAAU,iGAExB,IAAI4D,GAAiB,EAErB,GAAoB,iBAATxB,EAAmB,CAC1B,GAAa,OAATA,EACA,MAAM,IAAIpC,UAAU,2CAExB,GAAIoC,aAAgB,EAChB,MAAM,IAAIpC,UAAU,gCAExB,GAAIyC,MAAMC,QAAQN,GAAO,CACrB,GAAoB,IAAhBA,EAAK/B,OACL,MAAM,IAAIL,UAAU,uCAExB4D,GAAiB,EAEjB,IAAK,MAAMjE,KAAQyC,EAAM,CACrB,GAAoB,iBAATzC,EACP,MAAM,IAAIK,UAAU,kDAExB,IAAwC,IAApCU,KAAKmD,YAAY7C,QAAQrB,GACzB,MAAM,IAAIwD,WAAW,2CAA2CxD,MAEpE+D,EAAQ/D,GAAQ,KAEpB,GAAoB,iBAAT0C,GAA8B,OAATA,EAC5BsB,EAAUtB,OAET,QAAoB,IAATA,EACZ,MAAM,IAAIrC,UAAU,oCAGvB,CAGD,IAAI8D,GAAY,EAChB,MAAMC,EAAWC,OAAOC,oBAAoB7B,GAC5C,IAAK,MAAMzC,KAAQe,KAAKmD,YACpB,IAAgC,IAA5BE,EAAS/C,QAAQrB,GAAc,CAC/B,MAAMuE,EAAI9B,EAAKzC,IACL,OAANuE,GAAcA,aAAa,KAC3BJ,GAAY,EACZF,GAAiB,EACjBF,EAAQ/D,GAAQuE,GAI5B,GAAIJ,GACA,GAAoB,iBAATzB,GAA8B,OAATA,EAC5BsB,EAAUtB,OAET,QAAoB,IAATA,EACZ,MAAM,IAAIrC,UAAU,qCAIxB2D,EAAUvB,QAIjB,QAAoB,IAATA,EACZ,MAAM,IAAIpC,UAAU,2DAGxB,IAAK,MAAML,KAAQe,KAAKyD,WACpB,QAA2B,IAAhBV,EAAM9D,GACb,MAAM,IAAIQ,MAAM,UAAUR,6BAIlC,GAAIiE,EACA,IAAK,MAAMjE,KAAQe,KAAKmD,YACpBH,EAAQ/D,GAAQ,KAIxB,MAAMyE,QAAgB1D,KAAK6C,QAAQc,IAAIZ,EAAOC,EAASC,GACjDW,EAAc,GACpB,IAAK,MAAMC,KAAOH,EACVJ,OAAOQ,eAAeC,KAAKL,EAASG,KACpCD,EAAYC,GAAO,IAAI,EAAOH,EAAQG,GAAKjC,KAAM8B,EAAQG,GAAKhC,KAAM6B,EAAQG,GAAK/B,OAGzF,OAAO8B,EAEXI,oBAAoBvC,EAAMC,EAAMC,EAAMsC,GAElC,IAAIC,EACAjB,EAAU,GACd,GAAoB,iBAATxB,GAEP,GADAyC,EAAuBzC,EACH,iBAATC,GAA8B,OAATA,EAC5BuB,EAAUvB,OAET,QAAoB,IAATA,EACZ,MAAM,IAAIpC,UAAU,qCAGvB,GAAImC,aAAgBV,YAErB,GADAmD,EAAuBzC,EACH,iBAATC,GAA8B,OAATA,EAC5BuB,EAAUvB,OAET,QAAoB,IAATA,EACZ,MAAM,IAAIpC,UAAU,oCAGvB,MAAImC,aAAgB0C,aACS,oBAAtBC,mBAAqC3C,aAAgB2C,mBAyC7D,MAAM,IAAI9E,UAAU,uDAzC6D,CACjF,MAAM+E,EAAS5C,EACf,IAAI6C,EAAa,EACbC,EAAa9C,EAAK8C,WACtB,GAAoB,iBAAT7C,GAA8B,OAATA,EAC5BuB,EAAUvB,OAET,GAAoB,iBAATA,EAAmB,CAE/B,GADA4C,EAAa5C,GACRa,OAAOC,cAAc8B,GACtB,MAAM,IAAI7B,WAAW,oCAEzB,GAAI6B,EAAa,GAAKA,GAAcD,EAAOE,WACvC,MAAM,IAAI9B,WAAW,oCAAoC4B,EAAOE,gBAGpE,GADAA,EAAa9C,EAAK8C,WAAaD,EACX,iBAAT3C,EAAmB,CAE1B,GADA4C,EAAa5C,GACRY,OAAOC,cAAc+B,GACtB,MAAM,IAAI9B,WAAW,oCAEzB,GAAI8B,GAAc,GAAKD,EAAaC,EAAaF,EAAOE,WACpD,MAAM,IAAI9B,WAAW,oCAAoC4B,EAAOE,WAAaD,OAEjF,GAAoB,iBAATL,GAA8B,OAATA,EAC5BhB,EAAUgB,OAET,QAAoB,IAATA,EACZ,MAAM,IAAI3E,UAAU,qCAGvB,QAAoB,IAATqC,EACZ,MAAM,IAAIrC,UAAU,uCAGvB,QAAoB,IAAToC,EACZ,MAAM,IAAIpC,UAAU,gCAExB4E,EAAuB,IAAInD,WAAWsD,EAAQC,EAAYC,IAM9D,MACMC,GADMvB,EAAQwB,oBAAsB,IACjBC,KAAIhF,GAAkB,iBAANA,EAAiBA,EAAIA,EAAET,OAC1DC,OLzHgB4D,OAAO0B,IACjC,MAAMG,EAAuC,IAAxBH,EAAa7E,OAAeZ,EAA2ByF,EACtEI,EAAS,GACf,IAAK,MAAMC,KAAeF,EAAc,CACpC,MAAMG,EAAchG,EAAS+F,GAC7B,GAAIC,EAAa,CACb,GAAIA,EAAYC,YACZ,OAAOD,EAAY5F,QAElB,GAAI4F,EAAYE,aACjB,MAAM,IAAIvF,MAAM,YAAYoF,8DAE3B,GAAIC,EAAYG,QACjB,SAEJ,IAII,OAHAH,EAAYE,cAAe,QACrBF,EAAY5F,QAAQE,OAC1B0F,EAAYC,aAAc,EACnBD,EAAY5F,QAEvB,MAAOgG,GACHN,EAAO/E,KAAK,CAAEZ,KAAM4F,EAAaM,IAAKD,IACtCJ,EAAYG,SAAU,EAE1B,QACIH,EAAYE,cAAe,IAIvC,MAAM,IAAIvF,MAAM,oCAAoCmF,EAAOF,KAAIQ,GAAK,IAAIA,EAAEjG,SAASiG,EAAEC,QAAOC,KAAK,UK2FvEC,CAAeb,GAC/B3B,QAAgB3D,EAAQG,qBAAqB6E,EAAsBjB,GACzE,OAAO,IAAIL,EAAiBC,GAEhCyC,iBACItF,KAAK6C,QAAQyC,iBAEjBC,eACIvF,KAAK6C,QAAQ0C,eAEb9B,iBACA,OAAOzD,KAAK6C,QAAQY,WAEpBN,kBACA,OAAOnD,KAAK6C,QAAQM,aClLrB,MAAM,EAAmBP,G,mBCJ5B4C,WAAWN,GAAsIM,YAAnIA,WAAW,oBAAoBC,UAAUA,SAASC,cAAcD,SAASC,cAAcC,SAAI,I,YAA2E,SAAST,GAAG,SAASU,IAAI,OAAOC,EAAExB,QAAQyB,GAAGC,EAAEF,EAAExB,QAAQ2B,EAAE,SAASC,IAAI,OAAOJ,EAAExB,QAAQyB,GAAGC,EAAEF,EAAExB,QAAQ6B,EAAE,SAASC,IAAI,OAAON,EAAExB,QAAQyB,GAAGC,EAAEF,EAAExB,QAAQ+B,EAAE,SAASC,IAAI,OAAOR,EAAExB,QAAQyB,GAAGC,EAAEF,EAAExB,QAAQiC,EAAE,SAAS5G,IAAI,OAAOmG,EAAExB,QAAQyB,GAAGC,EAAEF,EAAExB,QAAQkC,EAAE,IAAIC,EAAEC,EAAEC,EAAExB,EAAEA,GAAG,GAAGsB,IAAIA,OAAE,IAAStB,EAAEA,EAAE,IAAIsB,EAAEG,MAAM,IAAIC,SAAQ,SAAU1B,EAAEU,GAAGa,EAAEvB,EAAEwB,EAAEd,KAAK,IAAIiB,EAAEC,EAAE,GAAG,IAAID,KAAKL,EAAEA,EAAE1C,eAAe+C,KAAKC,EAAED,GAAGL,EAAEK,IAAI,IAAIE,EAAE,iBAAiB,SAASC,EAAE9B,EAAEU,GAAG,MAAMA,EAAE,IAAIqB,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAE,iBAAiBC,OAAOC,EAAE,mBAAmBC,cAAcC,EAAE,iBAAiBC,SAAS,iBAAiBA,QAAQC,UAAU,iBAAiBD,QAAQC,SAASC,KAAKrE,EAAEgD,EAAEsB,yBAAwB,EAAGC,EAAE,GAAG,SAASC,EAAE9C,GAAG,OAAOsB,EAAEyB,WAAWzB,EAAEyB,WAAW/C,EAAE6C,GAAGA,EAAE7C,EAAE,GAAGwC,EAAE,CAAC,IAAIQ,EAAEH,EAAEP,EAAE,eAAwBO,GAAG,IAAII,KAAclB,EAAE,SAAS/B,EAAEU,GAAG,OAAOwB,IAAIA,EAAE,EAAQ,OAAOC,IAAIA,EAAE,EAAQ,MAASnC,EAAEmC,EAAEe,UAAUlD,GAAGkC,EAAEiB,aAAanD,EAAEU,EAAE,KAAK,SAASuB,EAAE,SAASjC,GAAG,OAAOA,EAAE+B,EAAE/B,GAAE,IAAKb,SAASa,EAAE,IAAInE,WAAWmE,IAAIoD,EAAEpD,EAAEb,QAAQa,GAAGgC,EAAE,SAAShC,EAAEU,EAAEK,GAAGmB,IAAIA,EAAE,EAAQ,OAAOC,IAAIA,EAAE,EAAQ,MAASnC,EAAEmC,EAAEe,UAAUlD,GAAGkC,EAAEmB,SAASrD,GAAE,SAAUA,EAAEiB,GAAGjB,EAAEe,EAAEf,GAAGU,EAAEO,EAAE9B,YAAY,EAAEsD,QAAQa,KAAK7I,SAASoH,EAAEY,QAAQa,KAAK,GAAGC,QAAQ,MAAM,MAAMd,QAAQa,KAAKE,MAAM,GAAGf,QAAQgB,GAAG,qBAAoB,SAAUzD,GAAG,KAAKA,aAAa0D,IAAI,MAAM1D,KAAKyC,QAAQgB,GAAG,qBAAqBE,IAAI7B,EAAE,SAAS9B,EAAEU,GAAG,GAAGkD,KAAK,MAAMnB,QAAQoB,SAAS7D,EAAEU,EAAE+B,QAAQqB,KAAK9D,IAAIsB,EAAEyC,QAAQ,WAAW,MAAM,8BAA8B,IAAIf,EAAE,EAAQ,MAAkB,MAAMhD,GAAG,MAAMgE,QAAQC,MAAM,2GAA2GjE,EAAE,EAAAmC,EAAO+B,OAAOlB,EAAEkB,YAAY9B,GAAGE,KAAKA,EAAEO,EAAElJ,KAAKwK,SAASC,KAAK,oBAAoB7D,UAAUA,SAASC,gBAAgBqC,EAAEtC,SAASC,cAAcC,KAAKH,aAAauC,EAAEvC,YAAYuC,EAAE,IAAIA,EAAEzH,QAAQ,SAASyH,EAAEwB,OAAO,EAAExB,EAAEyB,YAAY,KAAK,GAAG,GAAG9B,GAAGT,EAAE,SAAS/B,EAAEU,GAAG,OAAOwB,IAAIA,EAAE,EAAQ,OAAOC,IAAIA,EAAE,EAAQ,MAASnC,EAAEmC,EAAEe,UAAUlD,GAAGkC,EAAEiB,aAAanD,EAAEU,EAAE,KAAK,SAASuB,EAAE,SAASjC,GAAG,OAAOA,EAAE+B,EAAE/B,GAAE,IAAKb,SAASa,EAAE,IAAInE,WAAWmE,IAAIoD,EAAEpD,EAAEb,QAAQa,GAAGgC,EAAE,SAAShC,EAAEU,EAAEK,GAAGmB,IAAIA,EAAE,EAAQ,OAAOC,IAAIA,EAAE,EAAQ,MAASnC,EAAEmC,EAAEe,UAAUlD,GAAGkC,EAAEmB,SAASrD,GAAE,SAAUA,EAAEiB,GAAGjB,EAAEe,EAAEf,GAAGU,EAAEO,EAAE9B,cAAc4C,EAAE,SAAS/B,GAAG,IAAIU,EAAE,IAAI6D,eAAe,OAAO7D,EAAE8D,KAAK,MAAMxE,GAAE,GAAIU,EAAE+D,KAAK,MAAM/D,EAAEgE,cAAcpC,IAAIL,EAAE,SAASjC,GAAG,IAAIU,EAAE,IAAI6D,eAAe,OAAO7D,EAAE8D,KAAK,MAAMxE,GAAE,GAAIU,EAAEiE,aAAa,cAAcjE,EAAE+D,KAAK,MAAM,IAAI5I,WAAW6E,EAAEkE,YAAY5C,EAAE,SAAShC,EAAEU,EAAEK,GAAG,IAAIE,EAAE,IAAIsD,eAAetD,EAAEuD,KAAK,MAAMxE,GAAE,GAAIiB,EAAE0D,aAAa,cAAc1D,EAAE4D,OAAO,WAAW,KAAK5D,EAAE6D,QAAQ,GAAG7D,EAAE6D,QAAQ7D,EAAE2D,SAASlE,EAAEO,EAAE2D,UAAU7D,KAAKE,EAAE8D,QAAQhE,EAAEE,EAAEwD,KAAK,SAASjC,GAAG,oBAAoBwC,cAAc,EAAA7C,EAAO6C,YAAY,qBAAmC,IAAIC,EAAEC,EAAEC,EAAE7D,EAAE8D,OAAOpB,QAAQqB,IAAIC,KAAKtB,SAASuB,EAAEjE,EAAEkE,UAAUxB,QAAQyB,KAAKH,KAAKtB,SAAS,IAAIrC,KAAKC,EAAEA,EAAEhD,eAAe+C,KAAKL,EAAEK,GAAGC,EAAED,IAAIC,EAAE,KAAKN,EAAEoE,cAAc7D,EAAEP,EAAEoE,aAAapE,EAAEqE,OAAO7D,EAAER,EAAEqE,MAAMrE,EAAEsE,aAAaV,EAAE5D,EAAEsE,YAAY,IAAIC,EAAEvE,EAAEwE,gBAAe,EAAG,iBAAiBC,aAAapC,GAAG,mCAAmC,IAAIhD,EAAEqF,EAAEC,EAAEC,GAAE,EAAG,SAAS9C,EAAEpD,EAAEU,GAAGV,GAAG2D,GAAG,qBAAqBjD,GAAG,SAASyF,EAAEnG,GAAG,IAAIU,EAAE,IAAI0F,YAAYpG,GAAGlF,KAAKuL,OAAO,SAASrG,GAAG,OAAOA,EAAEb,kBAAkBD,oBAAoBc,EAAE,IAAInE,WAAWmE,IAAIU,EAAE2F,OAAOxH,KAAK6B,EAAEV,IAAI,IAAIY,EAAEE,EAAEE,EAAEE,EAAEE,EAAEC,EAAEiF,EAAE,oBAAoBF,YAAY,IAAID,EAAE,aAAQ,EAAO,SAASI,EAAEvG,EAAEU,EAAEK,GAAG,IAAIE,EAAEP,EAAEK,EAAE,IAAIA,EAAEL,EAAEV,EAAEe,MAAMA,GAAGE,MAAMF,EAAE,GAAG,GAAGA,EAAEL,GAAGV,EAAEwG,UAAUF,EAAE,OAAOA,EAAED,OAAOrG,EAAEwG,SAAS9F,EAAEK,IAAI,IAAIE,EAAE,GAAGP,EAAEK,GAAG,CAAC,IAAII,EAAEnB,EAAEU,KAAK,GAAG,IAAIS,EAAE,CAAC,IAAI3G,EAAE,GAAGwF,EAAEU,KAAK,GAAG,MAAM,IAAIS,GAAGF,GAAGwF,OAAOC,cAAc,GAAGvF,IAAI,EAAE3G,OAAO,CAAC,IAAI8G,EAAE,GAAGtB,EAAEU,KAAK,OAAOS,EAAE,MAAM,IAAIA,IAAI,GAAGA,IAAI,GAAG3G,GAAG,EAAE8G,GAAG,EAAEH,IAAI,GAAG3G,GAAG,GAAG8G,GAAG,EAAE,GAAGtB,EAAEU,MAAMO,GAAGwF,OAAOC,aAAavF,IAAIA,GAAG,MAAMF,GAAGwF,OAAOC,aAAa,MAAMvF,GAAG,GAAG,MAAM,KAAKA,UAAUF,GAAGwF,OAAOC,aAAavF,GAAG,OAAOF,EAAE,SAAS0F,EAAE3G,EAAEU,GAAG,OAAOV,EAAEuG,EAAExF,IAAIf,EAAEU,GAAG,GAAG,SAASkG,EAAE5G,EAAEU,EAAEK,EAAEE,GAAG,KAAK,EAAEA,GAAG,OAAO,EAAE,IAAIE,EAAEJ,EAAEE,EAAEF,EAAEE,EAAE,EAAE,IAAI,IAAIzG,EAAE,EAAEA,EAAEwF,EAAEvF,SAASD,EAAE,CAAC,IAAI8G,EAAEtB,EAAE6G,WAAWrM,GAAG,GAAG,OAAO8G,GAAG,OAAOA,IAAIA,EAAE,QAAQ,KAAKA,IAAI,IAAI,KAAKtB,EAAE6G,aAAarM,IAAI,KAAK8G,EAAE,CAAC,GAAGP,GAAGE,EAAE,MAAMP,EAAEK,KAAKO,MAAM,CAAC,GAAG,MAAMA,EAAE,CAAC,GAAGP,EAAE,GAAGE,EAAE,MAAMP,EAAEK,KAAK,IAAIO,GAAG,MAAM,CAAC,GAAG,OAAOA,EAAE,CAAC,GAAGP,EAAE,GAAGE,EAAE,MAAMP,EAAEK,KAAK,IAAIO,GAAG,OAAO,CAAC,GAAGP,EAAE,GAAGE,EAAE,MAAMP,EAAEK,KAAK,IAAIO,GAAG,GAAGZ,EAAEK,KAAK,IAAIO,GAAG,GAAG,GAAGZ,EAAEK,KAAK,IAAIO,GAAG,EAAE,GAAGZ,EAAEK,KAAK,IAAI,GAAGO,GAAG,OAAOZ,EAAEK,GAAG,EAAEA,EAAEI,EAAE,SAAS2F,EAAE9G,EAAEU,EAAEO,GAAG,OAAO2F,EAAE5G,EAAEe,IAAIL,EAAEO,GAAG,SAAS8F,EAAE/G,GAAG,IAAI,IAAIU,EAAE,EAAEK,EAAE,EAAEA,EAAEf,EAAEvF,SAASsG,EAAE,CAAC,IAAIE,EAAEjB,EAAE6G,WAAW9F,GAAG,OAAOE,GAAG,OAAOA,IAAIA,EAAE,QAAQ,KAAKA,IAAI,IAAI,KAAKjB,EAAE6G,aAAa9F,IAAI,KAAKE,IAAIP,EAAEA,EAAE,MAAMO,EAAEP,EAAE,EAAE,OAAOO,EAAEP,EAAE,EAAEA,EAAE,EAAE,OAAOA,EAAE,SAASsG,EAAEhH,GAAG,IAAIe,EAAEgG,EAAE/G,GAAG,EAAEiB,EAAEgG,GAAGlG,GAAG,OAAOE,GAAG2F,EAAE5G,EAAEU,IAAIO,EAAEF,GAAGE,EAAE,SAASJ,EAAEb,GAAGY,EAAEZ,EAAEsB,EAAE4F,MAAMpG,EAAE,IAAIhF,UAAUkE,GAAGsB,EAAE6F,OAAO,IAAInL,WAAWgE,GAAGsB,EAAE8F,OAAOlG,EAAE,IAAIjF,WAAW+D,GAAGsB,EAAE+F,OAAOrG,EAAE,IAAInF,WAAWmE,GAAGsB,EAAEgG,QAAQ,IAAIvL,YAAYiE,GAAGsB,EAAEiG,QAAQnG,EAAE,IAAIjF,YAAY6D,GAAGsB,EAAEkG,QAAQ,IAAI5L,aAAaoE,GAAGsB,EAAEmG,QAAQpG,EAAE,IAAInF,aAAa8D,GAAG,oBAAoBoG,aAAa,IAAID,EAAE,YAAY7H,IAAIsC,EAAEU,EAAEnC,QAAQ,IAAIuI,EAAEpG,EAAEqG,gBAAgB,SAAS,GAAGrJ,EAAEqC,EAAEW,EAAEsG,WAAWhH,EAAEU,EAAEnC,YAAY,GAAGmC,EAAEsG,WAAWjH,EAAEW,EAAEsG,gBAAgB,MAAMjH,EAAE,IAAIoF,YAAY8B,OAAO,CAACC,QAAQJ,EAAE,MAAMK,QAAQ,MAAMC,QAAO,KAAM7I,kBAAkBD,mBAAmB,MAAMqG,EAAE,+NAA+N/C,GAAGwB,QAAQqB,IAAI,qHAAqH9K,MAAM,cAAcoG,IAAIC,EAAED,EAAExB,QAAQuI,EAAE9G,EAAEvB,WAAWwB,EAAED,GAAG,IAAIqH,EAAEC,EAAE,GAAGC,GAAE,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,EAAE,SAAS1E,KAAK,OAAOiC,GAAG,EAAEyC,GAAG,SAASC,KAAK,IAAIvI,EAAEsB,EAAEkH,OAAOC,QAAQP,EAAEQ,QAAQ1I,GAAG,IAAI2I,GAAGC,GAAG,EAAEC,GAAG,KAAKC,GAAG,KAAK,SAASnF,GAAG3D,GAAG,MAAMsB,EAAEyH,SAASzH,EAAEyH,QAAQ/I,GAAGoD,GAAG9E,GAAGiH,EAAEvF,GAAGkG,GAAE,EAAGD,EAAE,EAAEjG,EAAE,IAAI+F,YAAYiD,aAAa,SAAShJ,EAAE,gDAAgDwB,EAAExB,GAAGA,EAAE,SAASiJ,KAAK,OAAON,GAAGO,WAAW,yCAAyC,SAASC,KAAK,IAAInJ,EAAE2I,GAAG,IAAI,GAAG3I,GAAG2I,IAAIzD,EAAE,OAAO,IAAIrJ,WAAWqJ,GAAG,GAAGjD,EAAE,OAAOA,EAAEjC,GAAG,KAAK,kDAAkD,MAAMA,GAAG2D,GAAG3D,IAAIsB,EAAE8H,gBAAgB,GAAG9H,EAAE+H,gBAAgB,GAAGV,GAAG,yBAAyBM,OAAON,GAAG7F,EAAE6F,KAAK,IAAIW,GAAG,CAAC,OAAO,WAAW,KAAK,cAAc,SAASC,GAAGvJ,GAAG,KAAK,EAAEA,EAAEvF,QAAQ,CAAC,IAAIiG,EAAEV,EAAEyI,QAAQ,GAAG,mBAAmB/H,EAAEA,EAAEY,OAAO,CAAC,IAAIP,EAAEL,EAAE8I,GAAG,iBAAiBzI,OAAE,IAASL,EAAE+I,GAAGxB,EAAEjL,IAAI+D,EAANkH,GAAWA,EAAEjL,IAAI+D,EAANkH,CAASvH,EAAE+I,IAAI1I,OAAE,IAASL,EAAE+I,GAAG,KAAK/I,EAAE+I,MAAM,SAASC,GAAG1J,EAAEe,GAAG,GAAG,GAAGf,GAAGA,EAAEU,IAAIjG,QAAQ,EAAEuF,GAAG,EAAEe,EAAE,OAAO,GAAG,GAAG,GAAGA,EAAE,OAAO,EAAE,YAAYA,IAAIA,EAAE,KAAK,IAAII,EAAEwI,QAAQC,KAAK3I,IAAI4I,IAAI,GAAGrP,EAAE,EAAE,GAAG2G,GAAGnB,GAAG2J,QAAQG,gBAAgB7I,IAAI4I,IAAI,EAAE1I,EAAE,IAAIA,IAAI3G,EAAE,EAAE,KAAKuG,GAAG,OAAO,EAAE,GAAG,IAAIf,EAAE2J,QAAQI,OAAO9I,IAAIjB,GAAG,EAAEe,IAAI,OAAOf,EAAExF,EAAE,KAAK,+CAA+CwF,EAAE,SAASgK,GAAGhK,GAAG,GAAG1B,EAAE,KAAK,wFAAwF,IAAI0B,EAAE,KAAK,qDAAqD,IAAIU,EAAEuJ,GAAGC,GAAGlK,GAAGU,IAAIO,IAAIjB,EAAE,IAAI,GAAG,EAAEiK,GAAGE,GAAGzJ,EAAE0J,SAAS9I,EAAE+I,uBAAuBX,GAAG,IAAIY,GAAGL,GAAG,CAACM,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,aAAaC,GAAG,WAAW,IAAI,IAAI3K,EAAEiH,GAAG,KAAKvG,EAAE,EAAE,GAAGA,IAAIA,EAAES,IAAInB,EAAE,EAAEU,GAAG,EAAEO,IAAIjB,EAAE,IAAI,GAAGA,EAAEU,EAAEV,EAAE,IAAIiB,IAAIP,GAAG,GAAGA,EAAE,IAAIK,EAAEkG,GAAG,KAAK,IAAIvG,EAAE,EAAE,IAAIA,IAAIA,EAAES,IAAIJ,EAAE,EAAEL,GAAG,EAAEiJ,QAAQiB,MAAMzJ,IAAInB,EAAE,KAAK,EAAEe,GAAG4I,QAAQiB,MAAMzJ,IAAInB,EAAE,IAAI,EAAEA,GAAG6K,GAAG7K,GAAGsC,EAAE,GAAGwI,GAAG9K,IAAI+K,GAAG,WAAWd,GAAGe,sBAAsBf,GAAGgB,GAAGhB,GAAGiB,WAAWjB,GAAGkB,GAAGlB,GAAGmB,aAAanB,GAAGoB,GAAGpB,GAAGqB,WAAWrB,GAAGsB,GAAGtB,GAAGuB,cAAcvB,GAAGwB,IAAIvB,GAAG,GAAGwB,GAAG,GAAGC,GAAG,WAAW,KAAK,EAAE1B,GAAGyB,GAAGjR,QAAQwP,GAAGyB,GAAGE,KAAN3B,GAAc4B,MAAMC,GAAG,SAAS9L,EAAEU,GAAGiJ,QAAQiB,MAAMzJ,IAAInB,EAAE,IAAI,EAAE,GAAG2J,QAAQiB,MAAMzJ,IAAInB,EAAE,IAAI,EAAE,GAAGiK,GAAG0B,KAAKhC,QAAQiB,MAAMzJ,IAAInB,EAAE,GAAG,EAAEU,GAAGiJ,QAAQiB,MAAMzJ,IAAInB,EAAE,GAAG,EAAE,GAAG0J,GAAG1J,EAAE,EAAE,YAAY6K,GAAG,EAAE,EAAE,IAAIY,GAAG,SAASzL,GAAGiG,EAAEjG,GAAGuL,GAAG,SAASvL,GAAG,IAAIU,EAAEqL,KAAKrL,IAAIuJ,GAAG6B,GAAGpL,EAAEV,GAAG1B,GAAG0N,YAAY,CAACC,IAAI,WAAWZ,GAAG,WAAWpB,GAAG6B,GAAGC,MAAM,GAAGC,YAAY,CAACC,IAAI,gBAAgBC,GAAG,WAAW,IAAI,IAAIlM,KAAKiK,GAAGC,GAAG,CAAC,IAAIxJ,EAAEuJ,GAAGC,GAAGlK,GAAGU,GAAGA,EAAE0J,QAAQH,GAAGE,GAAGzJ,EAAE0J,QAAQ,IAAIH,GAAGC,GAAG,GAAGlK,EAAE,EAAEA,EAAEiK,GAAGM,GAAG9P,SAASuF,EAAE,CAAC,IAAIe,EAAEkJ,GAAGM,GAAGvK,GAAGe,EAAEoL,YAAY,IAAIlC,GAAGM,GAAG,GAAGvK,EAAE,EAAEA,EAAEiK,GAAGO,GAAG/P,SAASuF,EAAEU,GAAGK,EAAEkJ,GAAGO,GAAGxK,IAAIoM,GAAGnC,GAAGoC,GAAG3L,GAAGK,EAAEoL,YAAYlC,GAAGO,GAAG,IAAI6B,GAAG,SAASrM,GAAG,GAAGA,EAAE,CAAC,GAAGA,EAAEsM,GAAG,CAAC,IAAI5L,EAAEO,IAAIjB,EAAEsM,GAAG,KAAK,GAAGrL,IAAIjB,EAAEsM,GAAG,KAAK,GAAG,EAAEC,GAAG7L,GAAG6L,GAAGvM,EAAEsM,IAAItM,EAAEsM,GAAG,EAAEtM,EAAEwM,IAAIxM,EAAEyM,IAAIF,GAAGvM,EAAEyM,IAAIzM,EAAEyM,GAAG,EAAEzM,EAAEoK,SAASpK,EAAEoK,OAAOgC,GAAG,QAAQjC,GAAG,SAASnK,GAAGiK,GAAGyC,IAAG,kBAAmBzC,GAAGC,GAAGlK,EAAEoM,GAAGE,IAAIrC,GAAGM,GAAG5P,KAAKqF,GAAGiK,GAAGO,GAAG9P,OAAOuP,GAAGO,GAAGpP,QAAQ4E,GAAG,GAAGiK,GAAGoC,GAAGrM,EAAEoM,IAAIpM,EAAEoM,QAAG,MAAWM,GAAG,SAAS1M,GAAGiB,IAAI0L,IAAI,GAAG,EAAE,IAAI3M,IAAI,QAAQiB,IAAI0L,IAAI,GAAG,IAAI1B,GAAG,aAAaE,GAAG,WAAW,IAAI,IAAInL,KAAKiK,GAAGQ,GAAGR,GAAGQ,GAAGzK,MAAM4M,GAAG,SAAS5M,EAAEU,GAAGV,EAAE6M,UAAU,SAAS9L,GAAG,IAAIvG,EAAEuG,EAAEpE,KAAK2E,EAAE9G,EAAEyR,IAAI,GAAGjM,EAAEoM,KAAKnC,GAAG6C,GAAG9M,EAAEoM,GAAGE,IAAI9R,EAAEuS,cAAcvS,EAAEuS,cAAchB,KAAK,CAAC,IAAIxK,EAAE0I,GAAGC,GAAG1P,EAAEwS,IAAIzL,EAAEA,EAAE6I,OAAO4B,YAAYjL,EAAEpE,KAAKnC,EAAEyS,cAAc1H,EAAE,0CAA0CjE,EAAE,uBAAuB9G,EAAEuS,aAAa,4CAA4C,GAAG,gCAAgCzL,EAAE4L,UAAU,GAAG,gBAAgB5L,EAAE6L,GAAGpM,EAAEpE,WAAW,GAAG,kBAAkB2E,EAAE0I,GAAGxP,EAAE4S,aAAa,GAAG,eAAe9L,EAAE,CAAC,GAAGP,EAAEvG,EAAE4S,OAAO9O,EAAE,KAAK,qFAAqF,IAAIyC,EAAE,KAAK,kDAAkDE,IAAIF,EAAE,IAAI,GAAG,EAAEvG,EAAEyP,GAAGC,GAAGnJ,UAAUkJ,GAAGC,GAAGnJ,GAAGvG,EAAE4P,OAAO+B,YAAYlC,GAAGoC,GAAG7R,GAAGyP,GAAGO,GAAG9P,OAAOuP,GAAGO,GAAGpP,QAAQZ,EAAE4P,QAAQ,GAAG5P,EAAE4P,OAAOgC,QAAG,OAAY,GAAG,iBAAiB9K,EAAE,CAAC,GAAGP,EAAEvG,EAAE4S,OAAO9O,EAAE,KAAK,uFAAuF,IAAIyC,EAAE,KAAK,oDAAoDkJ,GAAGC,GAAGnJ,GAAGqJ,OAAO4B,YAAY,CAACC,IAAI,gBAAgB,GAAG,WAAW3K,EAAEtB,EAAEqN,QAAO,EAAG3M,GAAGA,EAAEV,GAAGA,EAAEsN,KAAKtN,EAAEsN,YAAYtN,EAAEsN,SAAS,GAAG,UAAUhM,EAAE6D,EAAE,UAAU3K,EAAE+S,SAAS,KAAK/S,EAAEgT,WAAW,GAAG,aAAalM,EAAEiE,EAAE,UAAU/K,EAAE+S,SAAS,KAAK/S,EAAEgT,WAAW,GAAG,UAAUlM,EAAEmM,MAAM,UAAUjT,EAAE+S,SAAS,KAAK/S,EAAEgT,WAAW,GAAG,SAASlM,EAAEtB,EAAEoM,IAAIzC,QAAQC,KAAKzI,IAAInB,EAAEoM,GAAGE,GAAG,IAAI,IAAIrC,GAAGE,GAAGnK,QAAQ,GAAG,gBAAgBsB,EAAE,IAAIoM,GAAGlT,EAAEmT,YAAY,MAAM3N,GAAG,GAAGA,aAAa0D,GAAG,OAAO,MAAM1D,MAAM,eAAesB,EAAE2I,GAAGE,GAAGnK,GAAG,mBAAmBsB,IAAI,iBAAiBP,EAAEpE,KAAKiR,OAAO5N,EAAEgM,YAAYjL,EAAEpE,MAAM4I,EAAE,kCAAkCjE,IAAI2I,GAAG6C,QAAG,GAAQ9M,EAAE+E,QAAQ,SAAS/E,GAAGuF,EAAE,0BAA0BvF,EAAE6N,SAAS,IAAI7N,EAAE8N,OAAO,KAAK9N,EAAE+N,UAAUvL,IAAIxC,EAAEyD,GAAG,WAAU,SAAU/C,GAAGV,EAAE6M,UAAU,CAAClQ,KAAK+D,OAAOV,EAAEyD,GAAG,SAAQ,SAAU/C,GAAGV,EAAE+E,QAAQrE,MAAMV,EAAEyD,GAAG,QAAO,gBAAiBzD,EAAEgM,YAAY,CAACC,IAAI,OAAO+B,UAAU1M,EAAE2M,qBAAqB3N,WAAWsH,WAAWjH,EAAEuN,WAAWlI,KAAKmI,GAAG,WAAW,IAAInO,EAAE8C,EAAE,+BAA+BmH,GAAGM,GAAG5P,KAAK,IAAIuJ,OAAOlE,KAAKoO,GAAG,WAAW,OAAO,GAAGnE,GAAGM,GAAG9P,SAASwP,GAAGkE,KAAKlE,GAAG2C,GAAG3C,GAAGM,GAAG,KAAKN,GAAGM,GAAGqB,OAAOyC,GAAG,SAASrO,GAAG,IAAIA,EAAEgF,YAAYsJ,MAAMtO,EAAEgF,YAAYsJ,MAAMtO,OAAO,SAASuO,GAAGvO,EAAEU,GAAG,GAAG,IAAIV,EAAEA,EAAEwO,KAAKF,UAAU,CAAC,GAAG,IAAItO,GAAG,IAAIA,EAAE,OAAOiB,IAAIwN,MAAM,GAAG,IAAI,EAAEzO,EAAEsK,KAAK,OAAOrJ,IAAIP,GAAG,GAAGV,EAAE,IAAI,EAAEiB,IAAIP,EAAE,GAAG,GAAGV,EAAE,IAAI,IAAI,EAAE,EAAE,SAAS0O,GAAG1O,EAAEU,GAAG,GAAGpC,EAAE,OAAOqQ,GAAG,EAAE,EAAE3O,EAAEU,GAAG0H,GAAGM,QAAQ,CAACc,GAAGxJ,EAAEyJ,GAAG/I,IAAI,SAASkO,GAAG5O,GAAGlF,KAAK+T,GAAG7O,EAAE,GAAGlF,KAAKgU,GAAG,SAAS9O,GAAGiB,IAAInG,KAAK+T,GAAG,GAAG,GAAG7O,GAAGlF,KAAKiU,GAAG,SAAS/O,GAAGiB,IAAInG,KAAK+T,GAAG,GAAG,GAAG7O,GAAGlF,KAAKkU,GAAG,WAAW/N,IAAInG,KAAK+T,IAAI,GAAG,GAAG/T,KAAKmU,GAAG,WAAWvO,IAAI5F,KAAK+T,GAAG,IAAI,GAAG,GAAG/T,KAAKoU,GAAG,WAAWxO,IAAI5F,KAAK+T,GAAG,IAAI,GAAG,GAAG/T,KAAKqU,GAAG,SAASnP,EAAEU,GAAG5F,KAAKgU,GAAG9O,GAAGlF,KAAKiU,GAAGrO,GAAG5F,KAAKkU,KAAKlU,KAAKmU,KAAKnU,KAAKoU,MAAM,SAAS/B,GAAGnN,GAAG,GAAG1B,EAAE,KAAK,sFAAsF,IAAIoC,EAAEuJ,GAAGmE,KAAK,IAAI1N,EAAE,OAAO,EAAE,QAAG,IAASA,EAAE0L,GAAG,KAAK,kBAAkB,IAAIpM,EAAEoP,GAAG,KAAK,kCAAkCnF,GAAGO,GAAG7P,KAAK+F,GAAG,IAAI,IAAIK,EAAEkG,GAAG,KAAKzM,EAAE,EAAE,IAAIA,IAAIA,EAAEyG,IAAIF,EAAE,EAAEvG,GAAG,GAAG,EAAE,IAAI8G,EAAEtB,EAAEyM,GAAGzM,EAAEqP,GAAG9N,GAAG/G,EAAEyP,GAAGC,GAAGlK,EAAEoP,IAAI,CAAChF,OAAO1J,EAAE+L,GAAGzM,EAAEyM,GAAG4C,GAAGrP,EAAEqP,GAAG7C,GAAGxM,EAAEwM,GAAGF,GAAGtM,EAAEoP,KAAK9C,IAAI,EAAE3C,QAAQiB,MAAMzJ,IAAII,EAAE,GAAGvB,EAAEsP,UAAU3F,QAAQiB,MAAMzJ,IAAII,EAAE,GAAGR,GAAG4I,QAAQiB,MAAMzJ,IAAII,EAAE,GAAG/G,EAAE8R,IAAI3C,QAAQiB,MAAMzJ,IAAII,EAAE,GAAGvB,EAAEqP,IAAI1F,QAAQiB,MAAMzJ,IAAII,EAAE,GAAGD,GAAGqI,QAAQiB,MAAMzJ,IAAII,EAAE,GAAGvB,EAAEqP,IAAI1F,QAAQiB,MAAMzJ,IAAII,EAAE,GAAGD,GAAGqI,QAAQiB,MAAMzJ,IAAII,EAAE,GAAGvB,EAAEsP,UAAUvO,EAAEwO,KAAK,GAAG5F,QAAQiB,MAAMzJ,IAAII,EAAE,GAAGR,GAAGL,EAAE0L,GAAG5R,EAAE,IAAIgH,EAAE,CAACyK,IAAI,MAAMuD,cAAcxP,EAAEyP,GAAGC,IAAI1P,EAAEyJ,GAAGkG,iBAAiB3P,EAAEoP,GAAGQ,UAAU5P,EAAEyM,GAAGoD,UAAU7P,EAAEqP,IAAI,OAAO3O,EAAE4M,GAAG,WAAW9L,EAAEsO,KAAK9K,YAAYsJ,MAAM5N,EAAEsL,YAAYxK,EAAExB,EAAE+P,KAAKrP,EAAE2M,SAAS3M,EAAE4M,YAAY5M,EAAE4M,IAAI,EAAE,SAAS0C,GAAGhQ,EAAEe,EAAEI,GAAG,GAAG,GAAGnB,GAAGA,EAAEU,IAAIjG,QAAQ,EAAEuF,EAAE,OAAO,GAAG,GAAGoC,EAAE,CAAC,GAAGuH,QAAQC,KAAK3I,IAAIjB,GAAG,IAAIe,EAAE,OAAO,EAAE,IAAIvG,EAAEwK,YAAYsJ,MAAM,IAAInN,EAAE3G,EAAE2G,EAAEwI,QAAQsG,SAAShP,IAAI4I,IAAI,EAAE7J,KAAK,CAAC,IAAIxF,EAAEwK,YAAYsJ,OAAOnN,EAAE,OAAOwI,QAAQsG,SAAShP,IAAI4I,IAAI,EAAE,IAAI,GAAG,GAAG,IAAIrP,EAAEmP,QAAQsG,SAAShP,IAAI4I,IAAI,EAAE,IAAI,MAAM,GAAGqD,KAAKvD,QAAQC,KAAK3I,IAAIjB,GAAG,IAAIe,EAAE,OAAO,EAAE4I,QAAQsG,SAAShP,IAAI4I,IAAI,EAAE7J,GAAG,OAAO,EAAE,GAAG,eAAeA,EAAE2J,QAAQuG,KAAKjP,IAAIjB,GAAG,EAAEe,EAAEI,IAAI,OAAO,GAAG,GAAG,cAAcnB,EAAE,OAAO,EAAE,GAAG,OAAOA,EAAE,OAAO,EAAE,KAAK,6CAA6CA,EAAE,SAASmQ,KAAK3N,GAAGF,IAAI2C,IAAIA,EAAE,IAAIA,EAAE,8IAA8IA,EAAE,4IAA4I,EAAEM,EAAE,8IAA8IjE,EAAE8O,oBAAoB,SAASpQ,EAAEU,GAAG2P,GAAGrQ,EAAEU,GAAG4P,GAAGtQ,IAAIsB,EAAEiP,iBAAiB,SAASvQ,EAAEU,GAAG,OAAOuH,EAAEjL,IAAIgD,EAANiI,CAASvH,IAAI4J,GAAG9H,EAAE,WAAW,IAAIxC,EAAEyC,QAAQ+N,SAAS,OAAO,IAAIxQ,EAAE,GAAGA,EAAE,GAAG,KAAK1B,EAAE,WAAW,OAAO0G,YAAYsJ,MAAMhN,EAAEmP,+BAA+B,WAAW,OAAOzL,YAAYsJ,OAAO,IAAIoC,GAAG,GAAGC,GAAG,CAAC,KAAK,GAAG,IAAI,SAASC,GAAG5Q,EAAEU,GAAG,IAAIK,EAAE4P,GAAG3Q,GAAG,IAAIU,GAAG,KAAKA,IAAI,IAAIV,EAAEmF,EAAEI,GAAGgB,EAAExF,EAAE,IAAIA,EAAEtG,OAAO,GAAGsG,EAAEpG,KAAK+F,GAAG,IAAImQ,GAAG,GAAG,SAASC,GAAG9Q,EAAEU,GAAG,OAAOpC,EAAEqQ,GAAG,EAAE,EAAE3O,EAAEU,IAAIV,EAAE2G,EAAE3G,GAAG6Q,GAAGE,GAAG/Q,EAAEU,IAAI,SAASsQ,GAAGhR,EAAEU,EAAEK,GAAG,OAAOzC,EAAEqQ,GAAG,EAAE,EAAE3O,EAAEU,EAAEK,GAAG,EAAE,SAASkQ,GAAGjR,EAAEU,GAAG,GAAGpC,EAAE,OAAOqQ,GAAG,EAAE,EAAE3O,EAAEU,GAAG,SAASwQ,GAAGlR,EAAEU,EAAEK,GAAG,GAAGzC,EAAE,OAAOqQ,GAAG,EAAE,EAAE3O,EAAEU,EAAEK,GAAG,SAASoQ,GAAGnR,EAAEU,EAAEK,GAAG,OAAOzC,EAAEqQ,GAAG,EAAE,EAAE3O,EAAEU,EAAEK,GAAG,EAAE,SAASqQ,GAAGpR,EAAEU,GAAG,GAAGpC,EAAE,OAAOqQ,GAAG,EAAE,EAAE3O,EAAEU,GAAG,SAAS2Q,GAAGrR,EAAEU,GAAG,OAAOpC,EAAEqQ,GAAG,EAAE,EAAE3O,EAAEU,IAAIV,EAAE2G,EAAE3G,GAAG6Q,GAAGS,GAAGtR,EAAEU,IAAI,SAAS6Q,GAAGvR,EAAEU,EAAEO,EAAEE,EAAE3G,EAAE8G,GAAG,GAAGhD,EAAEoC,EAAEiO,GAAG,EAAE,EAAE3O,EAAEU,EAAEO,EAAEE,EAAE3G,EAAE8G,QAAQ,GAAGA,IAAI,GAAG,IAAI,GAAGH,IAAI,GAAGnB,EAAE,MAAMU,GAAG,QAAQ,GAAG,IAAI,GAAGS,GAAG,CAAC,IAAII,EAAE,MAAMiQ,KAAKC,KAAK/Q,EAAE,QAAQV,EAAE0R,GAAG,MAAMnQ,IAAIR,IAAI4Q,KAAK,EAAE3R,EAAEA,EAAEuB,GAAGvB,EAAE,EAAEA,GAAG0Q,GAAG1Q,GAAG,CAAC4R,GAAG5R,EAAE6R,GAAGnR,EAAEoR,IAAG,EAAGC,GAAGvX,EAAEwX,GAAG/Q,EAAEgR,MAAM9Q,EAAE+Q,OAAO5Q,GAAGZ,EAAEV,GAAGU,GAAG,QAAQA,GAAG,GAAG,OAAOA,EAAE,SAASyR,GAAGnS,EAAEU,GAAG,GAAGpC,EAAE0B,EAAE2O,GAAG,GAAG,EAAE3O,EAAEU,OAAO,CAAC,IAAIK,EAAE2P,GAAG1Q,GAAG,IAAIU,GAAGK,GAAGL,IAAIK,EAAE8Q,KAAKnB,GAAG1Q,GAAG,KAAKe,EAAE+Q,IAAIvF,GAAGxL,EAAE6Q,KAAK5R,EAAE,GAAGA,GAAG,GAAG,OAAOA,EAAE,SAASoS,GAAGpS,EAAEU,EAAEK,GAAG,GAAGzC,EAAE,OAAOqQ,GAAG,GAAG,EAAE3O,EAAEU,EAAEK,GAAG,SAASsR,GAAGrS,EAAEU,EAAEK,GAAG,OAAOzC,EAAEqQ,GAAG,GAAG,EAAE3O,EAAEU,EAAEK,IAAIf,EAAE2G,EAAE3G,GAAG6Q,GAAGyB,GAAGtS,EAAEU,EAAEK,IAAI,SAASwR,GAAGvS,GAAG,GAAG1B,EAAE,OAAOqQ,GAAG,GAAG,EAAE3O,GAAG,SAASwS,GAAGxS,EAAEU,GAAG,GAAGpC,EAAE,OAAOqQ,GAAG,GAAG,EAAE3O,EAAEU,GAAG,SAAS+R,GAAGzS,GAAG,GAAG1B,EAAE,OAAOqQ,GAAG,GAAG,EAAE3O,GAAG,SAAS0S,KAAK,GAAGpU,EAAE,OAAOqQ,GAAG,GAAG,GAAGhL,KAAK,IAAIgP,GAAG,GAAG,SAAShE,GAAG3O,EAAEU,GAAG,IAAI,IAAIK,EAAE6R,UAAUnY,OAAO,EAAEwG,EAAE4R,KAAK1R,EAAE2R,GAAG,EAAE/R,GAAGO,EAAEH,GAAG,EAAEI,EAAE,EAAEA,EAAER,EAAEQ,IAAI,CAAC,IAAIC,EAAEoR,UAAU,EAAErR,GAAG/G,IAAI8G,EAAEC,GAAGC,EAAE,OAAOT,EAAEgS,GAAG/S,EAAEe,EAAEI,EAAET,GAAG4P,GAAGrP,GAAGF,EAAE,IAAIiS,GAAG,GAAGC,GAAG,CAAC,EAAE,oBAAoB1S,SAASA,SAAS,EAAE,oBAAoB8B,OAAOA,OAAO,GAAG,SAAS6Q,GAAGlT,GAAG,OAAOA,EAAE,EAAEA,EAAE2G,EAAE3G,GAAGA,EAAEiT,GAAGjT,KAAK,oBAAoBO,SAASA,SAAS4S,cAAcnT,QAAG,GAAQ,SAASoT,GAAGpT,EAAEU,EAAEK,GAAG,IAAII,EAAE+R,GAAGlT,GAAG,IAAImB,EAAE,OAAO,EAAE,GAAGA,EAAEkS,KAAKpS,IAAIE,EAAEkS,IAAI,GAAG3S,EAAEO,IAAIE,EAAEkS,GAAG,GAAG,GAAGtS,IAAII,EAAEmS,IAAInS,EAAEoS,GAAG,CAAC,GAAGpS,EAAEkS,GAAG,CAAClS,EAAEF,IAAIE,EAAEkS,GAAG,GAAG,GAAGrT,EAAEA,EAAE2G,EAAE3G,GAAG,GAAG,IAAIxF,EAAEqY,KAAKvR,EAAEwR,GAAG,IAAIvR,EAAE,EAAE,GAAGvB,EAAE,CAACuB,EAAEwF,EAAE/G,GAAG,EAAE,IAAIwB,EAAEyF,GAAG1F,GAAGuF,EAAE9G,EAAEwB,EAAED,GAAGA,EAAEC,EAAE,OAAOP,IAAIK,GAAG,GAAGC,EAAEN,IAAIK,EAAE,GAAG,GAAGZ,EAAEO,IAAIK,EAAE,GAAG,GAAGP,EAAEyS,GAAG,EAAErS,EAAE,UAAU,EAAEI,EAAED,GAAGgP,GAAG9V,GAAG,EAAE,OAAO,EAAE,OAAO2G,EAAEmS,KAAKnS,EAAEA,EAAEmS,IAAItT,GAAE,EAAGmB,EAAEsS,IAAItS,EAAEsS,GAAGC,KAAK1T,EAAE,KAAKA,EAAEmB,EAAEsS,GAAGC,GAAGC,aAAa,OAAO,IAAI,IAAI3T,EAAE,IAAIA,EAAE,KAAKmB,EAAEyS,OAAO5T,EAAE,KAAKmB,EAAE0S,QAAQ1S,EAAEyS,MAAMlT,EAAES,EAAE0S,OAAO9S,EAAEf,GAAGmB,EAAEsS,GAAGC,GAAGI,SAAS,EAAE,EAAEpT,EAAEK,GAAG,EAAE,SAASgT,GAAG/T,EAAEU,EAAEK,GAAG,OAAOzC,EAAEqQ,GAAG,GAAG,EAAE3O,EAAEU,EAAEK,GAAGqS,GAAGpT,EAAEU,EAAEK,GAAG,IAAIiT,GAAGC,GAAG,CAAC,UAAU,YAAY,oBAAoBC,GAAG,GAAG,SAASC,KAAK,IAAIH,GAAG,CAAC,IAAIhU,EAAEU,EAAE,CAAC0T,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAiBC,WAAWA,UAAUC,WAAWD,UAAUC,UAAU,IAAI,KAAKpR,QAAQ,IAAI,KAAK,SAASnB,EAAEP,GAAG,kBAAkB,IAAI7B,KAAKkU,QAAG,IAASA,GAAGlU,UAAUU,EAAEV,GAAGU,EAAEV,GAAGkU,GAAGlU,GAAG,IAAIe,EAAE,GAAG,IAAIf,KAAKU,EAAEK,EAAEpG,KAAKqF,EAAE,IAAIU,EAAEV,IAAIgU,GAAGjT,EAAE,OAAOiT,GAAG,SAASY,GAAG5U,EAAEe,GAAG,GAAGzC,EAAE,OAAOqQ,GAAG,GAAG,EAAE3O,EAAEe,GAAG,IAAII,EAAE,EAAE,OAAOgT,KAAKU,SAAQ,SAAUra,EAAE8G,GAAG,IAAIC,EAAER,EAAEI,EAAE,IAAIG,EAAEL,IAAIjB,EAAE,EAAEsB,GAAG,GAAGC,EAAEA,EAAE,EAAEA,EAAE/G,EAAEC,SAAS8G,EAAEb,IAAIY,KAAK,GAAG9G,EAAEqM,WAAWtF,GAAGb,IAAIY,GAAG,GAAG,EAAEH,GAAG3G,EAAEC,OAAO,KAAK,EAAE,SAASqa,GAAG9U,EAAEU,GAAG,GAAGpC,EAAE,OAAOqQ,GAAG,GAAG,EAAE3O,EAAEU,GAAG,IAAIK,EAAEoT,KAAKlT,IAAIjB,GAAG,GAAGe,EAAEtG,OAAO,IAAI0G,EAAE,EAAE,OAAOJ,EAAE8T,SAAQ,SAAU7U,GAAGmB,GAAGnB,EAAEvF,OAAO,KAAKwG,IAAIP,GAAG,GAAGS,EAAE,EAAE,SAAS4T,GAAG/U,GAAG,OAAO1B,EAAEqQ,GAAG,GAAG,EAAE3O,GAAG,EAAE,SAASgV,GAAGhV,EAAEe,GAAG,OAAOzC,EAAEqQ,GAAG,GAAG,EAAE3O,EAAEe,IAAIf,EAAE,GAAGA,GAAG,GAAGA,EAAE,EAAE2D,KAAKjD,IAAIK,GAAG,GAAGf,EAAE,GAAG,SAASiV,GAAGjV,EAAEU,EAAEK,EAAEI,GAAG,OAAO7C,EAAEqQ,GAAG,GAAG,EAAE3O,EAAEU,EAAEK,EAAEI,IAAInB,EAAE6Q,GAAGqE,GAAGlV,GAAGU,EAAEmQ,GAAGsE,GAAGnV,EAAEU,EAAEK,GAAGE,IAAIE,GAAG,GAAGT,EAAE,GAAG,SAAS0U,GAAGpV,EAAEU,EAAEK,EAAEE,EAAEE,GAAG,GAAG7C,EAAE,OAAOqQ,GAAG,GAAG,EAAE3O,EAAEU,EAAEK,EAAEE,EAAEE,GAAG,SAASkU,GAAGrV,EAAEU,EAAES,EAAE3G,GAAG,GAAG8D,EAAE,OAAOqQ,GAAG,GAAG,EAAE3O,EAAEU,EAAES,EAAE3G,GAAG,IAAI,IAAI8G,EAAE,EAAEC,EAAE,EAAEA,EAAEJ,EAAEI,IAAI,CAAC,IAAI,IAAIC,EAAEP,IAAIP,EAAE,EAAEa,GAAG,GAAGI,EAAEV,IAAIP,GAAG,EAAEa,EAAE,IAAI,GAAGK,EAAE,EAAEA,EAAED,EAAEC,IAAIgP,GAAG5Q,EAAEe,IAAIS,EAAEI,IAAIN,GAAGK,EAAE,OAAOV,IAAIzG,GAAG,GAAG8G,EAAE,EAAE,SAASgU,KAAK,SAAStV,EAAEA,GAAG,OAAOA,EAAEA,EAAEuV,eAAeC,MAAM,sBAAsBxV,EAAE,GAAG,MAAM,GAAG1B,EAAE,OAAOqQ,GAAG,GAAG,GAAG,IAAI2G,GAAGG,GAAG,CAACH,GAAGG,IAAG,EAAG,IAAI/U,GAAE,IAAK8N,MAAMkH,cAAc3U,EAAE,IAAIyN,KAAK9N,EAAE,EAAE,GAAGS,EAAE,IAAIqN,KAAK9N,EAAE,EAAE,GAAGA,EAAEK,EAAE4U,oBAAoB,IAAInb,EAAE2G,EAAEwU,oBAAoBrU,EAAEkQ,KAAKoE,IAAIlV,EAAElG,GAAGyG,IAAI4U,MAAM,GAAG,GAAGvU,EAAEL,IAAI6U,MAAM,GAAGzY,OAAOqD,GAAGlG,GAAGuG,EAAEf,EAAEe,GAAGI,EAAEnB,EAAEmB,GAAGJ,EAAEiG,EAAEjG,GAAGI,EAAE6F,EAAE7F,GAAG3G,EAAEkG,GAAGO,IAAI8U,MAAM,GAAGhV,EAAEE,IAAI8U,KAAK,GAAG,GAAG5U,IAAIF,IAAI8U,MAAM,GAAG5U,EAAEF,IAAI8U,KAAK,GAAG,GAAGhV,IAAI,SAASiV,GAAGhW,GAAG,OAAO,GAAGA,EAAE,IAAI,GAAGA,EAAE,KAAK,GAAGA,EAAE,KAAK,SAASiW,GAAGjW,EAAEU,GAAG,IAAI,IAAIK,EAAE,EAAEE,EAAE,EAAEA,GAAGP,EAAEK,GAAGf,EAAEiB,MAAM,OAAOF,EAAE,IAAImV,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,SAASC,GAAGpW,EAAEU,GAAG,IAAIV,EAAE,IAAIwO,KAAKxO,EAAEqW,WAAW,EAAE3V,GAAG,CAAC,IAAIK,EAAEf,EAAEsW,WAAWrV,GAAG+U,GAAGhW,EAAE0V,eAAeQ,GAAGC,IAAIpV,GAAG,KAAKL,EAAEO,EAAEjB,EAAEuW,WAAW,CAACvW,EAAEwW,QAAQxW,EAAEuW,UAAU7V,GAAG,MAAMA,GAAGO,EAAEjB,EAAEuW,UAAU,EAAEvW,EAAEwW,QAAQ,GAAG,GAAGzV,EAAEf,EAAEyW,SAAS1V,EAAE,IAAIf,EAAEyW,SAAS,GAAGzW,EAAE0W,YAAY1W,EAAE0V,cAAc,IAAI,OAAO1V,EAAE,SAAS2W,GAAG3W,EAAEe,EAAEI,EAAE3G,GAAG,SAAS8G,EAAEtB,EAAEU,EAAEK,GAAG,IAAIf,EAAE,iBAAiBA,EAAEA,EAAE4W,WAAW5W,GAAG,GAAGA,EAAEvF,OAAOiG,GAAGV,EAAEe,EAAE,GAAGf,EAAE,OAAOA,EAAE,SAASuB,EAAEvB,EAAEU,GAAG,OAAOY,EAAEtB,EAAEU,EAAE,KAAK,SAASc,EAAExB,EAAEU,GAAG,SAASK,EAAEf,GAAG,OAAO,EAAEA,GAAG,EAAE,EAAEA,EAAE,EAAE,EAAE,IAAIiB,EAAE,OAAO,KAAKA,EAAEF,EAAEf,EAAE0V,cAAchV,EAAEgV,iBAAiB,KAAKzU,EAAEF,EAAEf,EAAEsW,WAAW5V,EAAE4V,eAAerV,EAAEF,EAAEf,EAAEuW,UAAU7V,EAAE6V,YAAYtV,EAAE,SAASU,EAAE3B,GAAG,OAAOA,EAAE6W,UAAU,KAAK,EAAE,OAAO,IAAIrI,KAAKxO,EAAE0V,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO1V,EAAE,KAAK,EAAE,OAAO,IAAIwO,KAAKxO,EAAE0V,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIlH,KAAKxO,EAAE0V,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIlH,KAAKxO,EAAE0V,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIlH,KAAKxO,EAAE0V,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO,IAAIlH,KAAKxO,EAAE0V,cAAc,EAAE,GAAG,KAAK,SAAS9T,EAAE5B,GAAGA,EAAEoW,GAAG,IAAI5H,KAAKxO,EAAE8W,GAAG,KAAK,EAAE,GAAG9W,EAAE+W,IAAI,IAAIrW,EAAE,IAAI8N,KAAKxO,EAAE0V,cAAc,EAAE,EAAE,GAAG3U,EAAEY,EAAE,IAAI6M,KAAKxO,EAAE0V,cAAc,EAAE,IAAI,OAAOhV,EAAEiB,EAAEjB,GAAG,GAAGc,EAAET,EAAEf,GAAG,GAAGwB,EAAEd,EAAEV,GAAGA,EAAE0V,cAAc,EAAE1V,EAAE0V,cAAc1V,EAAE0V,cAAc,EAAE,IAAI7T,EAAEZ,IAAIzG,EAAE,IAAI,GAAG,IAAI,IAAIsH,KAAKtH,EAAE,CAACwc,GAAG/V,IAAIzG,GAAG,GAAGyc,GAAGhW,IAAIzG,EAAE,GAAG,GAAG0c,GAAGjW,IAAIzG,EAAE,GAAG,GAAG2c,GAAGlW,IAAIzG,EAAE,IAAI,GAAG4c,GAAGnW,IAAIzG,EAAE,IAAI,GAAGsc,GAAG7V,IAAIzG,EAAE,IAAI,GAAG6c,GAAGpW,IAAIzG,EAAE,IAAI,GAAGuc,GAAG9V,IAAIzG,EAAE,IAAI,GAAG8c,GAAGrW,IAAIzG,EAAE,IAAI,GAAG+c,GAAGtW,IAAIzG,EAAE,IAAI,GAAGgd,GAAG3V,EAAE8E,EAAE9E,GAAG,IAAIV,EAAEwF,EAAExF,GAAGU,EAAE,CAAC,KAAK,uBAAuB,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,cAAc,KAAK,QAAQ,KAAK,WAAW,KAAK,WAAW,KAAK,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,WAAW,MAAM,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,MAAMV,EAAEA,EAAEoC,QAAQ,IAAIkU,OAAO3V,EAAE,KAAKD,EAAEC,IAAI,IAAIC,EAAE,2DAA2D2V,MAAM,KAAK1V,EAAE,wFAAwF0V,MAAM,KAAK,IAAI5V,KAAKD,EAAE,CAAC,KAAK,SAAS7B,GAAG,OAAO+B,EAAE/B,EAAEqX,IAAIM,UAAU,EAAE,IAAI,KAAK,SAAS3X,GAAG,OAAO+B,EAAE/B,EAAEqX,KAAK,KAAK,SAASrX,GAAG,OAAOgC,EAAEhC,EAAEoX,IAAIO,UAAU,EAAE,IAAI,KAAK,SAAS3X,GAAG,OAAOgC,EAAEhC,EAAEoX,KAAK,KAAK,SAASpX,GAAG,OAAOuB,GAAGvB,EAAE8W,GAAG,MAAM,IAAI,EAAE,IAAI,KAAK,SAAS9W,GAAG,OAAOuB,EAAEvB,EAAEmX,GAAG,IAAI,KAAK,SAASnX,GAAG,OAAOsB,EAAEtB,EAAEmX,GAAG,EAAE,MAAM,KAAK,SAASnX,GAAG,OAAO4B,EAAE5B,GAAG4W,WAAWe,UAAU,IAAI,KAAK,SAAS3X,GAAG,OAAO4B,EAAE5B,IAAI,KAAK,SAASA,GAAG,OAAOuB,EAAEvB,EAAEkX,GAAG,IAAI,KAAK,SAASlX,GAAG,OAAO,IAAIA,EAAEA,EAAEkX,IAAIlX,EAAE,GAAG,GAAGA,IAAIA,GAAG,IAAIuB,EAAEvB,EAAE,IAAI,KAAK,SAASA,GAAG,OAAOuB,EAAEvB,EAAEmX,GAAGlB,GAAGD,GAAGhW,EAAE8W,GAAG,MAAMZ,GAAGC,GAAGnW,EAAEoX,GAAG,GAAG,IAAI,KAAK,SAASpX,GAAG,OAAOuB,EAAEvB,EAAEoX,GAAG,EAAE,IAAI,KAAK,SAASpX,GAAG,OAAOuB,EAAEvB,EAAEiX,GAAG,IAAI,KAAK,WAAW,MAAM,MAAM,KAAK,SAASjX,GAAG,OAAO,GAAGA,EAAEkX,IAAI,GAAGlX,EAAEkX,GAAG,KAAK,MAAM,KAAK,SAASlX,GAAG,OAAOuB,EAAEvB,EAAEgX,GAAG,IAAI,KAAK,WAAW,MAAM,MAAM,KAAK,SAAShX,GAAG,OAAOA,EAAEqX,IAAI,GAAG,KAAK,SAASrX,GAAG,IAAIU,EAAE,IAAI8N,KAAKxO,EAAE8W,GAAG,KAAK,EAAE,GAAG/V,EAAE,IAAIL,EAAEmW,SAASnW,EAAE0V,GAAG1V,EAAE,EAAEA,EAAEmW,UAAU,OAAO,EAAErV,EAAET,EAAEf,EAAE,IAAIwO,KAAKxO,EAAE8W,GAAG,KAAK9W,EAAEoX,GAAGpX,EAAEmX,KAAK5V,EAAEiQ,KAAKC,MAAM,GAAG1Q,EAAEwV,WAAWN,GAAGD,GAAGhW,EAAE0V,eAAeQ,GAAGC,GAAGnW,EAAEsW,WAAW,GAAG,IAAItW,EAAEuW,WAAW,GAAG,GAAG,IAAI/U,EAAET,EAAEL,GAAG,KAAK,MAAM,KAAK,SAASV,GAAG,IAAIU,EAAE,IAAI8N,KAAKxO,EAAE8W,GAAG,KAAK,EAAE,GAAG/V,EAAEY,EAAE,IAAI6M,KAAKxO,EAAE8W,GAAG,KAAK,EAAE,IAAIpW,EAAEiB,EAAEjB,GAAG,IAAIO,EAAEmV,GAAG,IAAI5H,KAAKxO,EAAE8W,GAAG,KAAK,EAAE,GAAG9W,EAAE+W,IAAI,OAAO,EAAEvV,EAAEP,EAAEF,GAAG,KAAK,GAAGS,EAAEd,EAAEO,GAAG,KAAKM,EAAEiQ,KAAKC,MAAM1Q,EAAE2U,cAAc1V,EAAE8W,GAAG,KAAK9W,EAAE+W,GAAG,GAAGhW,EAAEwV,UAAUvW,EAAE+W,GAAG,EAAEhW,EAAEwV,WAAW,GAAG,IAAI,KAAK,SAASvW,GAAG,OAAOA,EAAEqX,IAAI,KAAK,SAASrX,GAAG,IAAIU,EAAE,IAAI8N,KAAKxO,EAAE8W,GAAG,EAAE,GAAG/V,EAAE,IAAIL,EAAEmW,SAASnW,EAAE0V,GAAG1V,EAAE,IAAIA,EAAEmW,SAAS,EAAE,EAAEnW,EAAEmW,SAAS,GAAG,OAAO,EAAErV,EAAET,EAAEf,EAAE,IAAIwO,KAAKxO,EAAE8W,GAAG,KAAK9W,EAAEoX,GAAGpX,EAAEmX,KAAK5V,EAAEiQ,KAAKC,MAAM,GAAG1Q,EAAEwV,WAAWN,GAAGD,GAAGhW,EAAE0V,eAAeQ,GAAGC,GAAGnW,EAAEsW,WAAW,GAAG,IAAItW,EAAEuW,WAAW,GAAG,GAAG,IAAI/U,EAAET,EAAEL,GAAG,KAAK,MAAM,KAAK,SAASV,GAAG,OAAOA,EAAE8W,GAAG,MAAMF,WAAWe,UAAU,IAAI,KAAK,SAAS3X,GAAG,OAAOA,EAAE8W,GAAG,MAAM,KAAK,SAAS9W,GAAG,IAAIU,EAAE,IAAIV,EAAEA,EAAEuX,IAAI,OAAOvX,EAAEwR,KAAKoG,IAAI5X,GAAG,IAAIU,EAAE,IAAI,KAAK+F,OAAO,QAAQzG,EAAE,GAAG,IAAIA,EAAE,KAAKwD,OAAO,IAAI,KAAK,SAASxD,GAAG,OAAOA,EAAEwX,IAAI,KAAK,WAAW,MAAM,MAAMrW,EAAE0W,SAAS/V,KAAKX,EAAEA,EAAEoC,QAAQ,IAAIkU,OAAO3V,EAAE,KAAKD,EAAEC,GAAGtH,KAAK,OAAOsH,EAAE,SAAS9B,GAAG,IAAIU,EAAE7D,MAAMkK,EAAE/G,GAAG,GAAG,OAAO4G,EAAE5G,EAAEU,EAAE,EAAEA,EAAEjG,QAAQiG,EAAzD,CAA4DS,GAAGW,EAAErH,OAAOsG,EAAE,GAAG,SAASf,EAAEe,GAAGL,IAAIrE,IAAI2D,EAAEe,GAAxB,CAA4Be,EAAE9B,GAAG8B,EAAErH,OAAO,GAAG,IAAIqd,GAAG,CAAC,KAAKpJ,GAAGoC,GAAGE,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGE,GAAGY,GAAGC,GAAGC,GAAGE,GAAGC,GAAGC,GAAGC,GAAGqB,GAAGa,GAAGE,GAAGC,GAAGC,GAAGC,GAAGG,GAAGC,GAAGC,IAAIyC,GAAG,CAAC7V,EAAE,SAASlC,EAAEU,EAAEK,EAAEE,GAAG0C,GAAG,qBAAqBgD,EAAE3G,GAAG,SAAS,CAACU,EAAEiG,EAAEjG,GAAG,mBAAmBK,EAAEE,EAAE0F,EAAE1F,GAAG,sBAAsBsE,EAAE,SAASvF,EAAEU,GAAG,OAAO6N,GAAGvO,EAAEU,IAAIuB,EAAE,SAASjC,GAAG,OAAOiH,GAAGjH,EAAE,IAAI,IAAI+B,EAAE,SAAS/B,EAAEU,GAAG,OAAOgO,GAAG1O,EAAEU,IAAIV,EAAE,SAASA,EAAEU,GAAGuJ,GAAGyB,GAAG/Q,MAAK,WAAYsN,EAAEjL,IAAIgD,EAANiI,CAASvH,OAAOiB,EAAE,SAAS3B,EAAEU,EAAEK,GAAG,MAAM,IAAI6N,GAAG5O,GAAGmP,GAAGzO,EAAEK,GAAGf,GAAGiI,EAAE,SAASjI,EAAEU,EAAEK,EAAEvG,GAAG,GAAG,oBAAoB0E,kBAAkB,OAAOqG,EAAE,uFAAuF,EAAE,IAAIvF,EAAE,OAAOuF,EAAE,qDAAqD,GAAG,IAAIjE,EAAE,GAAG,GAAGhD,GAAG,IAAIgD,EAAE7G,OAAO,OAAOud,GAAG,UAAUhY,EAAEU,EAAEK,EAAEvG,GAAG,IAAI+G,EAAE,EAAEC,EAAE,EAAE,GAAGd,IAAI,GAAGA,EAAE,CAAC,IAAIiB,EAAEV,IAAIP,GAAG,GAAGiB,GAAG,MAAMJ,EAAEN,IAAIP,EAAE,GAAG,GAAGc,EAAE,IAAIP,IAAIP,EAAE,IAAI,QAAQiB,EAAE,SAASjB,EAAE,GAAGa,GAAGA,EAAEmQ,GAAG,GAAG/P,GAAGyB,EAAE,GAAG7B,GAAGI,IAAI,IAAI,IAAIC,EAAEqF,GAAG,KAAKpF,EAAE,EAAE,GAAGA,IAAIA,EAAEV,KAAKS,GAAG,GAAGC,GAAG,EAAE,OAAOZ,IAAIjB,GAAG,GAAG4B,EAAEX,IAAIW,EAAE,IAAI,GAAGA,EAAE5B,EAAE4B,EAAE,IAAIX,IAAIjB,GAAG,GAAGA,EAAEe,EAAE,CAAC0L,GAAGlL,EAAE8N,GAAG1N,EAAE6K,GAAG9L,EAAE4O,SAAS9N,EAAEiO,GAAG1O,EAAEqO,GAAGxN,EAAE6H,GAAGjP,EAAEuV,GAAGzO,GAAGhD,GAAGyC,EAAEkX,GAAG,cAAcjM,YAAYjL,EAAEO,GAAG,GAAG6L,GAAGpM,IAAIiG,EAAE,SAAShH,GAAG,MAAM1B,EAAE2L,GAAGsB,GAAGvL,IAAIiK,GAAG0B,KAAK+B,GAAG1N,IAAI,UAAUY,EAAE,SAASZ,EAAEU,GAAG,OAAO,SAASV,EAAEU,GAAG,IAAIV,EAAE,OAAOuF,EAAE,oDAAoD,GAAG,GAAGjH,GAAGyN,MAAM/L,EAAE,OAAOuF,EAAE,WAAWvF,EAAE,qCAAqC,GAAG,IAAI1B,GAAG4Z,MAAMlY,EAAE,OAAOuF,EAAE,eAAevF,EAAE,qCAAqC,GAAG,GAAGiB,IAAIjB,EAAE,IAAI,KAAKA,EAAE,OAAOuF,EAAE,oCAAoCvF,EAAE,wEAAwE,GAAG,GAAG2J,QAAQC,KAAKzI,IAAInB,EAAE,IAAI,GAAG,OAAOuF,EAAE,4BAA4BvF,EAAE,iCAAiC,GAAG,IAAImQ,OAAO,CAAC,IAAIpP,EAAE4I,QAAQC,KAAKzI,IAAInB,EAAE,GAAG,GAAG,GAAG,GAAGe,EAAE,OAAOA,EAAE4I,QAAQC,KAAKzI,IAAInB,EAAE,GAAG,GAAGU,IAAIO,IAAIP,GAAG,GAAGK,GAAG4I,QAAQiB,MAAMzJ,IAAInB,EAAE,IAAI,EAAE,GAAG1B,EAAE0N,YAAY,CAACC,IAAI,gBAAgBmB,OAAOpN,IAAIgK,GAAGhK,GAAG,EAAEmY,KAAK7Z,GAAG4O,KAAK8C,GAAGhQ,EAAE,EAAEe,EAAEzC,EAAE,IAAI,IAA5rB,CAAisB0B,EAAEU,IAAIkG,EAAEkK,GAAGtP,EAAEwP,GAAGrQ,EAAEsQ,GAAGlK,EAAEmK,GAAG3P,EAAE,WAAW,OAAO,IAAI6B,EAAE+N,GAAGtQ,EAAEuQ,GAAGtQ,EAAEuQ,GAAGjQ,EAAEmQ,GAAGzO,EAAEqP,GAAGjR,EAAEkR,GAAGjK,EAAEkK,GAAGvL,EAAEyL,GAAGjU,EAAEkU,GAAGxP,EAAEyP,GAAG2F,GAAG,SAASpY,EAAEU,GAAG,GAAGV,GAAGU,EAAEsL,YAAY,CAACC,IAAI,qCAAqC,GAAG3N,EAAE0N,YAAY,CAACe,aAAa/M,EAAEiM,IAAI,2BAA2B,CAAC,KAAKjM,GAAGA,EAAEiK,GAAGC,GAAGlK,KAAKA,EAAEoK,QAAQ,OAAOpK,EAAEgM,YAAY,CAACC,IAAI,uBAAuB,OAAO,GAAGrK,EAAE8Q,GAAGlQ,EAAE+L,GAAG8J,GAAG,SAASrY,EAAEU,GAAG,OAAOV,EAAEU,GAAGmC,EAAE,WAAWc,GAAG,gIAAgI9B,EAAE,WAAW8B,GAAG,gIAAgIqC,EAAE,WAAWrC,GAAG,gIAAgIgD,EAAE,WAAWhD,GAAG,gIAAgI2U,GAAG,SAAStY,EAAEU,EAAES,GAAG,IAAIG,EAAE,IAAIqR,GAAGlY,OAAO,EAAE0G,IAAI,EAAEG,EAAEP,IAAIL,OAAOY,EAAE,IAAIA,IAAI,EAAEH,GAAGA,IAAIwR,GAAGhY,KAAK2G,EAAE9G,IAAI2G,KAAK,GAAGF,IAAIE,MAAMA,EAAE,OAAOmI,GAAGtJ,GAAGuY,MAAM,KAAK5F,KAAKrM,EAAE6J,GAAGpP,EAAE,aAAakE,EAAE+K,GAAG7J,EAAEuD,GAAG1I,EAAE,WAAW,OAAO,YAAYxG,EAAE8P,GAAGzE,EAAE,SAAS7F,EAAEU,EAAEO,GAAGF,IAAIyX,WAAWxY,EAAEU,EAAEA,EAAEO,IAAIK,EAAE,WAAW,OAAOkB,EAAE,eAAqB/H,OAAOia,UAAU+D,qBAAqBC,GAAG,SAAS1Y,EAAEU,EAAEK,GAAGiS,GAAGvY,OAAOiG,EAAEK,IAAI,EAAE,IAAI,IAAIE,EAAE,EAAEA,EAAEP,EAAEO,IAAI+R,GAAG/R,GAAGzG,IAAIuG,EAAEE,GAAG,OAAO,EAAEjB,EAAEsJ,IAAItJ,EAAE,GAAG8X,GAAG9X,IAAIuY,MAAM,KAAKvF,KAAK9N,EAAE,SAASlF,GAAG,IAAIU,EAAEK,IAAItG,OAAO,IAAIuF,KAAK,IAAIU,GAAG,WAAWV,EAAE,OAAM,EAAG,IAAI,IAAIiB,EAAE,EAAE,GAAGA,EAAEA,GAAG,EAAE,CAAC,IAAIE,EAAET,GAAG,EAAE,GAAGO,GAAGE,EAAEqQ,KAAKmH,IAAIxX,EAAEnB,EAAE,WAAW,GAAGmB,EAAEqQ,KAAKoE,IAAI5V,EAAEmB,IAAI,QAAQA,GAAG,MAAMA,EAAE,OAAOnB,EAAE,CAAC,IAAIW,EAAEiY,KAAKpH,KAAKmH,IAAI,WAAWxX,GAAGP,EAAEvB,WAAW,QAAQ,IAAIwB,EAAEF,EAAExB,QAAQ,IAAI3E,EAAE,EAAE,MAAMwF,EAAE,MAAMA,IAAIxF,OAAE,EAAO,GAAGA,EAAE,OAAM,EAAG,OAAM,GAAIqe,GAAG,SAAS7Y,EAAEU,EAAEK,GAAG,OAAOmS,GAAGlT,GAAGoT,GAAGpT,EAAEU,EAAEK,GAAGgT,GAAG/T,EAAEU,EAAEK,IAAIoE,EAAE,aAAa+C,EAAE,SAASlI,EAAEU,EAAEK,GAAG,OAAOuH,IAAI,EAAEwQ,YAAW,aAAcxQ,GAAG,SAAStI,GAAG,IAAIkG,EAAE,CAAC,IAAIlG,IAAI,MAAMA,GAAG,GAAGA,aAAa0D,GAAG,OAAO,GAAG,WAAW1D,EAAE,MAAMA,GAAG,iBAAiBA,GAAGA,EAAE+Y,OAAOxT,EAAE,qBAAqB,CAACvF,EAAEA,EAAE+Y,QAAQ/Y,EAAE,IAAI4D,KAAK,IAAItF,EAAE0a,GAAG/S,GAAGyH,GAAGzH,GAAG,MAAMjG,GAAG,KAAKA,aAAa0D,IAAI,MAAM1D,IAA1N,EAA+N,WAAYiI,EAAEjL,IAAIgD,EAANiI,CAASlH,QAAQL,IAAIuY,GAAG,SAASjZ,EAAEU,GAAGA,IAAI,EAAE,IAAIK,EAAEE,IAAIP,EAAE,GAAG,OAAOA,EAAE,CAACwY,QAAQjY,IAAIP,GAAGyY,QAAQlY,IAAIP,EAAE,GAAG0Y,UAAUnY,IAAIP,EAAE,GAAG2Y,YAAYpY,IAAIP,EAAE,GAAG4Y,qBAAqBrY,IAAIP,EAAE,GAAG6Y,wBAAwBtY,IAAIP,EAAE,GAAG8Y,gBAAgBvF,GAAGlT,GAAG0Y,+BAA+BxY,IAAIP,EAAE,GAAGgZ,GAAGzY,IAAIP,EAAE,GAAGiZ,GAAG1Y,IAAIP,EAAE,GAAGkZ,GAAG3Y,IAAIP,EAAE,IAAImZ,GAAG5Y,IAAIP,EAAE,IAAIoZ,GAAG7Y,IAAIP,EAAE,IAAIqZ,GAAG9Y,IAAIP,EAAE,OAAOV,EAAEkT,GAAGlT,KAAKU,EAAEmZ,GAAG,EAAE,SAAS7Z,EAAEU,GAAGV,EAAEga,KAAKha,EAAEga,GAAGha,EAAEia,WAAWja,EAAEia,WAAW,SAASvZ,EAAEK,GAAG,MAAM,SAASL,IAAIK,EAAEf,EAAEga,GAAGtZ,EAAEK,cAAcmZ,sBAAsBnZ,EAAE,OAAO,IAAIA,EAAEf,EAAEia,WAAW,QAAQvZ,GAAG,OAAOK,EAAE,SAASf,EAAEU,GAAG,IAAIK,EAAEkG,GAAG,GAAGhG,IAAIF,EAAE,GAAG,GAAGgL,KAAK,IAAI5K,EAAE,CAACgZ,GAAGpZ,EAAEqZ,WAAW1Z,EAAE2Z,QAAQ3Z,EAAEgZ,GAAGhG,GAAG1T,GAAG,OAAOA,EAAEsa,SAASta,EAAEsa,OAAO7G,GAAGtS,SAAI,IAAST,EAAEkZ,IAAIlZ,EAAEkZ,KAAK,SAAS5Z,GAAG,GAAGA,IAAIA,OAAE,IAASA,EAAEua,GAAG,CAACva,EAAEua,IAAG,EAAG,IAAI7Z,EAAEV,EAAE0T,IAAI,SAAS1T,GAAG,IAAIU,EAAEV,EAAEwa,aAAa,0BAA0B9Z,IAAIV,EAAEya,oBAAoB,SAASza,EAAEe,GAAGL,EAAEga,yBAAyB1a,EAAEe,IAAIf,EAAE2a,oBAAoB,SAAS3a,EAAEe,EAAEE,EAAEE,GAAGT,EAAEka,yBAAyB5a,EAAEe,EAAEE,EAAEE,IAAInB,EAAE6a,sBAAsB,SAAS7a,EAAEe,EAAEE,EAAEE,EAAE3G,GAAGkG,EAAEoa,2BAA2B9a,EAAEe,EAAEE,EAAEE,EAAE3G,KAAlS,CAAwSkG,GAAG,SAASV,GAAG,IAAIU,EAAEV,EAAEwa,aAAa,2BAA2B9Z,IAAIV,EAAE+a,kBAAkB,WAAW,OAAOra,EAAEsa,wBAAwBhb,EAAEib,kBAAkB,SAASjb,GAAGU,EAAEwa,qBAAqBlb,IAAIA,EAAEmb,gBAAgB,SAASnb,GAAGU,EAAE0a,mBAAmBpb,IAAIA,EAAEqb,cAAc,SAASrb,GAAG,OAAOU,EAAE4a,iBAAiBtb,KAAxS,CAA8SU,GAAG,SAASV,GAAG,IAAIU,EAAEV,EAAEwa,aAAa,sBAAsB9Z,IAAIV,EAAEub,YAAY,SAASvb,EAAEe,GAAGL,EAAE8a,iBAAiBxb,EAAEe,KAA5G,CAAkHL,GAAGA,EAAE+a,GAAG/a,EAAE8Z,aAAa,4BAA4B9Z,EAAEgb,GAAGhb,EAAE8Z,aAAa,qBAAqB9Z,EAAEib,0BAA0B,IAAI9G,SAAQ,SAAU7U,GAAGA,EAAE6X,SAAS,iBAAiB7X,EAAE6X,SAAS,UAAUnX,EAAE8Z,aAAaxa,OAAv9B,CAA+9BmB,GAAGJ,EAAjnC,CAAonCA,EAAEL,GAAG,EAA3yC,CAA8yCV,EAAEU,IAAIwF,EAAE0O,GAAGlN,EAAEoN,GAAG9S,EAAE+S,GAAGxO,EAAEyO,GAAGtU,EAAEuU,GAAG5T,EAAE+T,GAAGtT,EAAEuT,GAAGpP,EAAE,SAASjG,GAAG,IAAIU,EAAE8N,KAAKF,MAAM,OAAOrN,IAAIjB,GAAG,GAAGU,EAAE,IAAI,EAAEO,IAAIjB,EAAE,GAAG,GAAGU,EAAE,IAAI,IAAI,EAAE,GAAGkb,GAAG,SAAS5b,EAAEU,EAAEK,GAAG,OAAOL,EAAE,IAAI8N,KAAK,IAAIvN,IAAIP,GAAG,IAAIO,IAAIF,GAAG,GAAGL,EAAEmb,gBAAgB5a,IAAIF,EAAE,GAAG,GAAGL,EAAEob,gBAAgB7a,IAAIF,EAAE,GAAG,GAAGL,EAAEqb,cAAc9a,IAAIF,EAAE,IAAI,GAAGL,EAAEsb,aAAa/a,IAAIF,EAAE,IAAI,GAAGL,EAAEub,cAAchb,IAAIF,EAAE,IAAI,GAAGL,EAAEwb,iBAAiB,KAAKjb,IAAIF,EAAE,IAAI,GAAGL,EAAEyb,YAAYlb,IAAIF,EAAE,IAAI,GAAG,EAAEE,IAAIF,EAAE,IAAI,GAAG,EAAEL,GAAGA,EAAE2V,UAAU7H,KAAK4N,IAAI1b,EAAEwb,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,MAAM,EAAEjb,IAAIF,EAAE,IAAI,GAAGL,EAAEV,EAAEqc,KAAKrc,EAAEqc,GAAGrV,EAAE,QAAQ/F,IAAIF,EAAE,IAAI,GAAGf,EAAEqc,GAAGtb,GAAGqB,EAAE,WAAW6H,GAAGU,MAAM1J,EAAE,SAASjB,EAAEU,GAAG4U,KAAKtV,EAAE,IAAIwO,KAAK,IAAIvN,IAAIjB,GAAG,IAAIiB,IAAIP,GAAG,GAAGV,EAAEsc,aAAarb,IAAIP,EAAE,GAAG,GAAGV,EAAEuc,aAAatb,IAAIP,EAAE,GAAG,GAAGV,EAAEwc,WAAWvb,IAAIP,EAAE,IAAI,GAAGV,EAAEuW,UAAUtV,IAAIP,EAAE,IAAI,GAAGV,EAAEsW,WAAWrV,IAAIP,EAAE,IAAI,GAAGV,EAAE0V,cAAc,KAAKzU,IAAIP,EAAE,IAAI,GAAGV,EAAE6W,SAAS,IAAI9V,EAAE,IAAIyN,KAAKxO,EAAE0V,cAAc,EAAE,GAAGvU,GAAGnB,EAAEqW,UAAUtV,EAAEsV,WAAW,MAAM,EAAE,OAAOpV,IAAIP,EAAE,IAAI,GAAGS,EAAEF,IAAIP,EAAE,IAAI,IAAI,GAAGV,EAAE2V,oBAAoBxU,EAAE,IAAIqN,KAAKxO,EAAE0V,cAAc,EAAE,GAAGC,oBAAoB3V,EAAE,GAAGmB,IAAIJ,EAAEA,EAAE4U,sBAAsB3V,EAAE2V,qBAAqBnE,KAAKmH,IAAI5X,EAAEI,IAAIF,IAAIP,EAAE,IAAI,GAAGV,EAAEA,EAAEiB,IAAI8U,MAAM/V,EAAE,EAAE,IAAI,GAAGiB,IAAIP,EAAE,IAAI,GAAGV,EAAEU,GAAGS,EAAER,GAAGW,EAAEsG,WAAWtF,EAAE,SAAStC,GAAGsV,KAAK,IAAI5U,EAAE,IAAI8N,KAAKvN,IAAIjB,EAAE,IAAI,GAAG,KAAKiB,IAAIjB,EAAE,IAAI,GAAGiB,IAAIjB,EAAE,IAAI,GAAGiB,IAAIjB,EAAE,GAAG,GAAGiB,IAAIjB,EAAE,GAAG,GAAGiB,IAAIjB,GAAG,GAAG,GAAGe,EAAEE,IAAIjB,EAAE,IAAI,GAAGmB,EAAET,EAAEiV,oBAAoBnb,EAAE,IAAIgU,KAAK9N,EAAEgV,cAAc,EAAE,GAAGpU,EAAE,IAAIkN,KAAK9N,EAAEgV,cAAc,EAAE,GAAGC,oBAAoBpU,EAAE/G,EAAEmb,oBAAoBnU,EAAEgQ,KAAKmH,IAAIpX,EAAED,GAAG,OAAO,EAAEP,EAAEE,IAAIjB,EAAE,IAAI,GAAG3C,OAAOiE,GAAGC,GAAGC,GAAGL,GAAG,EAAEJ,IAAIS,GAAGL,KAAKG,EAAEkQ,KAAKoE,IAAIrU,EAAED,GAAGZ,EAAE+b,QAAQ/b,EAAE2V,UAAU,MAAM,EAAEtV,EAAES,EAAEF,GAAGH,KAAKF,IAAIjB,EAAE,IAAI,GAAGU,EAAEmW,SAAS9V,GAAGL,EAAE2V,UAAU7b,EAAE6b,WAAW,MAAM,EAAEpV,IAAIjB,EAAE,IAAI,GAAGe,EAAEE,IAAIjB,GAAG,GAAGU,EAAE4b,aAAarb,IAAIjB,EAAE,GAAG,GAAGU,EAAE6b,aAAatb,IAAIjB,EAAE,GAAG,GAAGU,EAAE8b,WAAWvb,IAAIjB,EAAE,IAAI,GAAGU,EAAE6V,UAAUtV,IAAIjB,EAAE,IAAI,GAAGU,EAAE4V,WAAW5V,EAAE2V,UAAU,IAAI,GAAGqG,GAAG/F,GAAGxU,EAAE,SAASnC,EAAEU,EAAEK,EAAEE,GAAG,OAAO0V,GAAG3W,EAAEU,EAAEK,EAAEE,MAAM,WAAW,SAASjB,EAAEA,EAAEU,GAAGY,EAAEqb,IAAI3c,EAAEzG,QAAQ0O,EAAE3G,EAAEqb,IAAIC,GAAGzU,GAAEO,QAAQpH,EAAEqb,IAAIE,IAAI5S,GAAGQ,GAAG9P,KAAK2G,EAAEqb,IAAIG,IAAI9W,EAAEtF,EAAEpC,IAAIsK,KAAKtH,EAAEyb,wBAAwBzb,EAAEyb,uBAAuBnU,IAAI,GAAGA,KAAK,OAAOC,KAAKmU,cAAcnU,IAAIA,GAAG,MAAMC,KAAK9I,EAAE8I,GAAGA,GAAG,KAAK9I,OAAO,SAASU,EAAEA,GAAGV,EAAEU,EAAEuc,SAASvc,EAAElH,QAAQ,SAASuH,EAAEf,GAAG,OAAO,WAAW,IAAIkF,IAAI9C,GAAGE,GAAG,CAAC,GAAG,mBAAmB4a,QAAQvU,GAAGO,WAAW,WAAW,OAAOgU,MAAMvU,GAAG,CAACwU,YAAY,gBAAgBC,MAAK,SAAUpd,GAAG,IAAIA,EAAEqd,GAAG,KAAK,uCAAuC1U,GAAG,IAAI,OAAO3I,EAAEsd,iBAAiBC,OAAM,WAAY,OAAOpU,QAAQ,GAAGnH,EAAE,OAAO,IAAIN,SAAQ,SAAU1B,EAAEU,GAAGsB,EAAE2G,IAAG,SAAUjI,GAAGV,EAAE,IAAInE,WAAW6E,MAAMA,MAAM,OAAOgB,QAAQ8b,UAAUJ,MAAK,WAAY,OAAOjU,QAA9Y,GAAyZiU,MAAK,SAAUpd,GAAG,OAAO+F,YAAY0X,YAAYzd,EAAEiB,MAAMmc,KAAKpd,GAAE,SAAUA,GAAGuF,EAAE,0CAA0CvF,GAAG2D,GAAG3D,MAAM,IAAIiB,EAAE,CAACE,EAAE4W,IAAI,GAAGzZ,IAAIsK,KAAKtH,EAAEyb,wBAAwBzb,EAAEyb,uBAAuBnU,KAAKtH,EAAEoc,gBAAgB,IAAI,OAAOpc,EAAEoc,gBAAgBzc,EAAEjB,GAAG,MAAMA,GAAG,OAAOuF,EAAE,sDAAsDvF,IAAG,GAAIkF,GAAG,mBAAmBa,YAAY4X,sBAAsB1U,MAAMN,GAAGO,WAAW,YAAY,mBAAmBgU,MAAMnc,EAAEL,GAAGwc,MAAMvU,GAAG,CAACwU,YAAY,gBAAgBC,MAAK,SAAUpd,GAAG,OAAO+F,YAAY4X,qBAAqB3d,EAAEiB,GAAGmc,KAAK1c,GAAE,SAAUV,GAAG,OAAOuF,EAAE,kCAAkCvF,GAAGuF,EAAE,6CAA6CxE,EAAEL,UAAU6c,MAAM/b,GAAr3C,GAA23CF,EAAEsc,mBAAmB,WAAW,OAAOtc,EAAEsc,mBAAmBtc,EAAEqb,IAAIE,IAAItE,MAAM,KAAK3F,YAAYtR,EAAEuc,SAAS,WAAW,OAAOvc,EAAEuc,SAASvc,EAAEqb,IAAImB,IAAIvF,MAAM,KAAK3F,YAAYtR,EAAEyc,yBAAyB,WAAW,OAAOzc,EAAEyc,yBAAyBzc,EAAEqb,IAAIqB,IAAIzF,MAAM,KAAK3F,YAAYtR,EAAE2c,0BAA0B,WAAW,OAAO3c,EAAE2c,0BAA0B3c,EAAEqb,IAAIuB,IAAI3F,MAAM,KAAK3F,YAAYtR,EAAE6c,0BAA0B,WAAW,OAAO7c,EAAE6c,0BAA0B7c,EAAEqb,IAAIyB,IAAI7F,MAAM,KAAK3F,YAAYtR,EAAE+c,kBAAkB,WAAW,OAAO/c,EAAE+c,kBAAkB/c,EAAEqb,IAAI2B,IAAI/F,MAAM,KAAK3F,YAAYtR,EAAEid,mBAAmB,WAAW,OAAOjd,EAAEid,mBAAmBjd,EAAEqb,IAAI6B,IAAIjG,MAAM,KAAK3F,YAAYtR,EAAEmd,kBAAkB,WAAW,OAAOnd,EAAEmd,kBAAkBnd,EAAEqb,IAAI+B,IAAInG,MAAM,KAAK3F,YAAYtR,EAAEqd,mBAAmB,WAAW,OAAOrd,EAAEqd,mBAAmBrd,EAAEqb,IAAIiC,IAAIrG,MAAM,KAAK3F,YAAYtR,EAAEud,iBAAiB,WAAW,OAAOvd,EAAEud,iBAAiBvd,EAAEqb,IAAImC,IAAIvG,MAAM,KAAK3F,YAAYtR,EAAEyd,kBAAkB,WAAW,OAAOzd,EAAEyd,kBAAkBzd,EAAEqb,IAAIqC,IAAIzG,MAAM,KAAK3F,YAAYtR,EAAE2d,SAAS,WAAW,OAAO3d,EAAE2d,SAAS3d,EAAEqb,IAAIuC,IAAI3G,MAAM,KAAK3F,YAAYtR,EAAE6d,iBAAiB,WAAW,OAAO7d,EAAE6d,iBAAiB7d,EAAEqb,IAAIyC,IAAI7G,MAAM,KAAK3F,YAAYtR,EAAE+d,kBAAkB,WAAW,OAAO/d,EAAE+d,kBAAkB/d,EAAEqb,IAAI2C,IAAI/G,MAAM,KAAK3F,YAAYtR,EAAEie,kBAAkB,WAAW,OAAOje,EAAEie,kBAAkBje,EAAEqb,IAAI6C,IAAIjH,MAAM,KAAK3F,YAAYtR,EAAEme,qBAAqB,WAAW,OAAOne,EAAEme,qBAAqBne,EAAEqb,IAAI+C,IAAInH,MAAM,KAAK3F,YAAYtR,EAAEqe,sBAAsB,WAAW,OAAOre,EAAEqe,sBAAsBre,EAAEqb,IAAIiD,IAAIrH,MAAM,KAAK3F,YAAYtR,EAAEue,sBAAsB,WAAW,OAAOve,EAAEue,sBAAsBve,EAAEqb,IAAImD,IAAIvH,MAAM,KAAK3F,YAAYtR,EAAEye,QAAQ,WAAW,OAAOze,EAAEye,QAAQze,EAAEqb,IAAIqD,IAAIzH,MAAM,KAAK3F,YAAYtR,EAAE2e,iBAAiB,WAAW,OAAO3e,EAAE2e,iBAAiB3e,EAAEqb,IAAIuD,IAAI3H,MAAM,KAAK3F,YAAY,IAAI3L,GAAG3F,EAAE6e,QAAQ,WAAW,OAAOlZ,GAAG3F,EAAE6e,QAAQ7e,EAAEqb,IAAIyD,IAAI7H,MAAM,KAAK3F,YAAYnE,GAAGnN,EAAE+e,kBAAkB,WAAW,OAAO5R,GAAGnN,EAAE+e,kBAAkB/e,EAAEqb,IAAI2D,IAAI/H,MAAM,KAAK3F,YAAYrG,GAAGjL,EAAEif,MAAM,WAAW,OAAOhU,GAAGjL,EAAEif,MAAMjf,EAAEqb,IAAI6D,IAAIjI,MAAM,KAAK3F,YAAY7G,GAAGzK,EAAEmf,cAAc,WAAW,OAAO1U,GAAGzK,EAAEmf,cAAcnf,EAAEqb,IAAI+D,IAAInI,MAAM,KAAK3F,YAAYtR,EAAEqf,qBAAqB,WAAW,OAAOrf,EAAEqf,qBAAqBrf,EAAEqb,IAAIG,IAAIvE,MAAM,KAAK3F,YAAYtR,EAAEsf,gDAAgD,WAAW,OAAOtf,EAAEsf,gDAAgDtf,EAAEqb,IAAIkE,IAAItI,MAAM,KAAK3F,YAAY,IAAIkO,GAAGhW,GAAGxJ,EAAEyf,4CAA4C,WAAW,OAAOjW,GAAGxJ,EAAEyf,4CAA4Czf,EAAEqb,IAAIqE,IAAIzI,MAAM,KAAK3F,YAAYsF,GAAG5W,EAAE2f,mCAAmC,WAAW,OAAO/I,GAAG5W,EAAE2f,mCAAmC3f,EAAEqb,IAAIuE,IAAI3I,MAAM,KAAK3F,YAAYoF,GAAG1W,EAAE6f,sCAAsC,WAAW,OAAOnJ,GAAG1W,EAAE6f,sCAAsC7f,EAAEqb,IAAIyE,IAAI7I,MAAM,KAAK3F,YAAY1F,GAAG5L,EAAE+f,6CAA6C,WAAW,OAAOnU,GAAG5L,EAAE+f,6CAA6C/f,EAAEqb,IAAI2E,IAAI/I,MAAM,KAAK3F,YAAYG,GAAGzR,EAAEigB,0CAA0C,WAAW,OAAOxO,GAAGzR,EAAEigB,0CAA0CjgB,EAAEqb,IAAI6E,IAAIjJ,MAAM,KAAK3F,YAAYY,GAAGlS,EAAEmgB,4BAA4B,WAAW,OAAOjO,GAAGlS,EAAEmgB,4BAA4BngB,EAAEqb,IAAI+E,IAAInJ,MAAM,KAAK3F,YAAYuF,GAAG7W,EAAEqgB,oBAAoB,WAAW,OAAOxJ,GAAG7W,EAAEqgB,oBAAoBrgB,EAAEqb,IAAIiF,IAAIrJ,MAAM,KAAK3F,YAAYoG,GAAG1X,EAAEugB,cAAc,WAAW,OAAO7I,GAAG1X,EAAEugB,cAAcvgB,EAAEqb,IAAImF,IAAIvJ,MAAM,KAAK3F,YAAY/H,GAAGvJ,EAAEygB,yBAAyB,WAAW,OAAOlX,GAAGvJ,EAAEygB,yBAAyBzgB,EAAEqb,IAAIqF,IAAIzJ,MAAM,KAAK3F,YAAYrD,GAAGjO,EAAE2gB,4BAA4B,WAAW,OAAO1S,GAAGjO,EAAE2gB,4BAA4B3gB,EAAEqb,IAAIuF,IAAI3J,MAAM,KAAK3F,YAAY/G,GAAGvK,EAAE6gB,yBAAyB,WAAW,OAAOtW,GAAGvK,EAAE6gB,yBAAyB7gB,EAAEqb,IAAIyF,IAAI7J,MAAM,KAAK3F,YAAYmD,GAAGzU,EAAE+gB,aAAa,WAAW,OAAOtM,GAAGzU,EAAE+gB,aAAa/gB,EAAEqb,IAAI2F,IAAI/J,MAAM,KAAK3F,YAAYkD,GAAGxU,EAAEihB,eAAe,WAAW,OAAOzM,GAAGxU,EAAEihB,eAAejhB,EAAEqb,IAAI6F,IAAIjK,MAAM,KAAK3F,YAAYiD,GAAGvU,EAAEmhB,eAAe,WAAW,OAAO5M,GAAGvU,EAAEmhB,eAAenhB,EAAEqb,IAAI+F,IAAInK,MAAM,KAAK3F,YAAYC,GAAGvR,EAAEqhB,UAAU,WAAW,OAAO9P,GAAGvR,EAAEqhB,UAAUrhB,EAAEqb,IAAIiG,IAAIrK,MAAM,KAAK3F,YAAYtC,GAAGhP,EAAEuhB,aAAa,WAAW,OAAOvS,GAAGhP,EAAEuhB,aAAavhB,EAAEqb,IAAImG,IAAIvK,MAAM,KAAK3F,YAAYE,GAAGxR,EAAEyhB,WAAW,WAAW,OAAOjQ,GAAGxR,EAAEyhB,WAAWzhB,EAAEqb,IAAIqG,IAAIzK,MAAM,KAAK3F,YAAYvC,GAAG/O,EAAE2hB,6BAA6B,WAAW,OAAO5S,GAAG/O,EAAE2hB,6BAA6B3hB,EAAEqb,IAAIuG,IAAI3K,MAAM,KAAK3F,YAAYlB,GAAGpQ,EAAE6hB,UAAU,WAAW,OAAOzR,GAAGpQ,EAAE6hB,UAAU7hB,EAAEqb,IAAIyG,IAAI7K,MAAM,KAAK3F,YAAYjG,GAAGrL,EAAE+hB,6CAA6C,OAAOxZ,GAAGvI,EAAEgiB,+BAA+B,OAAO,SAAS5f,GAAG1D,GAAGlF,KAAKf,KAAK,aAAae,KAAKiT,QAAQ,gCAAgC/N,EAAE,IAAIlF,KAAKgK,OAAO9E,EAAE,SAASujB,KAAK,SAASvjB,IAAI,IAAI8gB,KAAKA,IAAG,EAAGxf,EAAEkiB,WAAU,GAAItd,KAAK5H,GAAGiL,GAAGpB,IAAG5G,EAAED,GAAGA,EAAEmiB,sBAAsBniB,EAAEmiB,wBAAwBnlB,GAAG,CAAC,GAAGgD,EAAEoiB,QAAQ,IAAI,mBAAmBpiB,EAAEoiB,UAAUpiB,EAAEoiB,QAAQ,CAACpiB,EAAEoiB,UAAUpiB,EAAEoiB,QAAQjpB,QAAQ,CAAC,IAAIuF,EAAEsB,EAAEoiB,QAAQjb,QAAQJ,GAAGK,QAAQ1I,GAAGuJ,GAAGlB,KAAK,KAAK,EAAEO,IAAI,GAAGtK,EAAEiD,EAAED,GAAGhD,GAAGiL,GAAGpB,IAAG6D,YAAY,CAACC,IAAI,eAAe,CAAC,IAAI3N,EAAE,CAAC,GAAGgD,EAAEkH,OAAO,IAAI,mBAAmBlH,EAAEkH,SAASlH,EAAEkH,OAAO,CAAClH,EAAEkH,SAASlH,EAAEkH,OAAO/N,QAAQ8N,KAAKgB,GAAGrB,GAAG,EAAEU,KAAKtH,EAAEqiB,WAAWriB,EAAEqiB,UAAU,cAAc7K,YAAW,WAAYA,YAAW,WAAYxX,EAAEqiB,UAAU,MAAM,GAAG3jB,MAAM,IAAIA,MAAM,SAAS0N,GAAG1N,GAAG,GAAGiG,EAAEjG,EAAE1B,EAAE,MAAM0N,YAAY,CAACC,IAAI,cAAc0B,WAAW3N,IAAI,IAAI0D,GAAG1D,GAAG4D,OAAOqG,GAAGiC,KAAK5N,IAAIiL,GAAGnB,IAAI,oBAAoBwb,SAASA,QAAQ,GAAGjT,GAAG,GAAGlW,QAAQmW,GAAG,EAAE,IAAID,GAAG,GAAGlW,QAAQmW,GAAG,EAAE,MAAM3K,EAAEjG,EAAE4D,OAAOqG,GAAGiC,KAAK5K,EAAEuiB,QAAQviB,EAAEuiB,OAAO7jB,GAAGkG,GAAE,GAAIpE,EAAE9B,EAAE,IAAI0D,GAAG1D,IAAI,GAAGsB,EAAEwiB,aAAand,EAAErF,EAAEyiB,aAAajd,EAAExF,EAAE0iB,gBAAgBjd,EAAEzF,EAAE2iB,iBAAiBrgB,GAAGtC,EAAE4iB,QAAQja,GAAG3I,EAAEqhB,UAAU9P,GAAGvR,EAAEuhB,aAAavS,GAAGhP,EAAEyhB,WAAWjQ,GAAGxR,EAAE4iB,QAAQja,GAAG3I,EAAEsG,WAAWjH,EAAEW,EAAE6iB,WAAWzgB,GAAGoF,GAAG,SAAS9I,IAAI8gB,IAAIyC,KAAKzC,KAAKhY,GAAG9I,IAAIsB,EAAE7C,IAAI8kB,GAAGjiB,EAAE8iB,QAAQ,IAAI,mBAAmB9iB,EAAE8iB,UAAU9iB,EAAE8iB,QAAQ,CAAC9iB,EAAE8iB,UAAU,EAAE9iB,EAAE8iB,QAAQ3pB,QAAQ6G,EAAE8iB,QAAQxY,KAAVtK,GAAkB,OAAOhD,IAAIuH,GAAE,EAAGoE,GAAGc,MAAMwY,KAAKvjB,EAAEyB,QAA0DjI,EAAOD,QAAQyG,G,y0ECEvwlCM,WADF+jB,GAEqC/jB,YADnCA,WAAiC,oBAAbC,UAA4BA,SAASC,cAAgBD,SAASC,cAAcC,SAAMnG,I,YAEnG,SACA+pB,GAIT,IAAI1iB,EAA2D+W,EAAGvW,EAHhEkiB,EAAUA,GAAW,GAGjB1iB,IAAIA,OAAqB,IAAZ0iB,EAA0BA,EAAU,IAAa1iB,EAAEF,MAAM,IAAIC,SAAQ,SAASP,EAAEc,GAAGyW,EAAGvX,EAAEgB,EAAEF,KAAI,IAASvB,EAALO,EAAE,GAAK,IAAIP,KAAKiB,EAAEA,EAAE/C,eAAe8B,KAAKO,EAAEP,GAAGiB,EAAEjB,IAAI,IAAsM4B,EAAEqE,EAAEtF,EAAE2E,EAAEH,EAA1MvH,EAAE,iBAAiBua,EAAG,iBAAkBxW,OAAOG,EAAE,mBAAoBD,cAAc0W,EAAG,iBAAkBxW,SAAS,iBAAkBA,QAAQC,UAAU,iBAAkBD,QAAQC,SAASC,KAAKwC,EAAE,GACxW8T,GAAG9T,EAAE3C,EAAE,eAAwB2C,GAAG,IAAIlC,KAAcX,EAAE,SAASnB,EAAEc,GAAgE,OAA7D+D,IAAIA,EAAE,EAAQ,OAAOH,IAAIA,EAAE,EAAQ,MAAS1E,EAAE0E,EAAE3C,UAAU/B,GAAU6E,EAAE7C,aAAahC,EAAEc,EAAE,KAAK,SAASZ,EAAE,SAASF,GAAwF,OAArFA,EAAEmB,EAAEnB,GAAE,IAAMhC,SAASgC,EAAE,IAAItF,WAAWsF,IAAIA,EAAEhC,QAAQ+F,EAAE,+BAAsC/D,GAAGwF,EAAE,SAASxF,EAAEc,EAAEjC,GAAGgG,IAAIA,EAAE,EAAQ,OAAOH,IAAIA,EAAE,EAAQ,MAAS1E,EAAE0E,EAAE3C,UAAU/B,GAAG6E,EAAE3C,SAASlC,GAAE,SAASS,EAAEM,GAAGN,EAAE5B,EAAE4B,GAAGK,EAAEC,EAAE/C,YAAW,EAAEsD,QAAQa,KAAK7I,SAAS6D,EAAEmE,QAAQa,KAAK,GAAGC,QAAQ,MAAM,MAAMd,QAAQa,KAAKE,MAAM,GAAGf,QAAQgB,GAAG,qBACxf,SAAStC,GAAG,MAAMA,KAAKsB,QAAQgB,GAAG,qBAAqByB,GAAGvD,EAAEoC,QAAQ,WAAW,MAAM,gCAAsC8U,GAAIrW,KAAEA,EAAE2C,EAAExL,KAAKwK,SAASC,KAAK,oBAAqB7D,UAAUA,SAASC,gBAAgB2E,EAAE5E,SAASC,cAAcC,KAAKH,aAAa6E,EAAE7E,YAAmC6E,EAAvB,IAAIA,EAAE/J,QAAQ,SAAW+J,EAAEd,OAAO,EAAEc,EAAEb,YAAY,KAAK,GAAK,GAAGhC,EAAE,SAASnB,GAAG,IAAIc,EAAE,IAAIsC,eAA+C,OAAhCtC,EAAEuC,KAAK,MAAMrD,GAAE,GAAIc,EAAEwC,KAAK,MAAaxC,EAAEyC,cAAclC,IAAInB,EAAE,SAASF,GAAG,IAAIc,EAAE,IAAIsC,eACrb,OADoctC,EAAEuC,KAAK,MAAMrD,GAAE,GAAIc,EAAE0C,aAAa,cACnf1C,EAAEwC,KAAK,MAAa,IAAI5I,WAAWoG,EAAE2C,YAAY+B,EAAE,SAASxF,EAAEc,EAAEjC,GAAG,IAAI4B,EAAE,IAAI2C,eAAe3C,EAAE4C,KAAK,MAAMrD,GAAE,GAAIS,EAAE+C,aAAa,cAAc/C,EAAEiD,OAAO,WAAW,KAAKjD,EAAEkD,QAAQ,GAAGlD,EAAEkD,QAAQlD,EAAEgD,SAAS3C,EAAEL,EAAEgD,UAAU5E,KAAK4B,EAAEmD,QAAQ/E,EAAE4B,EAAE6C,KAAK,QAAO,IAA2K8B,EAAvK6R,EAAGzW,EAAEyD,OAAOpB,QAAQqB,IAAIC,KAAKtB,SAASZ,EAAEzB,EAAE6D,UAAUxB,QAAQyB,KAAKH,KAAKtB,SAAS,IAAItD,KAAKO,EAAEA,EAAErC,eAAe8B,KAAKiB,EAAEjB,GAAGO,EAAEP,IAAIO,EAAE,KAAKU,EAAE+D,cAAcpH,EAAEqD,EAAE+D,aAAmB/D,EAAEiE,aAAaW,EAAE5E,EAAEiE,YAA8BjE,EAAEmE,cACpd,iBAAkBC,aAAab,EAAE,mCAAmC,IAAIgB,EAGoLgY,EAAG3Y,EAAE4C,EAAErB,EAHzLwR,GAAG,EAAGoE,EAAG,oBAAqBtW,YAAY,IAAIA,YAAY,aAAQ,EAC5I,SAASwV,EAAGza,EAAEc,EAAEjC,GAAG,IAAI4B,EAAEK,EAAEjC,EAAE,IAAIA,EAAEiC,EAAEd,EAAEnB,MAAMA,GAAG4B,MAAM5B,EAAE,GAAG,GAAGA,EAAEiC,GAAGd,EAAEqF,UAAUkW,EAAG,OAAOA,EAAGrW,OAAOlF,EAAEqF,SAASvE,EAAEjC,IAAI,IAAI4B,EAAE,GAAGK,EAAEjC,GAAG,CAAC,IAAIkC,EAAEf,EAAEc,KAAK,GAAK,IAAFC,EAAM,CAAC,IAAI+C,EAAS,GAAP9D,EAAEc,KAAQ,GAAG,MAAQ,IAAFC,GAAON,GAAG6E,OAAOC,cAAgB,GAAFxE,IAAO,EAAE+C,OAAO,CAAC,IAAIpD,EAAS,GAAPV,EAAEc,KAAwE,OAAhEC,EAAE,MAAQ,IAAFA,IAAU,GAAFA,IAAO,GAAG+C,GAAG,EAAEpD,GAAK,EAAFK,IAAM,GAAG+C,GAAG,GAAGpD,GAAG,EAAS,GAAPV,EAAEc,MAAgBL,GAAG6E,OAAOC,aAAaxE,IAAIA,GAAG,MAAMN,GAAG6E,OAAOC,aAAa,MAAMxE,GAAG,GAAG,MAAQ,KAAFA,UAAeN,GAAG6E,OAAOC,aAAaxE,GAAG,OAAON,EAAE,SAAS8F,EAAEvG,EAAEc,GAAG,OAAOd,EAAEya,EAAGzT,EAAEhH,EAAEc,GAAG,GAC7d,SAAS2E,EAAEzF,EAAEc,EAAEjC,EAAE4B,GAAG,KAAK,EAAEA,GAAG,OAAO,EAAE,IAAIM,EAAElC,EAAE4B,EAAE5B,EAAE4B,EAAE,EAAE,IAAI,IAAIqD,EAAE,EAAEA,EAAE9D,EAAE1G,SAASwK,EAAE,CAAC,IAAIpD,EAAEV,EAAE0F,WAAW5B,GAAgF,GAA1E,OAAOpD,GAAG,OAAOA,IAA2BA,EAAE,QAAU,KAAFA,IAAS,IAAM,KAA3CV,EAAE0F,aAAa5B,IAAoC,KAAKpD,EAAE,CAAC,GAAG7B,GAAG4B,EAAE,MAAMK,EAAEjC,KAAK6B,MAAM,CAAC,GAAG,MAAMA,EAAE,CAAC,GAAG7B,EAAE,GAAG4B,EAAE,MAAMK,EAAEjC,KAAK,IAAI6B,GAAG,MAAM,CAAC,GAAG,OAAOA,EAAE,CAAC,GAAG7B,EAAE,GAAG4B,EAAE,MAAMK,EAAEjC,KAAK,IAAI6B,GAAG,OAAO,CAAC,GAAG7B,EAAE,GAAG4B,EAAE,MAAMK,EAAEjC,KAAK,IAAI6B,GAAG,GAAGI,EAAEjC,KAAK,IAAI6B,GAAG,GAAG,GAAGI,EAAEjC,KAAK,IAAI6B,GAAG,EAAE,GAAGI,EAAEjC,KAAK,IAAM,GAAF6B,GAAa,OAAPI,EAAEjC,GAAG,EAASA,EAAEkC,EAC1a,SAAS2a,EAAG1b,GAAG,IAAI,IAAIc,EAAE,EAAEjC,EAAE,EAAEA,EAAEmB,EAAE1G,SAASuF,EAAE,CAAC,IAAI4B,EAAET,EAAE0F,WAAW7G,GAAG,OAAO4B,GAAG,OAAOA,IAAIA,EAAE,QAAU,KAAFA,IAAS,IAAsB,KAAlBT,EAAE0F,aAAa7G,IAAS,KAAK4B,IAAIK,EAAEA,EAAE,MAAML,EAAEK,EAAE,EAAE,OAAOL,EAAEK,EAAE,EAAEA,EAAE,EAAE,OAAOA,EAAE,SAAS6b,EAAG3c,GAAG,IAAIc,EAAE4a,EAAG1b,GAAG,EAAEnB,EAAEge,GAAG/b,GAAiB,OAAdjC,GAAG4G,EAAEzF,EAAEoE,EAAEvF,EAAEiC,GAAUjC,EACtP,SAASoe,IAAK,IAAIjd,EAAE+E,EAAE/G,OAAO+e,EAAG/c,EAAEQ,EAAEuF,MAAM3B,EAAE,IAAIzJ,UAAUqF,GAAGQ,EAAEwF,OAAO,IAAInL,WAAWmF,GAAGQ,EAAEyF,OAAON,EAAE,IAAI7K,WAAWkF,GAAGQ,EAAE0F,OAAOc,EAAE,IAAItM,WAAWsF,GAAGQ,EAAE2F,QAAQ,IAAIvL,YAAYoF,GAAGQ,EAAE4F,QAAQ,IAAIpL,YAAYgF,GAAGQ,EAAE6F,QAAQ,IAAI5L,aAAauF,GAAGQ,EAAE8F,QAAQ,IAAIvL,aAAaiF,GAAG,IAAImd,EAAGE,EAAG,GAAGE,EAAG,GAAGE,EAAG,GAAGE,EAAG,GAAG,SAASE,IAAK,IAAI7d,EAAEQ,EAAE6G,OAAOC,QAAQ+V,EAAG9V,QAAQvH,GAAG,IAChHN,EADoHmC,EAAE,EAAEkc,EAAG,KAAKpe,EAAE,KAC5W,SAASoE,EAAE/D,GAAuI,MAAjIQ,EAAEoH,SAAQpH,EAAEoH,QAAQ5H,GAAGiC,EAAEjC,GAAGmX,GAAG,EAAGnX,EAAE,IAAI4E,YAAYiD,aAAa,SAAS7H,EAAE,gDAAgDgB,EAAEhB,GAASA,EAAG,SAASie,IAAK,OAAOve,EAAEqI,WAAW,yCAAiE,GADmHvH,EAAEyH,gBAAgB,GAAGzH,EAAE0H,gBAAgB,GAC5KxI,EAAE,iBAAoBue,IAAK,CAAC,IAAIE,EAAGze,EAAEA,EAAEc,EAAEoB,WAAWpB,EAAEoB,WAAWuc,EAAGna,GAAGA,EAAEma,EAAG,SAASE,IAAK,IAAIre,EAAEN,EAAE,IAAI,GAAGM,GAAGN,GAAG0F,EAAE,OAAO,IAAI1K,WAAW0K,GAAG,GAAGlF,EAAE,OAAOA,EAAEF,GAAG,KAAK,kDAAmD,MAAMc,GAAGiD,EAAEjD,IAE1c,SAAS2d,EAAGze,GAAG,KAAK,EAAEA,EAAE1G,QAAQ,CAAC,IAAIwH,EAAEd,EAAEsH,QAAQ,GAAG,mBAAmBxG,EAAEA,EAAEN,OAAO,CAAC,IAAI3B,EAAEiC,EAAEqe,GAAG,iBAAkBtgB,OAAE,IAASiC,EAAEyd,GAAGpB,EAAGthB,IAAIgD,EAAPse,GAAYA,EAAGthB,IAAIgD,EAAPse,CAAUrc,EAAEyd,IAAI1f,OAAE,IAASiC,EAAEyd,GAAG,KAAKzd,EAAEyd,MAAM,SAASI,EAAG3e,GAAGrG,KAAK8kB,GAAGze,EAAE,GAAGrG,KAAK0mB,GAAG,SAASvf,GAAG6E,EAAEhM,KAAK8kB,GAAG,GAAG,GAAG3d,GAAGnH,KAAKomB,GAAG,SAASjf,GAAG6E,EAAEhM,KAAK8kB,GAAG,GAAG,GAAG3d,GAAGnH,KAAKsmB,GAAG,WAAWta,EAAEhM,KAAK8kB,IAAI,GAAG,GAAG9kB,KAAKkmB,GAAG,WAAWzb,EAAEzK,KAAK8kB,GAAG,IAAI,GAAG,GAAG9kB,KAAKwmB,GAAG,WAAW/b,EAAEzK,KAAK8kB,GAAG,IAAI,GAAG,GAAG9kB,KAAK4lB,GAAG,SAASze,EAAEjC,GAAGlF,KAAK0mB,GAAGvf,GAAGnH,KAAKomB,GAAGlhB,GAAGlF,KAAKsmB,KAAKtmB,KAAKkmB,KAAKlmB,KAAKwmB,MAC1d,IAAoC3gB,EAA3Buf,EAAG,GAAGtD,EAAG,CAAC,KAAK,GAAG,IAAI3W,EAAE,GAAKtF,EAAEsY,EAAG,WAAW,IAAI9X,EAAEsB,QAAQ+N,SAAS,OAAO,IAAIrP,EAAE,GAAGA,EAAE,GAAG,KAAK,WAAW,OAAO6D,YAAYsJ,OAAO,IAAqWkS,EAExHU,GAFzOd,GAAG,GAAG,SAASE,KAAK,IAAIE,EAAG,CAAC,IAAuNve,EAAnNd,EAAE,CAACiT,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAkBC,WAAWA,UAAUC,WAAWD,UAAUC,UAAU,IAAI,KAAKpR,QAAQ,IAAI,KAAK,SAASnB,EAAE9D,GAAG,kBAAoB,IAAI2D,KAAKme,QAAG,IAASA,GAAGne,UAAUd,EAAEc,GAAGd,EAAEc,GAAGme,GAAGne,GAAG,IAAIjC,EAAE,GAAG,IAAIiC,KAAKd,EAAEnB,EAAErF,KAAKsH,EAAE,IAAId,EAAEc,IAAIue,EAAGxgB,EAAE,OAAOwgB,EAE1e,SAASE,KAAK,SAASvf,EAAEU,GAAG,OAAOA,EAAEA,EAAE0T,eAAeC,MAAM,sBAAsB3T,EAAE,GAAG,MAAM,IAAIqf,GAAG,CAACA,IAAG,EAAG,IAAIjf,GAAE,IAAKuM,MAAMkH,cAAc1V,EAAE,IAAIwO,KAAKvM,EAAE,EAAE,GAAGL,EAAE,IAAI4M,KAAKvM,EAAE,EAAE,GAAGA,EAAEjC,EAAE2V,oBAAoB,IAAIzT,EAAEN,EAAE+T,oBAAoB1Q,EAAEuM,KAAKoE,IAAI3T,EAAEC,GAAG4E,EAAEsa,MAAM,GAAG,GAAGnc,EAAE6B,EAAEwa,MAAM,GAAGjkB,OAAO4E,GAAGC,GAAGlC,EAAEmB,EAAEnB,GAAG4B,EAAET,EAAES,GAAG5B,EAAE8d,EAAG9d,GAAG4B,EAAEkc,EAAGlc,GAAGM,EAAED,GAAG6E,EAAE1F,MAAK,GAAGpB,EAAE8G,EAAE1F,KAAI,GAAG,GAAGQ,IAAIkF,EAAE1F,MAAK,GAAGQ,EAAEkF,EAAE1F,KAAI,GAAG,GAAGpB,IAAW,SAAS+G,GAAE5F,GAAG,OAAO,GAAIA,EAAE,IAAI,GAAIA,EAAE,KAAK,GAAIA,EAAE,KAAK,SAASqgB,GAAGrgB,EAAEc,GAAG,IAAI,IAAIjC,EAAE,EAAE4B,EAAE,EAAEA,GAAGK,EAAEjC,GAAGmB,EAAES,MAAM,OAAO5B,EACze,IAAIgB,GAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIgG,GAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,SAASpG,GAAEO,EAAEc,GAAG,IAAId,EAAE,IAAIqN,KAAKrN,EAAEkV,WAAW,EAAEpU,GAAG,CAAC,IAAIjC,EAAEmB,EAAEmV,WAAW1U,GAAGmF,GAAE5F,EAAEuU,eAAe1U,GAAEgG,IAAGhH,GAAG,KAAGiC,EAAEL,EAAET,EAAEoV,WAAoH,CAACpV,EAAEqV,QAAQrV,EAAEoV,UAAUtU,GAAG,MAApIA,GAAGL,EAAET,EAAEoV,UAAU,EAAEpV,EAAEqV,QAAQ,GAAG,GAAGxW,EAAEmB,EAAEsV,SAASzW,EAAE,IAAImB,EAAEsV,SAAS,GAAGtV,EAAEuV,YAAYvV,EAAEuU,cAAc,IAAyC,OAAOvU,EAC5V,SAASugB,GAAGvgB,EAAEc,EAAEjC,EAAE4B,GAAG,SAASM,EAAEH,EAAEC,EAAEjB,GAAG,IAAIgB,EAAE,iBAAkBA,EAAEA,EAAE6U,WAAW7U,GAAG,GAAGA,EAAEtH,OAAOuH,GAAGD,EAAEhB,EAAE,GAAGgB,EAAE,OAAOA,EAAE,SAASkD,EAAElD,EAAEC,GAAG,OAAOE,EAAEH,EAAEC,EAAE,KAAK,SAASH,EAAEE,EAAEC,GAAG,SAASjB,EAAE+b,GAAI,OAAO,EAAEA,GAAI,EAAE,EAAEA,EAAG,EAAE,EAAE,IAAIja,EAAmH,OAAjH,KAAKA,EAAE9B,EAAEgB,EAAE2T,cAAc1T,EAAE0T,iBAAiB,KAAK7S,EAAE9B,EAAEgB,EAAEuU,WAAWtU,EAAEsU,eAAezT,EAAE9B,EAAEgB,EAAEwU,UAAUvU,EAAEuU,YAAmB1T,EAAE,SAAS3B,EAAEa,GAAG,OAAOA,EAAE8U,UAAU,KAAK,EAAE,OAAO,IAAIrI,KAAKzM,EAAE2T,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO3T,EAAE,KAAK,EAAE,OAAO,IAAIyM,KAAKzM,EAAE2T,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIlH,KAAKzM,EAAE2T,cACjf,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIlH,KAAKzM,EAAE2T,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIlH,KAAKzM,EAAE2T,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO,IAAIlH,KAAKzM,EAAE2T,cAAc,EAAE,GAAG,KAAK,SAASpP,EAAEvE,GAAGA,EAAEnB,GAAE,IAAI4N,KAAKzM,EAAEud,GAAG,KAAK,EAAE,GAAGvd,EAAE6a,IAAI,IAAI5a,EAAE,IAAIwM,KAAKzM,EAAE2T,cAAc,EAAE,EAAE,GAAG3U,EAAEG,EAAE,IAAIsN,KAAKzM,EAAE2T,cAAc,EAAE,IAAW,OAAP1T,EAAEd,EAAEc,GAAU,GAAGH,EAAEd,EAAEgB,GAAG,GAAGF,EAAEG,EAAED,GAAGA,EAAE2T,cAAc,EAAE3T,EAAE2T,cAAc3T,EAAE2T,cAAc,EAAE,IAAInU,EAAEuF,EAAElF,EAAE,IAAI,GACoC,IAAI,IAAIE,KADzCF,EAAE,CAACkgB,GAAGhb,EAAElF,GAAG,GAAGggB,GAAG9a,EAAElF,EAAE,GAAG,GAAGoe,GAAGlZ,EAAElF,EAAE,GAAG,GAAGke,GAAGhZ,EAAElF,EAAE,IAAI,GAAG4d,GAAG1Y,EAAElF,EAAE,IAAI,GAAG0d,GAAGxY,EAAElF,EAAE,IAAI,GAAGse,GAAGpZ,EAAElF,EAAE,IAAI,GAAGgb,GAAG9V,EAAElF,EAAE,IAAI,GAAGkhB,GAAGhc,EAAElF,EAAE,IAAI,GAAG8f,GAAG5a,EAAElF,EACnf,IAAI,GAAGogB,GAAGzgB,EAAEmG,EAAEnG,GAAG,IAAIvB,EAAE0H,EAAE1H,GAAGuB,EAAE,CAAC,KAAK,uBAAuB,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,cAAc,KAAK,QAAQ,KAAK,WAAW,KAAK,WAAW,KAAK,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,WAAW,MAAM,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,MAAqBvB,EAAEA,EAAEuD,QAAQ,IAAIkU,OAAO3V,EAAE,KAAKP,EAAEO,IAAI,IAAI+e,EAAG,2DAA2DnJ,MAAM,KAC9gBsJ,EAAG,wFAAwFtJ,MAAM,KAG4T,IAAI5V,KAH3TP,EAAE,CAAC,KAAK,SAASQ,GAAG,OAAO8e,EAAG9e,EAAEme,IAAIvI,UAAU,EAAE,IAAI,KAAK,SAAS5V,GAAG,OAAO8e,EAAG9e,EAAEme,KAAK,KAAK,SAASne,GAAG,OAAOif,EAAGjf,EAAEyd,IAAI7H,UAAU,EAAE,IAAI,KAAK,SAAS5V,GAAG,OAAOif,EAAGjf,EAAEyd,KAAK,KAAK,SAASzd,GAAG,OAAOkD,GAAGlD,EAAEud,GAAG,MAAM,IAAI,EAAE,IAAI,KAAK,SAASvd,GAAG,OAAOkD,EAAElD,EAAE+d,GAAG,IAAI,KAAK,SAAS/d,GAAG,OAAOG,EAAEH,EAAE+d,GAAG,EAAE,MAAM,KAAK,SAAS/d,GAAG,OAAOuE,EAAEvE,GAAG6U,WAAWe,UAAU,IAAI,KAAK,SAAS5V,GAAG,OAAOuE,EAAEvE,IAAI,KAAK,SAASA,GAAG,OAAOkD,EAAElD,EAAEie,GACzf,IAAI,KAAK,SAASje,GAAkC,OAAxB,IAAPA,EAAEA,EAAEie,IAAQje,EAAE,GAAG,GAAGA,IAAIA,GAAG,IAAWkD,EAAElD,EAAE,IAAI,KAAK,SAASA,GAAG,OAAOkD,EAAElD,EAAE+d,GAAG0B,GAAGza,GAAEhF,EAAEud,GAAG,MAAMte,GAAEgG,GAAEjF,EAAEyd,GAAG,GAAG,IAAI,KAAK,SAASzd,GAAG,OAAOkD,EAAElD,EAAEyd,GAAG,EAAE,IAAI,KAAK,SAASzd,GAAG,OAAOkD,EAAElD,EAAE6f,GAAG,IAAI,KAAK,WAAW,MAAM,MAAM,KAAK,SAAS7f,GAAG,OAAO,GAAGA,EAAEie,IAAI,GAAGje,EAAEie,GAAG,KAAK,MAAM,KAAK,SAASje,GAAG,OAAOkD,EAAElD,EAAE+f,GAAG,IAAI,KAAK,WAAW,MAAM,MAAM,KAAK,SAAS/f,GAAG,OAAOA,EAAEme,IAAI,GAAG,KAAK,SAASne,GAAG,IAAIC,EAAE,IAAIwM,KAAKzM,EAAEud,GAAG,KAAK,EAAE,GAAGve,EAAE,IAAIiB,EAAE6U,SAAS7U,EAAEpB,GAAEoB,EAAE,EAAEA,EAAE6U,UAA0C,OAAO,EACrfhV,EAAEd,EAD4cgB,EAAE,IAAIyM,KAAKzM,EAAEud,GAAG,KAAKvd,EAAEyd,GAAGzd,EAAE+d,KACne7a,EAAEuM,KAAKC,MAAM,GAAG1Q,EAAEwV,WAAWiL,GAAGza,GAAEhF,EAAE2T,eAAe1U,GAAEgG,GAAEjF,EAAEuU,WAAW,GAAG,IAAIvU,EAAEwU,WAAW,GAAG,GAAG,IAAI1U,EAAEd,EAAEiB,GAAG,KAAK,MAAM,KAAK,SAASD,GAAG,IAAIC,EAAE,IAAIwM,KAAKzM,EAAEud,GAAG,KAAK,EAAE,GAAGve,EAAEG,EAAE,IAAIsN,KAAKzM,EAAEud,GAAG,KAAK,EAAE,IAAItd,EAAEd,EAAEc,GAAG,IAAIa,EAAEjC,GAAE,IAAI4N,KAAKzM,EAAEud,GAAG,KAAK,EAAE,GAAGvd,EAAE6a,IAAI,OAAO,EAAE/a,EAAEgB,EAAE9B,GAAG,KAAK,GAAGc,EAAEG,EAAEa,GAAG,KAAKoC,EAAEuM,KAAKC,MAAM1Q,EAAE2U,cAAc3T,EAAEud,GAAG,KAAKvd,EAAE6a,GAAG,GAAG7b,EAAEwV,UAAUxU,EAAE6a,GAAG,EAAE7b,EAAEwV,WAAW,GAAG,IAAI,KAAK,SAASxU,GAAG,OAAOA,EAAEme,IAAI,KAAK,SAASne,GAAG,IAAIC,EAAE,IAAIwM,KAAKzM,EAAEud,GAAG,EAAE,GAAGve,EAAE,IAAIiB,EAAE6U,SAAS7U,EAAEpB,GAAEoB,EAAE,IAAIA,EAAE6U,SAAS,EAAE,EAAE7U,EAAE6U,SAAS,GAC3d,OAAO,EAAEhV,EAAEd,EADmdgB,EAAE,IAAIyM,KAAKzM,EAAEud,GAC3f,KAAKvd,EAAEyd,GAAGzd,EAAE+d,KAAoB7a,EAAEuM,KAAKC,MAAM,GAAG1Q,EAAEwV,WAAWiL,GAAGza,GAAEhF,EAAE2T,eAAe1U,GAAEgG,GAAEjF,EAAEuU,WAAW,GAAG,IAAIvU,EAAEwU,WAAW,GAAG,GAAG,IAAI1U,EAAEd,EAAEiB,GAAG,KAAK,MAAM,KAAK,SAASD,GAAG,OAAOA,EAAEud,GAAG,MAAM1I,WAAWe,UAAU,IAAI,KAAK,SAAS5V,GAAG,OAAOA,EAAEud,GAAG,MAAM,KAAK,SAASvd,GAAU,IAAIC,EAAE,IAAbD,EAAEA,EAAE2f,IAA+B,OAAjB3f,EAAEyP,KAAKoG,IAAI7V,GAAG,IAAUC,EAAE,IAAI,KAAKyE,OAAO,QAAQ1E,EAAE,GAAG,IAAIA,EAAE,KAAKyB,OAAO,IAAI,KAAK,SAASzB,GAAG,OAAOA,EAAEigB,IAAI,KAAK,WAAW,MAAM,MAAiBhiB,EAAE6X,SAAS/V,KAAK9B,EAAEA,EAAEuD,QAAQ,IAAIkU,OAAO3V,EAAE,KAAKP,EAAEO,GAAGF,KAAa,OAARE,EACnc,SAAYX,GAAG,IAAIc,EAAEpF,MAAMggB,EAAG1b,GAAG,GAAqB,OAAlByF,EAAEzF,EAAEc,EAAE,EAAEA,EAAExH,QAAewH,EADwY2f,CAAG5hB,GAAM8B,EAAErH,OAAOwH,EAAS,GAC7fsD,EAAElJ,IAAIyF,EAAEX,GAAUW,EAAErH,OAAO,GAC3B,IAAI2nB,GAAG,CAACjhB,EAAE,SAASA,GAAG,OAAO6c,GAAG7c,EAAE,IAAI,IAAIQ,EAAE,SAASR,EAAEc,GAAG2c,EAAGlW,QAAQ,CAAC4X,GAAGnf,EAAEue,GAAGzd,KAAKF,EAAE,SAASZ,EAAEc,GAAG2c,EAAGlW,QAAQ,CAAC4X,GAAGnf,EAAEue,GAAGzd,KAAKA,EAAE,SAASd,EAAEc,EAAEjC,GAA4B,MAAzB,IAAK8f,EAAG3e,GAAIuf,GAAGze,EAAEjC,GAAcmB,GAAI0E,EAAE,SAAS1E,EAAEc,GAAU,OAAPd,EAAEuG,EAAEvG,GAAU8E,EAAEic,GAAG/gB,EAAEc,IAAID,EAAE,WAAW,OAAO,GAAGkE,EAAE,aAAaU,EAAE,aAAatF,EAAE,WAAW,OAAO,IAAI6D,EAAE,WAAW,OAAO,GAAGoB,EAAE,aAAaD,EAAE,SAASnF,EAAEc,GAAU,OAAPd,EAAEuG,EAAEvG,GAAU8E,EAAEmc,GAAGjhB,EAAEc,IAAIkG,EAAE,SAAShH,EAAEc,EAAEjC,EAAE4B,EAAEM,EAAE+C,GAAU,GAAPA,IAAI,GAAM,IAAO,GAAFrD,IAAO,GAAIT,EAAE,MAAMc,GAAG,QAAQ,GAAG,IAAO,GAAFL,GAAM,CAACT,EAAE,MAAMqQ,KAAKC,KAAKxP,EAAE,OAAO,IAAIJ,EAAEigB,GAAG,MAAM3gB,GACpfU,GAAGsG,EAAEwJ,KAAK,EAAE9P,EAAEA,EAAEV,GAAGA,EAAEU,GAAGV,EAAE,EAAEA,GAAG+e,EAAG/e,GAAG,CAAC0f,GAAG1f,EAAE2b,GAAG7a,EAAEue,IAAG,EAAGzO,GAAG7P,EAAE0gB,GAAG5iB,EAAEiS,MAAMrQ,EAAEsQ,OAAOjN,GAAGhD,EAAEd,GAAGc,GAAG,QAAQA,GAAG,GAAG,OAAOA,GAAGyF,EAAE,SAASvG,EAAEc,GAAG,IAAIjC,EAAEkgB,EAAG/e,GAA8D,OAA3D,IAAIc,GAAGjC,GAAGiC,IAAIjC,EAAE8c,KAAKoD,EAAG/e,GAAG,KAAKnB,EAAEwgB,IAAIwB,GAAGhiB,EAAE6gB,KAAK1f,EAAE,GAAGA,GAAG,GAAUA,GAAGgF,EAAE,aAAaH,EAAE,SAAS7E,EAAEc,EAAEjC,GAAU,OAAPmB,EAAEuG,EAAEvG,GAAU8E,EAAEqc,GAAGnhB,EAAEc,EAAEjC,IAAIkF,EAAE,aAAajE,EAAE,aAAamC,EAAE,aAAalB,EAAE,WAAWgD,KAAKpD,EAAE,SAASX,EAAEc,GAAG,GAAG,IAAId,EAAEA,EAAEqN,KAAKF,UAAW,IAAG,IAAInN,GAAG,IAAIA,EAAa,OAAO2F,EAAEob,MAAM,GAAG,IAAI,EAAjC/gB,EAAER,IAAuE,OAAtCmG,EAAE7E,GAAG,GAAGd,EAAE,IAAI,EAAE2F,EAAE7E,EAAE,GAAG,GAAGd,EAAE,IAAI,IAAI,EAAS,GAAGK,EAAE,SAASL,EAAEc,GAAG,OAAOd,EACnfc,GAAGnB,EAAE,WAAWoE,EAAE,gIAAgI/C,EAAE,WAAW+C,EAAE,gIAAgIrE,EAAE,WAAWqE,EAAE,gIAAgIlC,EAAE,WAAWkC,EAAE,gIAC/bK,EAAE,WAAW,OAAO,YAAYjH,EAAE,SAAS6C,EAAEc,EAAEjC,GAAGmI,EAAEqQ,WAAWrX,EAAEc,EAAEA,EAAEjC,IAAIxF,EAAE,SAAS2G,GAAG,IAAIc,EAAEkG,EAAE1N,OAAc,GAAG,YAAV0G,KAAK,GAAkB,OAAM,EAAG,IAAI,IAAInB,EAAE,EAAE,GAAGA,EAAEA,GAAG,EAAE,CAAC,IAAI4B,EAAEK,GAAG,EAAE,GAAGjC,GAAG4B,EAAE4P,KAAKmH,IAAI/W,EAAET,EAAE,WAA2B,GAAhBS,EAAE4P,KAAKoE,IAAIzU,EAAES,IAAO,QAAQA,GAAG,MAAMA,EAAE,OAAOT,EAAE,CAAC,IAAI+E,EAAE0S,KAAKpH,KAAKmH,IAAI,WAAW/W,GAAGsc,EAAG7e,WAAW,QAAQ,IAAI+e,IAAK,IAAIlc,EAAE,EAAE,MAAMf,EAAE,MAAM8D,IAAI/C,OAAE,EAAO,GAAGA,EAAE,OAAM,EAAG,OAAM,GAAIb,EAAE,SAASF,GAAG,IAAI,IAAIc,EAAEtB,IAAIA,IAAIsB,EAAEd,MAAMwF,EAAE,SAASxF,EAAEc,GAAG,IAAIjC,EAAE,EACtY,OADwYsgB,KAAKzL,SAAQ,SAASjT,EAAEM,GAAG,IAAI+C,EAAEhD,EAAEjC,EAAkB,IAAhBkC,EAAE4E,EAAE3F,EAAE,EAAEe,GAAG,GAAG+C,EAAMA,EAAE,EAAEA,EAAErD,EAAEnH,SAASwK,EAAEM,EAAErD,KACngB,GAAGN,EAAEiF,WAAW5B,GAAGM,EAAErD,GAAG,GAAG,EAAElC,GAAG4B,EAAEnH,OAAO,KAAW,GAAGoI,EAAE,SAAS1B,EAAEc,GAAG,IAAIjC,EAAEsgB,KAAKxZ,EAAE3F,GAAG,GAAGnB,EAAEvF,OAAO,IAAImH,EAAE,EAAkD,OAAhD5B,EAAE6U,SAAQ,SAAS3S,GAAGN,GAAGM,EAAEzH,OAAO,KAAIqM,EAAE7E,GAAG,GAAGL,EAAS,GAAGA,EAAE,WAAW,OAAO,GAAGU,EAAE,SAASnB,EAAEc,GAAgC,OAA7Bd,EAAE,GAAGA,GAAG,GAAGA,EAAE,EAAE+D,IAAIK,EAAEtD,GAAG,GAAGd,EAAS,GAAGJ,EAAE,SAASI,EAAEc,EAAEjC,EAAE4B,GAAqC,OAAlCT,EAAE8E,EAAEyc,GAAGvhB,GAAGc,EAAEgE,EAAEuc,GAAGrhB,EAAEc,EAAEjC,GAAG8G,EAAElF,GAAG,GAAGK,EAAS,GAAGV,EAAE,aAAaL,EAAE,SAASC,EAAEc,EAAEjC,EAAE4B,GAAG,IAAI,IAAIM,EAAE,EAAE+C,EAAE,EAAEA,EAAEjF,EAAEiF,IAAI,CAAC,IAAI,IAAIpD,EAAEiF,EAAE7E,EAAE,EAAEgD,GAAG,GAAG/D,EAAE4F,EAAE7E,GAAG,EAAEgD,EAAE,IAAI,GAAGqB,EAAE,EAAEA,EAAEpF,EAAEoF,IAAI,CAAC,IAAI/E,EAAE4G,EAAEtG,EAAEyE,GAAGxE,EAAE8a,EAAGzb,GAAG,IAAII,GAAG,KAAKA,IAAI,IAAIJ,EAAEiX,EAAGhV,GAAGwY,EAAG9Z,EAAE,IAAIA,EAAErH,OAAO,GAAGqH,EAAEnH,KAAK4G,GAAGW,GACpfhB,EAAY,OAAV4F,EAAElF,GAAG,GAAGM,EAAS,GAAGM,EAAE,SAASrB,GAAG,IAAIc,EAAEuM,KAAKF,MAA4C,OAAtCxH,EAAE3F,GAAG,GAAGc,EAAE,IAAI,EAAE6E,EAAE3F,EAAE,GAAG,GAAGc,EAAE,IAAI,IAAI,EAAS,GAAGvB,EAhBrG,SAASoC,EAAE3B,EAAEc,GAAuW,OAApWd,EAAE,IAAIqN,KAAK,IAAI1H,EAAE3F,GAAG,IAAI2F,EAAE7E,GAAG,GAAGd,EAAE0a,gBAAgB/U,EAAE7E,EAAE,GAAG,GAAGd,EAAE2a,gBAAgBhV,EAAE7E,EAAE,GAAG,GAAGd,EAAE4a,cAAcjV,EAAE7E,EAAE,IAAI,GAAGd,EAAE6a,aAAalV,EAAE7E,EAAE,IAAI,GAAGd,EAAE8a,cAAcnV,EAAE7E,EAAE,IAAI,GAAGd,EAAE+a,iBAAiB,KAAKpV,EAAE7E,EAAE,IAAI,GAAGd,EAAEgb,YAAYrV,EAAE7E,EAAE,IAAI,GAAG,EAAE6E,EAAE7E,EAAE,IAAI,GAAG,EAAE6E,EAAE7E,EAAE,IAAI,IAAId,EAAEkV,UAAU7H,KAAK4N,IAAIjb,EAAE+a,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,MAAM,EAAEpZ,EAAEsd,KAAKtd,EAAEsd,GAAGtC,EAAG,QAAQhX,EAAE7E,EAAE,IAAI,GAAGa,EAAEsd,GAAUne,GAgBlRJ,EAAE,SAASV,EAAEc,GAAGye,KAAKvf,EAAE,IAAIqN,KAAK,IAAI1H,EAAE3F,GAAG,IAAI2F,EAAE7E,GAAG,GAAGd,EAAEmb,aAAaxV,EAAE7E,EAAE,GAAG,GAAGd,EAAEob,aAAazV,EAAE7E,EAAE,GAAG,GAAGd,EAAEqb,WAAW1V,EAAE7E,EAAE,IAAI,GAAGd,EAAEoV,UAAUzP,EAAE7E,EAAE,IAAI,GAAGd,EAAEmV,WAAWxP,EAAE7E,EAAE,IAAI,GAAGd,EAAEuU,cAAc,KAAK5O,EAAE7E,EAAE,IAAI,GAAGd,EAAE0V,SAAS,IAAI7W,EAAE,IAAIwO,KAAKrN,EAAEuU,cAAc,EAAE,GAAG5O,EAAE7E,EAAE,IAAI,IAAId,EAAEkV,UAAUrW,EAAEqW,WAAW,MAAM,EAAEvP,EAAE7E,EAAE,IAAI,IAAK,GAAGd,EAAEwU,oBAAqB,IAAI/T,EAAE,IAAK4M,KAAKrN,EAAEuU,cAAc,EAAE,GAAIC,oBAC3W,OAA/FxU,EAA+C,GAA5CS,IAD2d5B,EACpfA,EAAE2V,sBAA6BxU,EAAEwU,qBAAqBnE,KAAKmH,IAAI3Y,EAAE4B,IAAMkF,EAAE7E,EAAE,IAAI,GAAGd,EAAEA,EAAE2F,EAAE1F,MAAKD,EAAE,EAAE,IAAI,GAAG2F,EAAE7E,EAAE,IAAI,GAAGd,EAASc,GAAGgD,EAAE,SAAS9D,GAAGuf,KAAK,IAAIze,EAAE,IAAIuM,KAAK1H,EAAE3F,EAAE,IAAI,GAAG,KAAK2F,EAAE3F,EAAE,IAAI,GAAG2F,EAAE3F,EAAE,IAAI,GAAG2F,EAAE3F,EAAE,GAAG,GAAG2F,EAAE3F,EAAE,GAAG,GAAG2F,EAAE3F,GAAG,GAAG,GAAGnB,EAAE8G,EAAE3F,EAAE,IAAI,GAAGS,EAAEK,EAAE0T,oBAAoBzT,EAAE,IAAIsM,KAAKvM,EAAEyT,cAAc,EAAE,GAAGzQ,EAAE,IAAKuJ,KAAKvM,EAAEyT,cAAc,EAAE,GAAIC,oBAAoB9T,EAAEK,EAAEyT,oBAAoBzU,EAAEsQ,KAAKmH,IAAI9W,EAAEoD,GACjN,OADoN,EAAEjF,EAAE8G,EAAE3F,EAAE,IAAI,GAAG9D,OAAO4H,GAAGpD,GAAGX,GAAGU,GAAG,EAAE5B,IAAIkB,GAAGU,KAAKqD,EAAEuM,KAAKoE,IAAI/T,EAAEoD,GAAGhD,EAAEwa,QAAQxa,EAAEoU,UAAU,MAAM,EAAErW,EAAEkB,EAAE+D,GAAGrD,KAAKkF,EAAE3F,EACrf,IAAI,GAAGc,EAAE4U,SAAS/P,EAAE3F,EAAE,IAAI,IAAIc,EAAEoU,UAAUnU,EAAEmU,WAAW,MAAM,EAAEvP,EAAE3F,GAAG,GAAGc,EAAEqa,aAAaxV,EAAE3F,EAAE,GAAG,GAAGc,EAAEsa,aAAazV,EAAE3F,EAAE,GAAG,GAAGc,EAAEua,WAAW1V,EAAE3F,EAAE,IAAI,GAAGc,EAAEsU,UAAUzP,EAAE3F,EAAE,IAAI,GAAGc,EAAEqU,WAAkBrU,EAAEoU,UAAU,IAAI,GAAGvP,EAAE4a,GAAG1hB,EAAE,SAASmB,EAAEc,EAAEjC,EAAE4B,GAAG,OAAO8f,GAAGvgB,EAAEc,EAAEjC,EAAE4B,MACxP,WAAY,SAAST,EAAEe,GAAGP,EAAEgb,IAAIza,EAAE3I,QAAQ2M,EAAEvE,EAAEgb,IAAI1W,EAAEmY,IAAKE,EAAG3c,EAAEgb,IAAIyC,GAAGV,EAAGhW,QAAQ/G,EAAEgb,IAAIhc,GAAGqC,IAAIrB,EAAEob,wBAAwBpb,EAAEob,uBAAuB/Z,GAAG,GAAGA,IAAI,OAAOkc,IAAKlC,cAAckC,GAAIA,EAAG,MAAMpe,IAAIoB,EAAEpB,EAAEA,EAAE,KAAKoB,MAAM,SAASD,EAAEC,GAAGf,EAAEe,EAAE+a,UAAU,SAASjd,EAAEkC,GAAG,OAtBhQ,WAAc,IAAIqE,IAAIsS,GAAIrW,GAAG,CAAC,GAAG,mBAAoB0a,QAAQrc,EAAEqI,WAAW,WAAW,OAAOgU,MAAMrc,EAAE,CAACsc,YAAY,gBAAgBC,MAAK,SAASjc,GAAG,IAAIA,EAAEkc,GAAG,KAAK,uCAAuCxc,EAAE,IAAI,OAAOM,EAAEmc,iBAAgBC,OAAM,WAAW,OAAOiC,OAAO,GAAG7Y,EAAE,OAAO,IAAIjF,SAAQ,SAASP,EAAEc,GAAG0E,EAAE9F,GAAE,SAASb,GAAGmB,EAAE,IAAItF,WAAWmE,MAAKiC,MAAK,OAAOP,QAAQ8b,UAAUJ,MAAK,WAAW,OAAOoC,OAsB/HE,GAAKtC,MAAK,SAASnY,GAAG,OAAOc,YAAY0X,YAAYxY,EAAErD,MAAKwb,KAAKlb,GAAE,SAAS+C,GAAG7B,EAAE,0CAA0C6B,GAAGC,EAAED,MAAK,IAAIrD,EAAE,CAACT,EAAEihB,IAA8D,GAA1Dpf,IAAIrB,EAAEob,wBAAwBpb,EAAEob,uBAAuB/Z,GAAMrB,EAAE+b,gBAAgB,IAAI,OAAO/b,EAAE+b,gBAAgB9b,EACrgBT,GAAG,MAAMe,GAAG,OAAOkB,EAAE,sDAAsDlB,IAAG,GAAsBqE,GAAG,mBAAoBR,YAAY4X,sBAAsByB,KAAMve,EAAEqI,WAAW,YAAY,mBAAoBgU,MAAMld,EAAEiC,GAAGib,MAAMrc,EAAE,CAACsc,YAAY,gBAAgBC,MAAK,SAASlb,GAAG,OAAO6D,YAAY4X,qBAAqBzb,EAAEN,GAAGwb,KAAKnb,GAAE,SAASgD,GAAyF,OAAtF7B,EAAE,kCAAkC6B,GAAG7B,EAAE,6CAAoDpD,EAAEiC,UAAWsb,MAAMpb,GADjc,GAEAR,EAAEic,mBAAmB,WAAW,OAAOjc,EAAEic,mBAAmBjc,EAAEgb,IAAIhc,GAAG4X,MAAM,KAAK3F,YAAYjR,EAAEkc,SAAS,WAAW,OAAOlc,EAAEkc,SAASlc,EAAEgb,IAAI7Z,GAAGyV,MAAM,KAAK3F,YAAYjR,EAAEoc,yBAAyB,WAAW,OAAOpc,EAAEoc,yBAAyBpc,EAAEgb,IAAIvb,GAAGmX,MAAM,KAAK3F,YAAYjR,EAAEsc,0BAA0B,WAAW,OAAOtc,EAAEsc,0BAA0Btc,EAAEgb,IAAI5V,GAAGwR,MAAM,KAAK3F,YAAYjR,EAAEwc,0BAA0B,WAAW,OAAOxc,EAAEwc,0BAA0Bxc,EAAEgb,IAAI3b,GAAGuX,MAAM,KAAK3F,YACpdjR,EAAE0c,kBAAkB,WAAW,OAAO1c,EAAE0c,kBAAkB1c,EAAEgb,IAAI3V,GAAGuR,MAAM,KAAK3F,YAAYjR,EAAE4c,mBAAmB,WAAW,OAAO5c,EAAE4c,mBAAmB5c,EAAEgb,IAAI/b,GAAG2X,MAAM,KAAK3F,YAAYjR,EAAE8c,kBAAkB,WAAW,OAAO9c,EAAE8c,kBAAkB9c,EAAEgb,IAAI1U,GAAGsQ,MAAM,KAAK3F,YAAYjR,EAAEgd,mBAAmB,WAAW,OAAOhd,EAAEgd,mBAAmBhd,EAAEgb,IAAIva,GAAGmW,MAAM,KAAK3F,YAAYjR,EAAEkd,iBAAiB,WAAW,OAAOld,EAAEkd,iBAAiBld,EAAEgb,IAAIzU,GAAGqQ,MAAM,KAAK3F,YACxbjR,EAAEod,kBAAkB,WAAW,OAAOpd,EAAEod,kBAAkBpd,EAAEgb,IAAIjE,IAAIH,MAAM,KAAK3F,YAAYjR,EAAEsd,SAAS,WAAW,OAAOtd,EAAEsd,SAAStd,EAAEgb,IAAI9D,IAAIN,MAAM,KAAK3F,YAAYjR,EAAEwd,iBAAiB,WAAW,OAAOxd,EAAEwd,iBAAiBxd,EAAEgb,IAAI1D,IAAIV,MAAM,KAAK3F,YAAYjR,EAAE0d,kBAAkB,WAAW,OAAO1d,EAAE0d,kBAAkB1d,EAAEgb,IAAIvE,IAAIG,MAAM,KAAK3F,YAAYjR,EAAE4d,kBAAkB,WAAW,OAAO5d,EAAE4d,kBAAkB5d,EAAEgb,IAAIrE,IAAIC,MAAM,KAAK3F,YACvajR,EAAE8d,qBAAqB,WAAW,OAAO9d,EAAE8d,qBAAqB9d,EAAEgb,IAAID,IAAInE,MAAM,KAAK3F,YAAYjR,EAAEge,sBAAsB,WAAW,OAAOhe,EAAEge,sBAAsBhe,EAAEgb,IAAItE,IAAIE,MAAM,KAAK3F,YAAYjR,EAAEke,sBAAsB,WAAW,OAAOle,EAAEke,sBAAsBle,EAAEgb,IAAIf,IAAIrD,MAAM,KAAK3F,YAAYjR,EAAEoe,QAAQ,WAAW,OAAOpe,EAAEoe,QAAQpe,EAAEgb,IAAIE,IAAItE,MAAM,KAAK3F,YAAYjR,EAAEse,iBAAiB,WAAW,OAAOte,EAAEse,iBAAiBte,EAAEgb,IAAImB,IAAIvF,MAAM,KAAK3F,YAC3b,IACqe3K,GADje+V,GAAGrc,EAAEwe,QAAQ,WAAW,OAAOnC,GAAGrc,EAAEwe,QAAQxe,EAAEgb,IAAIqB,IAAIzF,MAAM,KAAK3F,YAAYsP,GAAGvgB,EAAE0e,kBAAkB,WAAW,OAAO6B,GAAGvgB,EAAE0e,kBAAkB1e,EAAEgb,IAAIuB,IAAI3F,MAAM,KAAK3F,YAAYoP,GAAGrgB,EAAE4e,MAAM,WAAW,OAAOyB,GAAGrgB,EAAE4e,MAAM5e,EAAEgb,IAAIyB,IAAI7F,MAAM,KAAK3F,YAAYxR,GAAEO,EAAE0gB,aAAa,WAAW,OAAOjhB,GAAEO,EAAE0gB,aAAa1gB,EAAEgb,IAAI2B,IAAI/F,MAAM,KAAK3F,YAAY0O,GAAG3f,EAAE4gB,eAAe,WAAW,OAAOjB,GAAG3f,EAAE4gB,eAAe5gB,EAAEgb,IAAI6B,IAAIjG,MAAM,KAAK3F,YAAYwO,GAAGzf,EAAE8gB,eAAe,WAAW,OAAOrB,GAAGzf,EAAE8gB,eAAe9gB,EAAEgb,IAAI+B,IAAInG,MAAM,KACrf3F,YAAY0P,GAAG3gB,EAAEghB,UAAU,WAAW,OAAOL,GAAG3gB,EAAEghB,UAAUhhB,EAAEgb,IAAIiC,IAAIrG,MAAM,KAAK3F,YAAY4P,GAAG7gB,EAAEkhB,aAAa,WAAW,OAAOL,GAAG7gB,EAAEkhB,aAAalhB,EAAEgb,IAAImC,IAAIvG,MAAM,KAAK3F,YAAY8P,GAAG/gB,EAAEohB,WAAW,WAAW,OAAOL,GAAG/gB,EAAEohB,WAAWphB,EAAEgb,IAAIqC,IAAIzG,MAAM,KAAK3F,YAAYkP,GAAGngB,EAAEwhB,UAAU,WAAW,OAAOrB,GAAGngB,EAAEwhB,UAAUxhB,EAAEgb,IAAIuC,IAAI3G,MAAM,KAAK3F,YAE5U,SAASkQ,KAAK,SAAS3hB,IAAI,IAAI8G,KAAIA,IAAE,EAAGtG,EAAE6hB,WAAU,GAAIlL,GAAI,CAAiE,GAAhEsH,EAAGlB,GAAIhG,EAAG/W,GAAMA,EAAE8hB,sBAAqB9hB,EAAE8hB,uBAA0B9hB,EAAE+hB,QAAQ,IAAI,mBAAmB/hB,EAAE+hB,UAAU/hB,EAAE+hB,QAAQ,CAAC/hB,EAAE+hB,UAAU/hB,EAAE+hB,QAAQjpB,QAAQ,CAAC,IAAIwH,EAAEN,EAAE+hB,QAAQjb,QAAQqW,EAAGpW,QAAQzG,GAAG2d,EAAGd,IAAK,KAAK,EAAE9b,GAAG,CAAC,GAAGrB,EAAE6G,OAAO,IAAI,mBAAmB7G,EAAE6G,SAAS7G,EAAE6G,OAAO,CAAC7G,EAAE6G,SAAS7G,EAAE6G,OAAO/N,QAAQukB,IAAKY,EAAGpB,GAAI,EAAExb,IAAIrB,EAAEgiB,WAAWhiB,EAAEgiB,UAAU,cAAc7K,YAAW,WAAWA,YAAW,WAAWnX,EAAEgiB,UAAU,MAAK,GAAGxiB,MAAK,IAAIA,MACte,GAHwVQ,EAAEmiB,aAAapc,EAAE/F,EAAEoiB,aAAa,SAAS5iB,EAAEc,EAAEjC,GAAG,OAAO4G,EAAEzF,EAAEgH,EAAElG,EAAEjC,IAAI2B,EAAEqiB,gBAAgBnH,EAAGlb,EAAEghB,UAAUL,GAAG3gB,EAAEkhB,aAAaL,GAAG7gB,EAAEohB,WAAWL,GAC9d5hB,EAAE,SAAS8hB,IAAK3a,IAAG6a,KAAK7a,KAAInH,EAAE8hB,IAC8cjhB,EAAElD,IAAIqkB,GAC/enhB,EAAEyiB,QAAQ,IAAI,mBAAmBziB,EAAEyiB,UAAUziB,EAAEyiB,QAAQ,CAACziB,EAAEyiB,UAAU,EAAEziB,EAAEyiB,QAAQ3pB,QAAQkH,EAAEyiB,QAAQxY,KAAVjK,GAGzF,OAH2GmhB,KAGpGuB,EAAQ5iB,QAKfjI,EAAOD,QAAU8qB,G,sBC1DnB7qB,EAAOD,QAmBP,SAAmB+qB,EAAIC,GAKnB,IAJA,IAAIC,EAAU,IAAI3nB,MAAM+V,UAAUnY,OAAS,GACvCyX,EAAU,EACVuS,EAAU,EACVC,GAAU,EACPD,EAAQ7R,UAAUnY,QACrB+pB,EAAOtS,KAAYU,UAAU6R,KACjC,OAAO,IAAI/iB,SAAQ,SAAkB8b,EAASmH,GAC1CH,EAAOtS,GAAU,SAAkBjS,GAC/B,GAAIykB,EAEA,GADAA,GAAU,EACNzkB,EACA0kB,EAAO1kB,OACN,CAGD,IAFA,IAAIukB,EAAS,IAAI3nB,MAAM+V,UAAUnY,OAAS,GACtCyX,EAAS,EACNA,EAASsS,EAAO/pB,QACnB+pB,EAAOtS,KAAYU,UAAUV,GACjCsL,EAAQjF,MAAM,KAAMiM,KAIhC,IACIF,EAAG/L,MAAMgM,GAAO,KAAMC,GACxB,MAAOvkB,GACDykB,IACAA,GAAU,EACVC,EAAO1kB,U,0BCxCvB,IAAI2kB,EAASrrB,EAObqrB,EAAOnqB,OAAS,SAAgBoqB,GAC5B,IAAI/iB,EAAI+iB,EAAOpqB,OACf,IAAKqH,EACD,OAAO,EAEX,IADA,IAAIf,EAAI,IACCe,EAAI,EAAI,GAA0B,MAArB+iB,EAAOC,OAAOhjB,MAC9Bf,EACN,OAAOyQ,KAAKC,KAAqB,EAAhBoT,EAAOpqB,QAAc,EAAIsG,GAU9C,IANA,IAAIgkB,EAAM,IAAIloB,MAAM,IAGhBmoB,EAAM,IAAInoB,MAAM,KAGXrC,EAAI,EAAGA,EAAI,IAChBwqB,EAAID,EAAIvqB,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,EAAIA,EAAI,GAAK,IAAMA,IASrFoqB,EAAOK,OAAS,SAAgB9lB,EAAQ+lB,EAAOC,GAM3C,IALA,IAIIzkB,EAJA0kB,EAAQ,KACRC,EAAQ,GACR7qB,EAAI,EACJ2L,EAAI,EAED+e,EAAQC,GAAK,CAChB,IAAIljB,EAAI9C,EAAO+lB,KACf,OAAQ/e,GACJ,KAAK,EACDkf,EAAM7qB,KAAOuqB,EAAI9iB,GAAK,GACtBvB,GAAS,EAAJuB,IAAU,EACfkE,EAAI,EACJ,MACJ,KAAK,EACDkf,EAAM7qB,KAAOuqB,EAAIrkB,EAAIuB,GAAK,GAC1BvB,GAAS,GAAJuB,IAAW,EAChBkE,EAAI,EACJ,MACJ,KAAK,EACDkf,EAAM7qB,KAAOuqB,EAAIrkB,EAAIuB,GAAK,GAC1BojB,EAAM7qB,KAAOuqB,EAAQ,GAAJ9iB,GACjBkE,EAAI,EAGR3L,EAAI,QACH4qB,IAAUA,EAAQ,KAAKzqB,KAAK8L,OAAOC,aAAa6R,MAAM9R,OAAQ4e,IAC/D7qB,EAAI,GASZ,OANI2L,IACAkf,EAAM7qB,KAAOuqB,EAAIrkB,GACjB2kB,EAAM7qB,KAAO,GACH,IAAN2L,IACAkf,EAAM7qB,KAAO,KAEjB4qB,GACI5qB,GACA4qB,EAAMzqB,KAAK8L,OAAOC,aAAa6R,MAAM9R,OAAQ4e,EAAM7hB,MAAM,EAAGhJ,KACzD4qB,EAAMllB,KAAK,KAEfuG,OAAOC,aAAa6R,MAAM9R,OAAQ4e,EAAM7hB,MAAM,EAAGhJ,KAG5D,IAAI8qB,EAAkB,mBAUtBV,EAAOve,OAAS,SAAgBwe,EAAQ1lB,EAAQ+S,GAI5C,IAHA,IAEIxR,EAFAwkB,EAAQhT,EACR/L,EAAI,EAEC3L,EAAI,EAAGA,EAAIqqB,EAAOpqB,QAAS,CAChC,IAAIkH,EAAIkjB,EAAOhe,WAAWrM,KAC1B,GAAU,KAANmH,GAAYwE,EAAI,EAChB,MACJ,QAAqB7L,KAAhBqH,EAAIqjB,EAAIrjB,IACT,MAAMpH,MAAM+qB,GAChB,OAAQnf,GACJ,KAAK,EACDzF,EAAIiB,EACJwE,EAAI,EACJ,MACJ,KAAK,EACDhH,EAAO+S,KAAYxR,GAAK,GAAS,GAAJiB,IAAW,EACxCjB,EAAIiB,EACJwE,EAAI,EACJ,MACJ,KAAK,EACDhH,EAAO+S,MAAiB,GAAJxR,IAAW,GAAS,GAAJiB,IAAW,EAC/CjB,EAAIiB,EACJwE,EAAI,EACJ,MACJ,KAAK,EACDhH,EAAO+S,MAAiB,EAAJxR,IAAU,EAAIiB,EAClCwE,EAAI,GAIhB,GAAU,IAANA,EACA,MAAM5L,MAAM+qB,GAChB,OAAOpT,EAASgT,GAQpBN,EAAOW,KAAO,SAAcV,GACxB,MAAO,mEAAmEU,KAAKV,K,sBChInF,SAASW,IAOL1qB,KAAK2qB,WAAa,GAftBjsB,EAAOD,QAAUisB,EAyBjBA,EAAaE,UAAUjiB,GAAK,SAAYkiB,EAAKrB,EAAIC,GAK7C,OAJCzpB,KAAK2qB,WAAWE,KAAS7qB,KAAK2qB,WAAWE,GAAO,KAAKhrB,KAAK,CACvD2pB,GAAMA,EACNC,IAAMA,GAAOzpB,OAEVA,MASX0qB,EAAaE,UAAUE,IAAM,SAAaD,EAAKrB,GAC3C,QAAYhqB,IAARqrB,EACA7qB,KAAK2qB,WAAa,QAElB,QAAWnrB,IAAPgqB,EACAxpB,KAAK2qB,WAAWE,GAAO,QAGvB,IADA,IAAIE,EAAY/qB,KAAK2qB,WAAWE,GACvBnrB,EAAI,EAAGA,EAAIqrB,EAAUprB,QACtBorB,EAAUrrB,GAAG8pB,KAAOA,EACpBuB,EAAUnrB,OAAOF,EAAG,KAElBA,EAGlB,OAAOM,MASX0qB,EAAaE,UAAUI,KAAO,SAAcH,GACxC,IAAIE,EAAY/qB,KAAK2qB,WAAWE,GAChC,GAAIE,EAAW,CAGX,IAFA,IAAIE,EAAO,GACPvrB,EAAI,EACDA,EAAIoY,UAAUnY,QACjBsrB,EAAKprB,KAAKiY,UAAUpY,MACxB,IAAKA,EAAI,EAAGA,EAAIqrB,EAAUprB,QACtBorB,EAAUrrB,GAAG8pB,GAAG/L,MAAMsN,EAAUrrB,KAAK+pB,IAAKwB,GAElD,OAAOjrB,O,qBCaX,SAASxB,EAAQC,GAwNb,MArN4B,oBAAjBqC,aAA8B,WAErC,IAAIoqB,EAAM,IAAIpqB,aAAa,EAAG,IAC1BqqB,EAAM,IAAIpqB,WAAWmqB,EAAI7mB,QACzBgK,EAAiB,MAAX8c,EAAI,GAEd,SAASC,EAAmBC,EAAKC,EAAKC,GAClCL,EAAI,GAAKG,EACTC,EAAIC,GAAWJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GAGvB,SAASK,EAAmBH,EAAKC,EAAKC,GAClCL,EAAI,GAAKG,EACTC,EAAIC,GAAWJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GAQvB,SAASM,EAAkBH,EAAKC,GAK5B,OAJAJ,EAAI,GAAKG,EAAIC,GACbJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACZL,EAAI,GAGf,SAASQ,EAAkBJ,EAAKC,GAK5B,OAJAJ,EAAI,GAAKG,EAAIC,GACbJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACZL,EAAI,GAjBfzsB,EAAQktB,aAAetd,EAAK+c,EAAqBI,EAEjD/sB,EAAQmtB,aAAevd,EAAKmd,EAAqBJ,EAmBjD3sB,EAAQotB,YAAcxd,EAAKod,EAAoBC,EAE/CjtB,EAAQqtB,YAAczd,EAAKqd,EAAoBD,EA9CV,GAiD9B,WAEP,SAASM,EAAmBC,EAAWX,EAAKC,EAAKC,GAC7C,IAAIU,EAAOZ,EAAM,EAAI,EAAI,EAGzB,GAFIY,IACAZ,GAAOA,GACC,IAARA,EACAW,EAAU,EAAIX,EAAM,EAAmB,EAAqB,WAAYC,EAAKC,QAC5E,GAAIW,MAAMb,GACXW,EAAU,WAAYV,EAAKC,QAC1B,GAAIF,EAAM,qBACXW,GAAWC,GAAQ,GAAK,cAAgB,EAAGX,EAAKC,QAC/C,GAAIF,EAAM,sBACXW,GAAWC,GAAQ,GAAKvV,KAAKyV,MAAMd,EAAM,yBAA4B,EAAGC,EAAKC,OAC5E,CACD,IAAIa,EAAW1V,KAAK2V,MAAM3V,KAAKnM,IAAI8gB,GAAO3U,KAAK4V,KAE/CN,GAAWC,GAAQ,GAAKG,EAAW,KAAO,GAD0B,QAArD1V,KAAKyV,MAAMd,EAAM3U,KAAK6V,IAAI,GAAIH,GAAY,YACI,EAAGd,EAAKC,IAO7E,SAASiB,EAAkBC,EAAUnB,EAAKC,GACtC,IAAImB,EAAOD,EAASnB,EAAKC,GACrBU,EAAsB,GAAdS,GAAQ,IAAU,EAC1BN,EAAWM,IAAS,GAAK,IACzBC,EAAkB,QAAPD,EACf,OAAoB,MAAbN,EACDO,EACAC,IACAX,GAAOY,KACM,IAAbT,EACO,qBAAPH,EAA+BU,EAC/BV,EAAOvV,KAAK6V,IAAI,EAAGH,EAAW,MAAQO,EAAW,SAd3DluB,EAAQktB,aAAeI,EAAmBvhB,KAAK,KAAMsiB,GACrDruB,EAAQmtB,aAAeG,EAAmBvhB,KAAK,KAAMuiB,GAgBrDtuB,EAAQotB,YAAcW,EAAkBhiB,KAAK,KAAMwiB,GACnDvuB,EAAQqtB,YAAcU,EAAkBhiB,KAAK,KAAMyiB,GAvC5C,GA4CiB,oBAAjB7rB,aAA8B,WAErC,IAAI8rB,EAAM,IAAI9rB,aAAa,EAAE,IACzB+pB,EAAM,IAAIpqB,WAAWmsB,EAAI7oB,QACzBgK,EAAiB,MAAX8c,EAAI,GAEd,SAASgC,EAAoB9B,EAAKC,EAAKC,GACnC2B,EAAI,GAAK7B,EACTC,EAAIC,GAAWJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GAGvB,SAASiC,EAAoB/B,EAAKC,EAAKC,GACnC2B,EAAI,GAAK7B,EACTC,EAAIC,GAAWJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GACnBG,EAAIC,EAAM,GAAKJ,EAAI,GAQvB,SAASkC,EAAmB/B,EAAKC,GAS7B,OARAJ,EAAI,GAAKG,EAAIC,GACbJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACZ2B,EAAI,GAGf,SAASI,EAAmBhC,EAAKC,GAS7B,OARAJ,EAAI,GAAKG,EAAIC,GACbJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACnBJ,EAAI,GAAKG,EAAIC,EAAM,GACZ2B,EAAI,GAzBfzuB,EAAQ8uB,cAAgBlf,EAAK8e,EAAsBC,EAEnD3uB,EAAQ+uB,cAAgBnf,EAAK+e,EAAsBD,EA2BnD1uB,EAAQgvB,aAAepf,EAAKgf,EAAqBC,EAEjD7uB,EAAQivB,aAAerf,EAAKif,EAAqBD,EA9DZ,GAiE9B,WAEP,SAASM,EAAoB3B,EAAW4B,EAAMC,EAAMxC,EAAKC,EAAKC,GAC1D,IAAIU,EAAOZ,EAAM,EAAI,EAAI,EAGzB,GAFIY,IACAZ,GAAOA,GACC,IAARA,EACAW,EAAU,EAAGV,EAAKC,EAAMqC,GACxB5B,EAAU,EAAIX,EAAM,EAAmB,EAAqB,WAAYC,EAAKC,EAAMsC,QAChF,GAAI3B,MAAMb,GACbW,EAAU,EAAGV,EAAKC,EAAMqC,GACxB5B,EAAU,WAAYV,EAAKC,EAAMsC,QAC9B,GAAIxC,EAAM,sBACbW,EAAU,EAAGV,EAAKC,EAAMqC,GACxB5B,GAAWC,GAAQ,GAAK,cAAgB,EAAGX,EAAKC,EAAMsC,OACnD,CACH,IAAIlB,EACJ,GAAItB,EAAM,uBAENW,GADAW,EAAWtB,EAAM,UACM,EAAGC,EAAKC,EAAMqC,GACrC5B,GAAWC,GAAQ,GAAKU,EAAW,cAAgB,EAAGrB,EAAKC,EAAMsC,OAC9D,CACH,IAAIzB,EAAW1V,KAAK2V,MAAM3V,KAAKnM,IAAI8gB,GAAO3U,KAAK4V,KAC9B,OAAbF,IACAA,EAAW,MAEfJ,EAAqB,kBADrBW,EAAWtB,EAAM3U,KAAK6V,IAAI,GAAIH,MACY,EAAGd,EAAKC,EAAMqC,GACxD5B,GAAWC,GAAQ,GAAKG,EAAW,MAAQ,GAAgB,QAAXO,EAAqB,WAAa,EAAGrB,EAAKC,EAAMsC,KAQ5G,SAASC,EAAmBrB,EAAUmB,EAAMC,EAAMvC,EAAKC,GACnD,IAAIwC,EAAKtB,EAASnB,EAAKC,EAAMqC,GACzBI,EAAKvB,EAASnB,EAAKC,EAAMsC,GACzB5B,EAAoB,GAAZ+B,GAAM,IAAU,EACxB5B,EAAW4B,IAAO,GAAK,KACvBrB,EAAW,YAAmB,QAALqB,GAAgBD,EAC7C,OAAoB,OAAb3B,EACDO,EACAC,IACAX,GAAOY,KACM,IAAbT,EACO,OAAPH,EAAgBU,EAChBV,EAAOvV,KAAK6V,IAAI,EAAGH,EAAW,OAASO,EAAW,kBAf5DluB,EAAQ8uB,cAAgBI,EAAoBnjB,KAAK,KAAMsiB,EAAa,EAAG,GACvEruB,EAAQ+uB,cAAgBG,EAAoBnjB,KAAK,KAAMuiB,EAAa,EAAG,GAiBvEtuB,EAAQgvB,aAAeK,EAAmBtjB,KAAK,KAAMwiB,EAAY,EAAG,GACpEvuB,EAAQivB,aAAeI,EAAmBtjB,KAAK,KAAMyiB,EAAY,EAAG,GAnD7D,GAuDJxuB,EAKX,SAASquB,EAAYzB,EAAKC,EAAKC,GAC3BD,EAAIC,GAAyB,IAAbF,EAChBC,EAAIC,EAAM,GAAMF,IAAQ,EAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,GAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,GAG5B,SAAS0B,EAAY1B,EAAKC,EAAKC,GAC3BD,EAAIC,GAAYF,IAAQ,GACxBC,EAAIC,EAAM,GAAMF,IAAQ,GAAK,IAC7BC,EAAIC,EAAM,GAAMF,IAAQ,EAAK,IAC7BC,EAAIC,EAAM,GAAmB,IAAbF,EAGpB,SAAS2B,EAAW1B,EAAKC,GACrB,OAAQD,EAAIC,GACJD,EAAIC,EAAM,IAAM,EAChBD,EAAIC,EAAM,IAAM,GAChBD,EAAIC,EAAM,IAAM,MAAQ,EAGpC,SAAS0B,EAAW3B,EAAKC,GACrB,OAAQD,EAAIC,IAAY,GAChBD,EAAIC,EAAM,IAAM,GAChBD,EAAIC,EAAM,IAAM,EAChBD,EAAIC,EAAM,MAAQ,EA3U9B7sB,EAAOD,QAAUD,EAAQA,I,2BCOzB,SAASyvB,QAAQC,YACb,IACI,IAAIC,IAAMC,KAAK,QAAQ3lB,QAAQ,IAAI,MAAzB2lB,CAAgCF,YAC1C,GAAIC,MAAQA,IAAIxuB,QAAU2D,OAAO+qB,KAAKF,KAAKxuB,QACvC,OAAOwuB,IACb,MAAOjpB,IACT,OAAO,KAdXxG,OAAOD,QAAUwvB,S,sBCAjBvvB,EAAOD,QA6BP,SAAc6vB,EAAO5lB,EAAOrG,GACxB,IAAIksB,EAASlsB,GAAQ,KACjBmsB,EAASD,IAAS,EAClBE,EAAS,KACTrX,EAASmX,EACb,OAAO,SAAoBlsB,GACvB,GAAIA,EAAO,GAAKA,EAAOmsB,EACnB,OAAOF,EAAMjsB,GACb+U,EAAS/U,EAAOksB,IAChBE,EAAOH,EAAMC,GACbnX,EAAS,GAEb,IAAIkU,EAAM5iB,EAAM3E,KAAK0qB,EAAMrX,EAAQA,GAAU/U,GAG7C,OAFa,EAAT+U,IACAA,EAAwB,GAAL,EAATA,IACPkU,K,0BCtCf,IAAIoD,EAAOjwB,EAOXiwB,EAAK/uB,OAAS,SAAqBoqB,GAG/B,IAFA,IAAI4E,EAAM,EACN9nB,EAAI,EACCnH,EAAI,EAAGA,EAAIqqB,EAAOpqB,SAAUD,GACjCmH,EAAIkjB,EAAOhe,WAAWrM,IACd,IACJivB,GAAO,EACF9nB,EAAI,KACT8nB,GAAO,EACe,QAAZ,MAAJ9nB,IAAkE,QAAZ,MAA3BkjB,EAAOhe,WAAWrM,EAAI,OACrDA,EACFivB,GAAO,GAEPA,GAAO,EAEf,OAAOA,GAUXD,EAAKE,KAAO,SAAmBvqB,EAAQ+lB,EAAOC,GAE1C,GADUA,EAAMD,EACN,EACN,MAAO,GAKX,IAJA,IAGIxkB,EAHA0kB,EAAQ,KACRC,EAAQ,GACR7qB,EAAI,EAED0qB,EAAQC,IACXzkB,EAAIvB,EAAO+lB,MACH,IACJG,EAAM7qB,KAAOkG,EACRA,EAAI,KAAOA,EAAI,IACpB2kB,EAAM7qB,MAAY,GAAJkG,IAAW,EAAsB,GAAlBvB,EAAO+lB,KAC/BxkB,EAAI,KAAOA,EAAI,KACpBA,IAAU,EAAJA,IAAU,IAAwB,GAAlBvB,EAAO+lB,OAAkB,IAAwB,GAAlB/lB,EAAO+lB,OAAkB,EAAsB,GAAlB/lB,EAAO+lB,MAAiB,MAC1GG,EAAM7qB,KAAO,OAAUkG,GAAK,IAC5B2kB,EAAM7qB,KAAO,OAAc,KAAJkG,IAEvB2kB,EAAM7qB,MAAY,GAAJkG,IAAW,IAAwB,GAAlBvB,EAAO+lB,OAAkB,EAAsB,GAAlB/lB,EAAO+lB,KACnE1qB,EAAI,QACH4qB,IAAUA,EAAQ,KAAKzqB,KAAK8L,OAAOC,aAAa6R,MAAM9R,OAAQ4e,IAC/D7qB,EAAI,GAGZ,OAAI4qB,GACI5qB,GACA4qB,EAAMzqB,KAAK8L,OAAOC,aAAa6R,MAAM9R,OAAQ4e,EAAM7hB,MAAM,EAAGhJ,KACzD4qB,EAAMllB,KAAK,KAEfuG,OAAOC,aAAa6R,MAAM9R,OAAQ4e,EAAM7hB,MAAM,EAAGhJ,KAU5DgvB,EAAKG,MAAQ,SAAoB9E,EAAQ1lB,EAAQ+S,GAI7C,IAHA,IACI0X,EACAC,EAFA3E,EAAQhT,EAGH1X,EAAI,EAAGA,EAAIqqB,EAAOpqB,SAAUD,GACjCovB,EAAK/E,EAAOhe,WAAWrM,IACd,IACL2E,EAAO+S,KAAY0X,EACZA,EAAK,MACZzqB,EAAO+S,KAAY0X,GAAM,EAAU,IACnCzqB,EAAO+S,KAAuB,GAAX0X,EAAgB,KACV,QAAZ,MAALA,IAA0E,QAAZ,OAAjCC,EAAKhF,EAAOhe,WAAWrM,EAAI,MAChEovB,EAAK,QAAiB,KAALA,IAAgB,KAAY,KAALC,KACtCrvB,EACF2E,EAAO+S,KAAY0X,GAAM,GAAU,IACnCzqB,EAAO+S,KAAY0X,GAAM,GAAK,GAAK,IACnCzqB,EAAO+S,KAAY0X,GAAM,EAAK,GAAK,IACnCzqB,EAAO+S,KAAuB,GAAX0X,EAAgB,MAEnCzqB,EAAO+S,KAAY0X,GAAM,GAAU,IACnCzqB,EAAO+S,KAAY0X,GAAM,EAAK,GAAK,IACnCzqB,EAAO+S,KAAuB,GAAX0X,EAAgB,KAG3C,OAAO1X,EAASgT,I,8DCtFpB,IAAI4E,EAAc,GAKlBA,EAAYC,OAQZD,EAAYE,MAMZF,EAAYG,aAAe,EAM3BH,EAAYI,WAAa,EAMzBJ,EAAYK,uBAAyB,EAMrCL,EAAYM,mBAAqB,EAKjCN,EAAYO,SAAW,CACrBC,WAAY,EACZC,aAAc,GAOhBT,EAAYU,MAAQ,IAAIvuB,WAAW,GAMnC6tB,EAAYW,QAAU,IAAI7uB,aAAakuB,EAAYU,MAAMrrB,QAMzD2qB,EAAYY,QAAU,IAAIxuB,aAAa4tB,EAAYU,MAAMrrB,QAMzD2qB,EAAYa,eAAuE,IAAtD,IAAI5uB,YAAY,IAAIF,WAAW,CAAC,EAAG,IAAIsD,QAAQ,GAS5E2qB,EAAYc,KAAO,SAASC,EAAKC,GAK/BhwB,KAAK+vB,IAAY,EAANA,EAMX/vB,KAAKgwB,KAAc,EAAPA,GAQdhB,EAAYc,KAAKG,OAAS,SAASF,EAAKC,GAEtC,OAAc,GAAPD,GAAoB,GAARC,EAAYhB,EAAYc,KAAKI,KAAO,IAAIlB,EAAYc,KAAKC,EAAKC,IAMnFhB,EAAYc,KAAKlF,UAAUuF,UAAY,WACrC,OAAQnwB,KAAK+vB,MAAQ,GAAiB,WAAZ/vB,KAAKgwB,MAOjChB,EAAYc,KAAKlF,UAAUwF,OAAS,SAASC,GAC3C,OAAOrwB,KAAK+vB,KAAOM,EAAMN,KAAO/vB,KAAKgwB,MAAQK,EAAML,MAOrDhB,EAAYc,KAAKI,KAAO,IAAIlB,EAAYc,KAAK,EAAG,GAUhDd,EAAYsB,QAAU,SAASC,GAC7B,GAAKA,EAGCC,EAAeD,OAFnB,IAAIC,EAAe,KASrBxwB,KAAKsR,GAAK0d,EAAYyB,WAAWC,SAASF,GAQ1CxwB,KAAK2wB,MAAQH,EAQbxwB,KAAK4wB,SAAW,EAQhB5wB,KAAK6wB,OAAS,KAQd7wB,KAAK8wB,cAAgB,EAQrB9wB,KAAK+wB,UAAW,EAQhB/wB,KAAKgxB,aAAe,EAQpBhxB,KAAKixB,QAAU,GAQfjxB,KAAKkxB,iBAAmB,EAQxBlxB,KAAKmxB,gBAAiB,GAGxBnC,EAAYsB,QAAQ1F,UAAUwG,MAAQ,WACpCpxB,KAAKsR,GAAG8f,QACRpxB,KAAK2wB,MAAQ3wB,KAAKsR,GAAG+f,WACrBrxB,KAAK4wB,SAAW,EAChB5wB,KAAK6wB,OAAS,KACd7wB,KAAK8wB,cAAgB,EACrB9wB,KAAK+wB,UAAW,EAChB/wB,KAAKgxB,aAAe,EACpBhxB,KAAKixB,QAAU,GACfjxB,KAAKkxB,iBAAmB,EACxBlxB,KAAKmxB,gBAAiB,GAUxBnC,EAAYsB,QAAQ1F,UAAU0G,cAAgB,SAASA,GACrDtxB,KAAKmxB,eAAiBG,GAUxBtC,EAAYsB,QAAQ1F,UAAU2G,WAAa,WACzC,OAAOvxB,KAAKsR,IASd0d,EAAYsB,QAAQ1F,UAAU4G,aAAe,WAC3C,OAAOxxB,KAAKsR,GAAGmgB,QAAQ/lB,SAAS1L,KAAKsR,GAAGogB,WAAY1xB,KAAKsR,GAAGogB,WAAa1xB,KAAKoX,WAahF4X,EAAYsB,QAAQ1F,UAAU+G,KAAO,SAAStvB,EAAMuvB,GAE9CvvB,EAAOrC,KAAK4wB,WACd5wB,KAAK4wB,SAAWvuB,GAQlB,IAHA,IAAIwvB,EAAwE,IAAvD7xB,KAAKsR,GAAG+f,WAAarxB,KAAK2wB,MAAQiB,GAA2BvvB,EAAO,EAGlFrC,KAAK2wB,MAAQkB,EAAaxvB,EAAOuvB,GAAkB,CACxD,IAAIE,EAAe9xB,KAAKsR,GAAG+f,WAC3BrxB,KAAKsR,GAAK0d,EAAYsB,QAAQyB,eAAe/xB,KAAKsR,IAClDtR,KAAK2wB,OAAS3wB,KAAKsR,GAAG+f,WAAaS,EAGrC9xB,KAAKgyB,IAAIH,IAMX7C,EAAYsB,QAAQ1F,UAAUoH,IAAM,SAASC,GAC3C,IAAK,IAAIvyB,EAAI,EAAGA,EAAIuyB,EAAWvyB,IAC7BM,KAAKsR,GAAG4gB,YAAYlyB,KAAK2wB,MAAO,IAOpC3B,EAAYsB,QAAQ1F,UAAUsH,UAAY,SAAS7xB,GACjDL,KAAKsR,GAAG4gB,UAAUlyB,KAAK2wB,OAAS,EAAGtwB,IAMrC2uB,EAAYsB,QAAQ1F,UAAUuH,WAAa,SAAS9xB,GAClDL,KAAKsR,GAAG6gB,WAAWnyB,KAAK2wB,OAAS,EAAGtwB,IAMtC2uB,EAAYsB,QAAQ1F,UAAUwH,WAAa,SAAS/xB,GAClDL,KAAKsR,GAAG8gB,WAAWpyB,KAAK2wB,OAAS,EAAGtwB,IAMtC2uB,EAAYsB,QAAQ1F,UAAUyH,WAAa,SAAShyB,GAClDL,KAAKsR,GAAG+gB,WAAWryB,KAAK2wB,OAAS,EAAGtwB,IAMtC2uB,EAAYsB,QAAQ1F,UAAU0H,aAAe,SAASjyB,GACpDL,KAAKsR,GAAGghB,aAAatyB,KAAK2wB,OAAS,EAAGtwB,IAMxC2uB,EAAYsB,QAAQ1F,UAAU2H,aAAe,SAASlyB,GACpDL,KAAKsR,GAAGihB,aAAavyB,KAAK2wB,OAAS,EAAGtwB,IAQxC2uB,EAAYsB,QAAQ1F,UAAU4H,QAAU,SAASnyB,GAC/CL,KAAK2xB,KAAK,EAAG,GACb3xB,KAAKkyB,UAAU7xB,IAOjB2uB,EAAYsB,QAAQ1F,UAAU6H,SAAW,SAASpyB,GAChDL,KAAK2xB,KAAK,EAAG,GACb3xB,KAAKmyB,WAAW9xB,IAOlB2uB,EAAYsB,QAAQ1F,UAAU8H,SAAW,SAASryB,GAChDL,KAAK2xB,KAAK,EAAG,GACb3xB,KAAKoyB,WAAW/xB,IAOlB2uB,EAAYsB,QAAQ1F,UAAU+H,SAAW,SAAStyB,GAChDL,KAAK2xB,KAAK,EAAG,GACb3xB,KAAKqyB,WAAWhyB,IAOlB2uB,EAAYsB,QAAQ1F,UAAUgI,WAAa,SAASvyB,GAClDL,KAAK2xB,KAAK,EAAG,GACb3xB,KAAKsyB,aAAajyB,IAOpB2uB,EAAYsB,QAAQ1F,UAAUiI,WAAa,SAASxyB,GAClDL,KAAK2xB,KAAK,EAAG,GACb3xB,KAAKuyB,aAAalyB,IASpB2uB,EAAYsB,QAAQ1F,UAAUkI,aAAe,SAASC,EAAS1yB,EAAO2yB,IAChEhzB,KAAKmxB,gBAAkB9wB,GAAS2yB,KAClChzB,KAAKwyB,QAAQnyB,GACbL,KAAKizB,KAAKF,KASd/D,EAAYsB,QAAQ1F,UAAUsI,cAAgB,SAASH,EAAS1yB,EAAO2yB,IACjEhzB,KAAKmxB,gBAAkB9wB,GAAS2yB,KAClChzB,KAAKyyB,SAASpyB,GACdL,KAAKizB,KAAKF,KASd/D,EAAYsB,QAAQ1F,UAAUuI,cAAgB,SAASJ,EAAS1yB,EAAO2yB,IACjEhzB,KAAKmxB,gBAAkB9wB,GAAS2yB,KAClChzB,KAAK0yB,SAASryB,GACdL,KAAKizB,KAAKF,KASd/D,EAAYsB,QAAQ1F,UAAUwI,cAAgB,SAASL,EAAS1yB,EAAO2yB,IACjEhzB,KAAKmxB,gBAAmB9wB,EAAM+vB,OAAO4C,KACvChzB,KAAK2yB,SAAStyB,GACdL,KAAKizB,KAAKF,KASd/D,EAAYsB,QAAQ1F,UAAUyI,gBAAkB,SAASN,EAAS1yB,EAAO2yB,IACnEhzB,KAAKmxB,gBAAkB9wB,GAAS2yB,KAClChzB,KAAK4yB,WAAWvyB,GAChBL,KAAKizB,KAAKF,KASd/D,EAAYsB,QAAQ1F,UAAU0I,gBAAkB,SAASP,EAAS1yB,EAAO2yB,IACnEhzB,KAAKmxB,gBAAkB9wB,GAAS2yB,KAClChzB,KAAK6yB,WAAWxyB,GAChBL,KAAKizB,KAAKF,KASd/D,EAAYsB,QAAQ1F,UAAU2I,eAAiB,SAASR,EAAS1yB,EAAO2yB,IAClEhzB,KAAKmxB,gBAAkB9wB,GAAS2yB,KAClChzB,KAAKwzB,UAAUnzB,GACfL,KAAKizB,KAAKF,KAWd/D,EAAYsB,QAAQ1F,UAAU6I,eAAiB,SAASV,EAAS1yB,EAAO2yB,GAClE3yB,GAAS2yB,IACXhzB,KAAK0zB,OAAOrzB,GACZL,KAAKizB,KAAKF,KAWd/D,EAAYsB,QAAQ1F,UAAU8I,OAAS,SAASC,GAC9C,GAAIA,GAAO3zB,KAAKoX,SACd,MAAM,IAAI3X,MAAM,mDAQpBuvB,EAAYsB,QAAQ1F,UAAUgJ,UAAY,WACxC,GAAI5zB,KAAK+wB,SACP,MAAM,IAAItxB,MAAM,0DASpBuvB,EAAYsB,QAAQ1F,UAAUqI,KAAO,SAASF,GAC5C/yB,KAAK6wB,OAAOkC,GAAW/yB,KAAKoX,UAM9B4X,EAAYsB,QAAQ1F,UAAUxT,OAAS,WACrC,OAAOpX,KAAKsR,GAAG+f,WAAarxB,KAAK2wB,OAenC3B,EAAYsB,QAAQyB,eAAiB,SAASzgB,GAC5C,IAAIwgB,EAAexgB,EAAG+f,WAGtB,GAAmB,WAAfS,EACF,MAAM,IAAIryB,MAAM,uDAGlB,IAAIo0B,EAAe/B,GAAgB,EAC/BgC,EAAM9E,EAAYyB,WAAWC,SAASmD,GAG1C,OAFAC,EAAIC,YAAYF,EAAe/B,GAC/BgC,EAAIrC,QAAQlwB,IAAI+P,EAAGmgB,QAASoC,EAAe/B,GACpCgC,GAST9E,EAAYsB,QAAQ1F,UAAU4I,UAAY,SAASpc,GACjDpX,KAAK2xB,KAAK3C,EAAYI,WAAY,GAClCpvB,KAAKoyB,WAAWpyB,KAAKoX,SAAWA,EAAS4X,EAAYI,aAWvDJ,EAAYsB,QAAQ1F,UAAUoJ,YAAc,SAASC,GACnDj0B,KAAK4zB,YACc,MAAf5zB,KAAK6wB,SACP7wB,KAAK6wB,OAAS,IAEhB7wB,KAAK8wB,cAAgBmD,EACrB,IAAK,IAAIv0B,EAAI,EAAGA,EAAIu0B,EAAWv0B,IAC7BM,KAAK6wB,OAAOnxB,GAAK,EAEnBM,KAAK+wB,UAAW,EAChB/wB,KAAKgxB,aAAehxB,KAAKoX,UAQ3B4X,EAAYsB,QAAQ1F,UAAUsJ,UAAY,WACxC,GAAmB,MAAfl0B,KAAK6wB,SAAmB7wB,KAAK+wB,SAC/B,MAAM,IAAItxB,MAAM,qDAGlBO,KAAK0yB,SAAS,GAKd,IAJA,IAAIyB,EAAYn0B,KAAKoX,SAGjB1X,EAAIM,KAAK8wB,cAAgB,EACtBpxB,GAAK,GAAuB,GAAlBM,KAAK6wB,OAAOnxB,GAASA,KAItC,IAHA,IAAI00B,EAAe10B,EAAI,EAGhBA,GAAK,EAAGA,IAEbM,KAAKyyB,SAA2B,GAAlBzyB,KAAK6wB,OAAOnxB,GAAUy0B,EAAYn0B,KAAK6wB,OAAOnxB,GAAK,GAInEM,KAAKyyB,SAAS0B,EAAYn0B,KAAKgxB,cAC/B,IAAIrC,GAAOyF,EAFW,GAEuBpF,EAAYG,aACzDnvB,KAAKyyB,SAAS9D,GAGd,IAAI0F,EAAkB,EAClBC,EAAMt0B,KAAK2wB,MACjB4D,EACE,IAAK70B,EAAI,EAAGA,EAAIM,KAAKixB,QAAQtxB,OAAQD,IAAK,CACxC,IAAI80B,EAAMx0B,KAAKsR,GAAG+f,WAAarxB,KAAKixB,QAAQvxB,GAC5C,GAAIivB,GAAO3uB,KAAKsR,GAAGmjB,UAAUD,GAAM,CACjC,IAAK,IAAInpB,EAAI2jB,EAAYG,aAAc9jB,EAAIsjB,EAAKtjB,GAAK2jB,EAAYG,aAC/D,GAAInvB,KAAKsR,GAAGmjB,UAAUH,EAAMjpB,IAAMrL,KAAKsR,GAAGmjB,UAAUD,EAAMnpB,GACxD,SAASkpB,EAGbF,EAAkBr0B,KAAKixB,QAAQvxB,GAC/B,OAqBJ,OAjBI20B,GAGFr0B,KAAK2wB,MAAQ3wB,KAAKsR,GAAG+f,WAAa8C,EAGlCn0B,KAAKsR,GAAG8gB,WAAWpyB,KAAK2wB,MAAO0D,EAAkBF,KAIjDn0B,KAAKixB,QAAQpxB,KAAKG,KAAKoX,UAGvBpX,KAAKsR,GAAG8gB,WAAWpyB,KAAKsR,GAAG+f,WAAa8C,EAAWn0B,KAAKoX,SAAW+c,IAGrEn0B,KAAK+wB,UAAW,EACToD,GAWTnF,EAAYsB,QAAQ1F,UAAU8J,OAAS,SAASC,EAAYC,EAAqBC,GAC/E,IAAIC,EAAcD,EAAkB7F,EAAYM,mBAAqB,EACrE,GAAIsF,EAAqB,CACvB,IAAIG,EAAkBH,EAGtB,GAFA50B,KAAK2xB,KAAK3xB,KAAK4wB,SAAU5B,EAAYI,WACnCJ,EAAYK,uBAAyByF,GACnCC,EAAgBp1B,QAAUqvB,EAAYK,uBACxC,MAAM,IAAI5vB,MAAM,+CACduvB,EAAYK,wBAEhB,IAAK,IAAI3vB,EAAIsvB,EAAYK,uBAAyB,EAAG3vB,GAAK,EAAGA,IAC3DM,KAAKkyB,UAAU6C,EAAgBhpB,WAAWrM,IAG9CM,KAAK2xB,KAAK3xB,KAAK4wB,SAAU5B,EAAYI,WAAa0F,GAClD90B,KAAKwzB,UAAUmB,GACXG,GACF90B,KAAK0yB,SAAS1yB,KAAKsR,GAAG+f,WAAarxB,KAAK2wB,OAE1C3wB,KAAKsR,GAAGyiB,YAAY/zB,KAAK2wB,QAS3B3B,EAAYsB,QAAQ1F,UAAUoK,mBAAqB,SAAUL,EAAYC,GACvE50B,KAAK00B,OAAOC,EAAYC,GAAqB,IAW/C5F,EAAYsB,QAAQ1F,UAAUqK,cAAgB,SAASC,EAAOC,GAC5D,IAAIC,EAAcp1B,KAAKsR,GAAG+f,WAAa6D,EACnCG,EAAeD,EAAcp1B,KAAKsR,GAAGgkB,UAAUF,GAInD,GAHoD,GAA3Cp1B,KAAKsR,GAAGmjB,UAAUY,EAAeF,GAIxC,MAAM,IAAI11B,MAAM,sBAAwB01B,EAAQ,iBAapDnG,EAAYsB,QAAQ1F,UAAU2K,YAAc,SAASC,EAAWC,EAAWC,GACzE11B,KAAK4zB,YACL5zB,KAAKkxB,iBAAmBuE,EACxBz1B,KAAK2xB,KAAK3C,EAAYI,WAAYoG,EAAYC,GAC9Cz1B,KAAK2xB,KAAK+D,EAAWF,EAAYC,IAUnCzG,EAAYsB,QAAQ1F,UAAU+K,UAAY,WAExC,OADA31B,KAAKoyB,WAAWpyB,KAAKkxB,kBACdlxB,KAAKoX,UAWd4X,EAAYsB,QAAQ1F,UAAUgL,aAAe,SAASlvB,GACpD,GAAIA,aAAa3F,WACf,IAAI2tB,EAAOhoB,MAEX,CAAIgoB,EAAO,GAGX,IAHA,IACIhvB,EAAI,EAEDA,EAAIgH,EAAE/G,QAAQ,CACnB,IAAIk2B,EAGAxvB,EAAIK,EAAEqF,WAAWrM,MAEnBm2B,EADExvB,EAAI,OAAUA,GAAK,MACTA,GAGCA,GAAK,IADVK,EAAEqF,WAAWrM,MACO,UAId,IACdgvB,EAAK7uB,KAAKg2B,IAENA,EAAY,KACdnH,EAAK7uB,KAAOg2B,GAAa,EAAK,GAAQ,MAElCA,EAAY,MACdnH,EAAK7uB,KAAOg2B,GAAa,GAAM,GAAQ,KAEvCnH,EAAK7uB,KACDg2B,GAAa,GAAM,EAAQ,IAC3BA,GAAa,GAAM,GAAQ,KAEjCnH,EAAK7uB,KAAOg2B,GAAa,EAAK,GAAQ,MAExCnH,EAAK7uB,KAAkB,GAAZg2B,EAAoB,OAKrC71B,KAAKwyB,QAAQ,GACbxyB,KAAKu1B,YAAY,EAAG7G,EAAK/uB,OAAQ,GACjCK,KAAKsR,GAAGyiB,YAAY/zB,KAAK2wB,OAASjC,EAAK/uB,QAC9BD,EAAI,EAAb,IAAK,IAAW0X,EAASpX,KAAK2wB,MAAOc,EAAQzxB,KAAKsR,GAAGmgB,QAAS/xB,EAAIgvB,EAAK/uB,OAAQD,IAC7E+xB,EAAMra,KAAYsX,EAAKhvB,GAEzB,OAAOM,KAAK21B,aAUd3G,EAAYsB,QAAQ1F,UAAUkL,WAAa,SAAS/F,EAAKC,GACvD,OAAOhB,EAAYc,KAAKG,OAAOF,EAAKC,IAUtChB,EAAYyB,WAAa,SAASgB,GAKhCzxB,KAAK+1B,OAAStE,EAMdzxB,KAAKg2B,UAAY,GASnBhH,EAAYyB,WAAWC,SAAW,SAASuB,GACzC,OAAO,IAAIjD,EAAYyB,WAAW,IAAI1vB,WAAWkxB,KAGnDjD,EAAYyB,WAAW7F,UAAUwG,MAAQ,WACvCpxB,KAAKg2B,UAAY,GAQnBhH,EAAYyB,WAAW7F,UAAU6G,MAAQ,WACvC,OAAOzxB,KAAK+1B,QAQd/G,EAAYyB,WAAW7F,UAAU8G,SAAW,WAC1C,OAAO1xB,KAAKg2B,WAQdhH,EAAYyB,WAAW7F,UAAUmJ,YAAc,SAASrC,GACtD1xB,KAAKg2B,UAAYtE,GAQnB1C,EAAYyB,WAAW7F,UAAUyG,SAAW,WAC1C,OAAOrxB,KAAK+1B,OAAOp2B,QAOrBqvB,EAAYyB,WAAW7F,UAAUqL,SAAW,SAAS7e,GACnD,OAAOpX,KAAKk2B,UAAU9e,IAAW,IAAM,IAOzC4X,EAAYyB,WAAW7F,UAAUsL,UAAY,SAAS9e,GACpD,OAAOpX,KAAK+1B,OAAO3e,IAOrB4X,EAAYyB,WAAW7F,UAAU6J,UAAY,SAASrd,GACpD,OAAOpX,KAAKm2B,WAAW/e,IAAW,IAAM,IAO1C4X,EAAYyB,WAAW7F,UAAUuL,WAAa,SAAS/e,GACrD,OAAOpX,KAAK+1B,OAAO3e,GAAUpX,KAAK+1B,OAAO3e,EAAS,IAAM,GAO1D4X,EAAYyB,WAAW7F,UAAU0K,UAAY,SAASle,GACpD,OAAOpX,KAAK+1B,OAAO3e,GAAUpX,KAAK+1B,OAAO3e,EAAS,IAAM,EAAIpX,KAAK+1B,OAAO3e,EAAS,IAAM,GAAKpX,KAAK+1B,OAAO3e,EAAS,IAAM,IAOzH4X,EAAYyB,WAAW7F,UAAUwL,WAAa,SAAShf,GACrD,OAAOpX,KAAKs1B,UAAUle,KAAY,GAOpC4X,EAAYyB,WAAW7F,UAAUyL,UAAY,SAASjf,GACpD,OAAO,IAAI4X,EAAYc,KAAK9vB,KAAKs1B,UAAUle,GAASpX,KAAKs1B,UAAUle,EAAS,KAO9E4X,EAAYyB,WAAW7F,UAAU0L,WAAa,SAASlf,GACrD,OAAO,IAAI4X,EAAYc,KAAK9vB,KAAKo2B,WAAWhf,GAASpX,KAAKo2B,WAAWhf,EAAS,KAOhF4X,EAAYyB,WAAW7F,UAAU2L,YAAc,SAASnf,GAEtD,OADA4X,EAAYU,MAAM,GAAK1vB,KAAKs1B,UAAUle,GAC/B4X,EAAYW,QAAQ,IAO7BX,EAAYyB,WAAW7F,UAAU4L,YAAc,SAASpf,GAGtD,OAFA4X,EAAYU,MAAMV,EAAYa,eAAiB,EAAI,GAAK7vB,KAAKs1B,UAAUle,GACvE4X,EAAYU,MAAMV,EAAYa,eAAiB,EAAI,GAAK7vB,KAAKs1B,UAAUle,EAAS,GACzE4X,EAAYY,QAAQ,IAO7BZ,EAAYyB,WAAW7F,UAAUsH,UAAY,SAAS9a,EAAQ/W,GAC5DL,KAAK+1B,OAAO3e,GAA+B,GAO7C4X,EAAYyB,WAAW7F,UAAU6L,WAAa,SAASrf,EAAQ/W,GAC7DL,KAAK+1B,OAAO3e,GAAU/W,GAOxB2uB,EAAYyB,WAAW7F,UAAUuH,WAAa,SAAS/a,EAAQ/W,GAC7DL,KAAK+1B,OAAO3e,GAAU/W,EACtBL,KAAK+1B,OAAO3e,EAAS,GAAK/W,GAAS,GAOrC2uB,EAAYyB,WAAW7F,UAAU8L,YAAc,SAAStf,EAAQ/W,GAC5DL,KAAK+1B,OAAO3e,GAAU/W,EACtBL,KAAK+1B,OAAO3e,EAAS,GAAK/W,GAAS,GAOvC2uB,EAAYyB,WAAW7F,UAAUwH,WAAa,SAAShb,EAAQ/W,GAC7DL,KAAK+1B,OAAO3e,GAAU/W,EACtBL,KAAK+1B,OAAO3e,EAAS,GAAK/W,GAAS,EACnCL,KAAK+1B,OAAO3e,EAAS,GAAK/W,GAAS,GACnCL,KAAK+1B,OAAO3e,EAAS,GAAK/W,GAAS,IAOrC2uB,EAAYyB,WAAW7F,UAAU+L,YAAc,SAASvf,EAAQ/W,GAC5DL,KAAK+1B,OAAO3e,GAAU/W,EACtBL,KAAK+1B,OAAO3e,EAAS,GAAK/W,GAAS,EACnCL,KAAK+1B,OAAO3e,EAAS,GAAK/W,GAAS,GACnCL,KAAK+1B,OAAO3e,EAAS,GAAK/W,GAAS,IAOvC2uB,EAAYyB,WAAW7F,UAAUyH,WAAa,SAASjb,EAAQ/W,GAC7DL,KAAKoyB,WAAWhb,EAAQ/W,EAAM0vB,KAC9B/vB,KAAKoyB,WAAWhb,EAAS,EAAG/W,EAAM2vB,OAOpChB,EAAYyB,WAAW7F,UAAUgM,YAAc,SAASxf,EAAQ/W,GAC5DL,KAAK22B,YAAYvf,EAAQ/W,EAAM0vB,KAC/B/vB,KAAK22B,YAAYvf,EAAS,EAAG/W,EAAM2vB,OAOvChB,EAAYyB,WAAW7F,UAAU0H,aAAe,SAASlb,EAAQ/W,GAC/D2uB,EAAYW,QAAQ,GAAKtvB,EACzBL,KAAKoyB,WAAWhb,EAAQ4X,EAAYU,MAAM,KAO5CV,EAAYyB,WAAW7F,UAAU2H,aAAe,SAASnb,EAAQ/W,GAC/D2uB,EAAYY,QAAQ,GAAKvvB,EACzBL,KAAKoyB,WAAWhb,EAAQ4X,EAAYU,MAAMV,EAAYa,eAAiB,EAAI,IAC3E7vB,KAAKoyB,WAAWhb,EAAS,EAAG4X,EAAYU,MAAMV,EAAYa,eAAiB,EAAI,KASjFb,EAAYyB,WAAW7F,UAAUiM,oBAAsB,WACrD,GAAI72B,KAAK+1B,OAAOp2B,OAASK,KAAKg2B,UAAYhH,EAAYI,WAClDJ,EAAYK,uBACd,MAAM,IAAI5vB,MACN,kEAGN,IADA,IAAIq3B,EAAS,GACJp3B,EAAI,EAAGA,EAAIsvB,EAAYK,uBAAwB3vB,IACtDo3B,GAAUnrB,OAAOC,aACb5L,KAAKi2B,SAASj2B,KAAKg2B,UAAYhH,EAAYI,WAAa1vB,IAE9D,OAAOo3B,GAWT9H,EAAYyB,WAAW7F,UAAUmM,SAAW,SAASC,EAAQC,GAC3D,IAAIpG,EAASmG,EAASh3B,KAAKs1B,UAAU0B,GACrC,OAAOC,EAAgBj3B,KAAKy0B,UAAU5D,GAAU7wB,KAAKy0B,UAAU5D,EAASoG,GAAiB,GAU3FjI,EAAYyB,WAAW7F,UAAUsM,QAAU,SAAStxB,EAAGwR,GAGrD,OAFAxR,EAAEoxB,OAAS5f,EAASpX,KAAKs1B,UAAUle,GACnCxR,EAAE0L,GAAKtR,KACA4F,GAgBTopB,EAAYyB,WAAW7F,UAAUuM,SAAW,SAAS/f,EAAQggB,GAC3DhgB,GAAUpX,KAAKs1B,UAAUle,GAEzB,IAAIzX,EAASK,KAAKs1B,UAAUle,GACxB0f,EAAS,GACTp3B,EAAI,EAIR,GAFA0X,GAAU4X,EAAYI,WAElBgI,IAAiBpI,EAAYO,SAASC,WACxC,OAAOxvB,KAAK+1B,OAAOrqB,SAAS0L,EAAQA,EAASzX,GAG/C,KAAOD,EAAIC,GAAQ,CACjB,IAAIk2B,EAGAxvB,EAAIrG,KAAKk2B,UAAU9e,EAAS1X,KAChC,GAAI2G,EAAI,IACNwvB,EAAYxvB,MACP,CACL,IAAIc,EAAInH,KAAKk2B,UAAU9e,EAAS1X,KAChC,GAAI2G,EAAI,IACNwvB,GACQ,GAAJxvB,IAAa,EACV,GAAJc,MACE,CACL,IAAIN,EAAI7G,KAAKk2B,UAAU9e,EAAS1X,KAE9Bm2B,EADExvB,EAAI,KAEE,GAAJA,IAAa,IACT,GAAJc,IAAa,EACV,GAAJN,GAIK,EAAJR,IAAa,IACT,GAAJc,IAAa,IACT,GAAJN,IAAa,EACV,GALC7G,KAAKk2B,UAAU9e,EAAS1X,MAWlCm2B,EAAY,MACdiB,GAAUnrB,OAAOC,aAAaiqB,IAE9BA,GAAa,MACbiB,GAAUnrB,OAAOC,aACK,OAAnBiqB,GAAa,IACkB,OAAnB,KAAZA,KAIP,OAAOiB,GAQT9H,EAAYyB,WAAW7F,UAAUyM,WAAa,SAASjgB,GACrD,OAAOA,EAASpX,KAAKs1B,UAAUle,IASjC4X,EAAYyB,WAAW7F,UAAU0M,SAAW,SAASlgB,GACnD,OAAOA,EAASpX,KAAKs1B,UAAUle,GAAU4X,EAAYI,YASvDJ,EAAYyB,WAAW7F,UAAU2M,aAAe,SAASngB,GACvD,OAAOpX,KAAKs1B,UAAUle,EAASpX,KAAKs1B,UAAUle,KAOhD4X,EAAYyB,WAAW7F,UAAU4M,iBAAmB,SAASC,GAC3D,GAAIA,EAAM93B,QAAUqvB,EAAYK,uBAC9B,MAAM,IAAI5vB,MAAM,+CACAuvB,EAAYK,wBAE9B,IAAK,IAAI3vB,EAAI,EAAGA,EAAIsvB,EAAYK,uBAAwB3vB,IACtD,GAAI+3B,EAAM1rB,WAAWrM,IAAMM,KAAKi2B,SAASj2B,KAAKg2B,UAAYhH,EAAYI,WAAa1vB,GACjF,OAAO,EAGX,OAAO,GAUTsvB,EAAYyB,WAAW7F,UAAUkL,WAAa,SAAS/F,EAAKC,GAC1D,OAAOhB,EAAYc,KAAKG,OAAOF,EAAKC,K,0BCluCtCvxB,EAAQi5B,YAAa,EACrB,IAAIC,EAAsB,WACtB,SAASA,EAAKC,GACV,IAAKA,EACD,MAAM,IAAIt4B,UAAU,2CAExBU,KAAKK,MAAQs3B,EAAKE,MACdD,GAAQD,EAAKG,OAAOF,KACpB53B,KAAKK,MAAQu3B,GA6CrB,OA1CAD,EAAKG,OAAS,SAAUF,GACpB,IAAIv3B,EAAQu3B,EAAK9b,WACjB,OAAO8b,IAASA,aAAgBD,GAAQA,EAAKI,UAAUtN,KAAKpqB,KAEhEs3B,EAAK1H,OAAS,WACV,OAAO,IAAI0H,EAAK,CAACA,EAAKK,IAAI,GAAIL,EAAKK,IAAI,GAAIL,EAAKK,IAAI,GAAIL,EAAKK,IAAI,GAAIL,EAAKK,IAAI,IAAI5yB,KAAK,OAE3FuyB,EAAKM,YAAc,WACf,OAAO,IAAIN,EAAK,cAEpBA,EAAKO,MAAQ,SAAUN,GACnB,OAAO,IAAID,EAAKC,IAEpBD,EAAKQ,IAAM,WACP,MAAO,CAACR,EAAKK,IAAI,GAAIL,EAAKK,IAAI,GAAIL,EAAKK,IAAI,GAAIL,EAAKK,IAAI,GAAIL,EAAKK,IAAI,IAAI5yB,KAAK,MAElFuyB,EAAKK,IAAM,SAAUI,GAEjB,IADA,IAAIC,EAAM,GACD34B,EAAI,EAAGA,EAAI04B,EAAO14B,IAEvB24B,IAA+B,OAArB,EAAI3hB,KAAK4hB,UAAuB,GAAGxc,SAAS,IAAIe,UAAU,GAExE,OAAOwb,GAEXV,EAAK/M,UAAUwF,OAAS,SAAUC,GAG9B,OAAOsH,EAAKG,OAAOzH,IAAUrwB,KAAKK,QAAUgwB,EAAMvU,YAEtD6b,EAAK/M,UAAU2N,QAAU,WACrB,OAAOv4B,KAAKK,QAAUs3B,EAAKE,OAE/BF,EAAK/M,UAAU9O,SAAW,WACtB,OAAO9b,KAAKK,OAEhBs3B,EAAK/M,UAAU4N,OAAS,WACpB,MAAO,CACHn4B,MAAOL,KAAKK,QAGpBs3B,EAAKI,UAAY,IAAIpb,OAAO,iEAAkE,KAC9Fgb,EAAKE,MAAQ,uCACNF,EApDc,GAsDzBl5B,EAAQk5B,KAAOA,G,SCxDfj5B,EAAOD,QAAUqxB,EAKjB,IAAI7vB,EAAO,KAEX,IACEA,EAAO,IAAIgL,YAAYwtB,SAAS,IAAIxtB,YAAYytB,OAAO,IAAI33B,WAAW,CACpE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACvnC,IAAItC,QACT,MAAOyG,IAcT,SAAS4qB,EAAKC,EAAKC,EAAM2I,GAMrB34B,KAAK+vB,IAAY,EAANA,EAMX/vB,KAAKgwB,KAAc,EAAPA,EAMZhwB,KAAK24B,WAAaA,EAoCtB,SAASC,EAAOjF,GACZ,OAAsC,KAA9BA,GAAOA,EAAgB,YAXnC7D,EAAKlF,UAAUiO,WAEfv1B,OAAOw1B,eAAehJ,EAAKlF,UAAW,aAAc,CAAEvqB,OAAO,IAkB7DyvB,EAAK8I,OAASA,EAOd,IAAIG,EAAY,GAOZC,EAAa,GAQjB,SAASC,EAAQ54B,EAAOs4B,GACpB,IAAIhF,EAAKuF,EAAWC,EACpB,OAAIR,GAEIQ,EAAS,IADb94B,KAAW,IACgBA,EAAQ,OAC/B64B,EAAYF,EAAW34B,IAEZ64B,GAEfvF,EAAMyF,EAAS/4B,GAAgB,EAARA,GAAa,GAAK,EAAI,GAAG,GAC5C84B,IACAH,EAAW34B,GAASszB,GACjBA,IAGHwF,GAAU,MADd94B,GAAS,IACqBA,EAAQ,OAClC64B,EAAYH,EAAU14B,IAEX64B,GAEfvF,EAAMyF,EAAS/4B,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtC84B,IACAJ,EAAU14B,GAASszB,GAChBA,GAmBf,SAAS0F,EAAWh5B,EAAOs4B,GACvB,GAAIzM,MAAM7rB,GACN,OAAOs4B,EAAWW,EAAQpJ,EAC9B,GAAIyI,EAAU,CACV,GAAIt4B,EAAQ,EACR,OAAOi5B,EACX,GAAIj5B,GAASk5B,EACT,OAAOC,MACR,CACH,GAAIn5B,IAAUo5B,EACV,OAAOC,EACX,GAAIr5B,EAAQ,GAAKo5B,EACb,OAAOE,EAEf,OAAIt5B,EAAQ,EACDg5B,GAAYh5B,EAAOs4B,GAAUiB,MACjCR,EAAU/4B,EAAQw5B,EAAkB,EAAIx5B,EAAQw5B,EAAkB,EAAGlB,GAmBhF,SAASS,EAASU,EAASC,EAAUpB,GACjC,OAAO,IAAI7I,EAAKgK,EAASC,EAAUpB,GA5CvC7I,EAAKmJ,QAAUA,EAkCfnJ,EAAKuJ,WAAaA,EAsBlBvJ,EAAKsJ,SAAWA,EAShB,IAAIY,EAAUtjB,KAAK6V,IASnB,SAAS0N,EAAWC,EAAKvB,EAAUwB,GAC/B,GAAmB,IAAfD,EAAIv6B,OACJ,MAAMF,MAAM,gBAChB,GAAY,QAARy6B,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAC9D,OAAOhK,EASX,GARwB,iBAAbyI,GAEPwB,EAAQxB,EACRA,GAAW,GAEXA,IAAcA,GAElBwB,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAM13B,WAAW,SAErB,IAAIuE,EACJ,IAAKA,EAAIkzB,EAAI55B,QAAQ,MAAQ,EACzB,MAAMb,MAAM,mBACX,GAAU,IAANuH,EACL,OAAOizB,EAAWC,EAAIrd,UAAU,GAAI8b,EAAUwB,GAAOP,MAQzD,IAHA,IAAIQ,EAAef,EAAWW,EAAQG,EAAO,IAEzCrD,EAAS5G,EACJxwB,EAAI,EAAGA,EAAIw6B,EAAIv6B,OAAQD,GAAK,EAAG,CACpC,IAAI2C,EAAOqU,KAAKmH,IAAI,EAAGqc,EAAIv6B,OAASD,GAChCW,EAAQg6B,SAASH,EAAIrd,UAAUnd,EAAGA,EAAI2C,GAAO83B,GACjD,GAAI93B,EAAO,EAAG,CACV,IAAIi4B,EAAQjB,EAAWW,EAAQG,EAAO93B,IACtCy0B,EAASA,EAAOyD,IAAID,GAAOE,IAAInB,EAAWh5B,SAG1Cy2B,GADAA,EAASA,EAAOyD,IAAIH,IACJI,IAAInB,EAAWh5B,IAIvC,OADAy2B,EAAO6B,SAAWA,EACX7B,EAoBX,SAAS2D,EAAUpP,EAAKsN,GACpB,MAAmB,iBAARtN,EACAgO,EAAWhO,EAAKsN,GACR,iBAARtN,EACA4O,EAAW5O,EAAKsN,GAEpBS,EAAS/N,EAAI0E,IAAK1E,EAAI2E,KAA0B,kBAAb2I,EAAyBA,EAAWtN,EAAIsN,UAftF7I,EAAKmK,WAAaA,EAyBlBnK,EAAK2K,UAAYA,EAUjB,IAcIZ,EAAiBa,WAOjBnB,EAAiBM,EAAiBA,EAOlCJ,EAAiBF,EAAiB,EAOlCoB,EAAa1B,EA5BI,GAAK,IAkCtB/I,EAAO+I,EAAQ,GAMnBnJ,EAAKI,KAAOA,EAMZ,IAAIoJ,EAAQL,EAAQ,GAAG,GAMvBnJ,EAAKwJ,MAAQA,EAMb,IAAIsB,EAAM3B,EAAQ,GAMlBnJ,EAAK8K,IAAMA,EAMX,IAAIC,EAAO5B,EAAQ,GAAG,GAMtBnJ,EAAK+K,KAAOA,EAMZ,IAAIC,EAAU7B,GAAS,GAMvBnJ,EAAKgL,QAAUA,EAMf,IAAInB,EAAYP,GAAS,EAAc,YAAc,GAMrDtJ,EAAK6J,UAAYA,EAMjB,IAAIH,EAAqBJ,GAAS,GAAc,GAAc,GAM9DtJ,EAAK0J,mBAAqBA,EAM1B,IAAIE,EAAYN,EAAS,GAAG,YAAc,GAM1CtJ,EAAK4J,UAAYA,EAMjB,IAAIqB,EAAgBjL,EAAKlF,UAMzBmQ,EAAcC,MAAQ,WAClB,OAAOh7B,KAAK24B,SAAW34B,KAAK+vB,MAAQ,EAAI/vB,KAAK+vB,KAOjDgL,EAAcE,SAAW,WACrB,OAAIj7B,KAAK24B,UACI34B,KAAKgwB,OAAS,GAAK6J,GAAmB75B,KAAK+vB,MAAQ,GACzD/vB,KAAKgwB,KAAO6J,GAAkB75B,KAAK+vB,MAAQ,IAUtDgL,EAAcjf,SAAW,SAAkBqe,GAEvC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAM13B,WAAW,SACrB,GAAIzC,KAAKk7B,SACL,MAAO,IACX,GAAIl7B,KAAKm7B,aAAc,CACnB,GAAIn7B,KAAKo7B,GAAG1B,GAAY,CAGpB,IAAI2B,EAAYhC,EAAWc,GACvBmB,EAAMt7B,KAAKs7B,IAAID,GACfE,EAAOD,EAAIf,IAAIc,GAAWG,IAAIx7B,MAClC,OAAOs7B,EAAIxf,SAASqe,GAASoB,EAAKP,QAAQlf,SAASqe,GAEnD,MAAO,IAAMn6B,KAAK45B,MAAM9d,SAASqe,GAQzC,IAHA,IAAIC,EAAef,EAAWW,EAAQG,EAAO,GAAIn6B,KAAK24B,UAClD8C,EAAMz7B,KACN82B,EAAS,KACA,CACT,IAAI4E,EAASD,EAAIH,IAAIlB,GAEjBuB,GADSF,EAAID,IAAIE,EAAOnB,IAAIH,IAAeY,UAAY,GACvClf,SAASqe,GAE7B,IADAsB,EAAMC,GACER,SACJ,OAAOS,EAAS7E,EAEhB,KAAO6E,EAAOh8B,OAAS,GACnBg8B,EAAS,IAAMA,EACnB7E,EAAS,GAAK6E,EAAS7E,IASnCiE,EAAca,YAAc,WACxB,OAAO57B,KAAKgwB,MAOhB+K,EAAcc,oBAAsB,WAChC,OAAO77B,KAAKgwB,OAAS,GAOzB+K,EAAce,WAAa,WACvB,OAAO97B,KAAK+vB,KAOhBgL,EAAcgB,mBAAqB,WAC/B,OAAO/7B,KAAK+vB,MAAQ,GAOxBgL,EAAciB,cAAgB,WAC1B,GAAIh8B,KAAKm7B,aACL,OAAOn7B,KAAKo7B,GAAG1B,GAAa,GAAK15B,KAAK45B,MAAMoC,gBAEhD,IADA,IAAI3Q,EAAmB,GAAbrrB,KAAKgwB,KAAYhwB,KAAKgwB,KAAOhwB,KAAK+vB,IACnCkM,EAAM,GAAIA,EAAM,GACK,IAArB5Q,EAAO,GAAK4Q,GADOA,KAG5B,OAAoB,GAAbj8B,KAAKgwB,KAAYiM,EAAM,GAAKA,EAAM,GAO7ClB,EAAcG,OAAS,WACnB,OAAqB,IAAdl7B,KAAKgwB,MAA2B,IAAbhwB,KAAK+vB,KAOnCgL,EAAcmB,IAAMnB,EAAcG,OAMlCH,EAAcI,WAAa,WACvB,OAAQn7B,KAAK24B,UAAY34B,KAAKgwB,KAAO,GAOzC+K,EAAcoB,WAAa,WACvB,OAAOn8B,KAAK24B,UAAY34B,KAAKgwB,MAAQ,GAOzC+K,EAAcqB,MAAQ,WAClB,OAA0B,IAAP,EAAXp8B,KAAK+vB,MAOjBgL,EAAcsB,OAAS,WACnB,OAA0B,IAAP,EAAXr8B,KAAK+vB,MAQjBgL,EAAc3K,OAAS,SAAgBC,GAGnC,OAFKuI,EAAOvI,KACRA,EAAQoK,EAAUpK,KAClBrwB,KAAK24B,WAAatI,EAAMsI,UAAa34B,KAAKgwB,OAAS,IAAQ,GAAMK,EAAML,OAAS,IAAQ,IAErFhwB,KAAKgwB,OAASK,EAAML,MAAQhwB,KAAK+vB,MAAQM,EAAMN,KAS1DgL,EAAcK,GAAKL,EAAc3K,OAOjC2K,EAAcuB,UAAY,SAAmBjM,GACzC,OAAQrwB,KAAKo7B,GAAmB/K,IASpC0K,EAAcwB,IAAMxB,EAAcuB,UAQlCvB,EAAcvtB,GAAKutB,EAAcuB,UAOjCvB,EAAcyB,SAAW,SAAkBnM,GACvC,OAAOrwB,KAAKy8B,KAAqBpM,GAAS,GAS9C0K,EAAc1f,GAAK0f,EAAcyB,SAOjCzB,EAAc2B,gBAAkB,SAAyBrM,GACrD,OAAOrwB,KAAKy8B,KAAqBpM,IAAU,GAS/C0K,EAAc4B,IAAM5B,EAAc2B,gBAQlC3B,EAAc1sB,GAAK0sB,EAAc2B,gBAOjC3B,EAAc6B,YAAc,SAAqBvM,GAC7C,OAAOrwB,KAAKy8B,KAAqBpM,GAAS,GAS9C0K,EAAcpnB,GAAKonB,EAAc6B,YAOjC7B,EAAc8B,mBAAqB,SAA4BxM,GAC3D,OAAOrwB,KAAKy8B,KAAqBpM,IAAU,GAS/C0K,EAAc+B,IAAM/B,EAAc8B,mBAQlC9B,EAAc5rB,GAAK4rB,EAAc8B,mBAQjC9B,EAAcgC,QAAU,SAAiB1M,GAGrC,GAFKuI,EAAOvI,KACRA,EAAQoK,EAAUpK,IAClBrwB,KAAKo7B,GAAG/K,GACR,OAAO,EACX,IAAI2M,EAAUh9B,KAAKm7B,aACf8B,EAAW5M,EAAM8K,aACrB,OAAI6B,IAAYC,GACJ,GACPD,GAAWC,EACL,EAENj9B,KAAK24B,SAGFtI,EAAML,OAAS,EAAMhwB,KAAKgwB,OAAS,GAAOK,EAAML,OAAShwB,KAAKgwB,MAASK,EAAMN,MAAQ,EAAM/vB,KAAK+vB,MAAQ,GAAO,EAAI,EAFhH/vB,KAAKw7B,IAAInL,GAAO8K,cAAgB,EAAI,GAYnDJ,EAAc0B,KAAO1B,EAAcgC,QAMnChC,EAAcmC,OAAS,WACnB,OAAKl9B,KAAK24B,UAAY34B,KAAKo7B,GAAG1B,GACnBA,EACJ15B,KAAKm9B,MAAM3C,IAAII,IAQ1BG,EAAcnB,IAAMmB,EAAcmC,OAOlCnC,EAAcP,IAAM,SAAa4C,GACxBxE,EAAOwE,KACRA,EAAS3C,EAAU2C,IAIvB,IAAIC,EAAMr9B,KAAKgwB,OAAS,GACpBsN,EAAkB,MAAZt9B,KAAKgwB,KACXuN,EAAMv9B,KAAK+vB,MAAQ,GACnByN,EAAiB,MAAXx9B,KAAK+vB,IAEX0N,EAAML,EAAOpN,OAAS,GACtB0N,EAAoB,MAAdN,EAAOpN,KACb2N,EAAMP,EAAOrN,MAAQ,GAGrB6N,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAYrC,OAVAD,IADAC,GAAOP,GAHgB,MAAbJ,EAAOrN,QAIF,GAGf8N,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAENrE,GANP0E,GAAO,QAMiB,IATxBC,GAAO,QAQPH,GAAO,QACoC,IAH3CC,GAAO,OAG+C79B,KAAK24B,WAQ/DoC,EAAciD,SAAW,SAAkBC,GAGvC,OAFKrF,EAAOqF,KACRA,EAAaxD,EAAUwD,IACpBj+B,KAAKw6B,IAAIyD,EAAWrE,QAS/BmB,EAAcS,IAAMT,EAAciD,SAOlCjD,EAAcmD,SAAW,SAAkBC,GACvC,GAAIn+B,KAAKk7B,SACL,OAAOhL,EAKX,GAJK0I,EAAOuF,KACRA,EAAa1D,EAAU0D,IAGvBl+B,EAKA,OAAOm5B,EAJGn5B,EAAKs6B,IAAIv6B,KAAK+vB,IACL/vB,KAAKgwB,KACLmO,EAAWpO,IACXoO,EAAWnO,MACT/vB,EAAKm+B,WAAYp+B,KAAK24B,UAG/C,GAAIwF,EAAWjD,SACX,OAAOhL,EACX,GAAIlwB,KAAKo7B,GAAG1B,GACR,OAAOyE,EAAW/B,QAAU1C,EAAYxJ,EAC5C,GAAIiO,EAAW/C,GAAG1B,GACd,OAAO15B,KAAKo8B,QAAU1C,EAAYxJ,EAEtC,GAAIlwB,KAAKm7B,aACL,OAAIgD,EAAWhD,aACJn7B,KAAK45B,MAAMW,IAAI4D,EAAWvE,OAE1B55B,KAAK45B,MAAMW,IAAI4D,GAAYvE,MACnC,GAAIuE,EAAWhD,aAClB,OAAOn7B,KAAKu6B,IAAI4D,EAAWvE,OAAOA,MAGtC,GAAI55B,KAAKqb,GAAGsf,IAAewD,EAAW9iB,GAAGsf,GACrC,OAAOtB,EAAWr5B,KAAKi7B,WAAakD,EAAWlD,WAAYj7B,KAAK24B,UAKpE,IAAI0E,EAAMr9B,KAAKgwB,OAAS,GACpBsN,EAAkB,MAAZt9B,KAAKgwB,KACXuN,EAAMv9B,KAAK+vB,MAAQ,GACnByN,EAAiB,MAAXx9B,KAAK+vB,IAEX0N,EAAMU,EAAWnO,OAAS,GAC1B0N,EAAwB,MAAlBS,EAAWnO,KACjB2N,EAAMQ,EAAWpO,MAAQ,GACzBsO,EAAuB,MAAjBF,EAAWpO,IAEjB6N,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAqBrC,OAnBAD,IADAC,GAAOP,EAAMa,KACE,GAGfR,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMe,KACE,GACfR,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMgB,EAAMf,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1CrE,GAZP0E,GAAO,QAYiB,IAlBxBC,GAAO,QAiBPH,GAAO,QACoC,IAH3CC,GAAO,OAG+C79B,KAAK24B,WAS/DoC,EAAcR,IAAMQ,EAAcmD,SAQlCnD,EAAcuD,OAAS,SAAgBC,GAGnC,GAFK3F,EAAO2F,KACRA,EAAU9D,EAAU8D,IACpBA,EAAQrD,SACR,MAAMz7B,MAAM,oBAaZ,IAWA++B,EAAQ/C,EAAKgD,EArBjB,GAAIx+B,EAIA,OAAKD,KAAK24B,WACS,aAAf34B,KAAKgwB,OACY,IAAjBuO,EAAQxO,MAAgC,IAAlBwO,EAAQvO,KAU3BoJ,GANIp5B,KAAK24B,SAAW14B,EAAKy+B,MAAQz+B,EAAK0+B,OACzC3+B,KAAK+vB,IACL/vB,KAAKgwB,KACLuO,EAAQxO,IACRwO,EAAQvO,MAES/vB,EAAKm+B,WAAYp+B,KAAK24B,UARhC34B,KAWf,GAAIA,KAAKk7B,SACL,OAAOl7B,KAAK24B,SAAWW,EAAQpJ,EAEnC,GAAKlwB,KAAK24B,SA6BH,CAKH,GAFK4F,EAAQ5F,WACT4F,EAAUA,EAAQK,cAClBL,EAAQ5qB,GAAG3T,MACX,OAAOs5B,EACX,GAAIiF,EAAQ5qB,GAAG3T,KAAK6+B,KAAK,IACrB,OAAOhE,EACX4D,EAAMnF,MAtCU,CAGhB,GAAIt5B,KAAKo7B,GAAG1B,GACR,OAAI6E,EAAQnD,GAAGR,IAAQ2D,EAAQnD,GAAGN,GACvBpB,EACF6E,EAAQnD,GAAG1B,GACTkB,GAIP4D,EADex+B,KAAK8+B,IAAI,GACNxD,IAAIiD,GAASQ,IAAI,IACxB3D,GAAGlL,GACHqO,EAAQpD,aAAeP,EAAME,GAEpCW,EAAMz7B,KAAKw7B,IAAI+C,EAAQhE,IAAIiE,IAC3BC,EAAMD,EAAOhE,IAAIiB,EAAIH,IAAIiD,KAI9B,GAAIA,EAAQnD,GAAG1B,GAClB,OAAO15B,KAAK24B,SAAWW,EAAQpJ,EACnC,GAAIlwB,KAAKm7B,aACL,OAAIoD,EAAQpD,aACDn7B,KAAK45B,MAAM0B,IAAIiD,EAAQ3E,OAC3B55B,KAAK45B,MAAM0B,IAAIiD,GAAS3E,MAC5B,GAAI2E,EAAQpD,aACf,OAAOn7B,KAAKs7B,IAAIiD,EAAQ3E,OAAOA,MACnC6E,EAAMvO,EAmBV,IADAuL,EAAMz7B,KACCy7B,EAAIqB,IAAIyB,IAAU,CAGrBC,EAAS9nB,KAAKoE,IAAI,EAAGpE,KAAK2V,MAAMoP,EAAIR,WAAasD,EAAQtD,aAWzD,IAPA,IAAI+D,EAAOtoB,KAAKC,KAAKD,KAAKnM,IAAIi0B,GAAU9nB,KAAK4V,KACzC2S,EAASD,GAAQ,GAAM,EAAIhF,EAAQ,EAAGgF,EAAO,IAI7CE,EAAY7F,EAAWmF,GACvBW,EAAYD,EAAU3E,IAAIgE,GACvBY,EAAUhE,cAAgBgE,EAAUxrB,GAAG8nB,IAG1C0D,GADAD,EAAY7F,EADZmF,GAAUS,EACqBj/B,KAAK24B,WACd4B,IAAIgE,GAK1BW,EAAUhE,WACVgE,EAAYtE,GAEhB6D,EAAMA,EAAIjE,IAAI0E,GACdzD,EAAMA,EAAID,IAAI2D,GAElB,OAAOV,GASX1D,EAAcO,IAAMP,EAAcuD,OAOlCvD,EAAcqE,OAAS,SAAgBb,GAKnC,OAJK3F,EAAO2F,KACRA,EAAU9D,EAAU8D,IAGpBt+B,EAOOm5B,GANIp5B,KAAK24B,SAAW14B,EAAKo/B,MAAQp/B,EAAKq/B,OACzCt/B,KAAK+vB,IACL/vB,KAAKgwB,KACLuO,EAAQxO,IACRwO,EAAQvO,MAES/vB,EAAKm+B,WAAYp+B,KAAK24B,UAGxC34B,KAAKw7B,IAAIx7B,KAAKs7B,IAAIiD,GAAShE,IAAIgE,KAS1CxD,EAAc5M,IAAM4M,EAAcqE,OAQlCrE,EAAcU,IAAMV,EAAcqE,OAMlCrE,EAAcoC,IAAM,WAChB,OAAO/D,GAAUp5B,KAAK+vB,KAAM/vB,KAAKgwB,KAAMhwB,KAAK24B,WAQhDoC,EAAcwE,IAAM,SAAalP,GAG7B,OAFKuI,EAAOvI,KACRA,EAAQoK,EAAUpK,IACf+I,EAASp5B,KAAK+vB,IAAMM,EAAMN,IAAK/vB,KAAKgwB,KAAOK,EAAML,KAAMhwB,KAAK24B,WAQvEoC,EAAcyE,GAAK,SAAYnP,GAG3B,OAFKuI,EAAOvI,KACRA,EAAQoK,EAAUpK,IACf+I,EAASp5B,KAAK+vB,IAAMM,EAAMN,IAAK/vB,KAAKgwB,KAAOK,EAAML,KAAMhwB,KAAK24B,WAQvEoC,EAAc0E,IAAM,SAAapP,GAG7B,OAFKuI,EAAOvI,KACRA,EAAQoK,EAAUpK,IACf+I,EAASp5B,KAAK+vB,IAAMM,EAAMN,IAAK/vB,KAAKgwB,KAAOK,EAAML,KAAMhwB,KAAK24B,WAQvEoC,EAAc2E,UAAY,SAAmBC,GAGzC,OAFI/G,EAAO+G,KACPA,EAAUA,EAAQ3E,SACE,IAAnB2E,GAAW,IACL3/B,KACF2/B,EAAU,GACRvG,EAASp5B,KAAK+vB,KAAO4P,EAAU3/B,KAAKgwB,MAAQ2P,EAAY3/B,KAAK+vB,MAAS,GAAK4P,EAAW3/B,KAAK24B,UAE3FS,EAAS,EAAGp5B,KAAK+vB,KAAQ4P,EAAU,GAAK3/B,KAAK24B,WAS5DoC,EAAcgE,IAAMhE,EAAc2E,UAOlC3E,EAAc6E,WAAa,SAAoBD,GAG3C,OAFI/G,EAAO+G,KACPA,EAAUA,EAAQ3E,SACE,IAAnB2E,GAAW,IACL3/B,KACF2/B,EAAU,GACRvG,EAAUp5B,KAAK+vB,MAAQ4P,EAAY3/B,KAAKgwB,MAAS,GAAK2P,EAAW3/B,KAAKgwB,MAAQ2P,EAAS3/B,KAAK24B,UAE5FS,EAASp5B,KAAKgwB,MAAS2P,EAAU,GAAK3/B,KAAKgwB,MAAQ,EAAI,GAAK,EAAGhwB,KAAK24B,WASnFoC,EAAc+D,IAAM/D,EAAc6E,WAOlC7E,EAAc8E,mBAAqB,SAA4BF,GAI3D,GAHI/G,EAAO+G,KACPA,EAAUA,EAAQ3E,SAEN,IADhB2E,GAAW,IAEP,OAAO3/B,KAEP,IAAIgwB,EAAOhwB,KAAKgwB,KAChB,OAAI2P,EAAU,GAEHvG,EADGp5B,KAAK+vB,MACU4P,EAAY3P,GAAS,GAAK2P,EAAW3P,IAAS2P,EAAS3/B,KAAK24B,UAE9ES,EADY,KAAZuG,EACS3P,EAEAA,IAAU2P,EAAU,GAFd,EAAG3/B,KAAK24B,WAY1CoC,EAAc8D,KAAO9D,EAAc8E,mBAQnC9E,EAAc+E,MAAQ/E,EAAc8E,mBAMpC9E,EAAcgF,SAAW,WACrB,OAAK//B,KAAK24B,SAEHS,EAASp5B,KAAK+vB,IAAK/vB,KAAKgwB,MAAM,GAD1BhwB,MAQf+6B,EAAc6D,WAAa,WACvB,OAAI5+B,KAAK24B,SACE34B,KACJo5B,EAASp5B,KAAK+vB,IAAK/vB,KAAKgwB,MAAM,IAQzC+K,EAAciF,QAAU,SAAiB3xB,GACrC,OAAOA,EAAKrO,KAAKigC,YAAcjgC,KAAKkgC,aAOxCnF,EAAckF,UAAY,WACtB,IAAIjS,EAAKhuB,KAAKgwB,KACVjC,EAAK/tB,KAAK+vB,IACd,MAAO,CACS,IAAZhC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,GACK,IAAZC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,KAQf+M,EAAcmF,UAAY,WACtB,IAAIlS,EAAKhuB,KAAKgwB,KACVjC,EAAK/tB,KAAK+vB,IACd,MAAO,CACH/B,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,EACAD,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,IAWR+B,EAAKqQ,UAAY,SAAmB1O,EAAOkH,EAAUtqB,GACjD,OAAOA,EAAKyhB,EAAKsQ,YAAY3O,EAAOkH,GAAY7I,EAAKuQ,YAAY5O,EAAOkH,IAS5E7I,EAAKsQ,YAAc,SAAqB3O,EAAOkH,GAC3C,OAAO,IAAI7I,EACP2B,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZkH,IAUR7I,EAAKuQ,YAAc,SAAqB5O,EAAOkH,GAC3C,OAAO,IAAI7I,EACP2B,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNkH,K,4BCryCR,IA6BY2H,EAAiBC,EAdrBC,EAfJC,EAAY,EAAQ,MAGpBC,EAAUD,EAAUE,OAAQC,EAAUH,EAAUI,OAAQC,EAAQL,EAAUM,KAG1EC,EAAQP,EAAUQ,MAAe,UAAMR,EAAUQ,MAAe,QAAI,IAExED,EAAMR,OAOEA,EAAO,IAaNU,SACGZ,EAAa,IAAIC,EAASj9B,OAAO2sB,OAAOqQ,IACrCA,EAAW,GAAK,kBAAoB,EAC3CC,EAAOD,EAAW,GAAK,yBAA2B,EAClDC,EAAOD,EAAW,GAAK,yBAA2B,EAClDC,EAAOD,EAAW,GAAK,wBAA0B,EACjDC,EAAOD,EAAW,GAAK,wBAA0B,EACjDC,EAAOD,EAAW,GAAK,cAAgB,EAChCC,GAGXC,EAAKW,eAAiB,WA8BlB,SAASA,EAAeC,GAMpB,GALAphC,KAAKqhC,OAAS,GACdrhC,KAAKshC,KAAO,GACZthC,KAAKuhC,QAAU,GACfvhC,KAAKwhC,QAAU,GACfxhC,KAAKyhC,OAAS,GACVL,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAoqBhD,OA3pBAyhC,EAAevW,UAAU3rB,KAAO,GAQhCkiC,EAAevW,UAAU8W,YAAc,GAQvCP,EAAevW,UAAU+W,UAAY,GAQrCR,EAAevW,UAAUhpB,KAAO,EAQhCu/B,EAAevW,UAAU9jB,EAAI,EAQ7Bq6B,EAAevW,UAAUlrB,EAAIohC,EAAMhR,KAAOgR,EAAMhR,KAAKsJ,SAAS,EAAE,GAAE,GAAS,EAQ3E+H,EAAevW,UAAUlkB,EAAIo6B,EAAMc,UAAU,IAQ7CT,EAAevW,UAAUhlB,EAAI,KAQ7Bu7B,EAAevW,UAAUvjB,EAAI,KAQ7B85B,EAAevW,UAAUyW,OAASP,EAAMe,WAQxCV,EAAevW,UAAU0W,KAAOR,EAAMe,WAQtCV,EAAevW,UAAU2W,QAAUT,EAAMe,WAQzCV,EAAevW,UAAU4W,QAAUV,EAAMe,WAQzCV,EAAevW,UAAU6W,OAASX,EAAMe,WAUxCV,EAAelR,OAAS,SAAgBmR,GACpC,OAAO,IAAID,EAAeC,IAY9BD,EAAehX,OAAS,SAAgBlX,EAAS6uB,GAe7C,GAdKA,IACDA,EAASlB,EAAQ3Q,UACD,MAAhBhd,EAAQhU,MAAgBgU,EAAQnP,eAAe,SAC/Cg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQhU,MAC3C,MAAbgU,EAAQnM,GAAamM,EAAQnP,eAAe,MAC5Cg+B,EAAOC,OAA8B,IAAIC,MAAM/uB,EAAQnM,GAC1C,MAAbmM,EAAQvT,GAAauT,EAAQnP,eAAe,MAC5Cg+B,EAAOC,OAA8B,IAAIE,MAAMhvB,EAAQvT,GAC1C,MAAbuT,EAAQvM,GAAauM,EAAQnP,eAAe,MAC5Cg+B,EAAOC,OAA8B,IAAItQ,MAAMxe,EAAQvM,GAC1C,MAAbuM,EAAQrN,GAAaqN,EAAQnP,eAAe,MAC5Ck9B,EAAMR,KAAK0B,YAAY/X,OAAOlX,EAAQrN,EAAGk8B,EAAOC,OAA8B,IAAII,QAAQC,SAC7E,MAAbnvB,EAAQ5L,GAAa4L,EAAQnP,eAAe,MAC5Ck9B,EAAMR,KAAK6B,WAAWlY,OAAOlX,EAAQ5L,EAAGy6B,EAAOC,OAA8B,IAAII,QAAQC,SACvE,MAAlBnvB,EAAQouB,QAAkBpuB,EAAQouB,OAAO1hC,OAAQ,CACjDmiC,EAAOC,OAA8B,IAAII,OACzC,IAAK,IAAIziC,EAAI,EAAGA,EAAIuT,EAAQouB,OAAO1hC,SAAUD,EACzCoiC,EAAOE,MAAM/uB,EAAQouB,OAAO3hC,IAChCoiC,EAAOM,SAEX,GAAoB,MAAhBnvB,EAAQquB,MAAgBruB,EAAQquB,KAAK3hC,OAAQ,CAE7C,IADAmiC,EAAOC,OAA8B,IAAII,OAChCziC,EAAI,EAAGA,EAAIuT,EAAQquB,KAAK3hC,SAAUD,EACvCoiC,EAAOG,MAAMhvB,EAAQquB,KAAK5hC,IAC9BoiC,EAAOM,SAEX,GAAuB,MAAnBnvB,EAAQsuB,SAAmBtuB,EAAQsuB,QAAQ5hC,OAC3C,IAASD,EAAI,EAAGA,EAAIuT,EAAQsuB,QAAQ5hC,SAAUD,EAC1CoiC,EAAOC,OAA8B,IAAItQ,MAAMxe,EAAQsuB,QAAQ7hC,IACvE,GAAuB,MAAnBuT,EAAQuuB,SAAmBvuB,EAAQuuB,QAAQ7hC,OAC3C,IAASD,EAAI,EAAGA,EAAIuT,EAAQuuB,QAAQ7hC,SAAUD,EAC1CshC,EAAMR,KAAK0B,YAAY/X,OAAOlX,EAAQuuB,QAAQ9hC,GAAIoiC,EAAOC,OAA+B,IAAII,QAAQC,SAC5G,GAAsB,MAAlBnvB,EAAQwuB,QAAkBxuB,EAAQwuB,OAAO9hC,OACzC,IAASD,EAAI,EAAGA,EAAIuT,EAAQwuB,OAAO9hC,SAAUD,EACzCshC,EAAMR,KAAK6B,WAAWlY,OAAOlX,EAAQwuB,OAAO/hC,GAAIoiC,EAAOC,OAA+B,IAAII,QAAQC,SAO1G,OANyB,MAArBnvB,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,cACpDg+B,EAAOC,OAA+B,KAAKhY,OAAO9W,EAAQ0uB,WAC1C,MAAhB1uB,EAAQrR,MAAgBqR,EAAQnP,eAAe,SAC/Cg+B,EAAOC,OAA+B,KAAKrS,MAAMzc,EAAQrR,MAClC,MAAvBqR,EAAQyuB,aAAuBzuB,EAAQnP,eAAe,gBACtDg+B,EAAOC,OAA+B,KAAKhY,OAAO9W,EAAQyuB,aACvDI,GAYXX,EAAemB,gBAAkB,SAAyBrvB,EAAS6uB,GAC/D,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCjB,EAAe51B,OAAS,SAAgBg3B,EAAQ5iC,GACtC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAKW,eACrFoB,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQhU,KAAOsjC,EAAOxY,SACtB,MACJ,KAAK,GACD9W,EAAQyuB,YAAca,EAAOxY,SAC7B,MACJ,KAAK,GACD9W,EAAQ0uB,UAAYY,EAAOxY,SAC3B,MACJ,KAAK,GACD9W,EAAQrR,KAAO2gC,EAAO7S,QACtB,MACJ,KAAK,EACDzc,EAAQnM,EAAIy7B,EAAOP,QACnB,MACJ,KAAK,EACD/uB,EAAQvT,EAAI6iC,EAAON,QACnB,MACJ,KAAK,EACDhvB,EAAQvM,EAAI67B,EAAO9Q,QACnB,MACJ,KAAK,EACDxe,EAAQrN,EAAIo7B,EAAMR,KAAK0B,YAAY32B,OAAOg3B,EAAQA,EAAOR,UACzD,MACJ,KAAK,EACD9uB,EAAQ5L,EAAI25B,EAAMR,KAAK6B,WAAW92B,OAAOg3B,EAAQA,EAAOR,UACxD,MACJ,KAAK,EAGD,GAFM9uB,EAAQouB,QAAUpuB,EAAQouB,OAAO1hC,SACnCsT,EAAQouB,OAAS,IACH,IAAP,EAANmB,GAED,IADA,IAAIC,EAAOF,EAAOR,SAAWQ,EAAOhX,IAC7BgX,EAAOhX,IAAMkX,GAChBxvB,EAAQouB,OAAOxhC,KAAK0iC,EAAOP,cAE/B/uB,EAAQouB,OAAOxhC,KAAK0iC,EAAOP,SAC/B,MACJ,KAAK,EAGD,GAFM/uB,EAAQquB,MAAQruB,EAAQquB,KAAK3hC,SAC/BsT,EAAQquB,KAAO,IACD,IAAP,EAANkB,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOhX,IAC7BgX,EAAOhX,IAAMkX,GAChBxvB,EAAQquB,KAAKzhC,KAAK0iC,EAAON,cAE7BhvB,EAAQquB,KAAKzhC,KAAK0iC,EAAON,SAC7B,MACJ,KAAK,EACKhvB,EAAQsuB,SAAWtuB,EAAQsuB,QAAQ5hC,SACrCsT,EAAQsuB,QAAU,IACtBtuB,EAAQsuB,QAAQ1hC,KAAK0iC,EAAO9Q,SAC5B,MACJ,KAAK,GACKxe,EAAQuuB,SAAWvuB,EAAQuuB,QAAQ7hC,SACrCsT,EAAQuuB,QAAU,IACtBvuB,EAAQuuB,QAAQ3hC,KAAKmhC,EAAMR,KAAK0B,YAAY32B,OAAOg3B,EAAQA,EAAOR,WAClE,MACJ,KAAK,GACK9uB,EAAQwuB,QAAUxuB,EAAQwuB,OAAO9hC,SACnCsT,EAAQwuB,OAAS,IACrBxuB,EAAQwuB,OAAO5hC,KAAKmhC,EAAMR,KAAK6B,WAAW92B,OAAOg3B,EAAQA,EAAOR,WAChE,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaXkuB,EAAewB,gBAAkB,SAAyBJ,GAGtD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtCZ,EAAeyB,OAAS,SAAgB3vB,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC1Cg9B,EAAM+B,SAAS5vB,EAAQhU,MACxB,MAAO,wBACf,GAA2B,MAAvBgU,EAAQyuB,aAAuBzuB,EAAQnP,eAAe,iBACjDg9B,EAAM+B,SAAS5vB,EAAQyuB,aACxB,MAAO,+BACf,GAAyB,MAArBzuB,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eAC/Cg9B,EAAM+B,SAAS5vB,EAAQ0uB,WACxB,MAAO,6BACf,GAAoB,MAAhB1uB,EAAQrR,MAAgBqR,EAAQnP,eAAe,QAC/C,OAAQmP,EAAQrR,MAChB,QACI,MAAO,4BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,IAGT,GAAiB,MAAbqR,EAAQnM,GAAamM,EAAQnP,eAAe,MACnB,iBAAdmP,EAAQnM,EACf,MAAO,qBACf,GAAiB,MAAbmM,EAAQvT,GAAauT,EAAQnP,eAAe,QACvCg9B,EAAMgC,UAAU7vB,EAAQvT,IAAQuT,EAAQvT,GAAKohC,EAAMgC,UAAU7vB,EAAQvT,EAAEqwB,MAAQ+Q,EAAMgC,UAAU7vB,EAAQvT,EAAEswB,OAC1G,MAAO,2BACf,GAAiB,MAAb/c,EAAQvM,GAAauM,EAAQnP,eAAe,QACtCmP,EAAQvM,GAAiC,iBAArBuM,EAAQvM,EAAE/G,QAAuBmhC,EAAM+B,SAAS5vB,EAAQvM,IAC9E,MAAO,qBACf,GAAiB,MAAbuM,EAAQrN,GAAaqN,EAAQnP,eAAe,OACxCqF,EAAQ63B,EAAMR,KAAK0B,YAAYU,OAAO3vB,EAAQrN,IAE9C,MAAO,KAAOuD,EAEtB,GAAiB,MAAb8J,EAAQ5L,GAAa4L,EAAQnP,eAAe,OACxCqF,EAAQ63B,EAAMR,KAAK6B,WAAWO,OAAO3vB,EAAQ5L,IAE7C,MAAO,KAAO8B,EAEtB,GAAsB,MAAlB8J,EAAQouB,QAAkBpuB,EAAQnP,eAAe,UAAW,CAC5D,IAAK/B,MAAMC,QAAQiR,EAAQouB,QACvB,MAAO,yBACX,IAAK,IAAI3hC,EAAI,EAAGA,EAAIuT,EAAQouB,OAAO1hC,SAAUD,EACzC,GAAiC,iBAAtBuT,EAAQouB,OAAO3hC,GACtB,MAAO,4BAEnB,GAAoB,MAAhBuT,EAAQquB,MAAgBruB,EAAQnP,eAAe,QAAS,CACxD,IAAK/B,MAAMC,QAAQiR,EAAQquB,MACvB,MAAO,uBACX,IAAS5hC,EAAI,EAAGA,EAAIuT,EAAQquB,KAAK3hC,SAAUD,EACvC,KAAKohC,EAAMgC,UAAU7vB,EAAQquB,KAAK5hC,KAASuT,EAAQquB,KAAK5hC,IAAMohC,EAAMgC,UAAU7vB,EAAQquB,KAAK5hC,GAAGqwB,MAAQ+Q,EAAMgC,UAAU7vB,EAAQquB,KAAK5hC,GAAGswB,OAClI,MAAO,gCAEnB,GAAuB,MAAnB/c,EAAQsuB,SAAmBtuB,EAAQnP,eAAe,WAAY,CAC9D,IAAK/B,MAAMC,QAAQiR,EAAQsuB,SACvB,MAAO,0BACX,IAAS7hC,EAAI,EAAGA,EAAIuT,EAAQsuB,QAAQ5hC,SAAUD,EAC1C,KAAMuT,EAAQsuB,QAAQ7hC,IAA2C,iBAA9BuT,EAAQsuB,QAAQ7hC,GAAGC,QAAuBmhC,EAAM+B,SAAS5vB,EAAQsuB,QAAQ7hC,KACxG,MAAO,6BAEnB,GAAuB,MAAnBuT,EAAQuuB,SAAmBvuB,EAAQnP,eAAe,WAAY,CAC9D,IAAK/B,MAAMC,QAAQiR,EAAQuuB,SACvB,MAAO,0BACX,IAAS9hC,EAAI,EAAGA,EAAIuT,EAAQuuB,QAAQ7hC,SAAUD,EAE1C,GADIyJ,EAAQ63B,EAAMR,KAAK0B,YAAYU,OAAO3vB,EAAQuuB,QAAQ9hC,IAEtD,MAAO,WAAayJ,EAGhC,GAAsB,MAAlB8J,EAAQwuB,QAAkBxuB,EAAQnP,eAAe,UAAW,CAC5D,IAAK/B,MAAMC,QAAQiR,EAAQwuB,QACvB,MAAO,yBACX,IAAS/hC,EAAI,EAAGA,EAAIuT,EAAQwuB,OAAO9hC,SAAUD,EAAG,CAC5C,IAAIyJ,EACJ,GADIA,EAAQ63B,EAAMR,KAAK6B,WAAWO,OAAO3vB,EAAQwuB,OAAO/hC,IAEpD,MAAO,UAAYyJ,GAG/B,OAAO,MAWXg4B,EAAe4B,WAAa,SAAoBC,GAC5C,GAAIA,aAAkBhC,EAAMR,KAAKW,eAC7B,OAAO6B,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAKW,eAO7B,OANmB,MAAf6B,EAAO/jC,OACPgU,EAAQhU,KAAO0M,OAAOq3B,EAAO/jC,OACP,MAAtB+jC,EAAOtB,cACPzuB,EAAQyuB,YAAc/1B,OAAOq3B,EAAOtB,cAChB,MAApBsB,EAAOrB,YACP1uB,EAAQ0uB,UAAYh2B,OAAOq3B,EAAOrB,YAC9BqB,EAAOphC,MACf,IAAK,YACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,MACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,OACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDqR,EAAQrR,KAAO,EACf,MACJ,IAAK,SACL,KAAK,GACDqR,EAAQrR,KAAO,GAmBnB,GAhBgB,MAAZohC,EAAOl8B,IACPmM,EAAQnM,EAAIvE,OAAOygC,EAAOl8B,IACd,MAAZk8B,EAAOtjC,IACHohC,EAAMhR,MACL7c,EAAQvT,EAAIohC,EAAMhR,KAAK2K,UAAUuI,EAAOtjC,IAAIi5B,UAAW,EAC/B,iBAAbqK,EAAOtjC,EACnBuT,EAAQvT,EAAI26B,SAAS2I,EAAOtjC,EAAG,IACN,iBAAbsjC,EAAOtjC,EACnBuT,EAAQvT,EAAIsjC,EAAOtjC,EACM,iBAAbsjC,EAAOtjC,IACnBuT,EAAQvT,EAAI,IAAIohC,EAAMmC,SAASD,EAAOtjC,EAAEqwB,MAAQ,EAAGiT,EAAOtjC,EAAEswB,OAAS,GAAGiL,aAChE,MAAZ+H,EAAOt8B,IACiB,iBAAbs8B,EAAOt8B,EACdo6B,EAAMhX,OAAOve,OAAOy3B,EAAOt8B,EAAGuM,EAAQvM,EAAIo6B,EAAMc,UAAUd,EAAMhX,OAAOnqB,OAAOqjC,EAAOt8B,IAAK,GACrFs8B,EAAOt8B,EAAE/G,SACdsT,EAAQvM,EAAIs8B,EAAOt8B,IACX,MAAZs8B,EAAOp9B,EAAW,CAClB,GAAwB,iBAAbo9B,EAAOp9B,EACd,MAAMtG,UAAU,2CACpB2T,EAAQrN,EAAIo7B,EAAMR,KAAK0B,YAAYa,WAAWC,EAAOp9B,GAEzD,GAAgB,MAAZo9B,EAAO37B,EAAW,CAClB,GAAwB,iBAAb27B,EAAO37B,EACd,MAAM/H,UAAU,2CACpB2T,EAAQ5L,EAAI25B,EAAMR,KAAK6B,WAAWU,WAAWC,EAAO37B,GAExD,GAAI27B,EAAO3B,OAAQ,CACf,IAAKt/B,MAAMC,QAAQghC,EAAO3B,QACtB,MAAM/hC,UAAU,+CACpB2T,EAAQouB,OAAS,GACjB,IAAK,IAAI3hC,EAAI,EAAGA,EAAIsjC,EAAO3B,OAAO1hC,SAAUD,EACxCuT,EAAQouB,OAAO3hC,GAAK6C,OAAOygC,EAAO3B,OAAO3hC,IAEjD,GAAIsjC,EAAO1B,KAAM,CACb,IAAKv/B,MAAMC,QAAQghC,EAAO1B,MACtB,MAAMhiC,UAAU,6CAEpB,IADA2T,EAAQquB,KAAO,GACN5hC,EAAI,EAAGA,EAAIsjC,EAAO1B,KAAK3hC,SAAUD,EAClCohC,EAAMhR,MACL7c,EAAQquB,KAAK5hC,GAAKohC,EAAMhR,KAAK2K,UAAUuI,EAAO1B,KAAK5hC,KAAKi5B,UAAW,EACrC,iBAAnBqK,EAAO1B,KAAK5hC,GACxBuT,EAAQquB,KAAK5hC,GAAK26B,SAAS2I,EAAO1B,KAAK5hC,GAAI,IACZ,iBAAnBsjC,EAAO1B,KAAK5hC,GACxBuT,EAAQquB,KAAK5hC,GAAKsjC,EAAO1B,KAAK5hC,GACC,iBAAnBsjC,EAAO1B,KAAK5hC,KACxBuT,EAAQquB,KAAK5hC,GAAK,IAAIohC,EAAMmC,SAASD,EAAO1B,KAAK5hC,GAAGqwB,MAAQ,EAAGiT,EAAO1B,KAAK5hC,GAAGswB,OAAS,GAAGiL,YAEtG,GAAI+H,EAAOzB,QAAS,CAChB,IAAKx/B,MAAMC,QAAQghC,EAAOzB,SACtB,MAAMjiC,UAAU,gDAEpB,IADA2T,EAAQsuB,QAAU,GACT7hC,EAAI,EAAGA,EAAIsjC,EAAOzB,QAAQ5hC,SAAUD,EACR,iBAAtBsjC,EAAOzB,QAAQ7hC,GACtBohC,EAAMhX,OAAOve,OAAOy3B,EAAOzB,QAAQ7hC,GAAIuT,EAAQsuB,QAAQ7hC,GAAKohC,EAAMc,UAAUd,EAAMhX,OAAOnqB,OAAOqjC,EAAOzB,QAAQ7hC,KAAM,GAChHsjC,EAAOzB,QAAQ7hC,GAAGC,SACvBsT,EAAQsuB,QAAQ7hC,GAAKsjC,EAAOzB,QAAQ7hC,IAEhD,GAAIsjC,EAAOxB,QAAS,CAChB,IAAKz/B,MAAMC,QAAQghC,EAAOxB,SACtB,MAAMliC,UAAU,gDAEpB,IADA2T,EAAQuuB,QAAU,GACT9hC,EAAI,EAAGA,EAAIsjC,EAAOxB,QAAQ7hC,SAAUD,EAAG,CAC5C,GAAiC,iBAAtBsjC,EAAOxB,QAAQ9hC,GACtB,MAAMJ,UAAU,iDACpB2T,EAAQuuB,QAAQ9hC,GAAKshC,EAAMR,KAAK0B,YAAYa,WAAWC,EAAOxB,QAAQ9hC,KAG9E,GAAIsjC,EAAOvB,OAAQ,CACf,IAAK1/B,MAAMC,QAAQghC,EAAOvB,QACtB,MAAMniC,UAAU,+CAEpB,IADA2T,EAAQwuB,OAAS,GACR/hC,EAAI,EAAGA,EAAIsjC,EAAOvB,OAAO9hC,SAAUD,EAAG,CAC3C,GAAgC,iBAArBsjC,EAAOvB,OAAO/hC,GACrB,MAAMJ,UAAU,gDACpB2T,EAAQwuB,OAAO/hC,GAAKshC,EAAMR,KAAK6B,WAAWU,WAAWC,EAAOvB,OAAO/hC,KAG3E,OAAOuT,GAYXkuB,EAAe+B,SAAW,SAAkBjwB,EAAShQ,GAC5CA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAQb,IAPI//B,EAAQkgC,QAAUlgC,EAAQmgC,YAC1BJ,EAAO3B,OAAS,GAChB2B,EAAO1B,KAAO,GACd0B,EAAOzB,QAAU,GACjByB,EAAOxB,QAAU,GACjBwB,EAAOvB,OAAS,IAEhBx+B,EAAQmgC,SAAU,CAGlB,GAFAJ,EAAO/jC,KAAO,GACd+jC,EAAOl8B,EAAI,EACPg6B,EAAMhR,KAAM,CACZ,IAAIuT,EAAO,IAAIvC,EAAMhR,KAAK,EAAG,GAAG,GAChCkT,EAAOtjC,EAAIuD,EAAQqgC,QAAU33B,OAAS03B,EAAKvnB,WAAa7Y,EAAQqgC,QAAU/gC,OAAS8gC,EAAKpI,WAAaoI,OAErGL,EAAOtjC,EAAIuD,EAAQqgC,QAAU33B,OAAS,IAAM,EAC5C1I,EAAQwuB,QAAU9lB,OAClBq3B,EAAOt8B,EAAI,IAEXs8B,EAAOt8B,EAAI,GACPzD,EAAQwuB,QAAU1vB,QAClBihC,EAAOt8B,EAAIo6B,EAAMc,UAAUoB,EAAOt8B,KAE1Cs8B,EAAOp9B,EAAI,KACXo9B,EAAO37B,EAAI,KACX27B,EAAOrB,UAAY,GACnBqB,EAAOphC,KAAOqB,EAAQsgC,QAAU53B,OAAS,YAAc,EACvDq3B,EAAOtB,YAAc,GAiBzB,GAfoB,MAAhBzuB,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC/Ck/B,EAAO/jC,KAAOgU,EAAQhU,MACT,MAAbgU,EAAQnM,GAAamM,EAAQnP,eAAe,OAC5Ck/B,EAAOl8B,EAAI7D,EAAQugC,OAASC,SAASxwB,EAAQnM,GAAK6E,OAAOsH,EAAQnM,GAAKmM,EAAQnM,GACjE,MAAbmM,EAAQvT,GAAauT,EAAQnP,eAAe,OACnB,iBAAdmP,EAAQvT,EACfsjC,EAAOtjC,EAAIuD,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQvT,GAAKuT,EAAQvT,EAElEsjC,EAAOtjC,EAAIuD,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQvT,GAAKuD,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQvT,EAAEqwB,MAAQ,EAAG9c,EAAQvT,EAAEswB,OAAS,GAAGiL,WAAahoB,EAAQvT,GAC3L,MAAbuT,EAAQvM,GAAauM,EAAQnP,eAAe,OAC5Ck/B,EAAOt8B,EAAIzD,EAAQwuB,QAAU9lB,OAASm1B,EAAMhX,OAAOK,OAAOlX,EAAQvM,EAAG,EAAGuM,EAAQvM,EAAE/G,QAAUsD,EAAQwuB,QAAU1vB,MAAQA,MAAM6oB,UAAUliB,MAAM3E,KAAKkP,EAAQvM,GAAKuM,EAAQvM,GACzJ,MAAbuM,EAAQrN,GAAaqN,EAAQnP,eAAe,OAC5Ck/B,EAAOp9B,EAAIo7B,EAAMR,KAAK0B,YAAYgB,SAASjwB,EAAQrN,EAAG3C,IACzC,MAAbgQ,EAAQ5L,GAAa4L,EAAQnP,eAAe,OAC5Ck/B,EAAO37B,EAAI25B,EAAMR,KAAK6B,WAAWa,SAASjwB,EAAQ5L,EAAGpE,IACrDgQ,EAAQouB,QAAUpuB,EAAQouB,OAAO1hC,OAAQ,CACzCqjC,EAAO3B,OAAS,GAChB,IAAK,IAAIh2B,EAAI,EAAGA,EAAI4H,EAAQouB,OAAO1hC,SAAU0L,EACzC23B,EAAO3B,OAAOh2B,GAAKpI,EAAQugC,OAASC,SAASxwB,EAAQouB,OAAOh2B,IAAMM,OAAOsH,EAAQouB,OAAOh2B,IAAM4H,EAAQouB,OAAOh2B,GAErH,GAAI4H,EAAQquB,MAAQruB,EAAQquB,KAAK3hC,OAE7B,IADAqjC,EAAO1B,KAAO,GACLj2B,EAAI,EAAGA,EAAI4H,EAAQquB,KAAK3hC,SAAU0L,EACR,iBAApB4H,EAAQquB,KAAKj2B,GACpB23B,EAAO1B,KAAKj2B,GAAKpI,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQquB,KAAKj2B,IAAM4H,EAAQquB,KAAKj2B,GAEnF23B,EAAO1B,KAAKj2B,GAAKpI,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQquB,KAAKj2B,IAAMpI,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQquB,KAAKj2B,GAAG0kB,MAAQ,EAAG9c,EAAQquB,KAAKj2B,GAAG2kB,OAAS,GAAGiL,WAAahoB,EAAQquB,KAAKj2B,GAE7O,GAAI4H,EAAQsuB,SAAWtuB,EAAQsuB,QAAQ5hC,OAEnC,IADAqjC,EAAOzB,QAAU,GACRl2B,EAAI,EAAGA,EAAI4H,EAAQsuB,QAAQ5hC,SAAU0L,EAC1C23B,EAAOzB,QAAQl2B,GAAKpI,EAAQwuB,QAAU9lB,OAASm1B,EAAMhX,OAAOK,OAAOlX,EAAQsuB,QAAQl2B,GAAI,EAAG4H,EAAQsuB,QAAQl2B,GAAG1L,QAAUsD,EAAQwuB,QAAU1vB,MAAQA,MAAM6oB,UAAUliB,MAAM3E,KAAKkP,EAAQsuB,QAAQl2B,IAAM4H,EAAQsuB,QAAQl2B,GAE1N,GAAI4H,EAAQuuB,SAAWvuB,EAAQuuB,QAAQ7hC,OAEnC,IADAqjC,EAAOxB,QAAU,GACRn2B,EAAI,EAAGA,EAAI4H,EAAQuuB,QAAQ7hC,SAAU0L,EAC1C23B,EAAOxB,QAAQn2B,GAAK21B,EAAMR,KAAK0B,YAAYgB,SAASjwB,EAAQuuB,QAAQn2B,GAAIpI,GAEhF,GAAIgQ,EAAQwuB,QAAUxuB,EAAQwuB,OAAO9hC,OAEjC,IADAqjC,EAAOvB,OAAS,GACPp2B,EAAI,EAAGA,EAAI4H,EAAQwuB,OAAO9hC,SAAU0L,EACzC23B,EAAOvB,OAAOp2B,GAAK21B,EAAMR,KAAK6B,WAAWa,SAASjwB,EAAQwuB,OAAOp2B,GAAIpI,GAQ7E,OANyB,MAArBgQ,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eACpDk/B,EAAOrB,UAAY1uB,EAAQ0uB,WACX,MAAhB1uB,EAAQrR,MAAgBqR,EAAQnP,eAAe,UAC/Ck/B,EAAOphC,KAAOqB,EAAQsgC,QAAU53B,OAASq1B,EAAMR,KAAKW,eAAeuC,cAAczwB,EAAQrR,MAAQqR,EAAQrR,MAClF,MAAvBqR,EAAQyuB,aAAuBzuB,EAAQnP,eAAe,iBACtDk/B,EAAOtB,YAAczuB,EAAQyuB,aAC1BsB,GAUX7B,EAAevW,UAAU4N,OAAS,WAC9B,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAmB1DxC,EAAeuC,cAAgB,WAC3B,IAAIpD,EAAa,GAAIC,EAASj9B,OAAO2sB,OAAOqQ,GAY5C,OAXAC,EAAOD,EAAW,GAAK,aAAe,EACtCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,OAAS,EAChCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,IAAM,UAAY,GAC7BC,EAboB,GAgBxBY,EA3sBW,GA8sBtBX,EAAKoD,eAAiB,WAmBlB,SAASA,EAAexC,GACpB,GAAIA,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAmNhD,OA1MAkkC,EAAehZ,UAAU3rB,KAAO,GAQhC2kC,EAAehZ,UAAUhpB,KAAO,KAQhCgiC,EAAehZ,UAAU+W,UAAY,GAUrCiC,EAAe3T,OAAS,SAAgBmR,GACpC,OAAO,IAAIwC,EAAexC,IAY9BwC,EAAezZ,OAAS,SAAgBlX,EAAS6uB,GAS7C,OARKA,IACDA,EAASlB,EAAQ3Q,UACD,MAAhBhd,EAAQhU,MAAgBgU,EAAQnP,eAAe,SAC/Cg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQhU,MACxC,MAAhBgU,EAAQrR,MAAgBqR,EAAQnP,eAAe,SAC/Ck9B,EAAMR,KAAKqD,UAAU1Z,OAAOlX,EAAQrR,KAAMkgC,EAAOC,OAA8B,IAAII,QAAQC,SACtE,MAArBnvB,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,cACpDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQ0uB,WACrDG,GAYX8B,EAAetB,gBAAkB,SAAyBrvB,EAAS6uB,GAC/D,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCwB,EAAer4B,OAAS,SAAgBg3B,EAAQ5iC,GACtC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAKoD,eACrFrB,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQhU,KAAOsjC,EAAOxY,SACtB,MACJ,KAAK,EACD9W,EAAQrR,KAAOo/B,EAAMR,KAAKqD,UAAUt4B,OAAOg3B,EAAQA,EAAOR,UAC1D,MACJ,KAAK,EACD9uB,EAAQ0uB,UAAYY,EAAOxY,SAC3B,MACJ,QACIwY,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaX2wB,EAAejB,gBAAkB,SAAyBJ,GAGtD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtC6B,EAAehB,OAAS,SAAgB3vB,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC1Cg9B,EAAM+B,SAAS5vB,EAAQhU,MACxB,MAAO,wBACf,GAAoB,MAAhBgU,EAAQrR,MAAgBqR,EAAQnP,eAAe,QAAS,CACxD,IAAIqF,EAAQ63B,EAAMR,KAAKqD,UAAUjB,OAAO3vB,EAAQrR,MAChD,GAAIuH,EACA,MAAO,QAAUA,EAEzB,OAAyB,MAArB8J,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eAC/Cg9B,EAAM+B,SAAS5vB,EAAQ0uB,WACjB,6BACR,MAWXiC,EAAeb,WAAa,SAAoBC,GAC5C,GAAIA,aAAkBhC,EAAMR,KAAKoD,eAC7B,OAAOZ,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAKoD,eAG7B,GAFmB,MAAfZ,EAAO/jC,OACPgU,EAAQhU,KAAO0M,OAAOq3B,EAAO/jC,OACd,MAAf+jC,EAAOphC,KAAc,CACrB,GAA2B,iBAAhBohC,EAAOphC,KACd,MAAMtC,UAAU,8CACpB2T,EAAQrR,KAAOo/B,EAAMR,KAAKqD,UAAUd,WAAWC,EAAOphC,MAI1D,OAFwB,MAApBohC,EAAOrB,YACP1uB,EAAQ0uB,UAAYh2B,OAAOq3B,EAAOrB,YAC/B1uB,GAYX2wB,EAAeV,SAAW,SAAkBjwB,EAAShQ,GAC5CA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAYb,OAXI//B,EAAQmgC,WACRJ,EAAO/jC,KAAO,GACd+jC,EAAOphC,KAAO,KACdohC,EAAOrB,UAAY,IAEH,MAAhB1uB,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC/Ck/B,EAAO/jC,KAAOgU,EAAQhU,MACN,MAAhBgU,EAAQrR,MAAgBqR,EAAQnP,eAAe,UAC/Ck/B,EAAOphC,KAAOo/B,EAAMR,KAAKqD,UAAUX,SAASjwB,EAAQrR,KAAMqB,IACrC,MAArBgQ,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eACpDk/B,EAAOrB,UAAY1uB,EAAQ0uB,WACxBqB,GAUXY,EAAehZ,UAAU4N,OAAS,WAC9B,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDC,EA1OW,GA6OtBpD,EAAKsD,UAAY,WAuBb,SAASA,EAAU1C,GAIf,GAHAphC,KAAK+jC,MAAQ,GACb/jC,KAAKgkC,OAAS,GACdhkC,KAAKikC,UAAY,GACb7C,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAsVhD,OA7UAokC,EAAUlZ,UAAUmZ,MAAQjD,EAAMe,WAQlCiC,EAAUlZ,UAAUoZ,OAASlD,EAAMe,WAQnCiC,EAAUlZ,UAAU3rB,KAAO,GAQ3B6kC,EAAUlZ,UAAUsZ,OAAS,GAQ7BJ,EAAUlZ,UAAUuZ,OAAS,GAQ7BL,EAAUlZ,UAAUqZ,UAAYnD,EAAMe,WAQtCiC,EAAUlZ,UAAU+W,UAAY,GAUhCmC,EAAU7T,OAAS,SAAgBmR,GAC/B,OAAO,IAAI0C,EAAU1C,IAYzB0C,EAAU3Z,OAAS,SAAgBlX,EAAS6uB,GAGxC,GAFKA,IACDA,EAASlB,EAAQ3Q,UACA,MAAjBhd,EAAQ8wB,OAAiB9wB,EAAQ8wB,MAAMpkC,OACvC,IAAK,IAAID,EAAI,EAAGA,EAAIuT,EAAQ8wB,MAAMpkC,SAAUD,EACxCoiC,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQ8wB,MAAMrkC,IACtE,GAAsB,MAAlBuT,EAAQ+wB,QAAkB/wB,EAAQ+wB,OAAOrkC,OACzC,IAASD,EAAI,EAAGA,EAAIuT,EAAQ+wB,OAAOrkC,SAAUD,EACzCoiC,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQ+wB,OAAOtkC,IAKvE,GAJoB,MAAhBuT,EAAQhU,MAAgBgU,EAAQnP,eAAe,SAC/Cg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQhU,MACtC,MAAlBgU,EAAQixB,QAAkBjxB,EAAQnP,eAAe,WACjDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQixB,QACnC,MAArBjxB,EAAQgxB,WAAqBhxB,EAAQgxB,UAAUtkC,OAC/C,IAASD,EAAI,EAAGA,EAAIuT,EAAQgxB,UAAUtkC,SAAUD,EAC5CshC,EAAMR,KAAKW,eAAehX,OAAOlX,EAAQgxB,UAAUvkC,GAAIoiC,EAAOC,OAA8B,IAAII,QAAQC,SAKhH,OAJyB,MAArBnvB,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,cACpDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQ0uB,WACtC,MAAlB1uB,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,WACjDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQkxB,QACrDrC,GAYXgC,EAAUxB,gBAAkB,SAAyBrvB,EAAS6uB,GAC1D,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxC0B,EAAUv4B,OAAS,SAAgBg3B,EAAQ5iC,GACjC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAKsD,UACrFvB,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACKvvB,EAAQ8wB,OAAS9wB,EAAQ8wB,MAAMpkC,SACjCsT,EAAQ8wB,MAAQ,IACpB9wB,EAAQ8wB,MAAMlkC,KAAK0iC,EAAOxY,UAC1B,MACJ,KAAK,EACK9W,EAAQ+wB,QAAU/wB,EAAQ+wB,OAAOrkC,SACnCsT,EAAQ+wB,OAAS,IACrB/wB,EAAQ+wB,OAAOnkC,KAAK0iC,EAAOxY,UAC3B,MACJ,KAAK,EACD9W,EAAQhU,KAAOsjC,EAAOxY,SACtB,MACJ,KAAK,EACD9W,EAAQixB,OAAS3B,EAAOxY,SACxB,MACJ,KAAK,EACD9W,EAAQkxB,OAAS5B,EAAOxY,SACxB,MACJ,KAAK,EACK9W,EAAQgxB,WAAahxB,EAAQgxB,UAAUtkC,SACzCsT,EAAQgxB,UAAY,IACxBhxB,EAAQgxB,UAAUpkC,KAAKmhC,EAAMR,KAAKW,eAAe51B,OAAOg3B,EAAQA,EAAOR,WACvE,MACJ,KAAK,EACD9uB,EAAQ0uB,UAAYY,EAAOxY,SAC3B,MACJ,QACIwY,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaX6wB,EAAUnB,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtC+B,EAAUlB,OAAS,SAAgB3vB,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQ8wB,OAAiB9wB,EAAQnP,eAAe,SAAU,CAC1D,IAAK/B,MAAMC,QAAQiR,EAAQ8wB,OACvB,MAAO,wBACX,IAAK,IAAIrkC,EAAI,EAAGA,EAAIuT,EAAQ8wB,MAAMpkC,SAAUD,EACxC,IAAKohC,EAAM+B,SAAS5vB,EAAQ8wB,MAAMrkC,IAC9B,MAAO,2BAEnB,GAAsB,MAAlBuT,EAAQ+wB,QAAkB/wB,EAAQnP,eAAe,UAAW,CAC5D,IAAK/B,MAAMC,QAAQiR,EAAQ+wB,QACvB,MAAO,yBACX,IAAStkC,EAAI,EAAGA,EAAIuT,EAAQ+wB,OAAOrkC,SAAUD,EACzC,IAAKohC,EAAM+B,SAAS5vB,EAAQ+wB,OAAOtkC,IAC/B,MAAO,4BAEnB,GAAoB,MAAhBuT,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC1Cg9B,EAAM+B,SAAS5vB,EAAQhU,MACxB,MAAO,wBACf,GAAsB,MAAlBgU,EAAQixB,QAAkBjxB,EAAQnP,eAAe,YAC5Cg9B,EAAM+B,SAAS5vB,EAAQixB,QACxB,MAAO,0BACf,GAAsB,MAAlBjxB,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,YAC5Cg9B,EAAM+B,SAAS5vB,EAAQkxB,QACxB,MAAO,0BACf,GAAyB,MAArBlxB,EAAQgxB,WAAqBhxB,EAAQnP,eAAe,aAAc,CAClE,IAAK/B,MAAMC,QAAQiR,EAAQgxB,WACvB,MAAO,4BACX,IAASvkC,EAAI,EAAGA,EAAIuT,EAAQgxB,UAAUtkC,SAAUD,EAAG,CAC/C,IAAIyJ,EAAQ63B,EAAMR,KAAKW,eAAeyB,OAAO3vB,EAAQgxB,UAAUvkC,IAC/D,GAAIyJ,EACA,MAAO,aAAeA,GAGlC,OAAyB,MAArB8J,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eAC/Cg9B,EAAM+B,SAAS5vB,EAAQ0uB,WACjB,6BACR,MAWXmC,EAAUf,WAAa,SAAoBC,GACvC,GAAIA,aAAkBhC,EAAMR,KAAKsD,UAC7B,OAAOd,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAKsD,UAC7B,GAAId,EAAOe,MAAO,CACd,IAAKhiC,MAAMC,QAAQghC,EAAOe,OACtB,MAAMzkC,UAAU,yCACpB2T,EAAQ8wB,MAAQ,GAChB,IAAK,IAAIrkC,EAAI,EAAGA,EAAIsjC,EAAOe,MAAMpkC,SAAUD,EACvCuT,EAAQ8wB,MAAMrkC,GAAKiM,OAAOq3B,EAAOe,MAAMrkC,IAE/C,GAAIsjC,EAAOgB,OAAQ,CACf,IAAKjiC,MAAMC,QAAQghC,EAAOgB,QACtB,MAAM1kC,UAAU,0CAEpB,IADA2T,EAAQ+wB,OAAS,GACRtkC,EAAI,EAAGA,EAAIsjC,EAAOgB,OAAOrkC,SAAUD,EACxCuT,EAAQ+wB,OAAOtkC,GAAKiM,OAAOq3B,EAAOgB,OAAOtkC,IAQjD,GANmB,MAAfsjC,EAAO/jC,OACPgU,EAAQhU,KAAO0M,OAAOq3B,EAAO/jC,OACZ,MAAjB+jC,EAAOkB,SACPjxB,EAAQixB,OAASv4B,OAAOq3B,EAAOkB,SACd,MAAjBlB,EAAOmB,SACPlxB,EAAQkxB,OAASx4B,OAAOq3B,EAAOmB,SAC/BnB,EAAOiB,UAAW,CAClB,IAAKliC,MAAMC,QAAQghC,EAAOiB,WACtB,MAAM3kC,UAAU,6CAEpB,IADA2T,EAAQgxB,UAAY,GACXvkC,EAAI,EAAGA,EAAIsjC,EAAOiB,UAAUtkC,SAAUD,EAAG,CAC9C,GAAmC,iBAAxBsjC,EAAOiB,UAAUvkC,GACxB,MAAMJ,UAAU,8CACpB2T,EAAQgxB,UAAUvkC,GAAKshC,EAAMR,KAAKW,eAAe4B,WAAWC,EAAOiB,UAAUvkC,KAKrF,OAFwB,MAApBsjC,EAAOrB,YACP1uB,EAAQ0uB,UAAYh2B,OAAOq3B,EAAOrB,YAC/B1uB,GAYX6wB,EAAUZ,SAAW,SAAkBjwB,EAAShQ,GACvCA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAYb,IAXI//B,EAAQkgC,QAAUlgC,EAAQmgC,YAC1BJ,EAAOe,MAAQ,GACff,EAAOgB,OAAS,GAChBhB,EAAOiB,UAAY,IAEnBhhC,EAAQmgC,WACRJ,EAAO/jC,KAAO,GACd+jC,EAAOkB,OAAS,GAChBlB,EAAOrB,UAAY,GACnBqB,EAAOmB,OAAS,IAEhBlxB,EAAQ8wB,OAAS9wB,EAAQ8wB,MAAMpkC,OAAQ,CACvCqjC,EAAOe,MAAQ,GACf,IAAK,IAAI14B,EAAI,EAAGA,EAAI4H,EAAQ8wB,MAAMpkC,SAAU0L,EACxC23B,EAAOe,MAAM14B,GAAK4H,EAAQ8wB,MAAM14B,GAExC,GAAI4H,EAAQ+wB,QAAU/wB,EAAQ+wB,OAAOrkC,OAEjC,IADAqjC,EAAOgB,OAAS,GACP34B,EAAI,EAAGA,EAAI4H,EAAQ+wB,OAAOrkC,SAAU0L,EACzC23B,EAAOgB,OAAO34B,GAAK4H,EAAQ+wB,OAAO34B,GAM1C,GAJoB,MAAhB4H,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC/Ck/B,EAAO/jC,KAAOgU,EAAQhU,MACJ,MAAlBgU,EAAQixB,QAAkBjxB,EAAQnP,eAAe,YACjDk/B,EAAOkB,OAASjxB,EAAQixB,QACxBjxB,EAAQgxB,WAAahxB,EAAQgxB,UAAUtkC,OAEvC,IADAqjC,EAAOiB,UAAY,GACV54B,EAAI,EAAGA,EAAI4H,EAAQgxB,UAAUtkC,SAAU0L,EAC5C23B,EAAOiB,UAAU54B,GAAK21B,EAAMR,KAAKW,eAAe+B,SAASjwB,EAAQgxB,UAAU54B,GAAIpI,GAMvF,OAJyB,MAArBgQ,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eACpDk/B,EAAOrB,UAAY1uB,EAAQ0uB,WACT,MAAlB1uB,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,YACjDk/B,EAAOmB,OAASlxB,EAAQkxB,QACrBnB,GAUXc,EAAUlZ,UAAU4N,OAAS,WACzB,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDG,EApXM,GAuXjBtD,EAAK4D,WAAa,WAyBd,SAASA,EAAWhD,GAGhB,GAFAphC,KAAKqkC,YAAc,GACnBrkC,KAAKskC,cAAgB,GACjBlD,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAuZhD,OA9YA0kC,EAAWxZ,UAAU2Z,UAAYzD,EAAMhR,KAAOgR,EAAMhR,KAAKsJ,SAAS,EAAE,GAAE,GAAS,EAQ/EgL,EAAWxZ,UAAUyZ,YAAcvD,EAAMe,WAQzCuC,EAAWxZ,UAAU4Z,aAAe,GAQpCJ,EAAWxZ,UAAU6Z,gBAAkB,GAQvCL,EAAWxZ,UAAUuZ,OAAS,GAQ9BC,EAAWxZ,UAAU8Z,aAAe5D,EAAMhR,KAAOgR,EAAMhR,KAAKsJ,SAAS,EAAE,GAAE,GAAS,EAQlFgL,EAAWxZ,UAAU+W,UAAY,GAQjCyC,EAAWxZ,UAAU+Z,MAAQ,KAQ7BP,EAAWxZ,UAAU0Z,cAAgBxD,EAAMe,WAU3CuC,EAAWnU,OAAS,SAAgBmR,GAChC,OAAO,IAAIgD,EAAWhD,IAY1BgD,EAAWja,OAAS,SAAgBlX,EAAS6uB,GAiBzC,GAhBKA,IACDA,EAASlB,EAAQ3Q,UACI,MAArBhd,EAAQsxB,WAAqBtxB,EAAQnP,eAAe,cACpDg+B,EAAOC,OAA8B,GAAGE,MAAMhvB,EAAQsxB,WAC9B,MAAxBtxB,EAAQuxB,cAAwBvxB,EAAQnP,eAAe,iBACvDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQuxB,cAC7B,MAA3BvxB,EAAQwxB,iBAA2BxxB,EAAQnP,eAAe,oBAC1Dg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQwxB,iBACtC,MAAlBxxB,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,WACjDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQkxB,QAChC,MAAxBlxB,EAAQyxB,cAAwBzxB,EAAQnP,eAAe,iBACvDg+B,EAAOC,OAA8B,IAAIE,MAAMhvB,EAAQyxB,cAClC,MAArBzxB,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,cACpDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQ0uB,WACvC,MAAjB1uB,EAAQ0xB,OAAiB1xB,EAAQnP,eAAe,UAChDk9B,EAAMR,KAAK6B,WAAWlY,OAAOlX,EAAQ0xB,MAAO7C,EAAOC,OAA8B,IAAII,QAAQC,SACtE,MAAvBnvB,EAAQoxB,aAAuBpxB,EAAQoxB,YAAY1kC,OACnD,IAAK,IAAID,EAAI,EAAGA,EAAIuT,EAAQoxB,YAAY1kC,SAAUD,EAC9CshC,EAAMR,KAAKoE,mBAAmBza,OAAOlX,EAAQoxB,YAAY3kC,GAAIoiC,EAAOC,OAA8B,IAAII,QAAQC,SACtH,GAA6B,MAAzBnvB,EAAQqxB,eAAyBrxB,EAAQqxB,cAAc3kC,OACvD,IAASD,EAAI,EAAGA,EAAIuT,EAAQqxB,cAAc3kC,SAAUD,EAChDshC,EAAMR,KAAKqE,uBAAuB1a,OAAOlX,EAAQqxB,cAAc5kC,GAAIoiC,EAAOC,OAA+B,KAAKI,QAAQC,SAC9H,OAAON,GAYXsC,EAAW9B,gBAAkB,SAAyBrvB,EAAS6uB,GAC3D,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCgC,EAAW74B,OAAS,SAAgBg3B,EAAQ5iC,GAClC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAK4D,WACrF7B,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQsxB,UAAYhC,EAAON,QAC3B,MACJ,KAAK,EACKhvB,EAAQoxB,aAAepxB,EAAQoxB,YAAY1kC,SAC7CsT,EAAQoxB,YAAc,IAC1BpxB,EAAQoxB,YAAYxkC,KAAKmhC,EAAMR,KAAKoE,mBAAmBr5B,OAAOg3B,EAAQA,EAAOR,WAC7E,MACJ,KAAK,EACD9uB,EAAQuxB,aAAejC,EAAOxY,SAC9B,MACJ,KAAK,EACD9W,EAAQwxB,gBAAkBlC,EAAOxY,SACjC,MACJ,KAAK,EACD9W,EAAQkxB,OAAS5B,EAAOxY,SACxB,MACJ,KAAK,EACD9W,EAAQyxB,aAAenC,EAAON,QAC9B,MACJ,KAAK,EACDhvB,EAAQ0uB,UAAYY,EAAOxY,SAC3B,MACJ,KAAK,EACD9W,EAAQ0xB,MAAQ3D,EAAMR,KAAK6B,WAAW92B,OAAOg3B,EAAQA,EAAOR,UAC5D,MACJ,KAAK,GACK9uB,EAAQqxB,eAAiBrxB,EAAQqxB,cAAc3kC,SACjDsT,EAAQqxB,cAAgB,IAC5BrxB,EAAQqxB,cAAczkC,KAAKmhC,EAAMR,KAAKqE,uBAAuBt5B,OAAOg3B,EAAQA,EAAOR,WACnF,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaXmxB,EAAWzB,gBAAkB,SAAyBJ,GAGlD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtCqC,EAAWxB,OAAS,SAAgB3vB,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQsxB,WAAqBtxB,EAAQnP,eAAe,gBAC/Cg9B,EAAMgC,UAAU7vB,EAAQsxB,YAAgBtxB,EAAQsxB,WAAazD,EAAMgC,UAAU7vB,EAAQsxB,UAAUxU,MAAQ+Q,EAAMgC,UAAU7vB,EAAQsxB,UAAUvU,OAC1I,MAAO,mCACf,GAA2B,MAAvB/c,EAAQoxB,aAAuBpxB,EAAQnP,eAAe,eAAgB,CACtE,IAAK/B,MAAMC,QAAQiR,EAAQoxB,aACvB,MAAO,8BACX,IAAK,IAAI3kC,EAAI,EAAGA,EAAIuT,EAAQoxB,YAAY1kC,SAAUD,EAE9C,GADIyJ,EAAQ63B,EAAMR,KAAKoE,mBAAmBhC,OAAO3vB,EAAQoxB,YAAY3kC,IAEjE,MAAO,eAAiByJ,EAGpC,GAA4B,MAAxB8J,EAAQuxB,cAAwBvxB,EAAQnP,eAAe,kBAClDg9B,EAAM+B,SAAS5vB,EAAQuxB,cACxB,MAAO,gCACf,GAA+B,MAA3BvxB,EAAQwxB,iBAA2BxxB,EAAQnP,eAAe,qBACrDg9B,EAAM+B,SAAS5vB,EAAQwxB,iBACxB,MAAO,mCACf,GAAsB,MAAlBxxB,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,YAC5Cg9B,EAAM+B,SAAS5vB,EAAQkxB,QACxB,MAAO,0BACf,GAA4B,MAAxBlxB,EAAQyxB,cAAwBzxB,EAAQnP,eAAe,mBAClDg9B,EAAMgC,UAAU7vB,EAAQyxB,eAAmBzxB,EAAQyxB,cAAgB5D,EAAMgC,UAAU7vB,EAAQyxB,aAAa3U,MAAQ+Q,EAAMgC,UAAU7vB,EAAQyxB,aAAa1U,OACtJ,MAAO,sCACf,GAAyB,MAArB/c,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eAC/Cg9B,EAAM+B,SAAS5vB,EAAQ0uB,WACxB,MAAO,6BACf,GAAqB,MAAjB1uB,EAAQ0xB,OAAiB1xB,EAAQnP,eAAe,WAC5CqF,EAAQ63B,EAAMR,KAAK6B,WAAWO,OAAO3vB,EAAQ0xB,QAE7C,MAAO,SAAWx7B,EAE1B,GAA6B,MAAzB8J,EAAQqxB,eAAyBrxB,EAAQnP,eAAe,iBAAkB,CAC1E,IAAK/B,MAAMC,QAAQiR,EAAQqxB,eACvB,MAAO,gCACX,IAAS5kC,EAAI,EAAGA,EAAIuT,EAAQqxB,cAAc3kC,SAAUD,EAAG,CACnD,IAAIyJ,EACJ,GADIA,EAAQ63B,EAAMR,KAAKqE,uBAAuBjC,OAAO3vB,EAAQqxB,cAAc5kC,IAEvE,MAAO,iBAAmByJ,GAGtC,OAAO,MAWXi7B,EAAWrB,WAAa,SAAoBC,GACxC,GAAIA,aAAkBhC,EAAMR,KAAK4D,WAC7B,OAAOpB,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAK4D,WAU7B,GATwB,MAApBpB,EAAOuB,YACHzD,EAAMhR,MACL7c,EAAQsxB,UAAYzD,EAAMhR,KAAK2K,UAAUuI,EAAOuB,YAAY5L,UAAW,EACvC,iBAArBqK,EAAOuB,UACnBtxB,EAAQsxB,UAAYlK,SAAS2I,EAAOuB,UAAW,IACd,iBAArBvB,EAAOuB,UACnBtxB,EAAQsxB,UAAYvB,EAAOuB,UACM,iBAArBvB,EAAOuB,YACnBtxB,EAAQsxB,UAAY,IAAIzD,EAAMmC,SAASD,EAAOuB,UAAUxU,MAAQ,EAAGiT,EAAOuB,UAAUvU,OAAS,GAAGiL,aACpG+H,EAAOqB,YAAa,CACpB,IAAKtiC,MAAMC,QAAQghC,EAAOqB,aACtB,MAAM/kC,UAAU,gDACpB2T,EAAQoxB,YAAc,GACtB,IAAK,IAAI3kC,EAAI,EAAGA,EAAIsjC,EAAOqB,YAAY1kC,SAAUD,EAAG,CAChD,GAAqC,iBAA1BsjC,EAAOqB,YAAY3kC,GAC1B,MAAMJ,UAAU,iDACpB2T,EAAQoxB,YAAY3kC,GAAKshC,EAAMR,KAAKoE,mBAAmB7B,WAAWC,EAAOqB,YAAY3kC,KAoB7F,GAjB2B,MAAvBsjC,EAAOwB,eACPvxB,EAAQuxB,aAAe74B,OAAOq3B,EAAOwB,eACX,MAA1BxB,EAAOyB,kBACPxxB,EAAQwxB,gBAAkB94B,OAAOq3B,EAAOyB,kBACvB,MAAjBzB,EAAOmB,SACPlxB,EAAQkxB,OAASx4B,OAAOq3B,EAAOmB,SACR,MAAvBnB,EAAO0B,eACH5D,EAAMhR,MACL7c,EAAQyxB,aAAe5D,EAAMhR,KAAK2K,UAAUuI,EAAO0B,eAAe/L,UAAW,EAC1C,iBAAxBqK,EAAO0B,aACnBzxB,EAAQyxB,aAAerK,SAAS2I,EAAO0B,aAAc,IACjB,iBAAxB1B,EAAO0B,aACnBzxB,EAAQyxB,aAAe1B,EAAO0B,aACM,iBAAxB1B,EAAO0B,eACnBzxB,EAAQyxB,aAAe,IAAI5D,EAAMmC,SAASD,EAAO0B,aAAa3U,MAAQ,EAAGiT,EAAO0B,aAAa1U,OAAS,GAAGiL,aACzF,MAApB+H,EAAOrB,YACP1uB,EAAQ0uB,UAAYh2B,OAAOq3B,EAAOrB,YAClB,MAAhBqB,EAAO2B,MAAe,CACtB,GAA4B,iBAAjB3B,EAAO2B,MACd,MAAMrlC,UAAU,2CACpB2T,EAAQ0xB,MAAQ3D,EAAMR,KAAK6B,WAAWU,WAAWC,EAAO2B,OAE5D,GAAI3B,EAAOsB,cAAe,CACtB,IAAKviC,MAAMC,QAAQghC,EAAOsB,eACtB,MAAMhlC,UAAU,kDAEpB,IADA2T,EAAQqxB,cAAgB,GACf5kC,EAAI,EAAGA,EAAIsjC,EAAOsB,cAAc3kC,SAAUD,EAAG,CAClD,GAAuC,iBAA5BsjC,EAAOsB,cAAc5kC,GAC5B,MAAMJ,UAAU,mDACpB2T,EAAQqxB,cAAc5kC,GAAKshC,EAAMR,KAAKqE,uBAAuB9B,WAAWC,EAAOsB,cAAc5kC,KAGrG,OAAOuT,GAYXmxB,EAAWlB,SAAW,SAAkBjwB,EAAShQ,GACxCA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAKb,IAJI//B,EAAQkgC,QAAUlgC,EAAQmgC,YAC1BJ,EAAOqB,YAAc,GACrBrB,EAAOsB,cAAgB,IAEvBrhC,EAAQmgC,SAAU,CAClB,GAAItC,EAAMhR,KAAM,CACZ,IAAIuT,EAAO,IAAIvC,EAAMhR,KAAK,EAAG,GAAG,GAChCkT,EAAOuB,UAAYthC,EAAQqgC,QAAU33B,OAAS03B,EAAKvnB,WAAa7Y,EAAQqgC,QAAU/gC,OAAS8gC,EAAKpI,WAAaoI,OAE7GL,EAAOuB,UAAYthC,EAAQqgC,QAAU33B,OAAS,IAAM,EACxDq3B,EAAOwB,aAAe,GACtBxB,EAAOyB,gBAAkB,GACzBzB,EAAOmB,OAAS,GACZrD,EAAMhR,MACFuT,EAAO,IAAIvC,EAAMhR,KAAK,EAAG,GAAG,GAChCkT,EAAO0B,aAAezhC,EAAQqgC,QAAU33B,OAAS03B,EAAKvnB,WAAa7Y,EAAQqgC,QAAU/gC,OAAS8gC,EAAKpI,WAAaoI,GAEhHL,EAAO0B,aAAezhC,EAAQqgC,QAAU33B,OAAS,IAAM,EAC3Dq3B,EAAOrB,UAAY,GACnBqB,EAAO2B,MAAQ,KAsBnB,GApByB,MAArB1xB,EAAQsxB,WAAqBtxB,EAAQnP,eAAe,eACnB,iBAAtBmP,EAAQsxB,UACfvB,EAAOuB,UAAYthC,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQsxB,WAAatxB,EAAQsxB,UAElFvB,EAAOuB,UAAYthC,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQsxB,WAAathC,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQsxB,UAAUxU,MAAQ,EAAG9c,EAAQsxB,UAAUvU,OAAS,GAAGiL,WAAahoB,EAAQsxB,WAChN,MAAxBtxB,EAAQuxB,cAAwBvxB,EAAQnP,eAAe,kBACvDk/B,EAAOwB,aAAevxB,EAAQuxB,cACH,MAA3BvxB,EAAQwxB,iBAA2BxxB,EAAQnP,eAAe,qBAC1Dk/B,EAAOyB,gBAAkBxxB,EAAQwxB,iBACf,MAAlBxxB,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,YACjDk/B,EAAOmB,OAASlxB,EAAQkxB,QACA,MAAxBlxB,EAAQyxB,cAAwBzxB,EAAQnP,eAAe,kBACnB,iBAAzBmP,EAAQyxB,aACf1B,EAAO0B,aAAezhC,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQyxB,cAAgBzxB,EAAQyxB,aAExF1B,EAAO0B,aAAezhC,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQyxB,cAAgBzhC,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQyxB,aAAa3U,MAAQ,EAAG9c,EAAQyxB,aAAa1U,OAAS,GAAGiL,WAAahoB,EAAQyxB,cAC/N,MAArBzxB,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eACpDk/B,EAAOrB,UAAY1uB,EAAQ0uB,WACV,MAAjB1uB,EAAQ0xB,OAAiB1xB,EAAQnP,eAAe,WAChDk/B,EAAO2B,MAAQ3D,EAAMR,KAAK6B,WAAWa,SAASjwB,EAAQ0xB,MAAO1hC,IAC7DgQ,EAAQoxB,aAAepxB,EAAQoxB,YAAY1kC,OAAQ,CACnDqjC,EAAOqB,YAAc,GACrB,IAAK,IAAIh5B,EAAI,EAAGA,EAAI4H,EAAQoxB,YAAY1kC,SAAU0L,EAC9C23B,EAAOqB,YAAYh5B,GAAK21B,EAAMR,KAAKoE,mBAAmB1B,SAASjwB,EAAQoxB,YAAYh5B,GAAIpI,GAE/F,GAAIgQ,EAAQqxB,eAAiBrxB,EAAQqxB,cAAc3kC,OAE/C,IADAqjC,EAAOsB,cAAgB,GACdj5B,EAAI,EAAGA,EAAI4H,EAAQqxB,cAAc3kC,SAAU0L,EAChD23B,EAAOsB,cAAcj5B,GAAK21B,EAAMR,KAAKqE,uBAAuB3B,SAASjwB,EAAQqxB,cAAcj5B,GAAIpI,GAEvG,OAAO+/B,GAUXoB,EAAWxZ,UAAU4N,OAAS,WAC1B,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDS,EAtbO,GAyblB5D,EAAKqE,uBAAyB,WAkB1B,SAASA,EAAuBzD,GAC5B,GAAIA,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAyLhD,OAhLAmlC,EAAuBja,UAAU/mB,IAAM,GAQvCghC,EAAuBja,UAAUvqB,MAAQ,GAUzCwkC,EAAuB5U,OAAS,SAAgBmR,GAC5C,OAAO,IAAIyD,EAAuBzD,IAYtCyD,EAAuB1a,OAAS,SAAgBlX,EAAS6uB,GAOrD,OANKA,IACDA,EAASlB,EAAQ3Q,UACF,MAAfhd,EAAQpP,KAAeoP,EAAQnP,eAAe,QAC9Cg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQpP,KACvC,MAAjBoP,EAAQ5S,OAAiB4S,EAAQnP,eAAe,UAChDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQ5S,OACrDyhC,GAYX+C,EAAuBvC,gBAAkB,SAAyBrvB,EAAS6uB,GACvE,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCyC,EAAuBt5B,OAAS,SAAgBg3B,EAAQ5iC,GAC9C4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAKqE,uBACrFtC,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQpP,IAAM0+B,EAAOxY,SACrB,MACJ,KAAK,EACD9W,EAAQ5S,MAAQkiC,EAAOxY,SACvB,MACJ,QACIwY,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaX4xB,EAAuBlC,gBAAkB,SAAyBJ,GAG9D,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtC8C,EAAuBjC,OAAS,SAAgB3vB,GAC5C,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACQ,MAAfA,EAAQpP,KAAeoP,EAAQnP,eAAe,SACzCg9B,EAAM+B,SAAS5vB,EAAQpP,KACjB,uBACM,MAAjBoP,EAAQ5S,OAAiB4S,EAAQnP,eAAe,WAC3Cg9B,EAAM+B,SAAS5vB,EAAQ5S,OACjB,yBACR,MAWXwkC,EAAuB9B,WAAa,SAAoBC,GACpD,GAAIA,aAAkBhC,EAAMR,KAAKqE,uBAC7B,OAAO7B,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAKqE,uBAK7B,OAJkB,MAAd7B,EAAOn/B,MACPoP,EAAQpP,IAAM8H,OAAOq3B,EAAOn/B,MACZ,MAAhBm/B,EAAO3iC,QACP4S,EAAQ5S,MAAQsL,OAAOq3B,EAAO3iC,QAC3B4S,GAYX4xB,EAAuB3B,SAAW,SAAkBjwB,EAAShQ,GACpDA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GASb,OARI//B,EAAQmgC,WACRJ,EAAOn/B,IAAM,GACbm/B,EAAO3iC,MAAQ,IAEA,MAAf4S,EAAQpP,KAAeoP,EAAQnP,eAAe,SAC9Ck/B,EAAOn/B,IAAMoP,EAAQpP,KACJ,MAAjBoP,EAAQ5S,OAAiB4S,EAAQnP,eAAe,WAChDk/B,EAAO3iC,MAAQ4S,EAAQ5S,OACpB2iC,GAUX6B,EAAuBja,UAAU4N,OAAS,WACtC,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDkB,EA/MmB,GAkN9BrE,EAAKsE,iBAAmB,WAkBpB,SAASA,EAAiB1D,GAEtB,GADAphC,KAAK+kC,0BAA4B,GAC7B3D,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KA6MhD,OApMAolC,EAAiBla,UAAUoa,WAAa,GAQxCF,EAAiBla,UAAUma,0BAA4BjE,EAAMe,WAU7DiD,EAAiB7U,OAAS,SAAgBmR,GACtC,OAAO,IAAI0D,EAAiB1D,IAYhC0D,EAAiB3a,OAAS,SAAgBlX,EAAS6uB,GAK/C,GAJKA,IACDA,EAASlB,EAAQ3Q,UACK,MAAtBhd,EAAQ+xB,YAAsB/xB,EAAQnP,eAAe,eACrDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQ+xB,YACnB,MAArC/xB,EAAQ8xB,2BAAqC9xB,EAAQ8xB,0BAA0BplC,OAC/E,IAAK,IAAID,EAAI,EAAGA,EAAIuT,EAAQ8xB,0BAA0BplC,SAAUD,EAC5DshC,EAAMR,KAAKqE,uBAAuB1a,OAAOlX,EAAQ8xB,0BAA0BrlC,GAAIoiC,EAAOC,OAA8B,IAAII,QAAQC,SACxI,OAAON,GAYXgD,EAAiBxC,gBAAkB,SAAyBrvB,EAAS6uB,GACjE,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxC0C,EAAiBv5B,OAAS,SAAgBg3B,EAAQ5iC,GACxC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAKsE,iBACrFvC,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQ+xB,WAAazC,EAAOxY,SAC5B,MACJ,KAAK,EACK9W,EAAQ8xB,2BAA6B9xB,EAAQ8xB,0BAA0BplC,SACzEsT,EAAQ8xB,0BAA4B,IACxC9xB,EAAQ8xB,0BAA0BllC,KAAKmhC,EAAMR,KAAKqE,uBAAuBt5B,OAAOg3B,EAAQA,EAAOR,WAC/F,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaX6xB,EAAiBnC,gBAAkB,SAAyBJ,GAGxD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtC+C,EAAiBlC,OAAS,SAAgB3vB,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA0B,MAAtBA,EAAQ+xB,YAAsB/xB,EAAQnP,eAAe,gBAChDg9B,EAAM+B,SAAS5vB,EAAQ+xB,YACxB,MAAO,8BACf,GAAyC,MAArC/xB,EAAQ8xB,2BAAqC9xB,EAAQnP,eAAe,6BAA8B,CAClG,IAAK/B,MAAMC,QAAQiR,EAAQ8xB,2BACvB,MAAO,4CACX,IAAK,IAAIrlC,EAAI,EAAGA,EAAIuT,EAAQ8xB,0BAA0BplC,SAAUD,EAAG,CAC/D,IAAIyJ,EAAQ63B,EAAMR,KAAKqE,uBAAuBjC,OAAO3vB,EAAQ8xB,0BAA0BrlC,IACvF,GAAIyJ,EACA,MAAO,6BAA+BA,GAGlD,OAAO,MAWX27B,EAAiB/B,WAAa,SAAoBC,GAC9C,GAAIA,aAAkBhC,EAAMR,KAAKsE,iBAC7B,OAAO9B,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAKsE,iBAG7B,GAFyB,MAArB9B,EAAOgC,aACP/xB,EAAQ+xB,WAAar5B,OAAOq3B,EAAOgC,aACnChC,EAAO+B,0BAA2B,CAClC,IAAKhjC,MAAMC,QAAQghC,EAAO+B,2BACtB,MAAMzlC,UAAU,oEACpB2T,EAAQ8xB,0BAA4B,GACpC,IAAK,IAAIrlC,EAAI,EAAGA,EAAIsjC,EAAO+B,0BAA0BplC,SAAUD,EAAG,CAC9D,GAAmD,iBAAxCsjC,EAAO+B,0BAA0BrlC,GACxC,MAAMJ,UAAU,qEACpB2T,EAAQ8xB,0BAA0BrlC,GAAKshC,EAAMR,KAAKqE,uBAAuB9B,WAAWC,EAAO+B,0BAA0BrlC,KAG7H,OAAOuT,GAYX6xB,EAAiB5B,SAAW,SAAkBjwB,EAAShQ,GAC9CA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAOb,IANI//B,EAAQkgC,QAAUlgC,EAAQmgC,YAC1BJ,EAAO+B,0BAA4B,IACnC9hC,EAAQmgC,WACRJ,EAAOgC,WAAa,IACE,MAAtB/xB,EAAQ+xB,YAAsB/xB,EAAQnP,eAAe,gBACrDk/B,EAAOgC,WAAa/xB,EAAQ+xB,YAC5B/xB,EAAQ8xB,2BAA6B9xB,EAAQ8xB,0BAA0BplC,OAAQ,CAC/EqjC,EAAO+B,0BAA4B,GACnC,IAAK,IAAI15B,EAAI,EAAGA,EAAI4H,EAAQ8xB,0BAA0BplC,SAAU0L,EAC5D23B,EAAO+B,0BAA0B15B,GAAK21B,EAAMR,KAAKqE,uBAAuB3B,SAASjwB,EAAQ8xB,0BAA0B15B,GAAIpI,GAE/H,OAAO+/B,GAUX8B,EAAiBla,UAAU4N,OAAS,WAChC,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDmB,EApOa,GAuOxBtE,EAAK6B,WAAa,WAwBd,SAASA,EAAWjB,GAOhB,GANAphC,KAAK6H,KAAO,GACZ7H,KAAKilC,YAAc,GACnBjlC,KAAK+jC,MAAQ,GACb/jC,KAAKgkC,OAAS,GACdhkC,KAAKklC,UAAY,GACjBllC,KAAKmlC,uBAAyB,GAC1B/D,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAibhD,OAxaA2iC,EAAWzX,UAAU/iB,KAAOi5B,EAAMe,WAQlCQ,EAAWzX,UAAU3rB,KAAO,GAQ5BojC,EAAWzX,UAAUqa,YAAcnE,EAAMe,WAQzCQ,EAAWzX,UAAU+W,UAAY,GAQjCU,EAAWzX,UAAUmZ,MAAQjD,EAAMe,WAQnCQ,EAAWzX,UAAUoZ,OAASlD,EAAMe,WAQpCQ,EAAWzX,UAAUsa,UAAYpE,EAAMe,WAQvCQ,EAAWzX,UAAUua,uBAAyBrE,EAAMe,WAUpDQ,EAAWpS,OAAS,SAAgBmR,GAChC,OAAO,IAAIiB,EAAWjB,IAY1BiB,EAAWlY,OAAS,SAAgBlX,EAAS6uB,GAGzC,GAFKA,IACDA,EAASlB,EAAQ3Q,UACD,MAAhBhd,EAAQpL,MAAgBoL,EAAQpL,KAAKlI,OACrC,IAAK,IAAID,EAAI,EAAGA,EAAIuT,EAAQpL,KAAKlI,SAAUD,EACvCshC,EAAMR,KAAKsD,UAAU3Z,OAAOlX,EAAQpL,KAAKnI,GAAIoiC,EAAOC,OAA8B,IAAII,QAAQC,SAGtG,GAFoB,MAAhBnvB,EAAQhU,MAAgBgU,EAAQnP,eAAe,SAC/Cg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQhU,MACjC,MAAvBgU,EAAQgyB,aAAuBhyB,EAAQgyB,YAAYtlC,OACnD,IAASD,EAAI,EAAGA,EAAIuT,EAAQgyB,YAAYtlC,SAAUD,EAC9CshC,EAAMR,KAAK0B,YAAY/X,OAAOlX,EAAQgyB,YAAYvlC,GAAIoiC,EAAOC,OAA8B,IAAII,QAAQC,SAG/G,GAFyB,MAArBnvB,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,cACpDg+B,EAAOC,OAA+B,IAAIhY,OAAO9W,EAAQ0uB,WACxC,MAAjB1uB,EAAQ8wB,OAAiB9wB,EAAQ8wB,MAAMpkC,OACvC,IAASD,EAAI,EAAGA,EAAIuT,EAAQ8wB,MAAMpkC,SAAUD,EACxCshC,EAAMR,KAAKoD,eAAezZ,OAAOlX,EAAQ8wB,MAAMrkC,GAAIoiC,EAAOC,OAA+B,IAAII,QAAQC,SAC7G,GAAsB,MAAlBnvB,EAAQ+wB,QAAkB/wB,EAAQ+wB,OAAOrkC,OACzC,IAASD,EAAI,EAAGA,EAAIuT,EAAQ+wB,OAAOrkC,SAAUD,EACzCshC,EAAMR,KAAKoD,eAAezZ,OAAOlX,EAAQ+wB,OAAOtkC,GAAIoiC,EAAOC,OAA+B,IAAII,QAAQC,SAC9G,GAAyB,MAArBnvB,EAAQiyB,WAAqBjyB,EAAQiyB,UAAUvlC,OAC/C,IAASD,EAAI,EAAGA,EAAIuT,EAAQiyB,UAAUvlC,SAAUD,EAC5CshC,EAAMR,KAAKoD,eAAezZ,OAAOlX,EAAQiyB,UAAUxlC,GAAIoiC,EAAOC,OAA+B,KAAKI,QAAQC,SAClH,GAAsC,MAAlCnvB,EAAQkyB,wBAAkClyB,EAAQkyB,uBAAuBxlC,OACzE,IAASD,EAAI,EAAGA,EAAIuT,EAAQkyB,uBAAuBxlC,SAAUD,EACzDshC,EAAMR,KAAKsE,iBAAiB3a,OAAOlX,EAAQkyB,uBAAuBzlC,GAAIoiC,EAAOC,OAA+B,KAAKI,QAAQC,SACjI,OAAON,GAYXO,EAAWC,gBAAkB,SAAyBrvB,EAAS6uB,GAC3D,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCC,EAAW92B,OAAS,SAAgBg3B,EAAQ5iC,GAClC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAK6B,WACrFE,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACKvvB,EAAQpL,MAAQoL,EAAQpL,KAAKlI,SAC/BsT,EAAQpL,KAAO,IACnBoL,EAAQpL,KAAKhI,KAAKmhC,EAAMR,KAAKsD,UAAUv4B,OAAOg3B,EAAQA,EAAOR,WAC7D,MACJ,KAAK,EACD9uB,EAAQhU,KAAOsjC,EAAOxY,SACtB,MACJ,KAAK,EACK9W,EAAQgyB,aAAehyB,EAAQgyB,YAAYtlC,SAC7CsT,EAAQgyB,YAAc,IAC1BhyB,EAAQgyB,YAAYplC,KAAKmhC,EAAMR,KAAK0B,YAAY32B,OAAOg3B,EAAQA,EAAOR,WACtE,MACJ,KAAK,GACD9uB,EAAQ0uB,UAAYY,EAAOxY,SAC3B,MACJ,KAAK,GACK9W,EAAQ8wB,OAAS9wB,EAAQ8wB,MAAMpkC,SACjCsT,EAAQ8wB,MAAQ,IACpB9wB,EAAQ8wB,MAAMlkC,KAAKmhC,EAAMR,KAAKoD,eAAer4B,OAAOg3B,EAAQA,EAAOR,WACnE,MACJ,KAAK,GACK9uB,EAAQ+wB,QAAU/wB,EAAQ+wB,OAAOrkC,SACnCsT,EAAQ+wB,OAAS,IACrB/wB,EAAQ+wB,OAAOnkC,KAAKmhC,EAAMR,KAAKoD,eAAer4B,OAAOg3B,EAAQA,EAAOR,WACpE,MACJ,KAAK,GACK9uB,EAAQiyB,WAAajyB,EAAQiyB,UAAUvlC,SACzCsT,EAAQiyB,UAAY,IACxBjyB,EAAQiyB,UAAUrlC,KAAKmhC,EAAMR,KAAKoD,eAAer4B,OAAOg3B,EAAQA,EAAOR,WACvE,MACJ,KAAK,GACK9uB,EAAQkyB,wBAA0BlyB,EAAQkyB,uBAAuBxlC,SACnEsT,EAAQkyB,uBAAyB,IACrClyB,EAAQkyB,uBAAuBtlC,KAAKmhC,EAAMR,KAAKsE,iBAAiBv5B,OAAOg3B,EAAQA,EAAOR,WACtF,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaXovB,EAAWM,gBAAkB,SAAyBJ,GAGlD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtCM,EAAWO,OAAS,SAAgB3vB,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQpL,MAAgBoL,EAAQnP,eAAe,QAAS,CACxD,IAAK/B,MAAMC,QAAQiR,EAAQpL,MACvB,MAAO,uBACX,IAAK,IAAInI,EAAI,EAAGA,EAAIuT,EAAQpL,KAAKlI,SAAUD,EAEvC,GADIyJ,EAAQ63B,EAAMR,KAAKsD,UAAUlB,OAAO3vB,EAAQpL,KAAKnI,IAEjD,MAAO,QAAUyJ,EAG7B,GAAoB,MAAhB8J,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC1Cg9B,EAAM+B,SAAS5vB,EAAQhU,MACxB,MAAO,wBACf,GAA2B,MAAvBgU,EAAQgyB,aAAuBhyB,EAAQnP,eAAe,eAAgB,CACtE,IAAK/B,MAAMC,QAAQiR,EAAQgyB,aACvB,MAAO,8BACX,IAASvlC,EAAI,EAAGA,EAAIuT,EAAQgyB,YAAYtlC,SAAUD,EAE9C,GADIyJ,EAAQ63B,EAAMR,KAAK0B,YAAYU,OAAO3vB,EAAQgyB,YAAYvlC,IAE1D,MAAO,eAAiByJ,EAGpC,GAAyB,MAArB8J,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eAC/Cg9B,EAAM+B,SAAS5vB,EAAQ0uB,WACxB,MAAO,6BACf,GAAqB,MAAjB1uB,EAAQ8wB,OAAiB9wB,EAAQnP,eAAe,SAAU,CAC1D,IAAK/B,MAAMC,QAAQiR,EAAQ8wB,OACvB,MAAO,wBACX,IAASrkC,EAAI,EAAGA,EAAIuT,EAAQ8wB,MAAMpkC,SAAUD,EAExC,GADIyJ,EAAQ63B,EAAMR,KAAKoD,eAAehB,OAAO3vB,EAAQ8wB,MAAMrkC,IAEvD,MAAO,SAAWyJ,EAG9B,GAAsB,MAAlB8J,EAAQ+wB,QAAkB/wB,EAAQnP,eAAe,UAAW,CAC5D,IAAK/B,MAAMC,QAAQiR,EAAQ+wB,QACvB,MAAO,yBACX,IAAStkC,EAAI,EAAGA,EAAIuT,EAAQ+wB,OAAOrkC,SAAUD,EAEzC,GADIyJ,EAAQ63B,EAAMR,KAAKoD,eAAehB,OAAO3vB,EAAQ+wB,OAAOtkC,IAExD,MAAO,UAAYyJ,EAG/B,GAAyB,MAArB8J,EAAQiyB,WAAqBjyB,EAAQnP,eAAe,aAAc,CAClE,IAAK/B,MAAMC,QAAQiR,EAAQiyB,WACvB,MAAO,4BACX,IAASxlC,EAAI,EAAGA,EAAIuT,EAAQiyB,UAAUvlC,SAAUD,EAE5C,GADIyJ,EAAQ63B,EAAMR,KAAKoD,eAAehB,OAAO3vB,EAAQiyB,UAAUxlC,IAE3D,MAAO,aAAeyJ,EAGlC,GAAsC,MAAlC8J,EAAQkyB,wBAAkClyB,EAAQnP,eAAe,0BAA2B,CAC5F,IAAK/B,MAAMC,QAAQiR,EAAQkyB,wBACvB,MAAO,yCACX,IAASzlC,EAAI,EAAGA,EAAIuT,EAAQkyB,uBAAuBxlC,SAAUD,EAAG,CAC5D,IAAIyJ,EACJ,GADIA,EAAQ63B,EAAMR,KAAKsE,iBAAiBlC,OAAO3vB,EAAQkyB,uBAAuBzlC,IAE1E,MAAO,0BAA4ByJ,GAG/C,OAAO,MAWXk5B,EAAWU,WAAa,SAAoBC,GACxC,GAAIA,aAAkBhC,EAAMR,KAAK6B,WAC7B,OAAOW,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAK6B,WAC7B,GAAIW,EAAOn7B,KAAM,CACb,IAAK9F,MAAMC,QAAQghC,EAAOn7B,MACtB,MAAMvI,UAAU,yCACpB2T,EAAQpL,KAAO,GACf,IAAK,IAAInI,EAAI,EAAGA,EAAIsjC,EAAOn7B,KAAKlI,SAAUD,EAAG,CACzC,GAA8B,iBAAnBsjC,EAAOn7B,KAAKnI,GACnB,MAAMJ,UAAU,0CACpB2T,EAAQpL,KAAKnI,GAAKshC,EAAMR,KAAKsD,UAAUf,WAAWC,EAAOn7B,KAAKnI,KAKtE,GAFmB,MAAfsjC,EAAO/jC,OACPgU,EAAQhU,KAAO0M,OAAOq3B,EAAO/jC,OAC7B+jC,EAAOiC,YAAa,CACpB,IAAKljC,MAAMC,QAAQghC,EAAOiC,aACtB,MAAM3lC,UAAU,gDAEpB,IADA2T,EAAQgyB,YAAc,GACbvlC,EAAI,EAAGA,EAAIsjC,EAAOiC,YAAYtlC,SAAUD,EAAG,CAChD,GAAqC,iBAA1BsjC,EAAOiC,YAAYvlC,GAC1B,MAAMJ,UAAU,iDACpB2T,EAAQgyB,YAAYvlC,GAAKshC,EAAMR,KAAK0B,YAAYa,WAAWC,EAAOiC,YAAYvlC,KAKtF,GAFwB,MAApBsjC,EAAOrB,YACP1uB,EAAQ0uB,UAAYh2B,OAAOq3B,EAAOrB,YAClCqB,EAAOe,MAAO,CACd,IAAKhiC,MAAMC,QAAQghC,EAAOe,OACtB,MAAMzkC,UAAU,0CAEpB,IADA2T,EAAQ8wB,MAAQ,GACPrkC,EAAI,EAAGA,EAAIsjC,EAAOe,MAAMpkC,SAAUD,EAAG,CAC1C,GAA+B,iBAApBsjC,EAAOe,MAAMrkC,GACpB,MAAMJ,UAAU,2CACpB2T,EAAQ8wB,MAAMrkC,GAAKshC,EAAMR,KAAKoD,eAAeb,WAAWC,EAAOe,MAAMrkC,KAG7E,GAAIsjC,EAAOgB,OAAQ,CACf,IAAKjiC,MAAMC,QAAQghC,EAAOgB,QACtB,MAAM1kC,UAAU,2CAEpB,IADA2T,EAAQ+wB,OAAS,GACRtkC,EAAI,EAAGA,EAAIsjC,EAAOgB,OAAOrkC,SAAUD,EAAG,CAC3C,GAAgC,iBAArBsjC,EAAOgB,OAAOtkC,GACrB,MAAMJ,UAAU,4CACpB2T,EAAQ+wB,OAAOtkC,GAAKshC,EAAMR,KAAKoD,eAAeb,WAAWC,EAAOgB,OAAOtkC,KAG/E,GAAIsjC,EAAOkC,UAAW,CAClB,IAAKnjC,MAAMC,QAAQghC,EAAOkC,WACtB,MAAM5lC,UAAU,8CAEpB,IADA2T,EAAQiyB,UAAY,GACXxlC,EAAI,EAAGA,EAAIsjC,EAAOkC,UAAUvlC,SAAUD,EAAG,CAC9C,GAAmC,iBAAxBsjC,EAAOkC,UAAUxlC,GACxB,MAAMJ,UAAU,+CACpB2T,EAAQiyB,UAAUxlC,GAAKshC,EAAMR,KAAKoD,eAAeb,WAAWC,EAAOkC,UAAUxlC,KAGrF,GAAIsjC,EAAOmC,uBAAwB,CAC/B,IAAKpjC,MAAMC,QAAQghC,EAAOmC,wBACtB,MAAM7lC,UAAU,2DAEpB,IADA2T,EAAQkyB,uBAAyB,GACxBzlC,EAAI,EAAGA,EAAIsjC,EAAOmC,uBAAuBxlC,SAAUD,EAAG,CAC3D,GAAgD,iBAArCsjC,EAAOmC,uBAAuBzlC,GACrC,MAAMJ,UAAU,4DACpB2T,EAAQkyB,uBAAuBzlC,GAAKshC,EAAMR,KAAKsE,iBAAiB/B,WAAWC,EAAOmC,uBAAuBzlC,KAGjH,OAAOuT,GAYXovB,EAAWa,SAAW,SAAkBjwB,EAAShQ,GACxCA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAab,IAZI//B,EAAQkgC,QAAUlgC,EAAQmgC,YAC1BJ,EAAOn7B,KAAO,GACdm7B,EAAOiC,YAAc,GACrBjC,EAAOe,MAAQ,GACff,EAAOgB,OAAS,GAChBhB,EAAOkC,UAAY,GACnBlC,EAAOmC,uBAAyB,IAEhCliC,EAAQmgC,WACRJ,EAAO/jC,KAAO,GACd+jC,EAAOrB,UAAY,IAEnB1uB,EAAQpL,MAAQoL,EAAQpL,KAAKlI,OAAQ,CACrCqjC,EAAOn7B,KAAO,GACd,IAAK,IAAIwD,EAAI,EAAGA,EAAI4H,EAAQpL,KAAKlI,SAAU0L,EACvC23B,EAAOn7B,KAAKwD,GAAK21B,EAAMR,KAAKsD,UAAUZ,SAASjwB,EAAQpL,KAAKwD,GAAIpI,GAIxE,GAFoB,MAAhBgQ,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC/Ck/B,EAAO/jC,KAAOgU,EAAQhU,MACtBgU,EAAQgyB,aAAehyB,EAAQgyB,YAAYtlC,OAE3C,IADAqjC,EAAOiC,YAAc,GACZ55B,EAAI,EAAGA,EAAI4H,EAAQgyB,YAAYtlC,SAAU0L,EAC9C23B,EAAOiC,YAAY55B,GAAK21B,EAAMR,KAAK0B,YAAYgB,SAASjwB,EAAQgyB,YAAY55B,GAAIpI,GAIxF,GAFyB,MAArBgQ,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eACpDk/B,EAAOrB,UAAY1uB,EAAQ0uB,WAC3B1uB,EAAQ8wB,OAAS9wB,EAAQ8wB,MAAMpkC,OAE/B,IADAqjC,EAAOe,MAAQ,GACN14B,EAAI,EAAGA,EAAI4H,EAAQ8wB,MAAMpkC,SAAU0L,EACxC23B,EAAOe,MAAM14B,GAAK21B,EAAMR,KAAKoD,eAAeV,SAASjwB,EAAQ8wB,MAAM14B,GAAIpI,GAE/E,GAAIgQ,EAAQ+wB,QAAU/wB,EAAQ+wB,OAAOrkC,OAEjC,IADAqjC,EAAOgB,OAAS,GACP34B,EAAI,EAAGA,EAAI4H,EAAQ+wB,OAAOrkC,SAAU0L,EACzC23B,EAAOgB,OAAO34B,GAAK21B,EAAMR,KAAKoD,eAAeV,SAASjwB,EAAQ+wB,OAAO34B,GAAIpI,GAEjF,GAAIgQ,EAAQiyB,WAAajyB,EAAQiyB,UAAUvlC,OAEvC,IADAqjC,EAAOkC,UAAY,GACV75B,EAAI,EAAGA,EAAI4H,EAAQiyB,UAAUvlC,SAAU0L,EAC5C23B,EAAOkC,UAAU75B,GAAK21B,EAAMR,KAAKoD,eAAeV,SAASjwB,EAAQiyB,UAAU75B,GAAIpI,GAEvF,GAAIgQ,EAAQkyB,wBAA0BlyB,EAAQkyB,uBAAuBxlC,OAEjE,IADAqjC,EAAOmC,uBAAyB,GACvB95B,EAAI,EAAGA,EAAI4H,EAAQkyB,uBAAuBxlC,SAAU0L,EACzD23B,EAAOmC,uBAAuB95B,GAAK21B,EAAMR,KAAKsE,iBAAiB5B,SAASjwB,EAAQkyB,uBAAuB95B,GAAIpI,GAEnH,OAAO+/B,GAUXX,EAAWzX,UAAU4N,OAAS,WAC1B,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDtB,EAndO,GAsdlB7B,EAAK0B,YAAc,WA8Bf,SAASA,EAAYd,GASjB,GARAphC,KAAK8B,KAAO,GACZ9B,KAAKolC,UAAY,GACjBplC,KAAKqlC,UAAY,GACjBrlC,KAAKslC,WAAa,GAClBtlC,KAAKulC,UAAY,GACjBvlC,KAAKwlC,aAAe,GACpBxlC,KAAKylC,WAAa,GAClBzlC,KAAK0lC,WAAa,GACdtE,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAw8BhD,OA/7BAwiC,EAAYtX,UAAU9oB,KAAOg/B,EAAMe,WAQnCK,EAAYtX,UAAU+a,SAAW,EAQjCzD,EAAYtX,UAAUgb,QAAU,KAQhC1D,EAAYtX,UAAUwa,UAAYtE,EAAMe,WAQxCK,EAAYtX,UAAUya,UAAYvE,EAAMe,WAQxCK,EAAYtX,UAAU0a,WAAaxE,EAAMe,WAQzCK,EAAYtX,UAAU2a,UAAYzE,EAAMe,WAQxCK,EAAYtX,UAAU3rB,KAAO,GAQ7BijC,EAAYtX,UAAU+W,UAAY,GAQlCO,EAAYtX,UAAUib,QAAU/E,EAAMc,UAAU,IAQhDM,EAAYtX,UAAU4a,aAAe1E,EAAMe,WAQ3CK,EAAYtX,UAAUkb,aAAe,EAQrC5D,EAAYtX,UAAU6a,WAAa3E,EAAMe,WAQzCK,EAAYtX,UAAU8a,WAAa5E,EAAMe,WAUzCK,EAAYjS,OAAS,SAAgBmR,GACjC,OAAO,IAAIc,EAAYd,IAY3Bc,EAAY/X,OAAS,SAAgBlX,EAAS6uB,GAG1C,GAFKA,IACDA,EAASlB,EAAQ3Q,UACD,MAAhBhd,EAAQnR,MAAgBmR,EAAQnR,KAAKnC,OAAQ,CAC7CmiC,EAAOC,OAA8B,IAAII,OACzC,IAAK,IAAIziC,EAAI,EAAGA,EAAIuT,EAAQnR,KAAKnC,SAAUD,EACvCoiC,EAAOG,MAAMhvB,EAAQnR,KAAKpC,IAC9BoiC,EAAOM,SAMX,GAJwB,MAApBnvB,EAAQ0yB,UAAoB1yB,EAAQnP,eAAe,aACnDg+B,EAAOC,OAA8B,IAAIrS,MAAMzc,EAAQ0yB,UACpC,MAAnB1yB,EAAQ2yB,SAAmB3yB,EAAQnP,eAAe,YAClDk9B,EAAMR,KAAK0B,YAAY6D,QAAQ5b,OAAOlX,EAAQ2yB,QAAS9D,EAAOC,OAA8B,IAAII,QAAQC,SACnF,MAArBnvB,EAAQmyB,WAAqBnyB,EAAQmyB,UAAUzlC,OAAQ,CAEvD,IADAmiC,EAAOC,OAA8B,IAAII,OAChCziC,EAAI,EAAGA,EAAIuT,EAAQmyB,UAAUzlC,SAAUD,EAC5CoiC,EAAOE,MAAM/uB,EAAQmyB,UAAU1lC,IACnCoiC,EAAOM,SAEX,GAAyB,MAArBnvB,EAAQoyB,WAAqBpyB,EAAQoyB,UAAU1lC,OAAQ,CAEvD,IADAmiC,EAAOC,OAA8B,IAAII,OAChCziC,EAAI,EAAGA,EAAIuT,EAAQoyB,UAAU1lC,SAAUD,EAC5CoiC,EAAOpS,MAAMzc,EAAQoyB,UAAU3lC,IACnCoiC,EAAOM,SAEX,GAA0B,MAAtBnvB,EAAQqyB,YAAsBryB,EAAQqyB,WAAW3lC,OACjD,IAASD,EAAI,EAAGA,EAAIuT,EAAQqyB,WAAW3lC,SAAUD,EAC7CoiC,EAAOC,OAA8B,IAAItQ,MAAMxe,EAAQqyB,WAAW5lC,IAC1E,GAAyB,MAArBuT,EAAQsyB,WAAqBtyB,EAAQsyB,UAAU5lC,OAAQ,CAEvD,IADAmiC,EAAOC,OAA8B,IAAII,OAChCziC,EAAI,EAAGA,EAAIuT,EAAQsyB,UAAU5lC,SAAUD,EAC5CoiC,EAAOG,MAAMhvB,EAAQsyB,UAAU7lC,IACnCoiC,EAAOM,SAMX,GAJoB,MAAhBnvB,EAAQhU,MAAgBgU,EAAQnP,eAAe,SAC/Cg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQhU,MACrC,MAAnBgU,EAAQ4yB,SAAmB5yB,EAAQnP,eAAe,YAClDg+B,EAAOC,OAA8B,IAAItQ,MAAMxe,EAAQ4yB,SACjC,MAAtB5yB,EAAQwyB,YAAsBxyB,EAAQwyB,WAAW9lC,OAAQ,CAEzD,IADAmiC,EAAOC,OAA+B,IAAII,OACjCziC,EAAI,EAAGA,EAAIuT,EAAQwyB,WAAW9lC,SAAUD,EAC7CoiC,EAAOkE,OAAO/yB,EAAQwyB,WAAW/lC,IACrCoiC,EAAOM,SAEX,GAA0B,MAAtBnvB,EAAQyyB,YAAsBzyB,EAAQyyB,WAAW/lC,OAAQ,CAEzD,IADAmiC,EAAOC,OAA+B,IAAII,OACjCziC,EAAI,EAAGA,EAAIuT,EAAQyyB,WAAW/lC,SAAUD,EAC7CoiC,EAAOmE,OAAOhzB,EAAQyyB,WAAWhmC,IACrCoiC,EAAOM,SAIX,GAFyB,MAArBnvB,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,cACpDg+B,EAAOC,OAA+B,IAAIhY,OAAO9W,EAAQ0uB,WACjC,MAAxB1uB,EAAQuyB,cAAwBvyB,EAAQuyB,aAAa7lC,OACrD,IAASD,EAAI,EAAGA,EAAIuT,EAAQuyB,aAAa7lC,SAAUD,EAC/CshC,EAAMR,KAAKqE,uBAAuB1a,OAAOlX,EAAQuyB,aAAa9lC,GAAIoiC,EAAOC,OAA+B,KAAKI,QAAQC,SAG7H,OAF4B,MAAxBnvB,EAAQ6yB,cAAwB7yB,EAAQnP,eAAe,iBACvDg+B,EAAOC,OAA+B,KAAKrS,MAAMzc,EAAQ6yB,cACtDhE,GAYXI,EAAYI,gBAAkB,SAAyBrvB,EAAS6uB,GAC5D,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCF,EAAY32B,OAAS,SAAgBg3B,EAAQ5iC,GACnC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAK0B,YACrFK,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EAGD,GAFMvvB,EAAQnR,MAAQmR,EAAQnR,KAAKnC,SAC/BsT,EAAQnR,KAAO,IACD,IAAP,EAAN0gC,GAED,IADA,IAAIC,EAAOF,EAAOR,SAAWQ,EAAOhX,IAC7BgX,EAAOhX,IAAMkX,GAChBxvB,EAAQnR,KAAKjC,KAAK0iC,EAAON,cAE7BhvB,EAAQnR,KAAKjC,KAAK0iC,EAAON,SAC7B,MACJ,KAAK,EACDhvB,EAAQ0yB,SAAWpD,EAAO7S,QAC1B,MACJ,KAAK,EACDzc,EAAQ2yB,QAAU5E,EAAMR,KAAK0B,YAAY6D,QAAQx6B,OAAOg3B,EAAQA,EAAOR,UACvE,MACJ,KAAK,EAGD,GAFM9uB,EAAQmyB,WAAanyB,EAAQmyB,UAAUzlC,SACzCsT,EAAQmyB,UAAY,IACN,IAAP,EAAN5C,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOhX,IAC7BgX,EAAOhX,IAAMkX,GAChBxvB,EAAQmyB,UAAUvlC,KAAK0iC,EAAOP,cAElC/uB,EAAQmyB,UAAUvlC,KAAK0iC,EAAOP,SAClC,MACJ,KAAK,EAGD,GAFM/uB,EAAQoyB,WAAapyB,EAAQoyB,UAAU1lC,SACzCsT,EAAQoyB,UAAY,IACN,IAAP,EAAN7C,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOhX,IAC7BgX,EAAOhX,IAAMkX,GAChBxvB,EAAQoyB,UAAUxlC,KAAK0iC,EAAO7S,cAElCzc,EAAQoyB,UAAUxlC,KAAK0iC,EAAO7S,SAClC,MACJ,KAAK,EACKzc,EAAQqyB,YAAcryB,EAAQqyB,WAAW3lC,SAC3CsT,EAAQqyB,WAAa,IACzBryB,EAAQqyB,WAAWzlC,KAAK0iC,EAAO9Q,SAC/B,MACJ,KAAK,EAGD,GAFMxe,EAAQsyB,WAAatyB,EAAQsyB,UAAU5lC,SACzCsT,EAAQsyB,UAAY,IACN,IAAP,EAAN/C,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOhX,IAC7BgX,EAAOhX,IAAMkX,GAChBxvB,EAAQsyB,UAAU1lC,KAAK0iC,EAAON,cAElChvB,EAAQsyB,UAAU1lC,KAAK0iC,EAAON,SAClC,MACJ,KAAK,EACDhvB,EAAQhU,KAAOsjC,EAAOxY,SACtB,MACJ,KAAK,GACD9W,EAAQ0uB,UAAYY,EAAOxY,SAC3B,MACJ,KAAK,EACD9W,EAAQ4yB,QAAUtD,EAAO9Q,QACzB,MACJ,KAAK,GACKxe,EAAQuyB,cAAgBvyB,EAAQuyB,aAAa7lC,SAC/CsT,EAAQuyB,aAAe,IAC3BvyB,EAAQuyB,aAAa3lC,KAAKmhC,EAAMR,KAAKqE,uBAAuBt5B,OAAOg3B,EAAQA,EAAOR,WAClF,MACJ,KAAK,GACD9uB,EAAQ6yB,aAAevD,EAAO7S,QAC9B,MACJ,KAAK,GAGD,GAFMzc,EAAQwyB,YAAcxyB,EAAQwyB,WAAW9lC,SAC3CsT,EAAQwyB,WAAa,IACP,IAAP,EAANjD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOhX,IAC7BgX,EAAOhX,IAAMkX,GAChBxvB,EAAQwyB,WAAW5lC,KAAK0iC,EAAOyD,eAEnC/yB,EAAQwyB,WAAW5lC,KAAK0iC,EAAOyD,UACnC,MACJ,KAAK,GAGD,GAFM/yB,EAAQyyB,YAAczyB,EAAQyyB,WAAW/lC,SAC3CsT,EAAQyyB,WAAa,IACP,IAAP,EAANlD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOhX,IAC7BgX,EAAOhX,IAAMkX,GAChBxvB,EAAQyyB,WAAW7lC,KAAK0iC,EAAO0D,eAEnChzB,EAAQyyB,WAAW7lC,KAAK0iC,EAAO0D,UACnC,MACJ,QACI1D,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaXivB,EAAYS,gBAAkB,SAAyBJ,GAGnD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtCG,EAAYU,OAAS,SAAgB3vB,GACjC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQnR,MAAgBmR,EAAQnP,eAAe,QAAS,CACxD,IAAK/B,MAAMC,QAAQiR,EAAQnR,MACvB,MAAO,uBACX,IAAK,IAAIpC,EAAI,EAAGA,EAAIuT,EAAQnR,KAAKnC,SAAUD,EACvC,KAAKohC,EAAMgC,UAAU7vB,EAAQnR,KAAKpC,KAASuT,EAAQnR,KAAKpC,IAAMohC,EAAMgC,UAAU7vB,EAAQnR,KAAKpC,GAAGqwB,MAAQ+Q,EAAMgC,UAAU7vB,EAAQnR,KAAKpC,GAAGswB,OAClI,MAAO,gCAEnB,GAAwB,MAApB/c,EAAQ0yB,UAAoB1yB,EAAQnP,eAAe,cAC9Cg9B,EAAMgC,UAAU7vB,EAAQ0yB,UACzB,MAAO,6BACf,GAAuB,MAAnB1yB,EAAQ2yB,SAAmB3yB,EAAQnP,eAAe,aAC9CqF,EAAQ63B,EAAMR,KAAK0B,YAAY6D,QAAQnD,OAAO3vB,EAAQ2yB,UAEtD,MAAO,WAAaz8B,EAE5B,GAAyB,MAArB8J,EAAQmyB,WAAqBnyB,EAAQnP,eAAe,aAAc,CAClE,IAAK/B,MAAMC,QAAQiR,EAAQmyB,WACvB,MAAO,4BACX,IAAS1lC,EAAI,EAAGA,EAAIuT,EAAQmyB,UAAUzlC,SAAUD,EAC5C,GAAoC,iBAAzBuT,EAAQmyB,UAAU1lC,GACzB,MAAO,+BAEnB,GAAyB,MAArBuT,EAAQoyB,WAAqBpyB,EAAQnP,eAAe,aAAc,CAClE,IAAK/B,MAAMC,QAAQiR,EAAQoyB,WACvB,MAAO,4BACX,IAAS3lC,EAAI,EAAGA,EAAIuT,EAAQoyB,UAAU1lC,SAAUD,EAC5C,IAAKohC,EAAMgC,UAAU7vB,EAAQoyB,UAAU3lC,IACnC,MAAO,gCAEnB,GAA0B,MAAtBuT,EAAQqyB,YAAsBryB,EAAQnP,eAAe,cAAe,CACpE,IAAK/B,MAAMC,QAAQiR,EAAQqyB,YACvB,MAAO,6BACX,IAAS5lC,EAAI,EAAGA,EAAIuT,EAAQqyB,WAAW3lC,SAAUD,EAC7C,KAAMuT,EAAQqyB,WAAW5lC,IAA8C,iBAAjCuT,EAAQqyB,WAAW5lC,GAAGC,QAAuBmhC,EAAM+B,SAAS5vB,EAAQqyB,WAAW5lC,KACjH,MAAO,gCAEnB,GAAyB,MAArBuT,EAAQsyB,WAAqBtyB,EAAQnP,eAAe,aAAc,CAClE,IAAK/B,MAAMC,QAAQiR,EAAQsyB,WACvB,MAAO,4BACX,IAAS7lC,EAAI,EAAGA,EAAIuT,EAAQsyB,UAAU5lC,SAAUD,EAC5C,KAAKohC,EAAMgC,UAAU7vB,EAAQsyB,UAAU7lC,KAASuT,EAAQsyB,UAAU7lC,IAAMohC,EAAMgC,UAAU7vB,EAAQsyB,UAAU7lC,GAAGqwB,MAAQ+Q,EAAMgC,UAAU7vB,EAAQsyB,UAAU7lC,GAAGswB,OACtJ,MAAO,qCAEnB,GAAoB,MAAhB/c,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC1Cg9B,EAAM+B,SAAS5vB,EAAQhU,MACxB,MAAO,wBACf,GAAyB,MAArBgU,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eAC/Cg9B,EAAM+B,SAAS5vB,EAAQ0uB,WACxB,MAAO,6BACf,GAAuB,MAAnB1uB,EAAQ4yB,SAAmB5yB,EAAQnP,eAAe,cAC5CmP,EAAQ4yB,SAA6C,iBAA3B5yB,EAAQ4yB,QAAQlmC,QAAuBmhC,EAAM+B,SAAS5vB,EAAQ4yB,UAC1F,MAAO,2BACf,GAA4B,MAAxB5yB,EAAQuyB,cAAwBvyB,EAAQnP,eAAe,gBAAiB,CACxE,IAAK/B,MAAMC,QAAQiR,EAAQuyB,cACvB,MAAO,+BACX,IAAS9lC,EAAI,EAAGA,EAAIuT,EAAQuyB,aAAa7lC,SAAUD,EAAG,CAClD,IAAIyJ,EACJ,GADIA,EAAQ63B,EAAMR,KAAKqE,uBAAuBjC,OAAO3vB,EAAQuyB,aAAa9lC,IAEtE,MAAO,gBAAkByJ,GAGrC,GAA4B,MAAxB8J,EAAQ6yB,cAAwB7yB,EAAQnP,eAAe,gBACvD,OAAQmP,EAAQ6yB,cAChB,QACI,MAAO,oCACX,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtB7yB,EAAQwyB,YAAsBxyB,EAAQnP,eAAe,cAAe,CACpE,IAAK/B,MAAMC,QAAQiR,EAAQwyB,YACvB,MAAO,6BACX,IAAS/lC,EAAI,EAAGA,EAAIuT,EAAQwyB,WAAW9lC,SAAUD,EAC7C,GAAqC,iBAA1BuT,EAAQwyB,WAAW/lC,GAC1B,MAAO,gCAEnB,GAA0B,MAAtBuT,EAAQyyB,YAAsBzyB,EAAQnP,eAAe,cAAe,CACpE,IAAK/B,MAAMC,QAAQiR,EAAQyyB,YACvB,MAAO,6BACX,IAAShmC,EAAI,EAAGA,EAAIuT,EAAQyyB,WAAW/lC,SAAUD,EAC7C,KAAKohC,EAAMgC,UAAU7vB,EAAQyyB,WAAWhmC,KAASuT,EAAQyyB,WAAWhmC,IAAMohC,EAAMgC,UAAU7vB,EAAQyyB,WAAWhmC,GAAGqwB,MAAQ+Q,EAAMgC,UAAU7vB,EAAQyyB,WAAWhmC,GAAGswB,OAC1J,MAAO,sCAEnB,OAAO,MAWXkS,EAAYa,WAAa,SAAoBC,GACzC,GAAIA,aAAkBhC,EAAMR,KAAK0B,YAC7B,OAAOc,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAK0B,YAC7B,GAAIc,EAAOlhC,KAAM,CACb,IAAKC,MAAMC,QAAQghC,EAAOlhC,MACtB,MAAMxC,UAAU,0CACpB2T,EAAQnR,KAAO,GACf,IAAK,IAAIpC,EAAI,EAAGA,EAAIsjC,EAAOlhC,KAAKnC,SAAUD,EAClCohC,EAAMhR,MACL7c,EAAQnR,KAAKpC,GAAKohC,EAAMhR,KAAK2K,UAAUuI,EAAOlhC,KAAKpC,KAAKi5B,UAAW,EACrC,iBAAnBqK,EAAOlhC,KAAKpC,GACxBuT,EAAQnR,KAAKpC,GAAK26B,SAAS2I,EAAOlhC,KAAKpC,GAAI,IACZ,iBAAnBsjC,EAAOlhC,KAAKpC,GACxBuT,EAAQnR,KAAKpC,GAAKsjC,EAAOlhC,KAAKpC,GACC,iBAAnBsjC,EAAOlhC,KAAKpC,KACxBuT,EAAQnR,KAAKpC,GAAK,IAAIohC,EAAMmC,SAASD,EAAOlhC,KAAKpC,GAAGqwB,MAAQ,EAAGiT,EAAOlhC,KAAKpC,GAAGswB,OAAS,GAAGiL,YAItG,GAFuB,MAAnB+H,EAAO2C,WACP1yB,EAAQ0yB,SAA6B,EAAlB3C,EAAO2C,UACR,MAAlB3C,EAAO4C,QAAiB,CACxB,GAA8B,iBAAnB5C,EAAO4C,QACd,MAAMtmC,UAAU,8CACpB2T,EAAQ2yB,QAAU5E,EAAMR,KAAK0B,YAAY6D,QAAQhD,WAAWC,EAAO4C,SAEvE,GAAI5C,EAAOoC,UAAW,CAClB,IAAKrjC,MAAMC,QAAQghC,EAAOoC,WACtB,MAAM9lC,UAAU,+CAEpB,IADA2T,EAAQmyB,UAAY,GACX1lC,EAAI,EAAGA,EAAIsjC,EAAOoC,UAAUzlC,SAAUD,EAC3CuT,EAAQmyB,UAAU1lC,GAAK6C,OAAOygC,EAAOoC,UAAU1lC,IAEvD,GAAIsjC,EAAOqC,UAAW,CAClB,IAAKtjC,MAAMC,QAAQghC,EAAOqC,WACtB,MAAM/lC,UAAU,+CAEpB,IADA2T,EAAQoyB,UAAY,GACX3lC,EAAI,EAAGA,EAAIsjC,EAAOqC,UAAU1lC,SAAUD,EAC3CuT,EAAQoyB,UAAU3lC,GAA2B,EAAtBsjC,EAAOqC,UAAU3lC,GAEhD,GAAIsjC,EAAOsC,WAAY,CACnB,IAAKvjC,MAAMC,QAAQghC,EAAOsC,YACtB,MAAMhmC,UAAU,gDAEpB,IADA2T,EAAQqyB,WAAa,GACZ5lC,EAAI,EAAGA,EAAIsjC,EAAOsC,WAAW3lC,SAAUD,EACR,iBAAzBsjC,EAAOsC,WAAW5lC,GACzBohC,EAAMhX,OAAOve,OAAOy3B,EAAOsC,WAAW5lC,GAAIuT,EAAQqyB,WAAW5lC,GAAKohC,EAAMc,UAAUd,EAAMhX,OAAOnqB,OAAOqjC,EAAOsC,WAAW5lC,KAAM,GACzHsjC,EAAOsC,WAAW5lC,GAAGC,SAC1BsT,EAAQqyB,WAAW5lC,GAAKsjC,EAAOsC,WAAW5lC,IAEtD,GAAIsjC,EAAOuC,UAAW,CAClB,IAAKxjC,MAAMC,QAAQghC,EAAOuC,WACtB,MAAMjmC,UAAU,+CAEpB,IADA2T,EAAQsyB,UAAY,GACX7lC,EAAI,EAAGA,EAAIsjC,EAAOuC,UAAU5lC,SAAUD,EACvCohC,EAAMhR,MACL7c,EAAQsyB,UAAU7lC,GAAKohC,EAAMhR,KAAK2K,UAAUuI,EAAOuC,UAAU7lC,KAAKi5B,UAAW,EAC1C,iBAAxBqK,EAAOuC,UAAU7lC,GAC7BuT,EAAQsyB,UAAU7lC,GAAK26B,SAAS2I,EAAOuC,UAAU7lC,GAAI,IACjB,iBAAxBsjC,EAAOuC,UAAU7lC,GAC7BuT,EAAQsyB,UAAU7lC,GAAKsjC,EAAOuC,UAAU7lC,GACJ,iBAAxBsjC,EAAOuC,UAAU7lC,KAC7BuT,EAAQsyB,UAAU7lC,GAAK,IAAIohC,EAAMmC,SAASD,EAAOuC,UAAU7lC,GAAGqwB,MAAQ,EAAGiT,EAAOuC,UAAU7lC,GAAGswB,OAAS,GAAGiL,YAWrH,GATmB,MAAf+H,EAAO/jC,OACPgU,EAAQhU,KAAO0M,OAAOq3B,EAAO/jC,OACT,MAApB+jC,EAAOrB,YACP1uB,EAAQ0uB,UAAYh2B,OAAOq3B,EAAOrB,YAChB,MAAlBqB,EAAO6C,UACuB,iBAAnB7C,EAAO6C,QACd/E,EAAMhX,OAAOve,OAAOy3B,EAAO6C,QAAS5yB,EAAQ4yB,QAAU/E,EAAMc,UAAUd,EAAMhX,OAAOnqB,OAAOqjC,EAAO6C,UAAW,GACvG7C,EAAO6C,QAAQlmC,SACpBsT,EAAQ4yB,QAAU7C,EAAO6C,UAC7B7C,EAAOwC,aAAc,CACrB,IAAKzjC,MAAMC,QAAQghC,EAAOwC,cACtB,MAAMlmC,UAAU,kDAEpB,IADA2T,EAAQuyB,aAAe,GACd9lC,EAAI,EAAGA,EAAIsjC,EAAOwC,aAAa7lC,SAAUD,EAAG,CACjD,GAAsC,iBAA3BsjC,EAAOwC,aAAa9lC,GAC3B,MAAMJ,UAAU,mDACpB2T,EAAQuyB,aAAa9lC,GAAKshC,EAAMR,KAAKqE,uBAAuB9B,WAAWC,EAAOwC,aAAa9lC,KAGnG,OAAQsjC,EAAO8C,cACf,IAAK,UACL,KAAK,EACD7yB,EAAQ6yB,aAAe,EACvB,MACJ,IAAK,WACL,KAAK,EACD7yB,EAAQ6yB,aAAe,EAG3B,GAAI9C,EAAOyC,WAAY,CACnB,IAAK1jC,MAAMC,QAAQghC,EAAOyC,YACtB,MAAMnmC,UAAU,gDAEpB,IADA2T,EAAQwyB,WAAa,GACZ/lC,EAAI,EAAGA,EAAIsjC,EAAOyC,WAAW9lC,SAAUD,EAC5CuT,EAAQwyB,WAAW/lC,GAAK6C,OAAOygC,EAAOyC,WAAW/lC,IAEzD,GAAIsjC,EAAO0C,WAAY,CACnB,IAAK3jC,MAAMC,QAAQghC,EAAO0C,YACtB,MAAMpmC,UAAU,gDAEpB,IADA2T,EAAQyyB,WAAa,GACZhmC,EAAI,EAAGA,EAAIsjC,EAAO0C,WAAW/lC,SAAUD,EACxCohC,EAAMhR,MACL7c,EAAQyyB,WAAWhmC,GAAKohC,EAAMhR,KAAK2K,UAAUuI,EAAO0C,WAAWhmC,KAAKi5B,UAAW,EAC3C,iBAAzBqK,EAAO0C,WAAWhmC,GAC9BuT,EAAQyyB,WAAWhmC,GAAK26B,SAAS2I,EAAO0C,WAAWhmC,GAAI,IAClB,iBAAzBsjC,EAAO0C,WAAWhmC,GAC9BuT,EAAQyyB,WAAWhmC,GAAKsjC,EAAO0C,WAAWhmC,GACL,iBAAzBsjC,EAAO0C,WAAWhmC,KAC9BuT,EAAQyyB,WAAWhmC,GAAK,IAAIohC,EAAMmC,SAASD,EAAO0C,WAAWhmC,GAAGqwB,MAAQ,EAAGiT,EAAO0C,WAAWhmC,GAAGswB,OAAS,GAAGiL,UAAS,IAEjI,OAAOhoB,GAYXivB,EAAYgB,SAAW,SAAkBjwB,EAAShQ,GACzCA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAyBb,IAxBI//B,EAAQkgC,QAAUlgC,EAAQmgC,YAC1BJ,EAAOlhC,KAAO,GACdkhC,EAAOoC,UAAY,GACnBpC,EAAOqC,UAAY,GACnBrC,EAAOsC,WAAa,GACpBtC,EAAOuC,UAAY,GACnBvC,EAAOyC,WAAa,GACpBzC,EAAO0C,WAAa,GACpB1C,EAAOwC,aAAe,IAEtBviC,EAAQmgC,WACRJ,EAAO2C,SAAW,EAClB3C,EAAO4C,QAAU,KACjB5C,EAAO/jC,KAAO,GACVgE,EAAQwuB,QAAU9lB,OAClBq3B,EAAO6C,QAAU,IAEjB7C,EAAO6C,QAAU,GACb5iC,EAAQwuB,QAAU1vB,QAClBihC,EAAO6C,QAAU/E,EAAMc,UAAUoB,EAAO6C,WAEhD7C,EAAOrB,UAAY,GACnBqB,EAAO8C,aAAe7iC,EAAQsgC,QAAU53B,OAAS,UAAY,GAE7DsH,EAAQnR,MAAQmR,EAAQnR,KAAKnC,OAAQ,CACrCqjC,EAAOlhC,KAAO,GACd,IAAK,IAAIuJ,EAAI,EAAGA,EAAI4H,EAAQnR,KAAKnC,SAAU0L,EACR,iBAApB4H,EAAQnR,KAAKuJ,GACpB23B,EAAOlhC,KAAKuJ,GAAKpI,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQnR,KAAKuJ,IAAM4H,EAAQnR,KAAKuJ,GAEnF23B,EAAOlhC,KAAKuJ,GAAKpI,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQnR,KAAKuJ,IAAMpI,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQnR,KAAKuJ,GAAG0kB,MAAQ,EAAG9c,EAAQnR,KAAKuJ,GAAG2kB,OAAS,GAAGiL,WAAahoB,EAAQnR,KAAKuJ,GAM7O,GAJwB,MAApB4H,EAAQ0yB,UAAoB1yB,EAAQnP,eAAe,cACnDk/B,EAAO2C,SAAW1yB,EAAQ0yB,UACP,MAAnB1yB,EAAQ2yB,SAAmB3yB,EAAQnP,eAAe,aAClDk/B,EAAO4C,QAAU5E,EAAMR,KAAK0B,YAAY6D,QAAQ7C,SAASjwB,EAAQ2yB,QAAS3iC,IAC1EgQ,EAAQmyB,WAAanyB,EAAQmyB,UAAUzlC,OAEvC,IADAqjC,EAAOoC,UAAY,GACV/5B,EAAI,EAAGA,EAAI4H,EAAQmyB,UAAUzlC,SAAU0L,EAC5C23B,EAAOoC,UAAU/5B,GAAKpI,EAAQugC,OAASC,SAASxwB,EAAQmyB,UAAU/5B,IAAMM,OAAOsH,EAAQmyB,UAAU/5B,IAAM4H,EAAQmyB,UAAU/5B,GAEjI,GAAI4H,EAAQoyB,WAAapyB,EAAQoyB,UAAU1lC,OAEvC,IADAqjC,EAAOqC,UAAY,GACVh6B,EAAI,EAAGA,EAAI4H,EAAQoyB,UAAU1lC,SAAU0L,EAC5C23B,EAAOqC,UAAUh6B,GAAK4H,EAAQoyB,UAAUh6B,GAEhD,GAAI4H,EAAQqyB,YAAcryB,EAAQqyB,WAAW3lC,OAEzC,IADAqjC,EAAOsC,WAAa,GACXj6B,EAAI,EAAGA,EAAI4H,EAAQqyB,WAAW3lC,SAAU0L,EAC7C23B,EAAOsC,WAAWj6B,GAAKpI,EAAQwuB,QAAU9lB,OAASm1B,EAAMhX,OAAOK,OAAOlX,EAAQqyB,WAAWj6B,GAAI,EAAG4H,EAAQqyB,WAAWj6B,GAAG1L,QAAUsD,EAAQwuB,QAAU1vB,MAAQA,MAAM6oB,UAAUliB,MAAM3E,KAAKkP,EAAQqyB,WAAWj6B,IAAM4H,EAAQqyB,WAAWj6B,GAEzO,GAAI4H,EAAQsyB,WAAatyB,EAAQsyB,UAAU5lC,OAEvC,IADAqjC,EAAOuC,UAAY,GACVl6B,EAAI,EAAGA,EAAI4H,EAAQsyB,UAAU5lC,SAAU0L,EACR,iBAAzB4H,EAAQsyB,UAAUl6B,GACzB23B,EAAOuC,UAAUl6B,GAAKpI,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQsyB,UAAUl6B,IAAM4H,EAAQsyB,UAAUl6B,GAElG23B,EAAOuC,UAAUl6B,GAAKpI,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQsyB,UAAUl6B,IAAMpI,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQsyB,UAAUl6B,GAAG0kB,MAAQ,EAAG9c,EAAQsyB,UAAUl6B,GAAG2kB,OAAS,GAAGiL,WAAahoB,EAAQsyB,UAAUl6B,GAMtQ,GAJoB,MAAhB4H,EAAQhU,MAAgBgU,EAAQnP,eAAe,UAC/Ck/B,EAAO/jC,KAAOgU,EAAQhU,MACH,MAAnBgU,EAAQ4yB,SAAmB5yB,EAAQnP,eAAe,aAClDk/B,EAAO6C,QAAU5iC,EAAQwuB,QAAU9lB,OAASm1B,EAAMhX,OAAOK,OAAOlX,EAAQ4yB,QAAS,EAAG5yB,EAAQ4yB,QAAQlmC,QAAUsD,EAAQwuB,QAAU1vB,MAAQA,MAAM6oB,UAAUliB,MAAM3E,KAAKkP,EAAQ4yB,SAAW5yB,EAAQ4yB,SAC9L5yB,EAAQwyB,YAAcxyB,EAAQwyB,WAAW9lC,OAEzC,IADAqjC,EAAOyC,WAAa,GACXp6B,EAAI,EAAGA,EAAI4H,EAAQwyB,WAAW9lC,SAAU0L,EAC7C23B,EAAOyC,WAAWp6B,GAAKpI,EAAQugC,OAASC,SAASxwB,EAAQwyB,WAAWp6B,IAAMM,OAAOsH,EAAQwyB,WAAWp6B,IAAM4H,EAAQwyB,WAAWp6B,GAErI,GAAI4H,EAAQyyB,YAAczyB,EAAQyyB,WAAW/lC,OAEzC,IADAqjC,EAAO0C,WAAa,GACXr6B,EAAI,EAAGA,EAAI4H,EAAQyyB,WAAW/lC,SAAU0L,EACR,iBAA1B4H,EAAQyyB,WAAWr6B,GAC1B23B,EAAO0C,WAAWr6B,GAAKpI,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQyyB,WAAWr6B,IAAM4H,EAAQyyB,WAAWr6B,GAErG23B,EAAO0C,WAAWr6B,GAAKpI,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQyyB,WAAWr6B,IAAMpI,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQyyB,WAAWr6B,GAAG0kB,MAAQ,EAAG9c,EAAQyyB,WAAWr6B,GAAG2kB,OAAS,GAAGiL,UAAS,GAAQhoB,EAAQyyB,WAAWr6B,GAI/Q,GAFyB,MAArB4H,EAAQ0uB,WAAqB1uB,EAAQnP,eAAe,eACpDk/B,EAAOrB,UAAY1uB,EAAQ0uB,WAC3B1uB,EAAQuyB,cAAgBvyB,EAAQuyB,aAAa7lC,OAE7C,IADAqjC,EAAOwC,aAAe,GACbn6B,EAAI,EAAGA,EAAI4H,EAAQuyB,aAAa7lC,SAAU0L,EAC/C23B,EAAOwC,aAAan6B,GAAK21B,EAAMR,KAAKqE,uBAAuB3B,SAASjwB,EAAQuyB,aAAan6B,GAAIpI,GAIrG,OAF4B,MAAxBgQ,EAAQ6yB,cAAwB7yB,EAAQnP,eAAe,kBACvDk/B,EAAO8C,aAAe7iC,EAAQsgC,QAAU53B,OAASq1B,EAAMR,KAAK0B,YAAYgE,aAAajzB,EAAQ6yB,cAAgB7yB,EAAQ6yB,cAClH9C,GAUXd,EAAYtX,UAAU4N,OAAS,WAC3B,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAyB1DzB,EAAYiE,SAAW,WACnB,IAAI7F,EAAa,GAAIC,EAASj9B,OAAO2sB,OAAOqQ,GAkB5C,OAjBAC,EAAOD,EAAW,GAAK,aAAe,EACtCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,IAAM,WAAa,GACrCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,aAAe,GACvCC,EAAOD,EAAW,IAAM,cAAgB,GACxCC,EAAOD,EAAW,IAAM,YAAc,GAC/BC,EAnBY,GAsBvB2B,EAAY6D,QAAU,WAkBlB,SAASA,EAAQ3E,GACb,GAAIA,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAqNhD,OA5MAqmC,EAAQnb,UAAUwb,MAAQtF,EAAMhR,KAAOgR,EAAMhR,KAAKsJ,SAAS,EAAE,GAAE,GAAS,EAQxE2M,EAAQnb,UAAUP,IAAMyW,EAAMhR,KAAOgR,EAAMhR,KAAKsJ,SAAS,EAAE,GAAE,GAAS,EAUtE2M,EAAQ9V,OAAS,SAAgBmR,GAC7B,OAAO,IAAI2E,EAAQ3E,IAYvB2E,EAAQ5b,OAAS,SAAgBlX,EAAS6uB,GAOtC,OANKA,IACDA,EAASlB,EAAQ3Q,UACA,MAAjBhd,EAAQmzB,OAAiBnzB,EAAQnP,eAAe,UAChDg+B,EAAOC,OAA8B,GAAGE,MAAMhvB,EAAQmzB,OACvC,MAAfnzB,EAAQoX,KAAepX,EAAQnP,eAAe,QAC9Cg+B,EAAOC,OAA8B,IAAIE,MAAMhvB,EAAQoX,KACpDyX,GAYXiE,EAAQzD,gBAAkB,SAAyBrvB,EAAS6uB,GACxD,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxC2D,EAAQx6B,OAAS,SAAgBg3B,EAAQ5iC,GAC/B4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAK0B,YAAY6D,QACjGxD,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQmzB,MAAQ7D,EAAON,QACvB,MACJ,KAAK,EACDhvB,EAAQoX,IAAMkY,EAAON,QACrB,MACJ,QACIM,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaX8yB,EAAQpD,gBAAkB,SAAyBJ,GAG/C,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtCgE,EAAQnD,OAAS,SAAgB3vB,GAC7B,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACU,MAAjBA,EAAQmzB,OAAiBnzB,EAAQnP,eAAe,YAC3Cg9B,EAAMgC,UAAU7vB,EAAQmzB,QAAYnzB,EAAQmzB,OAAStF,EAAMgC,UAAU7vB,EAAQmzB,MAAMrW,MAAQ+Q,EAAMgC,UAAU7vB,EAAQmzB,MAAMpW,OACnH,+BACI,MAAf/c,EAAQoX,KAAepX,EAAQnP,eAAe,UACzCg9B,EAAMgC,UAAU7vB,EAAQoX,MAAUpX,EAAQoX,KAAOyW,EAAMgC,UAAU7vB,EAAQoX,IAAI0F,MAAQ+Q,EAAMgC,UAAU7vB,EAAQoX,IAAI2F,OAC3G,6BACR,MAWX+V,EAAQhD,WAAa,SAAoBC,GACrC,GAAIA,aAAkBhC,EAAMR,KAAK0B,YAAY6D,QACzC,OAAO/C,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAK0B,YAAY6D,QAmBzC,OAlBoB,MAAhB/C,EAAOoD,QACHtF,EAAMhR,MACL7c,EAAQmzB,MAAQtF,EAAMhR,KAAK2K,UAAUuI,EAAOoD,QAAQzN,UAAW,EACnC,iBAAjBqK,EAAOoD,MACnBnzB,EAAQmzB,MAAQ/L,SAAS2I,EAAOoD,MAAO,IACV,iBAAjBpD,EAAOoD,MACnBnzB,EAAQmzB,MAAQpD,EAAOoD,MACM,iBAAjBpD,EAAOoD,QACnBnzB,EAAQmzB,MAAQ,IAAItF,EAAMmC,SAASD,EAAOoD,MAAMrW,MAAQ,EAAGiT,EAAOoD,MAAMpW,OAAS,GAAGiL,aAC1E,MAAd+H,EAAO3Y,MACHyW,EAAMhR,MACL7c,EAAQoX,IAAMyW,EAAMhR,KAAK2K,UAAUuI,EAAO3Y,MAAMsO,UAAW,EACjC,iBAAfqK,EAAO3Y,IACnBpX,EAAQoX,IAAMgQ,SAAS2I,EAAO3Y,IAAK,IACR,iBAAf2Y,EAAO3Y,IACnBpX,EAAQoX,IAAM2Y,EAAO3Y,IACM,iBAAf2Y,EAAO3Y,MACnBpX,EAAQoX,IAAM,IAAIyW,EAAMmC,SAASD,EAAO3Y,IAAI0F,MAAQ,EAAGiT,EAAO3Y,IAAI2F,OAAS,GAAGiL,aAC/EhoB,GAYX8yB,EAAQ7C,SAAW,SAAkBjwB,EAAShQ,GACrCA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GACb,GAAI//B,EAAQmgC,SAAU,CAClB,GAAItC,EAAMhR,KAAM,CACZ,IAAIuT,EAAO,IAAIvC,EAAMhR,KAAK,EAAG,GAAG,GAChCkT,EAAOoD,MAAQnjC,EAAQqgC,QAAU33B,OAAS03B,EAAKvnB,WAAa7Y,EAAQqgC,QAAU/gC,OAAS8gC,EAAKpI,WAAaoI,OAEzGL,EAAOoD,MAAQnjC,EAAQqgC,QAAU33B,OAAS,IAAM,EAChDm1B,EAAMhR,MACFuT,EAAO,IAAIvC,EAAMhR,KAAK,EAAG,GAAG,GAChCkT,EAAO3Y,IAAMpnB,EAAQqgC,QAAU33B,OAAS03B,EAAKvnB,WAAa7Y,EAAQqgC,QAAU/gC,OAAS8gC,EAAKpI,WAAaoI,GAEvGL,EAAO3Y,IAAMpnB,EAAQqgC,QAAU33B,OAAS,IAAM,EAYtD,OAVqB,MAAjBsH,EAAQmzB,OAAiBnzB,EAAQnP,eAAe,WACnB,iBAAlBmP,EAAQmzB,MACfpD,EAAOoD,MAAQnjC,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQmzB,OAASnzB,EAAQmzB,MAE1EpD,EAAOoD,MAAQnjC,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQmzB,OAASnjC,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQmzB,MAAMrW,MAAQ,EAAG9c,EAAQmzB,MAAMpW,OAAS,GAAGiL,WAAahoB,EAAQmzB,OACzM,MAAfnzB,EAAQoX,KAAepX,EAAQnP,eAAe,SACnB,iBAAhBmP,EAAQoX,IACf2Y,EAAO3Y,IAAMpnB,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQoX,KAAOpX,EAAQoX,IAEtE2Y,EAAO3Y,IAAMpnB,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQoX,KAAOpnB,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQoX,IAAI0F,MAAQ,EAAG9c,EAAQoX,IAAI2F,OAAS,GAAGiL,WAAahoB,EAAQoX,KAC7M2Y,GAUX+C,EAAQnb,UAAU4N,OAAS,WACvB,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDoC,EA3OW,GAqPtB7D,EAAYgE,aAAe,WACvB,IAAI5F,EAAa,GAAIC,EAASj9B,OAAO2sB,OAAOqQ,GAG5C,OAFAC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,GAAK,YAAc,EAC9BC,EAJgB,GAOpB2B,EAl/BQ,GAq/BnB1B,EAAK6F,iBAAmB,WAiBpB,SAASA,EAAiBjF,GAEtB,GADAphC,KAAKsC,IAAM,GACP8+B,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAichD,OAxbA2mC,EAAiBzb,UAAUtoB,IAAMw+B,EAAMe,WAUvCwE,EAAiBpW,OAAS,SAAgBmR,GACtC,OAAO,IAAIiF,EAAiBjF,IAYhCiF,EAAiBlc,OAAS,SAAgBlX,EAAS6uB,GAG/C,GAFKA,IACDA,EAASlB,EAAQ3Q,UACF,MAAfhd,EAAQ3Q,KAAe2Q,EAAQ3Q,IAAI3C,OACnC,IAAK,IAAID,EAAI,EAAGA,EAAIuT,EAAQ3Q,IAAI3C,SAAUD,EACtCshC,EAAMR,KAAK6F,iBAAiBC,UAAUnc,OAAOlX,EAAQ3Q,IAAI5C,GAAIoiC,EAAOC,OAA8B,IAAII,QAAQC,SACtH,OAAON,GAYXuE,EAAiB/D,gBAAkB,SAAyBrvB,EAAS6uB,GACjE,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCiE,EAAiB96B,OAAS,SAAgBg3B,EAAQ5iC,GACxC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAK6F,iBACrF9D,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACTS,IAAQ,GACX,GACKvvB,EAAQ3Q,KAAO2Q,EAAQ3Q,IAAI3C,SAC7BsT,EAAQ3Q,IAAM,IAClB2Q,EAAQ3Q,IAAIzC,KAAKmhC,EAAMR,KAAK6F,iBAAiBC,UAAU/6B,OAAOg3B,EAAQA,EAAOR,YAG7EQ,EAAOG,SAAe,EAANF,GAIxB,OAAOvvB,GAaXozB,EAAiB1D,gBAAkB,SAAyBJ,GAGxD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtCsE,EAAiBzD,OAAS,SAAgB3vB,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAmB,MAAfA,EAAQ3Q,KAAe2Q,EAAQnP,eAAe,OAAQ,CACtD,IAAK/B,MAAMC,QAAQiR,EAAQ3Q,KACvB,MAAO,sBACX,IAAK,IAAI5C,EAAI,EAAGA,EAAIuT,EAAQ3Q,IAAI3C,SAAUD,EAAG,CACzC,IAAIyJ,EAAQ63B,EAAMR,KAAK6F,iBAAiBC,UAAU1D,OAAO3vB,EAAQ3Q,IAAI5C,IACrE,GAAIyJ,EACA,MAAO,OAASA,GAG5B,OAAO,MAWXk9B,EAAiBtD,WAAa,SAAoBC,GAC9C,GAAIA,aAAkBhC,EAAMR,KAAK6F,iBAC7B,OAAOrD,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAK6F,iBAC7B,GAAIrD,EAAO1gC,IAAK,CACZ,IAAKP,MAAMC,QAAQghC,EAAO1gC,KACtB,MAAMhD,UAAU,8CACpB2T,EAAQ3Q,IAAM,GACd,IAAK,IAAI5C,EAAI,EAAGA,EAAIsjC,EAAO1gC,IAAI3C,SAAUD,EAAG,CACxC,GAA6B,iBAAlBsjC,EAAO1gC,IAAI5C,GAClB,MAAMJ,UAAU,+CACpB2T,EAAQ3Q,IAAI5C,GAAKshC,EAAMR,KAAK6F,iBAAiBC,UAAUvD,WAAWC,EAAO1gC,IAAI5C,KAGrF,OAAOuT,GAYXozB,EAAiBnD,SAAW,SAAkBjwB,EAAShQ,GAC9CA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAGb,IAFI//B,EAAQkgC,QAAUlgC,EAAQmgC,YAC1BJ,EAAO1gC,IAAM,IACb2Q,EAAQ3Q,KAAO2Q,EAAQ3Q,IAAI3C,OAAQ,CACnCqjC,EAAO1gC,IAAM,GACb,IAAK,IAAI+I,EAAI,EAAGA,EAAI4H,EAAQ3Q,IAAI3C,SAAU0L,EACtC23B,EAAO1gC,IAAI+I,GAAK21B,EAAMR,KAAK6F,iBAAiBC,UAAUpD,SAASjwB,EAAQ3Q,IAAI+I,GAAIpI,GAEvF,OAAO+/B,GAUXqD,EAAiBzb,UAAU4N,OAAS,WAChC,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAG1D0C,EAAiBC,UAAY,WAmBzB,SAASA,EAAUlF,GACf,GAAIA,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KA4BhD,IAAI6mC,EAoNJ,OAvOAD,EAAU1b,UAAU4b,SAAW1F,EAAMhR,KAAOgR,EAAMhR,KAAKsJ,SAAS,EAAE,GAAE,GAAS,EAQ7EkN,EAAU1b,UAAU6b,SAAW,GAQ/BH,EAAU1b,UAAU8b,WAAa,GAWjCpjC,OAAOw1B,eAAewN,EAAU1b,UAAW,QAAS,CAChD1oB,IAAK4+B,EAAM6F,YAAYJ,EAAe,CAAC,WAAY,aACnDhlC,IAAKu/B,EAAM8F,YAAYL,KAW3BD,EAAUrW,OAAS,SAAgBmR,GAC/B,OAAO,IAAIkF,EAAUlF,IAYzBkF,EAAUnc,OAAS,SAAgBlX,EAAS6uB,GASxC,OARKA,IACDA,EAASlB,EAAQ3Q,UACG,MAApBhd,EAAQuzB,UAAoBvzB,EAAQnP,eAAe,aACnDg+B,EAAOC,OAA8B,GAAGE,MAAMhvB,EAAQuzB,UAClC,MAApBvzB,EAAQwzB,UAAoBxzB,EAAQnP,eAAe,aACnDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQwzB,UAClC,MAAtBxzB,EAAQyzB,YAAsBzzB,EAAQnP,eAAe,eACrDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQyzB,YACrD5E,GAYXwE,EAAUhE,gBAAkB,SAAyBrvB,EAAS6uB,GAC1D,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCkE,EAAU/6B,OAAS,SAAgBg3B,EAAQ5iC,GACjC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAK6F,iBAAiBC,UACtG/D,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQuzB,SAAWjE,EAAON,QAC1B,MACJ,KAAK,EACDhvB,EAAQwzB,SAAWlE,EAAOxY,SAC1B,MACJ,KAAK,EACD9W,EAAQyzB,WAAanE,EAAOxY,SAC5B,MACJ,QACIwY,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaXqzB,EAAU3D,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtCuE,EAAU1D,OAAS,SAAgB3vB,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,IAAImuB,EAAa,GACjB,GAAwB,MAApBnuB,EAAQuzB,UAAoBvzB,EAAQnP,eAAe,cACnDs9B,EAAW/gC,MAAQ,IACdygC,EAAMgC,UAAU7vB,EAAQuzB,WAAevzB,EAAQuzB,UAAY1F,EAAMgC,UAAU7vB,EAAQuzB,SAASzW,MAAQ+Q,EAAMgC,UAAU7vB,EAAQuzB,SAASxW,QACtI,MAAO,kCAEf,GAAwB,MAApB/c,EAAQwzB,UAAoBxzB,EAAQnP,eAAe,YAAa,CAChE,GAAyB,IAArBs9B,EAAW/gC,MACX,MAAO,yBAEX,GADA+gC,EAAW/gC,MAAQ,GACdygC,EAAM+B,SAAS5vB,EAAQwzB,UACxB,MAAO,4BAEf,OAA0B,MAAtBxzB,EAAQyzB,YAAsBzzB,EAAQnP,eAAe,gBAChDg9B,EAAM+B,SAAS5vB,EAAQyzB,YACjB,8BACR,MAWXJ,EAAUvD,WAAa,SAAoBC,GACvC,GAAIA,aAAkBhC,EAAMR,KAAK6F,iBAAiBC,UAC9C,OAAOtD,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAK6F,iBAAiBC,UAc9C,OAbuB,MAAnBtD,EAAOwD,WACH1F,EAAMhR,MACL7c,EAAQuzB,SAAW1F,EAAMhR,KAAK2K,UAAUuI,EAAOwD,WAAW7N,UAAW,EACtC,iBAApBqK,EAAOwD,SACnBvzB,EAAQuzB,SAAWnM,SAAS2I,EAAOwD,SAAU,IACb,iBAApBxD,EAAOwD,SACnBvzB,EAAQuzB,SAAWxD,EAAOwD,SACM,iBAApBxD,EAAOwD,WACnBvzB,EAAQuzB,SAAW,IAAI1F,EAAMmC,SAASD,EAAOwD,SAASzW,MAAQ,EAAGiT,EAAOwD,SAASxW,OAAS,GAAGiL,aAC9E,MAAnB+H,EAAOyD,WACPxzB,EAAQwzB,SAAW96B,OAAOq3B,EAAOyD,WACZ,MAArBzD,EAAO0D,aACPzzB,EAAQyzB,WAAa/6B,OAAOq3B,EAAO0D,aAChCzzB,GAYXqzB,EAAUpD,SAAW,SAAkBjwB,EAAShQ,GACvCA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAkBb,OAjBI//B,EAAQmgC,WACRJ,EAAO0D,WAAa,IACA,MAApBzzB,EAAQuzB,UAAoBvzB,EAAQnP,eAAe,cACnB,iBAArBmP,EAAQuzB,SACfxD,EAAOwD,SAAWvjC,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQuzB,UAAYvzB,EAAQuzB,SAEhFxD,EAAOwD,SAAWvjC,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQuzB,UAAYvjC,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQuzB,SAASzW,MAAQ,EAAG9c,EAAQuzB,SAASxW,OAAS,GAAGiL,WAAahoB,EAAQuzB,SAChOvjC,EAAQ4jC,SACR7D,EAAO3iC,MAAQ,aAEC,MAApB4S,EAAQwzB,UAAoBxzB,EAAQnP,eAAe,cACnDk/B,EAAOyD,SAAWxzB,EAAQwzB,SACtBxjC,EAAQ4jC,SACR7D,EAAO3iC,MAAQ,aAEG,MAAtB4S,EAAQyzB,YAAsBzzB,EAAQnP,eAAe,gBACrDk/B,EAAO0D,WAAazzB,EAAQyzB,YACzB1D,GAUXsD,EAAU1b,UAAU4N,OAAS,WACzB,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnD2C,EAvQkB,GA0QtBD,EAvda,GA0dxB7F,EAAKqD,UAAY,WAkBb,SAASA,EAAUzC,GACf,GAAIA,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAoBhD,IAAI6mC,EAoZJ,OA/ZA1C,EAAUjZ,UAAUkc,WAAa,KAQjCjD,EAAUjZ,UAAU8b,WAAa,GAWjCpjC,OAAOw1B,eAAe+K,EAAUjZ,UAAW,QAAS,CAChD1oB,IAAK4+B,EAAM6F,YAAYJ,EAAe,CAAC,eACvChlC,IAAKu/B,EAAM8F,YAAYL,KAW3B1C,EAAU5T,OAAS,SAAgBmR,GAC/B,OAAO,IAAIyC,EAAUzC,IAYzByC,EAAU1Z,OAAS,SAAgBlX,EAAS6uB,GAOxC,OANKA,IACDA,EAASlB,EAAQ3Q,UACK,MAAtBhd,EAAQ6zB,YAAsB7zB,EAAQnP,eAAe,eACrDk9B,EAAMR,KAAKqD,UAAUriC,OAAO2oB,OAAOlX,EAAQ6zB,WAAYhF,EAAOC,OAA8B,IAAII,QAAQC,SAClF,MAAtBnvB,EAAQyzB,YAAsBzzB,EAAQnP,eAAe,eACrDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQyzB,YACrD5E,GAYX+B,EAAUvB,gBAAkB,SAAyBrvB,EAAS6uB,GAC1D,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCyB,EAAUt4B,OAAS,SAAgBg3B,EAAQ5iC,GACjC4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAKqD,UACrFtB,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQ6zB,WAAa9F,EAAMR,KAAKqD,UAAUriC,OAAO+J,OAAOg3B,EAAQA,EAAOR,UACvE,MACJ,KAAK,EACD9uB,EAAQyzB,WAAanE,EAAOxY,SAC5B,MACJ,QACIwY,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaX4wB,EAAUlB,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtC8B,EAAUjB,OAAS,SAAgB3vB,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEX,GAA0B,MAAtBA,EAAQ6zB,YAAsB7zB,EAAQnP,eAAe,cAAe,CAGhE,IAAIqF,EAAQ63B,EAAMR,KAAKqD,UAAUriC,OAAOohC,OAAO3vB,EAAQ6zB,YACvD,GAAI39B,EACA,MAAO,cAAgBA,EAGnC,OAA0B,MAAtB8J,EAAQyzB,YAAsBzzB,EAAQnP,eAAe,gBAChDg9B,EAAM+B,SAAS5vB,EAAQyzB,YACjB,8BACR,MAWX7C,EAAUd,WAAa,SAAoBC,GACvC,GAAIA,aAAkBhC,EAAMR,KAAKqD,UAC7B,OAAOb,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAKqD,UAC7B,GAAyB,MAArBb,EAAO8D,WAAoB,CAC3B,GAAiC,iBAAtB9D,EAAO8D,WACd,MAAMxnC,UAAU,+CACpB2T,EAAQ6zB,WAAa9F,EAAMR,KAAKqD,UAAUriC,OAAOuhC,WAAWC,EAAO8D,YAIvE,OAFyB,MAArB9D,EAAO0D,aACPzzB,EAAQyzB,WAAa/6B,OAAOq3B,EAAO0D,aAChCzzB,GAYX4wB,EAAUX,SAAW,SAAkBjwB,EAAShQ,GACvCA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GAUb,OATI//B,EAAQmgC,WACRJ,EAAO0D,WAAa,IACE,MAAtBzzB,EAAQ6zB,YAAsB7zB,EAAQnP,eAAe,gBACrDk/B,EAAO8D,WAAa9F,EAAMR,KAAKqD,UAAUriC,OAAO0hC,SAASjwB,EAAQ6zB,WAAY7jC,GACzEA,EAAQ4jC,SACR7D,EAAO3iC,MAAQ,eAEG,MAAtB4S,EAAQyzB,YAAsBzzB,EAAQnP,eAAe,gBACrDk/B,EAAO0D,WAAazzB,EAAQyzB,YACzB1D,GAUXa,EAAUjZ,UAAU4N,OAAS,WACzB,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAG1DE,EAAUriC,OAAS,WAkBf,SAASA,EAAO4/B,GACZ,GAAIA,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KA8LhD,OArLA8B,EAAOopB,UAAUmc,SAAW,EAQ5BvlC,EAAOopB,UAAUoc,MAAQ,KAUzBxlC,EAAOyuB,OAAS,SAAgBmR,GAC5B,OAAO,IAAI5/B,EAAO4/B,IAYtB5/B,EAAO2oB,OAAS,SAAgBlX,EAAS6uB,GAOrC,OANKA,IACDA,EAASlB,EAAQ3Q,UACG,MAApBhd,EAAQ8zB,UAAoB9zB,EAAQnP,eAAe,aACnDg+B,EAAOC,OAA8B,GAAGrS,MAAMzc,EAAQ8zB,UACrC,MAAjB9zB,EAAQ+zB,OAAiB/zB,EAAQnP,eAAe,UAChDk9B,EAAMR,KAAK6F,iBAAiBlc,OAAOlX,EAAQ+zB,MAAOlF,EAAOC,OAA8B,IAAII,QAAQC,SAChGN,GAYXtgC,EAAO8gC,gBAAkB,SAAyBrvB,EAAS6uB,GACvD,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxC5gC,EAAO+J,OAAS,SAAgBg3B,EAAQ5iC,GAC9B4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAKqD,UAAUriC,OAC/F+gC,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQ8zB,SAAWxE,EAAO7S,QAC1B,MACJ,KAAK,EACDzc,EAAQ+zB,MAAQhG,EAAMR,KAAK6F,iBAAiB96B,OAAOg3B,EAAQA,EAAOR,UAClE,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaXzR,EAAOmhC,gBAAkB,SAAyBJ,GAG9C,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtCvgC,EAAOohC,OAAS,SAAgB3vB,GAC5B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQ8zB,UAAoB9zB,EAAQnP,eAAe,cAC9Cg9B,EAAMgC,UAAU7vB,EAAQ8zB,UACzB,MAAO,6BACf,GAAqB,MAAjB9zB,EAAQ+zB,OAAiB/zB,EAAQnP,eAAe,SAAU,CAC1D,IAAIqF,EAAQ63B,EAAMR,KAAK6F,iBAAiBzD,OAAO3vB,EAAQ+zB,OACvD,GAAI79B,EACA,MAAO,SAAWA,EAE1B,OAAO,MAWX3H,EAAOuhC,WAAa,SAAoBC,GACpC,GAAIA,aAAkBhC,EAAMR,KAAKqD,UAAUriC,OACvC,OAAOwhC,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAKqD,UAAUriC,OAGvC,GAFuB,MAAnBwhC,EAAO+D,WACP9zB,EAAQ8zB,SAA6B,EAAlB/D,EAAO+D,UACV,MAAhB/D,EAAOgE,MAAe,CACtB,GAA4B,iBAAjBhE,EAAOgE,MACd,MAAM1nC,UAAU,iDACpB2T,EAAQ+zB,MAAQhG,EAAMR,KAAK6F,iBAAiBtD,WAAWC,EAAOgE,OAElE,OAAO/zB,GAYXzR,EAAO0hC,SAAW,SAAkBjwB,EAAShQ,GACpCA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GASb,OARI//B,EAAQmgC,WACRJ,EAAO+D,SAAW,EAClB/D,EAAOgE,MAAQ,MAEK,MAApB/zB,EAAQ8zB,UAAoB9zB,EAAQnP,eAAe,cACnDk/B,EAAO+D,SAAW9zB,EAAQ8zB,UACT,MAAjB9zB,EAAQ+zB,OAAiB/zB,EAAQnP,eAAe,WAChDk/B,EAAOgE,MAAQhG,EAAMR,KAAK6F,iBAAiBnD,SAASjwB,EAAQ+zB,MAAO/jC,IAChE+/B,GAUXxhC,EAAOopB,UAAU4N,OAAS,WACtB,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDniC,EApNQ,GAuNZqiC,EA9bM,GAicjBrD,EAAKoE,mBAAqB,WAkBtB,SAASA,EAAmBxD,GACxB,GAAIA,EACA,IAAK,IAAI/S,EAAO/qB,OAAO+qB,KAAK+S,GAAa1hC,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,EACpC,MAAvB0hC,EAAW/S,EAAK3uB,MAChBM,KAAKquB,EAAK3uB,IAAM0hC,EAAW/S,EAAK3uB,KAuMhD,OA9LAklC,EAAmBha,UAAUuZ,OAAS,GAQtCS,EAAmBha,UAAUrL,QAAUuhB,EAAMhR,KAAOgR,EAAMhR,KAAKsJ,SAAS,EAAE,GAAE,GAAS,EAUrFwL,EAAmB3U,OAAS,SAAgBmR,GACxC,OAAO,IAAIwD,EAAmBxD,IAYlCwD,EAAmBza,OAAS,SAAgBlX,EAAS6uB,GAOjD,OANKA,IACDA,EAASlB,EAAQ3Q,UACC,MAAlBhd,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,WACjDg+B,EAAOC,OAA8B,IAAIhY,OAAO9W,EAAQkxB,QACrC,MAAnBlxB,EAAQsM,SAAmBtM,EAAQnP,eAAe,YAClDg+B,EAAOC,OAA8B,IAAIE,MAAMhvB,EAAQsM,SACpDuiB,GAYX8C,EAAmBtC,gBAAkB,SAAyBrvB,EAAS6uB,GACnE,OAAO9hC,KAAKmqB,OAAOlX,EAAS6uB,GAAQM,UAcxCwC,EAAmBr5B,OAAS,SAAgBg3B,EAAQ5iC,GAC1C4iC,aAAkB7B,IACpB6B,EAAS7B,EAAQzQ,OAAOsS,IAE5B,IADA,IAAIlY,OAAiB7qB,IAAXG,EAAuB4iC,EAAO5T,IAAM4T,EAAOhX,IAAM5rB,EAAQsT,EAAU,IAAI+tB,EAAMR,KAAKoE,mBACrFrC,EAAOhX,IAAMlB,GAAK,CACrB,IAAImY,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDvvB,EAAQkxB,OAAS5B,EAAOxY,SACxB,MACJ,KAAK,EACD9W,EAAQsM,QAAUgjB,EAAON,QACzB,MACJ,QACIM,EAAOG,SAAe,EAANF,IAIxB,OAAOvvB,GAaX2xB,EAAmBjC,gBAAkB,SAAyBJ,GAG1D,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBviC,KAAKuL,OAAOg3B,EAAQA,EAAOR,WAWtC6C,EAAmBhC,OAAS,SAAgB3vB,GACxC,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACW,MAAlBA,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,YAC5Cg9B,EAAM+B,SAAS5vB,EAAQkxB,QACjB,0BACQ,MAAnBlxB,EAAQsM,SAAmBtM,EAAQnP,eAAe,cAC7Cg9B,EAAMgC,UAAU7vB,EAAQsM,UAActM,EAAQsM,SAAWuhB,EAAMgC,UAAU7vB,EAAQsM,QAAQwQ,MAAQ+Q,EAAMgC,UAAU7vB,EAAQsM,QAAQyQ,OAC3H,iCACR,MAWX4U,EAAmB7B,WAAa,SAAoBC,GAChD,GAAIA,aAAkBhC,EAAMR,KAAKoE,mBAC7B,OAAO5B,EACX,IAAI/vB,EAAU,IAAI+tB,EAAMR,KAAKoE,mBAY7B,OAXqB,MAAjB5B,EAAOmB,SACPlxB,EAAQkxB,OAASx4B,OAAOq3B,EAAOmB,SACb,MAAlBnB,EAAOzjB,UACHuhB,EAAMhR,MACL7c,EAAQsM,QAAUuhB,EAAMhR,KAAK2K,UAAUuI,EAAOzjB,UAAUoZ,UAAW,EACrC,iBAAnBqK,EAAOzjB,QACnBtM,EAAQsM,QAAU8a,SAAS2I,EAAOzjB,QAAS,IACZ,iBAAnByjB,EAAOzjB,QACnBtM,EAAQsM,QAAUyjB,EAAOzjB,QACM,iBAAnByjB,EAAOzjB,UACnBtM,EAAQsM,QAAU,IAAIuhB,EAAMmC,SAASD,EAAOzjB,QAAQwQ,MAAQ,EAAGiT,EAAOzjB,QAAQyQ,OAAS,GAAGiL,aAC3FhoB,GAYX2xB,EAAmB1B,SAAW,SAAkBjwB,EAAShQ,GAChDA,IACDA,EAAU,IACd,IAAI+/B,EAAS,GACb,GAAI//B,EAAQmgC,SAER,GADAJ,EAAOmB,OAAS,GACZrD,EAAMhR,KAAM,CACZ,IAAIuT,EAAO,IAAIvC,EAAMhR,KAAK,EAAG,GAAG,GAChCkT,EAAOzjB,QAAUtc,EAAQqgC,QAAU33B,OAAS03B,EAAKvnB,WAAa7Y,EAAQqgC,QAAU/gC,OAAS8gC,EAAKpI,WAAaoI,OAE3GL,EAAOzjB,QAAUtc,EAAQqgC,QAAU33B,OAAS,IAAM,EAS1D,OAPsB,MAAlBsH,EAAQkxB,QAAkBlxB,EAAQnP,eAAe,YACjDk/B,EAAOmB,OAASlxB,EAAQkxB,QACL,MAAnBlxB,EAAQsM,SAAmBtM,EAAQnP,eAAe,aACnB,iBAApBmP,EAAQsM,QACfyjB,EAAOzjB,QAAUtc,EAAQqgC,QAAU33B,OAASA,OAAOsH,EAAQsM,SAAWtM,EAAQsM,QAE9EyjB,EAAOzjB,QAAUtc,EAAQqgC,QAAU33B,OAASm1B,EAAMhR,KAAKlF,UAAU9O,SAAS/X,KAAKkP,EAAQsM,SAAWtc,EAAQqgC,QAAU/gC,OAAS,IAAIu+B,EAAMmC,SAAShwB,EAAQsM,QAAQwQ,MAAQ,EAAG9c,EAAQsM,QAAQyQ,OAAS,GAAGiL,WAAahoB,EAAQsM,SAC7NyjB,GAUX4B,EAAmBha,UAAU4N,OAAS,WAClC,OAAOx4B,KAAKD,YAAYmjC,SAASljC,KAAMygC,EAAUM,KAAK4C,gBAGnDiB,EA7Ne,GAgOnBpE,GAGX9hC,EAAOD,QAAUuiC,G,4BCpxJjBtiC,EAAOD,QAAU,EAAjB,O,4BCFA,IAAIwoC,EAAWxoC,EA2Bf,SAASyoC,IACLD,EAASlG,KAAKoG,aACdF,EAASpG,OAAOsG,WAAWF,EAASG,cACpCH,EAAStG,OAAOwG,WAAWF,EAASI,cAtBxCJ,EAASK,MAAQ,UAGjBL,EAASpG,OAAe,EAAQ,MAChCoG,EAASG,aAAe,EAAQ,MAChCH,EAAStG,OAAe,EAAQ,MAChCsG,EAASI,aAAe,EAAQ,KAGhCJ,EAASlG,KAAe,EAAQ,MAChCkG,EAASM,IAAe,EAAQ,MAChCN,EAAShG,MAAe,EAAQ,MAChCgG,EAASC,UAAeA,EAcxBA,K,4BClCAxoC,EAAOD,QAAUkiC,EAEjB,IAEI0G,EAFAtG,EAAY,EAAQ,MAIpBkC,EAAYlC,EAAKkC,SACjBvU,EAAYqS,EAAKrS,KAGrB,SAAS8Y,EAAgBjF,EAAQkF,GAC7B,OAAOhlC,WAAW,uBAAyB8/B,EAAOhX,IAAM,OAASkc,GAAe,GAAK,MAAQlF,EAAO5T,KASxG,SAASgS,EAAOt8B,GAMZrE,KAAKsrB,IAAMjnB,EAMXrE,KAAKurB,IAAM,EAMXvrB,KAAK2uB,IAAMtqB,EAAO1E,OAGtB,IA4CQU,EA5CJqnC,EAAqC,oBAAf3mC,WACpB,SAA4BsD,GAC1B,GAAIA,aAAkBtD,YAAcgB,MAAMC,QAAQqC,GAC9C,OAAO,IAAIs8B,EAAOt8B,GACtB,MAAM5E,MAAM,mBAGd,SAAsB4E,GACpB,GAAItC,MAAMC,QAAQqC,GACd,OAAO,IAAIs8B,EAAOt8B,GACtB,MAAM5E,MAAM,mBAGhBwwB,EAAS,WACT,OAAO8Q,EAAK4G,OACN,SAA6BtjC,GAC3B,OAAQs8B,EAAO1Q,OAAS,SAAuB5rB,GAC3C,OAAO08B,EAAK4G,OAAOC,SAASvjC,GACtB,IAAIgjC,EAAahjC,GAEjBqjC,EAAarjC,KACpBA,IAGLqjC,GAwDV,SAASG,IAEL,IAAIC,EAAO,IAAI7E,EAAS,EAAG,GACvBvjC,EAAI,EACR,KAAIM,KAAK2uB,IAAM3uB,KAAKurB,IAAM,GAanB,CACH,KAAO7rB,EAAI,IAAKA,EAAG,CAEf,GAAIM,KAAKurB,KAAOvrB,KAAK2uB,IACjB,MAAM6Y,EAAgBxnC,MAG1B,GADA8nC,EAAK/Z,IAAM+Z,EAAK/Z,IAA2B,IAArB/tB,KAAKsrB,IAAItrB,KAAKurB,OAAmB,EAAJ7rB,KAAW,EAC1DM,KAAKsrB,IAAItrB,KAAKurB,OAAS,IACvB,OAAOuc,EAIf,OADAA,EAAK/Z,IAAM+Z,EAAK/Z,IAA6B,IAAvB/tB,KAAKsrB,IAAItrB,KAAKurB,SAAqB,EAAJ7rB,KAAW,EACzDooC,EAxBP,KAAOpoC,EAAI,IAAKA,EAGZ,GADAooC,EAAK/Z,IAAM+Z,EAAK/Z,IAA2B,IAArB/tB,KAAKsrB,IAAItrB,KAAKurB,OAAmB,EAAJ7rB,KAAW,EAC1DM,KAAKsrB,IAAItrB,KAAKurB,OAAS,IACvB,OAAOuc,EAKf,GAFAA,EAAK/Z,IAAM+Z,EAAK/Z,IAA2B,IAArB/tB,KAAKsrB,IAAItrB,KAAKurB,OAAe,MAAQ,EAC3Duc,EAAK9Z,IAAM8Z,EAAK9Z,IAA2B,IAArBhuB,KAAKsrB,IAAItrB,KAAKurB,OAAgB,KAAO,EACvDvrB,KAAKsrB,IAAItrB,KAAKurB,OAAS,IACvB,OAAOuc,EAgBf,GAfIpoC,EAAI,EAeJM,KAAK2uB,IAAM3uB,KAAKurB,IAAM,GACtB,KAAO7rB,EAAI,IAAKA,EAGZ,GADAooC,EAAK9Z,IAAM8Z,EAAK9Z,IAA2B,IAArBhuB,KAAKsrB,IAAItrB,KAAKurB,OAAmB,EAAJ7rB,EAAQ,KAAO,EAC9DM,KAAKsrB,IAAItrB,KAAKurB,OAAS,IACvB,OAAOuc,OAGf,KAAOpoC,EAAI,IAAKA,EAAG,CAEf,GAAIM,KAAKurB,KAAOvrB,KAAK2uB,IACjB,MAAM6Y,EAAgBxnC,MAG1B,GADA8nC,EAAK9Z,IAAM8Z,EAAK9Z,IAA2B,IAArBhuB,KAAKsrB,IAAItrB,KAAKurB,OAAmB,EAAJ7rB,EAAQ,KAAO,EAC9DM,KAAKsrB,IAAItrB,KAAKurB,OAAS,IACvB,OAAOuc,EAInB,MAAMroC,MAAM,2BAkChB,SAASsoC,EAAgBzc,EAAKjB,GAC1B,OAAQiB,EAAIjB,EAAM,GACViB,EAAIjB,EAAM,IAAM,EAChBiB,EAAIjB,EAAM,IAAM,GAChBiB,EAAIjB,EAAM,IAAM,MAAQ,EA+BpC,SAAS2d,IAGL,GAAIhoC,KAAKurB,IAAM,EAAIvrB,KAAK2uB,IACpB,MAAM6Y,EAAgBxnC,KAAM,GAEhC,OAAO,IAAIijC,EAAS8E,EAAgB/nC,KAAKsrB,IAAKtrB,KAAKurB,KAAO,GAAIwc,EAAgB/nC,KAAKsrB,IAAKtrB,KAAKurB,KAAO,IA3KxGoV,EAAO1Q,OAASA,IAEhB0Q,EAAO/V,UAAUqd,OAASlH,EAAKh/B,MAAM6oB,UAAUlf,UAAuCq1B,EAAKh/B,MAAM6oB,UAAUliB,MAO3Gi4B,EAAO/V,UAAUmX,QACT1hC,EAAQ,WACL,WACuD,GAA1DA,GAAuC,IAArBL,KAAKsrB,IAAItrB,KAAKurB,QAAuB,EAAOvrB,KAAKsrB,IAAItrB,KAAKurB,OAAS,IAAK,OAAOlrB,EACvC,GAA1DA,GAASA,GAA8B,IAArBL,KAAKsrB,IAAItrB,KAAKurB,OAAgB,KAAO,EAAOvrB,KAAKsrB,IAAItrB,KAAKurB,OAAS,IAAK,OAAOlrB,EACvC,GAA1DA,GAASA,GAA8B,IAArBL,KAAKsrB,IAAItrB,KAAKurB,OAAe,MAAQ,EAAOvrB,KAAKsrB,IAAItrB,KAAKurB,OAAS,IAAK,OAAOlrB,EACvC,GAA1DA,GAASA,GAA8B,IAArBL,KAAKsrB,IAAItrB,KAAKurB,OAAe,MAAQ,EAAOvrB,KAAKsrB,IAAItrB,KAAKurB,OAAS,IAAK,OAAOlrB,EACvC,GAA1DA,GAASA,GAA+B,GAAtBL,KAAKsrB,IAAItrB,KAAKurB,OAAe,MAAQ,EAAOvrB,KAAKsrB,IAAItrB,KAAKurB,OAAS,IAAK,OAAOlrB,EAGjG,IAAKL,KAAKurB,KAAO,GAAKvrB,KAAK2uB,IAEvB,MADA3uB,KAAKurB,IAAMvrB,KAAK2uB,IACV6Y,EAAgBxnC,KAAM,IAEhC,OAAOK,IAQfsgC,EAAO/V,UAAU8E,MAAQ,WACrB,OAAuB,EAAhB1vB,KAAK+hC,UAOhBpB,EAAO/V,UAAUsd,OAAS,WACtB,IAAI7nC,EAAQL,KAAK+hC,SACjB,OAAO1hC,IAAU,IAAc,EAARA,GAAa,GAqFxCsgC,EAAO/V,UAAUud,KAAO,WACpB,OAAyB,IAAlBnoC,KAAK+hC,UAchBpB,EAAO/V,UAAUwd,QAAU,WAGvB,GAAIpoC,KAAKurB,IAAM,EAAIvrB,KAAK2uB,IACpB,MAAM6Y,EAAgBxnC,KAAM,GAEhC,OAAO+nC,EAAgB/nC,KAAKsrB,IAAKtrB,KAAKurB,KAAO,IAOjDoV,EAAO/V,UAAUyd,SAAW,WAGxB,GAAIroC,KAAKurB,IAAM,EAAIvrB,KAAK2uB,IACpB,MAAM6Y,EAAgBxnC,KAAM,GAEhC,OAAkD,EAA3C+nC,EAAgB/nC,KAAKsrB,IAAKtrB,KAAKurB,KAAO,IAmCjDoV,EAAO/V,UAAUoX,MAAQ,WAGrB,GAAIhiC,KAAKurB,IAAM,EAAIvrB,KAAK2uB,IACpB,MAAM6Y,EAAgBxnC,KAAM,GAEhC,IAAIK,EAAQ0gC,EAAKiB,MAAMnW,YAAY7rB,KAAKsrB,IAAKtrB,KAAKurB,KAElD,OADAvrB,KAAKurB,KAAO,EACLlrB,GAQXsgC,EAAO/V,UAAUob,OAAS,WAGtB,GAAIhmC,KAAKurB,IAAM,EAAIvrB,KAAK2uB,IACpB,MAAM6Y,EAAgBxnC,KAAM,GAEhC,IAAIK,EAAQ0gC,EAAKiB,MAAMvU,aAAaztB,KAAKsrB,IAAKtrB,KAAKurB,KAEnD,OADAvrB,KAAKurB,KAAO,EACLlrB,GAOXsgC,EAAO/V,UAAU6G,MAAQ,WACrB,IAAI9xB,EAASK,KAAK+hC,SACd3X,EAASpqB,KAAKurB,IACdlB,EAASrqB,KAAKurB,IAAM5rB,EAGxB,GAAI0qB,EAAMrqB,KAAK2uB,IACX,MAAM6Y,EAAgBxnC,KAAML,GAGhC,OADAK,KAAKurB,KAAO5rB,EACRoC,MAAMC,QAAQhC,KAAKsrB,KACZtrB,KAAKsrB,IAAI5iB,MAAM0hB,EAAOC,GAC1BD,IAAUC,EACX,IAAIrqB,KAAKsrB,IAAIvrB,YAAY,GACzBC,KAAKioC,OAAOlkC,KAAK/D,KAAKsrB,IAAKlB,EAAOC,IAO5CsW,EAAO/V,UAAUb,OAAS,WACtB,IAAI0H,EAAQzxB,KAAKyxB,QACjB,OAAO/C,EAAKE,KAAK6C,EAAO,EAAGA,EAAM9xB,SAQrCghC,EAAO/V,UAAU0d,KAAO,SAAc3oC,GAClC,GAAsB,iBAAXA,EAAqB,CAE5B,GAAIK,KAAKurB,IAAM5rB,EAASK,KAAK2uB,IACzB,MAAM6Y,EAAgBxnC,KAAML,GAChCK,KAAKurB,KAAO5rB,OAEZ,GAEI,GAAIK,KAAKurB,KAAOvrB,KAAK2uB,IACjB,MAAM6Y,EAAgBxnC,YACE,IAAvBA,KAAKsrB,IAAItrB,KAAKurB,QAE3B,OAAOvrB,MAQX2gC,EAAO/V,UAAU8X,SAAW,SAAS6F,GACjC,OAAQA,GACJ,KAAK,EACDvoC,KAAKsoC,OACL,MACJ,KAAK,EACDtoC,KAAKsoC,KAAK,GACV,MACJ,KAAK,EACDtoC,KAAKsoC,KAAKtoC,KAAK+hC,UACf,MACJ,KAAK,EACD,KAA0C,IAAlCwG,EAA2B,EAAhBvoC,KAAK+hC,WACpB/hC,KAAK0iC,SAAS6F,GAElB,MACJ,KAAK,EACDvoC,KAAKsoC,KAAK,GACV,MAGJ,QACI,MAAM7oC,MAAM,qBAAuB8oC,EAAW,cAAgBvoC,KAAKurB,KAE3E,OAAOvrB,MAGX2gC,EAAOwG,WAAa,SAASqB,GACzBnB,EAAemB,EACf7H,EAAO1Q,OAASA,IAChBoX,EAAaF,aAEb,IAAI3d,EAAKuX,EAAKjR,KAAO,SAAsC,WAC3DiR,EAAK0H,MAAM9H,EAAO/V,UAAW,CAEzBqX,MAAO,WACH,OAAO4F,EAAe9jC,KAAK/D,MAAMwpB,IAAI,IAGzCyc,OAAQ,WACJ,OAAO4B,EAAe9jC,KAAK/D,MAAMwpB,IAAI,IAGzCkf,OAAQ,WACJ,OAAOb,EAAe9jC,KAAK/D,MAAM2oC,WAAWnf,IAAI,IAGpDof,QAAS,WACL,OAAOZ,EAAYjkC,KAAK/D,MAAMwpB,IAAI,IAGtCqf,SAAU,WACN,OAAOb,EAAYjkC,KAAK/D,MAAMwpB,IAAI,Q,2BCrZ9C9qB,EAAOD,QAAU4oC,EAGjB,IAAI1G,EAAS,EAAQ,OACpB0G,EAAazc,UAAYtnB,OAAO2sB,OAAO0Q,EAAO/V,YAAY7qB,YAAcsnC,EAEzE,IAAItG,EAAO,EAAQ,MASnB,SAASsG,EAAahjC,GAClBs8B,EAAO58B,KAAK/D,KAAMqE,GAStBgjC,EAAaF,WAAa,WAElBpG,EAAK4G,SACLN,EAAazc,UAAUqd,OAASlH,EAAK4G,OAAO/c,UAAUliB,QAO9D2+B,EAAazc,UAAUb,OAAS,WAC5B,IAAI4E,EAAM3uB,KAAK+hC,SACf,OAAO/hC,KAAKsrB,IAAIwd,UACV9oC,KAAKsrB,IAAIwd,UAAU9oC,KAAKurB,IAAKvrB,KAAKurB,IAAM7U,KAAKmH,IAAI7d,KAAKurB,IAAMoD,EAAK3uB,KAAK2uB,MACtE3uB,KAAKsrB,IAAIxP,SAAS,QAAS9b,KAAKurB,IAAKvrB,KAAKurB,IAAM7U,KAAKmH,IAAI7d,KAAKurB,IAAMoD,EAAK3uB,KAAK2uB,OAUxF0Y,EAAaF,c,sBCjDbzoC,EAAOD,QAAU,I,4BCKPA,EA6BNsqC,QAAU,EAAQ,O,4BClCtBrqC,EAAOD,QAAUsqC,EAEjB,IAAIhI,EAAO,EAAQ,MAsCnB,SAASgI,EAAQC,EAASC,EAAkBC,GAExC,GAAuB,mBAAZF,EACP,MAAM1pC,UAAU,8BAEpByhC,EAAKrW,aAAa3mB,KAAK/D,MAMvBA,KAAKgpC,QAAUA,EAMfhpC,KAAKipC,iBAAmBE,QAAQF,GAMhCjpC,KAAKkpC,kBAAoBC,QAAQD,IA1DpCH,EAAQne,UAAYtnB,OAAO2sB,OAAO8Q,EAAKrW,aAAaE,YAAY7qB,YAAcgpC,EAwE/EA,EAAQne,UAAUwe,QAAU,SAASA,EAAQC,EAAQC,EAAaC,EAAcC,EAASC,GAErF,IAAKD,EACD,MAAMlqC,UAAU,6BAEpB,IAAIT,EAAOmB,KACX,IAAKypC,EACD,OAAO1I,EAAK2I,UAAUN,EAASvqC,EAAMwqC,EAAQC,EAAaC,EAAcC,GAE5E,GAAK3qC,EAAKmqC,QAKV,IACI,OAAOnqC,EAAKmqC,QACRK,EACAC,EAAYzqC,EAAKoqC,iBAAmB,kBAAoB,UAAUO,GAAS9U,UAC3E,SAAqBvvB,EAAK2E,GAEtB,GAAI3E,EAEA,OADAtG,EAAKmsB,KAAK,QAAS7lB,EAAKkkC,GACjBI,EAAStkC,GAGpB,GAAiB,OAAb2E,EAAJ,CAKA,KAAMA,aAAoBy/B,GACtB,IACIz/B,EAAWy/B,EAAa1qC,EAAKqqC,kBAAoB,kBAAoB,UAAUp/B,GACjF,MAAO3E,GAEL,OADAtG,EAAKmsB,KAAK,QAAS7lB,EAAKkkC,GACjBI,EAAStkC,GAKxB,OADAtG,EAAKmsB,KAAK,OAAQlhB,EAAUu/B,GACrBI,EAAS,KAAM3/B,GAdlBjL,EAAKwrB,KAAqB,MAiBxC,MAAOllB,GAGL,OAFAtG,EAAKmsB,KAAK,QAAS7lB,EAAKkkC,QACxBrrB,YAAW,WAAayrB,EAAStkC,KAAS,QAnC1C6Y,YAAW,WAAayrB,EAAShqC,MAAM,oBAAsB,IA6CrEspC,EAAQne,UAAUP,IAAM,SAAasf,GAOjC,OANI3pC,KAAKgpC,UACAW,GACD3pC,KAAKgpC,QAAQ,KAAM,KAAM,MAC7BhpC,KAAKgpC,QAAU,KACfhpC,KAAKgrB,KAAK,OAAOF,OAEd9qB,O,4BC3IXtB,EAAOD,QAAUwkC,EAEjB,IAAIlC,EAAO,EAAQ,MAUnB,SAASkC,EAASlV,EAAIC,GASlBhuB,KAAK+tB,GAAKA,IAAO,EAMjB/tB,KAAKguB,GAAKA,IAAO,EAQrB,IAAI4b,EAAO3G,EAAS2G,KAAO,IAAI3G,EAAS,EAAG,GAE3C2G,EAAK3O,SAAW,WAAa,OAAO,GACpC2O,EAAKC,SAAWD,EAAKjB,SAAW,WAAa,OAAO3oC,MACpD4pC,EAAKjqC,OAAS,WAAa,OAAO,GAOlC,IAAImqC,EAAW7G,EAAS6G,SAAW,mBAOnC7G,EAAS5J,WAAa,SAAoBh5B,GACtC,GAAc,IAAVA,EACA,OAAOupC,EACX,IAAI3d,EAAO5rB,EAAQ,EACf4rB,IACA5rB,GAASA,GACb,IAAI0tB,EAAK1tB,IAAU,EACf2tB,GAAM3tB,EAAQ0tB,GAAM,aAAe,EAUvC,OATI9B,IACA+B,GAAMA,IAAO,EACbD,GAAMA,IAAO,IACPA,EAAK,aACPA,EAAK,IACCC,EAAK,aACPA,EAAK,KAGV,IAAIiV,EAASlV,EAAIC,IAQ5BiV,EAASxiC,KAAO,SAAcJ,GAC1B,GAAqB,iBAAVA,EACP,OAAO4iC,EAAS5J,WAAWh5B,GAC/B,GAAI0gC,EAAK8B,SAASxiC,GAAQ,CAEtB,IAAI0gC,EAAKjR,KAGL,OAAOmT,EAAS5J,WAAWgB,SAASh6B,EAAO,KAF3CA,EAAQ0gC,EAAKjR,KAAKmK,WAAW55B,GAIrC,OAAOA,EAAM0vB,KAAO1vB,EAAM2vB,KAAO,IAAIiT,EAAS5iC,EAAM0vB,MAAQ,EAAG1vB,EAAM2vB,OAAS,GAAK4Z,GAQvF3G,EAASrY,UAAUqQ,SAAW,SAAkBtC,GAC5C,IAAKA,GAAY34B,KAAKguB,KAAO,GAAI,CAC7B,IAAID,EAAgB,GAAV/tB,KAAK+tB,KAAW,EACtBC,GAAMhuB,KAAKguB,KAAW,EAG1B,OAFKD,IACDC,EAAKA,EAAK,IAAM,KACXD,EAAU,WAALC,GAElB,OAAOhuB,KAAK+tB,GAAe,WAAV/tB,KAAKguB,IAQ1BiV,EAASrY,UAAUmf,OAAS,SAAgBpR,GACxC,OAAOoI,EAAKjR,KACN,IAAIiR,EAAKjR,KAAe,EAAV9vB,KAAK+tB,GAAkB,EAAV/tB,KAAKguB,GAAQmb,QAAQxQ,IAEhD,CAAE5I,IAAe,EAAV/vB,KAAK+tB,GAAQiC,KAAgB,EAAVhwB,KAAKguB,GAAQ2K,SAAUwQ,QAAQxQ,KAGnE,IAAI5sB,EAAaJ,OAAOif,UAAU7e,WAOlCk3B,EAAS+G,SAAW,SAAkBC,GAClC,OAAIA,IAASH,EACFF,EACJ,IAAI3G,GACLl3B,EAAWhI,KAAKkmC,EAAM,GACtBl+B,EAAWhI,KAAKkmC,EAAM,IAAM,EAC5Bl+B,EAAWhI,KAAKkmC,EAAM,IAAM,GAC5Bl+B,EAAWhI,KAAKkmC,EAAM,IAAM,MAAQ,GAEpCl+B,EAAWhI,KAAKkmC,EAAM,GACtBl+B,EAAWhI,KAAKkmC,EAAM,IAAM,EAC5Bl+B,EAAWhI,KAAKkmC,EAAM,IAAM,GAC5Bl+B,EAAWhI,KAAKkmC,EAAM,IAAM,MAAQ,IAQ9ChH,EAASrY,UAAUsf,OAAS,WACxB,OAAOv+B,OAAOC,aACO,IAAjB5L,KAAK+tB,GACL/tB,KAAK+tB,KAAO,EAAK,IACjB/tB,KAAK+tB,KAAO,GAAK,IACjB/tB,KAAK+tB,KAAO,GACK,IAAjB/tB,KAAKguB,GACLhuB,KAAKguB,KAAO,EAAK,IACjBhuB,KAAKguB,KAAO,GAAK,IACjBhuB,KAAKguB,KAAO,KAQpBiV,EAASrY,UAAUif,SAAW,WAC1B,IAAIM,EAASnqC,KAAKguB,IAAM,GAGxB,OAFAhuB,KAAKguB,KAAQhuB,KAAKguB,IAAM,EAAIhuB,KAAK+tB,KAAO,IAAMoc,KAAU,EACxDnqC,KAAK+tB,IAAQ/tB,KAAK+tB,IAAM,EAAsBoc,KAAU,EACjDnqC,MAOXijC,EAASrY,UAAU+d,SAAW,WAC1B,IAAIwB,IAAmB,EAAVnqC,KAAK+tB,IAGlB,OAFA/tB,KAAK+tB,KAAQ/tB,KAAK+tB,KAAO,EAAI/tB,KAAKguB,IAAM,IAAMmc,KAAU,EACxDnqC,KAAKguB,IAAQhuB,KAAKguB,KAAO,EAAqBmc,KAAU,EACjDnqC,MAOXijC,EAASrY,UAAUjrB,OAAS,WACxB,IAAIyqC,EAASpqC,KAAK+tB,GACdsc,GAASrqC,KAAK+tB,KAAO,GAAK/tB,KAAKguB,IAAM,KAAO,EAC5Csc,EAAStqC,KAAKguB,KAAO,GACzB,OAAiB,IAAVsc,EACU,IAAVD,EACED,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EACxBC,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EAC1BC,EAAQ,IAAM,EAAI,K,kCCrM7B,IAAIvJ,EAAOtiC,EA2OX,SAASgqC,EAAM8B,EAAK5kC,EAAK6kC,GACrB,IAAK,IAAInc,EAAO/qB,OAAO+qB,KAAK1oB,GAAMjG,EAAI,EAAGA,EAAI2uB,EAAK1uB,SAAUD,OACnCF,IAAjB+qC,EAAIlc,EAAK3uB,KAAsB8qC,IAC/BD,EAAIlc,EAAK3uB,IAAMiG,EAAI0oB,EAAK3uB,KAChC,OAAO6qC,EAoBX,SAASE,EAASxrC,GAEd,SAASyrC,EAAYz3B,EAASmuB,GAE1B,KAAMphC,gBAAgB0qC,GAClB,OAAO,IAAIA,EAAYz3B,EAASmuB,GAKpC99B,OAAOw1B,eAAe94B,KAAM,UAAW,CAAEkC,IAAK,WAAa,OAAO+Q,KAG9DxT,MAAMkrC,kBACNlrC,MAAMkrC,kBAAkB3qC,KAAM0qC,GAE9BpnC,OAAOw1B,eAAe94B,KAAM,QAAS,CAAEK,OAAO,IAAIZ,OAAQwe,OAAS,KAEnEmjB,GACAqH,EAAMzoC,KAAMohC,GAWpB,OARCsJ,EAAY9f,UAAYtnB,OAAO2sB,OAAOxwB,MAAMmrB,YAAY7qB,YAAc2qC,EAEvEpnC,OAAOw1B,eAAe4R,EAAY9f,UAAW,OAAQ,CAAE1oB,IAAK,WAAa,OAAOjD,KAEhFyrC,EAAY9f,UAAU9O,SAAW,WAC7B,OAAO9b,KAAKf,KAAO,KAAOe,KAAKiT,SAG5By3B,EA9RX3J,EAAK2I,UAAY,EAAQ,MAGzB3I,EAAKjX,OAAS,EAAQ,MAGtBiX,EAAKrW,aAAe,EAAQ,MAG5BqW,EAAKiB,MAAQ,EAAQ,KAGrBjB,EAAK9S,QAAU,EAAQ,MAGvB8S,EAAKrS,KAAO,EAAQ,MAGpBqS,EAAK6J,KAAO,EAAQ,MAGpB7J,EAAKkC,SAAW,EAAQ,MAOxBlC,EAAK8J,OAAS1B,aAA0B,IAAX,EAAA9hC,GACP,EAAAA,GACA,EAAAA,EAAOM,SACP,EAAAN,EAAOM,QAAQC,UACf,EAAAP,EAAOM,QAAQC,SAASC,MAO9Ck5B,EAAK+J,OAAS/J,EAAK8J,QAAU,EAAAxjC,GACG,oBAAXE,QAA0BA,QACf,oBAAX1I,MAA0BA,MACjCmB,KAQd+gC,EAAKc,WAAav+B,OAAOynC,OAASznC,OAAOynC,OAAO,IAAiC,GAOjFhK,EAAKiK,YAAc1nC,OAAOynC,OAASznC,OAAOynC,OAAO,IAAiC,GAQlFhK,EAAK+B,UAAYvgC,OAAOugC,WAAwC,SAAmBziC,GAC/E,MAAwB,iBAAVA,GAAsBojC,SAASpjC,IAAUqW,KAAK2V,MAAMhsB,KAAWA,GAQjF0gC,EAAK8B,SAAW,SAAkBxiC,GAC9B,MAAwB,iBAAVA,GAAsBA,aAAiBsL,QAQzDo1B,EAAKkK,SAAW,SAAkB5qC,GAC9B,OAAOA,GAA0B,iBAAVA,GAW3B0gC,EAAKmK,MAQLnK,EAAKoK,MAAQ,SAAexX,EAAKyX,GAC7B,IAAI/qC,EAAQszB,EAAIyX,GAChB,QAAa,MAAT/qC,IAAiBszB,EAAI7vB,eAAesnC,MACZ,iBAAV/qC,IAAuB0B,MAAMC,QAAQ3B,GAASA,EAAMV,OAAS2D,OAAO+qB,KAAKhuB,GAAOV,QAAU,IAehHohC,EAAK4G,OAAS,WACV,IACI,IAAIA,EAAS5G,EAAK9S,QAAQ,UAAU0Z,OAEpC,OAAOA,EAAO/c,UAAUygB,UAAY1D,EAAoC,KAC1E,MAAOziC,GAEL,OAAO,MAPD,GAYd67B,EAAKuK,aAAe,KAGpBvK,EAAKwK,oBAAsB,KAO3BxK,EAAKa,UAAY,SAAmB4J,GAEhC,MAA8B,iBAAhBA,EACRzK,EAAK4G,OACD5G,EAAKwK,oBAAoBC,GACzB,IAAIzK,EAAKh/B,MAAMypC,GACnBzK,EAAK4G,OACD5G,EAAKuK,aAAaE,GACI,oBAAfzqC,WACHyqC,EACA,IAAIzqC,WAAWyqC,IAOjCzK,EAAKh/B,MAA8B,oBAAfhB,WAA6BA,WAAwCgB,MAezFg/B,EAAKjR,KAAkCiR,EAAK+J,OAAOW,SAAsC1K,EAAK+J,OAAOW,QAAQ3b,MACtEiR,EAAK+J,OAAOhb,MACvCiR,EAAK9S,QAAQ,QAOzB8S,EAAK2K,OAAS,mBAOd3K,EAAK4K,QAAU,wBAOf5K,EAAK6K,QAAU,6CAOf7K,EAAK8K,WAAa,SAAoBxrC,GAClC,OAAOA,EACD0gC,EAAKkC,SAASxiC,KAAKJ,GAAO6pC,SAC1BnJ,EAAKkC,SAAS6G,UASxB/I,EAAK+K,aAAe,SAAsB7B,EAAMtR,GAC5C,IAAImP,EAAO/G,EAAKkC,SAAS+G,SAASC,GAClC,OAAIlJ,EAAKjR,KACEiR,EAAKjR,KAAKsJ,SAAS0O,EAAK/Z,GAAI+Z,EAAK9Z,GAAI2K,GACzCmP,EAAK7M,SAASkO,QAAQxQ,KAkBjCoI,EAAK0H,MAAQA,EAOb1H,EAAKgL,QAAU,SAAiB7R,GAC5B,OAAOA,EAAIlQ,OAAO,GAAGgiB,cAAgB9R,EAAIrd,UAAU,IA0CvDkkB,EAAK0J,SAAWA,EAmBhB1J,EAAKkL,cAAgBxB,EAAS,iBAoB9B1J,EAAK4F,YAAc,SAAkBuF,GAEjC,IADA,IAAIC,EAAW,GACNzsC,EAAI,EAAGA,EAAIwsC,EAAWvsC,SAAUD,EACrCysC,EAASD,EAAWxsC,IAAM,EAO9B,OAAO,WACH,IAAK,IAAI2uB,EAAO/qB,OAAO+qB,KAAKruB,MAAON,EAAI2uB,EAAK1uB,OAAS,EAAGD,GAAK,IAAKA,EAC9D,GAA0B,IAAtBysC,EAAS9d,EAAK3uB,UAA+BF,IAAlBQ,KAAKquB,EAAK3uB,KAAuC,OAAlBM,KAAKquB,EAAK3uB,IACpE,OAAO2uB,EAAK3uB,KAiB5BqhC,EAAK6F,YAAc,SAAkBsF,GAQjC,OAAO,SAASjtC,GACZ,IAAK,IAAIS,EAAI,EAAGA,EAAIwsC,EAAWvsC,SAAUD,EACjCwsC,EAAWxsC,KAAOT,UACXe,KAAKksC,EAAWxsC,MAoBvCqhC,EAAK4C,cAAgB,CACjBL,MAAO33B,OACP43B,MAAO53B,OACP8lB,MAAO9lB,OACP63B,MAAM,GAIVzC,EAAKoG,WAAa,WACd,IAAIQ,EAAS5G,EAAK4G,OAEbA,GAML5G,EAAKuK,aAAe3D,EAAOlnC,OAASM,WAAWN,MAAQknC,EAAOlnC,MAE1D,SAAqBJ,EAAO+rC,GACxB,OAAO,IAAIzE,EAAOtnC,EAAO+rC,IAEjCrL,EAAKwK,oBAAsB5D,EAAO0E,aAE9B,SAA4BhqC,GACxB,OAAO,IAAIslC,EAAOtlC,KAbtB0+B,EAAKuK,aAAevK,EAAKwK,oBAAsB,O,4BCpZvD7sC,EAAOD,QAAUoiC,EAEjB,IAEIuG,EAFArG,EAAY,EAAQ,MAIpBkC,EAAYlC,EAAKkC,SACjBnZ,EAAYiX,EAAKjX,OACjB4E,EAAYqS,EAAKrS,KAWrB,SAAS4d,EAAG9iB,EAAImF,EAAKtD,GAMjBrrB,KAAKwpB,GAAKA,EAMVxpB,KAAK2uB,IAAMA,EAMX3uB,KAAKusC,UAAO/sC,EAMZQ,KAAKqrB,IAAMA,EAIf,SAASmhB,KAUT,SAASC,EAAM3K,GAMX9hC,KAAK0sC,KAAO5K,EAAO4K,KAMnB1sC,KAAK2sC,KAAO7K,EAAO6K,KAMnB3sC,KAAK2uB,IAAMmT,EAAOnT,IAMlB3uB,KAAKusC,KAAOzK,EAAO8K,OAQvB,SAAS/L,IAML7gC,KAAK2uB,IAAM,EAMX3uB,KAAK0sC,KAAO,IAAIJ,EAAGE,EAAM,EAAG,GAM5BxsC,KAAK2sC,KAAO3sC,KAAK0sC,KAMjB1sC,KAAK4sC,OAAS,KASlB,IAAI3c,EAAS,WACT,OAAO8Q,EAAK4G,OACN,WACE,OAAQ9G,EAAO5Q,OAAS,WACpB,OAAO,IAAImX,OAIjB,WACE,OAAO,IAAIvG,IAuCvB,SAASgM,EAAUxhB,EAAKC,EAAKC,GACzBD,EAAIC,GAAa,IAANF,EAoBf,SAASyhB,EAASne,EAAKtD,GACnBrrB,KAAK2uB,IAAMA,EACX3uB,KAAKusC,UAAO/sC,EACZQ,KAAKqrB,IAAMA,EA8Cf,SAAS0hB,EAAc1hB,EAAKC,EAAKC,GAC7B,KAAOF,EAAI2C,IACP1C,EAAIC,KAAkB,IAATF,EAAI0C,GAAW,IAC5B1C,EAAI0C,IAAM1C,EAAI0C,KAAO,EAAI1C,EAAI2C,IAAM,MAAQ,EAC3C3C,EAAI2C,MAAQ,EAEhB,KAAO3C,EAAI0C,GAAK,KACZzC,EAAIC,KAAkB,IAATF,EAAI0C,GAAW,IAC5B1C,EAAI0C,GAAK1C,EAAI0C,KAAO,EAExBzC,EAAIC,KAASF,EAAI0C,GA2CrB,SAASif,EAAa3hB,EAAKC,EAAKC,GAC5BD,EAAIC,GAA0B,IAAdF,EAChBC,EAAIC,EAAM,GAAMF,IAAQ,EAAM,IAC9BC,EAAIC,EAAM,GAAMF,IAAQ,GAAM,IAC9BC,EAAIC,EAAM,GAAMF,IAAQ,GA7J5BwV,EAAO5Q,OAASA,IAOhB4Q,EAAOvS,MAAQ,SAAejsB,GAC1B,OAAO,IAAI0+B,EAAKh/B,MAAMM,IAKtB0+B,EAAKh/B,QAAUA,QACf8+B,EAAOvS,MAAQyS,EAAK6J,KAAK/J,EAAOvS,MAAOyS,EAAKh/B,MAAM6oB,UAAUlf,WAUhEm1B,EAAOjW,UAAUqiB,MAAQ,SAAczjB,EAAImF,EAAKtD,GAG5C,OAFArrB,KAAK2sC,KAAO3sC,KAAK2sC,KAAKJ,KAAO,IAAID,EAAG9iB,EAAImF,EAAKtD,GAC7CrrB,KAAK2uB,KAAOA,EACL3uB,MA8BX8sC,EAASliB,UAAYtnB,OAAO2sB,OAAOqc,EAAG1hB,WACtCkiB,EAASliB,UAAUpB,GAxBnB,SAAuB6B,EAAKC,EAAKC,GAC7B,KAAOF,EAAM,KACTC,EAAIC,KAAe,IAANF,EAAY,IACzBA,KAAS,EAEbC,EAAIC,GAAOF,GA0BfwV,EAAOjW,UAAUmX,OAAS,SAAsB1hC,GAW5C,OARAL,KAAK2uB,MAAQ3uB,KAAK2sC,KAAO3sC,KAAK2sC,KAAKJ,KAAO,IAAIO,GACzCzsC,KAAkB,GACT,IAAY,EACpBA,EAAQ,MAAY,EACpBA,EAAQ,QAAY,EACpBA,EAAQ,UAAY,EACA,EAC1BA,IAAQsuB,IACD3uB,MASX6gC,EAAOjW,UAAU8E,MAAQ,SAAqBrvB,GAC1C,OAAOA,EAAQ,EACTL,KAAKitC,MAAMF,EAAe,GAAI9J,EAAS5J,WAAWh5B,IAClDL,KAAK+hC,OAAO1hC,IAQtBwgC,EAAOjW,UAAUsd,OAAS,SAAsB7nC,GAC5C,OAAOL,KAAK+hC,QAAQ1hC,GAAS,EAAIA,GAAS,MAAQ,IAsBtDwgC,EAAOjW,UAAUqb,OAAS,SAAsB5lC,GAC5C,IAAIynC,EAAO7E,EAASxiC,KAAKJ,GACzB,OAAOL,KAAKitC,MAAMF,EAAejF,EAAKnoC,SAAUmoC,IAUpDjH,EAAOjW,UAAUqX,MAAQpB,EAAOjW,UAAUqb,OAQ1CpF,EAAOjW,UAAU8d,OAAS,SAAsBroC,GAC5C,IAAIynC,EAAO7E,EAASxiC,KAAKJ,GAAOwpC,WAChC,OAAO7pC,KAAKitC,MAAMF,EAAejF,EAAKnoC,SAAUmoC,IAQpDjH,EAAOjW,UAAUud,KAAO,SAAoB9nC,GACxC,OAAOL,KAAKitC,MAAMJ,EAAW,EAAGxsC,EAAQ,EAAI,IAehDwgC,EAAOjW,UAAUwd,QAAU,SAAuB/nC,GAC9C,OAAOL,KAAKitC,MAAMD,EAAc,EAAG3sC,IAAU,IASjDwgC,EAAOjW,UAAUyd,SAAWxH,EAAOjW,UAAUwd,QAQ7CvH,EAAOjW,UAAUge,QAAU,SAAuBvoC,GAC9C,IAAIynC,EAAO7E,EAASxiC,KAAKJ,GACzB,OAAOL,KAAKitC,MAAMD,EAAc,EAAGlF,EAAK/Z,IAAIkf,MAAMD,EAAc,EAAGlF,EAAK9Z,KAU5E6S,EAAOjW,UAAUie,SAAWhI,EAAOjW,UAAUge,QAQ7C/H,EAAOjW,UAAUoX,MAAQ,SAAqB3hC,GAC1C,OAAOL,KAAKitC,MAAMlM,EAAKiB,MAAMrW,aAAc,EAAGtrB,IASlDwgC,EAAOjW,UAAUob,OAAS,SAAsB3lC,GAC5C,OAAOL,KAAKitC,MAAMlM,EAAKiB,MAAMzU,cAAe,EAAGltB,IAGnD,IAAI6sC,EAAanM,EAAKh/B,MAAM6oB,UAAUrpB,IAChC,SAAwB8pB,EAAKC,EAAKC,GAChCD,EAAI/pB,IAAI8pB,EAAKE,IAGf,SAAwBF,EAAKC,EAAKC,GAChC,IAAK,IAAI7rB,EAAI,EAAGA,EAAI2rB,EAAI1rB,SAAUD,EAC9B4rB,EAAIC,EAAM7rB,GAAK2rB,EAAI3rB,IAQ/BmhC,EAAOjW,UAAU6G,MAAQ,SAAqBpxB,GAC1C,IAAIsuB,EAAMtuB,EAAMV,SAAW,EAC3B,IAAKgvB,EACD,OAAO3uB,KAAKitC,MAAMJ,EAAW,EAAG,GACpC,GAAI9L,EAAK8B,SAASxiC,GAAQ,CACtB,IAAIirB,EAAMuV,EAAOvS,MAAMK,EAAM7E,EAAOnqB,OAAOU,IAC3CypB,EAAOve,OAAOlL,EAAOirB,EAAK,GAC1BjrB,EAAQirB,EAEZ,OAAOtrB,KAAK+hC,OAAOpT,GAAKse,MAAMC,EAAYve,EAAKtuB,IAQnDwgC,EAAOjW,UAAUb,OAAS,SAAsB1pB,GAC5C,IAAIsuB,EAAMD,EAAK/uB,OAAOU,GACtB,OAAOsuB,EACD3uB,KAAK+hC,OAAOpT,GAAKse,MAAMve,EAAKG,MAAOF,EAAKtuB,GACxCL,KAAKitC,MAAMJ,EAAW,EAAG,IAQnChM,EAAOjW,UAAUuX,KAAO,WAIpB,OAHAniC,KAAK4sC,OAAS,IAAIH,EAAMzsC,MACxBA,KAAK0sC,KAAO1sC,KAAK2sC,KAAO,IAAIL,EAAGE,EAAM,EAAG,GACxCxsC,KAAK2uB,IAAM,EACJ3uB,MAOX6gC,EAAOjW,UAAUuiB,MAAQ,WAUrB,OATIntC,KAAK4sC,QACL5sC,KAAK0sC,KAAS1sC,KAAK4sC,OAAOF,KAC1B1sC,KAAK2sC,KAAS3sC,KAAK4sC,OAAOD,KAC1B3sC,KAAK2uB,IAAS3uB,KAAK4sC,OAAOje,IAC1B3uB,KAAK4sC,OAAS5sC,KAAK4sC,OAAOL,OAE1BvsC,KAAK0sC,KAAO1sC,KAAK2sC,KAAO,IAAIL,EAAGE,EAAM,EAAG,GACxCxsC,KAAK2uB,IAAO,GAET3uB,MAOX6gC,EAAOjW,UAAUwX,OAAS,WACtB,IAAIsK,EAAO1sC,KAAK0sC,KACZC,EAAO3sC,KAAK2sC,KACZhe,EAAO3uB,KAAK2uB,IAOhB,OANA3uB,KAAKmtC,QAAQpL,OAAOpT,GAChBA,IACA3uB,KAAK2sC,KAAKJ,KAAOG,EAAKH,KACtBvsC,KAAK2sC,KAAOA,EACZ3sC,KAAK2uB,KAAOA,GAET3uB,MAOX6gC,EAAOjW,UAAU8J,OAAS,WAItB,IAHA,IAAIgY,EAAO1sC,KAAK0sC,KAAKH,KACjBjhB,EAAOtrB,KAAKD,YAAYuuB,MAAMtuB,KAAK2uB,KACnCpD,EAAO,EACJmhB,GACHA,EAAKljB,GAAGkjB,EAAKrhB,IAAKC,EAAKC,GACvBA,GAAOmhB,EAAK/d,IACZ+d,EAAOA,EAAKH,KAGhB,OAAOjhB,GAGXuV,EAAOsG,WAAa,SAASiG,GACzBhG,EAAegG,EACfvM,EAAO5Q,OAASA,IAChBmX,EAAaD,e,4BC9cjBzoC,EAAOD,QAAU2oC,EAGjB,IAAIvG,EAAS,EAAQ,OACpBuG,EAAaxc,UAAYtnB,OAAO2sB,OAAO4Q,EAAOjW,YAAY7qB,YAAcqnC,EAEzE,IAAIrG,EAAO,EAAQ,MAQnB,SAASqG,IACLvG,EAAO98B,KAAK/D,MAwChB,SAASqtC,EAAkBhiB,EAAKC,EAAKC,GAC7BF,EAAI1rB,OAAS,GACbohC,EAAKrS,KAAKG,MAAMxD,EAAKC,EAAKC,GACrBD,EAAI+f,UACT/f,EAAI+f,UAAUhgB,EAAKE,GAEnBD,EAAIuD,MAAMxD,EAAKE,GA3CvB6b,EAAaD,WAAa,WAOtBC,EAAa9Y,MAAQyS,EAAKwK,oBAE1BnE,EAAakG,iBAAmBvM,EAAK4G,QAAU5G,EAAK4G,OAAO/c,qBAAqB7pB,YAAiD,QAAnCggC,EAAK4G,OAAO/c,UAAUrpB,IAAItC,KAClH,SAA8BosB,EAAKC,EAAKC,GACxCD,EAAI/pB,IAAI8pB,EAAKE,IAIb,SAA+BF,EAAKC,EAAKC,GACzC,GAAIF,EAAIkiB,KACNliB,EAAIkiB,KAAKjiB,EAAKC,EAAK,EAAGF,EAAI1rB,aACvB,IAAK,IAAID,EAAI,EAAGA,EAAI2rB,EAAI1rB,QAC3B2rB,EAAIC,KAASF,EAAI3rB,OAQ7B0nC,EAAaxc,UAAU6G,MAAQ,SAA4BpxB,GACnD0gC,EAAK8B,SAASxiC,KACdA,EAAQ0gC,EAAKuK,aAAajrC,EAAO,WACrC,IAAIsuB,EAAMtuB,EAAMV,SAAW,EAI3B,OAHAK,KAAK+hC,OAAOpT,GACRA,GACA3uB,KAAKitC,MAAM7F,EAAakG,iBAAkB3e,EAAKtuB,GAC5CL,MAeXonC,EAAaxc,UAAUb,OAAS,SAA6B1pB,GACzD,IAAIsuB,EAAMoS,EAAK4G,OAAOpjC,WAAWlE,GAIjC,OAHAL,KAAK+hC,OAAOpT,GACRA,GACA3uB,KAAKitC,MAAMI,EAAmB1e,EAAKtuB,GAChCL,MAWXonC,EAAaD,c,0aC/Eb,gBACA,UAyBa,EAAAqG,cAAgB,IAvB7B,MAEQpuC,O,6CAEAC,qBAAqBouC,EAAiCxqC,G,yCAM1D,MAAMyqC,EAAU,IAAI,EAAAC,QAAQ1qC,GAS5B,aALQyqC,EAAQE,UAAUH,GAKnB,IAAI,EAAAI,qBAAqBH,S,0bCxBpC,gBACA,UACA,UACA,UACA,UAEA,UAQa,EAAAI,gBAAkB,KAa7B,IAZoC,iBAAzB,EAAAhuC,IAAIG,KAAK8tC,aAA4B,EAAAjuC,IAAIG,KAAK8tC,YAAc,KACrE,EAAAjuC,IAAIG,KAAK8tC,YAAc,GAGI,kBAAlB,EAAAjuC,IAAIG,KAAK+tC,OAClB,EAAAluC,IAAIG,KAAK+tC,MAAO,GAGY,kBAAnB,EAAAluC,IAAIG,KAAKguC,QAClB,EAAAnuC,IAAIG,KAAKguC,OAAQ,GAGgB,iBAAxB,EAAAnuC,IAAIG,KAAKiuC,aAA4B3rC,OAAOugC,UAAU,EAAAhjC,IAAIG,KAAKiuC,aAAe,EAAApuC,IAAIG,KAAKiuC,YAAc,EAAG,CACjH,MAAMC,EAA0C,oBAAdv0B,UAA4B,EAAAw0B,OAAOzuC,OAASia,UAAU+D,oBACxF,EAAA7d,IAAIG,KAAKiuC,WAAax3B,KAAKmH,IAAI,EAAGnH,KAAKC,MAAMw3B,GAAsB,GAAK,MAqC/D,EAAAE,YAAc,IAjC3B,MACQjvC,O,yCAEJ,EAAA0uC,wBAGM,EAAAQ,cAIFjvC,qBAAqBouC,EAAiCxqC,G,yCAE1D,IAAIoB,EACJ,GAA4B,iBAAjBopC,EACT,GAAqB,oBAAVrrB,MAET/d,QAAe,EAAAkqC,UAAU,EAAAhmC,SAAV,CAAoBklC,OAC9B,CAEL,MAAM3jC,QAAiBsY,MAAMqrB,GACvBjrB,QAAoB1Y,EAAS0Y,cACnCne,EAAS,IAAItD,WAAWyhB,QAG1Bne,EAASopC,EAGX,MAAM5qC,EAAU,IAAI,EAAA2rC,qCAEpB,aADM3rC,EAAQ+qC,UAAUvpC,EAAQpB,GACzB2D,QAAQ8b,QAAQ7f,S,4ZCzD3B,aACA,gBAE+B,CAC7B,MAAM2qC,EAAgB,sBACtB,EAAAxuC,gBAAgB,QAASwuC,GAAgB,GAEb,CAC5B,MAAMa,EAAc,oBACpB,EAAArvC,gBAAgB,OAAQqvC,EAAa,K,+GCdvC,MAAMI,EACJ1uC,YAAYkkC,GACV3gC,OAAOorC,OAAO1uC,KAAMikC,GAIX0K,eAKT,OAJK3uC,KAAK4uC,YACR5uC,KAAK4uC,UACDtrC,OAAOC,oBAAoBvD,MAAM6uC,OAAOnqC,KAAIzF,GAAQ,GAAIe,KAAiCf,OAASmG,KAAK,MAEtGpF,KAAK4uC,WAQH,EAAAE,4BAAkE7K,GAC3E,IAAIwK,EAA0BxK,I,gGCnBlC,gBAEA,IAAO8K,EADP,QACgBC,YAAYC,aAAaC,IAEzC,gBACA,UAqBA,MAAaC,EACXpvC,YAAYuf,GAEV,GADAtf,KAAKovC,YAAc,IAAIvuC,IACnBye,QAAiD,CACnD,IAAK,MAAM+vB,KAAQ/vB,EACb+vB,aAAgB,EAAA7O,KAAKW,eACvBnhC,KAAKovC,YAAY7tC,IAAI8tC,EAAKpwC,KAAM,CAACkwC,EAAUG,SAASD,GAAOF,EAAUI,QAAQF,KACpEA,aAAgBN,EAAOI,WAChCnvC,KAAKovC,YAAY7tC,IAAI8tC,EAAKpwC,OAAS,CAACkwC,EAAUG,SAASD,GAAOF,EAAUI,QAAQF,KAGpF,GAAIrvC,KAAKovC,YAAY/sC,KAAOid,EAAW3f,OACrC,MAAM,IAAIF,MAAM,+BAKtB8B,IAAIsC,EAAajC,EAA0BvB,GACzCL,KAAKovC,YAAY7tC,IAAIsC,EAAK,CAACxD,EAAOuB,IAEpC4tC,OAAO3rC,GACL7D,KAAKovC,YAAYI,OAAO3rC,GAE1B4rC,SAAS5rC,EAAamvB,GACpB,OAAOhzB,KAAKkC,IAAI2B,EAAK,QAASmvB,GAGhC0c,OAAO7rC,EAAamvB,GAClB,OAAOhzB,KAAKkC,IAAI2B,EAAK,MAAOmvB,GAG9B2c,UAAU9rC,EAAamvB,GACrB,OAAOhzB,KAAKkC,IAAI2B,EAAK,SAAUmvB,GAGjC4c,UAAU/rC,EAAamvB,GACrB,OAAOhzB,KAAKkC,IAAI2B,EAAK,SAAUmvB,GAGjC6c,UAAUhsC,EAAamvB,GACrB,OAAOhzB,KAAKkC,IAAI2B,EAAK,SAAUmvB,GAGjC8c,QAAQjsC,EAAamvB,GACnB,OAAOhzB,KAAKkC,IAAI2B,EAAK,OAAQmvB,GAG/B+c,WAAWlsC,EAAamvB,GACtB,OAAOhzB,KAAKkC,IAAI2B,EAAK,UAAWmvB,GAGlCgd,WAAWnsC,EAAamvB,GACtB,OAAOhzB,KAAKkC,IAAI2B,EAAK,UAAWmvB,GAG1B9wB,IACJ2B,EAAajC,EAA0BoxB,GACzC,MAAMid,EAAejwC,KAAKovC,YAAYltC,IAAI2B,GAC1C,QAAqBrE,IAAjBywC,EAA4B,CAC9B,QAAqBzwC,IAAjBwzB,EACF,OAAOA,EAET,MAAM,IAAIvzB,MAAM,iCAAiCoE,KAEnD,GAAIosC,EAAa,KAAOruC,EACtB,MAAM,IAAInC,MAAM,2BAA2BmC,aAAgBquC,EAAa,MAE1E,OAAOA,EAAa,GAGdjsC,eAAeqrC,GACrB,MAAMztC,EAAOytC,aAAgB,EAAA7O,KAAKW,eAAiB,EAAOv/B,KAAQytC,EAA0BztC,OAC5F,OAAQA,GACN,KAAK,EAAA4+B,KAAKW,eAAeuC,cAAcwM,MACrC,MAAO,QACT,KAAK,EAAA1P,KAAKW,eAAeuC,cAAcyM,IACrC,MAAO,MACT,KAAK,EAAA3P,KAAKW,eAAeuC,cAAc0M,OACrC,MAAO,SACT,KAAK,EAAA5P,KAAKW,eAAeuC,cAAc2M,OACrC,MAAO,SACT,KAAK,EAAA7P,KAAKW,eAAeuC,cAAc4M,OACrC,MAAO,SACT,KAAK,EAAA9P,KAAKW,eAAeuC,cAAc6M,KACrC,MAAO,OACT,KAAK,EAAA/P,KAAKW,eAAeuC,cAAc8M,QACrC,MAAO,UACT,KAAK,EAAAhQ,KAAKW,eAAeuC,cAAc+M,QACrC,MAAO,UACT,QACE,MAAM,IAAIhxC,MAAM,wCAAwC,EAAA+gC,KAAKW,eAAeuC,cAAc9hC,OAIxFoC,gBAAgBqrC,GACtB,MAAMqB,EAAWrB,aAAgB,EAAA7O,KAAKW,eAAiBkO,EAAKztC,KAAQytC,EAA0BztC,OAC9F,GAAI8uC,IAAa,EAAAlQ,KAAKW,eAAeuC,cAAciN,OAASD,IAAa,EAAAlQ,KAAKW,eAAeuC,cAAckN,OACzG,MAAM,IAAInxC,MAAM,wCAGlB,MAAMY,EAAQL,KAAK6wC,gBAAgBxB,GAGnC,GAAIqB,IAAa,EAAAlQ,KAAKW,eAAeuC,cAAcyM,KAAO,EAAAW,SAASlY,OAAOv4B,GACxE,OAAO,EAAAywC,SAASC,aAAa1wC,GAI/B,GAAIqwC,IAAa,EAAAlQ,KAAKW,eAAeuC,cAAc6M,KAAM,CACvD,MAAMS,EAAO3wC,EACP4wC,EAAwB,IAAIlvC,MAAcivC,EAAIrxC,QAEpD,IAAK,IAAID,EAAI,EAAGA,EAAIsxC,EAAIrxC,OAAQD,IAAK,CACnC,MAAMwxC,EAAYF,EAAItxC,GACtBuxC,EAAYvxC,GAAK,EAAAoxC,SAASC,aAAaG,GAGzC,OAAOD,EAIT,GAAIP,IAAa,EAAAlQ,KAAKW,eAAeuC,cAAc2M,OACjD,OAAOhB,aAAgB,EAAA7O,KAAKW,eAAiB,EAAA3/B,OAAO2vC,UAAU9wC,GACjB,EAAAmB,OAAO4vC,cAAc/wC,GAIpE,GAAIqwC,IAAa,EAAAlQ,KAAKW,eAAeuC,cAAc+M,QAAS,CAC1D,GAAIpB,aAAgB,EAAA7O,KAAKW,eAEvB,OADqB9gC,EACDqE,KAAIrE,GAAS,EAAAmB,OAAO2vC,UAAU9wC,KAC7C,GAAIgvC,aAAgBN,EAAOI,UAEhC,OADqB9uC,EACDqE,KAAIrE,GAAS,EAAAmB,OAAO4vC,cAAc/wC,KAK1D,GAAIqwC,IAAa,EAAAlQ,KAAKW,eAAeuC,cAAc0M,QAG7Cf,aAAgB,EAAA7O,KAAKW,eAAgB,CACvC,MAAMkQ,EAAahxC,EACnB,OAAO,EAAAixC,iBAAiBD,GAK5B,OAAIX,IAAa,EAAAlQ,KAAKW,eAAeuC,cAAc8M,SAG7CnB,aAAgB,EAAA7O,KAAKW,eACH9gC,EACDqE,IAAI,EAAA4sC,kBAIpBjxC,EAGD2D,uBAAuBqrC,GAC7B,OAAOA,aAAiB,EAAA7O,KAAmB,eAAIxgC,KAAKuxC,8BAA8BlC,GACnCrvC,KAAKwxC,6BAA6BnC,GAG3ErrC,qCAAqCqrC,GAC3C,OAAQA,EAAKztC,MACX,KAAK,EAAA4+B,KAAKW,eAAeuC,cAAcwM,MACrC,OAAOb,EAAKvoC,EACd,KAAK,EAAA05B,KAAKW,eAAeuC,cAAcyM,IACrC,OAAOd,EAAK3vC,EACd,KAAK,EAAA8gC,KAAKW,eAAeuC,cAAc0M,OACrC,OAAOf,EAAK3oC,EACd,KAAK,EAAA85B,KAAKW,eAAeuC,cAAc2M,OACrC,OAAOhB,EAAKzpC,EACd,KAAK,EAAA46B,KAAKW,eAAeuC,cAAciN,MACrC,OAAOtB,EAAKhoC,EACd,KAAK,EAAAm5B,KAAKW,eAAeuC,cAAc4M,OACrC,OAAOjB,EAAKhO,OACd,KAAK,EAAAb,KAAKW,eAAeuC,cAAc6M,KACrC,OAAOlB,EAAK/N,KACd,KAAK,EAAAd,KAAKW,eAAeuC,cAAc8M,QACrC,OAAOnB,EAAK9N,QACd,KAAK,EAAAf,KAAKW,eAAeuC,cAAc+M,QACrC,OAAOpB,EAAK7N,QACd,KAAK,EAAAhB,KAAKW,eAAeuC,cAAckN,OACrC,OAAOvB,EAAK5N,OACd,QACE,MAAM,IAAIhiC,MAAM,+BAA+B,EAAA+gC,KAAKW,eAAeuC,cAAc2L,EAAKztC,UAIpFoC,oCAAoCqrC,GAC1C,OAAQA,EAAKztC,QACX,KAAKmtC,EAAOrL,cAAcwM,MACxB,OAAOb,EAAKvoC,IACd,KAAKioC,EAAOrL,cAAcyM,IACxB,OAAOd,EAAK3vC,IACd,KAAKqvC,EAAOrL,cAAc0M,OACxB,OAAOf,EAAK3oC,IACd,KAAKqoC,EAAOrL,cAAc2M,OACxB,OAAOhB,EAAKzpC,IACd,KAAKmpC,EAAOrL,cAAciN,MACxB,OAAOtB,EAAKhoC,IACd,KAAK0nC,EAAOrL,cAAc4M,OACxB,OAAOjB,EAAKoC,cACd,KAAK1C,EAAOrL,cAAc6M,KAAM,CAC9B,MAAMjP,EAAO,GACb,IAAK,IAAI5hC,EAAI,EAAGA,EAAI2vC,EAAKqC,aAAchyC,IACrC4hC,EAAKzhC,KAAKwvC,EAAK/N,KAAK5hC,IAEtB,OAAO4hC,EAET,KAAKyN,EAAOrL,cAAc8M,QAAS,CACjC,MAAMjP,EAAU,GAChB,IAAK,IAAI7hC,EAAI,EAAGA,EAAI2vC,EAAKsC,gBAAiBjyC,IACxC6hC,EAAQ1hC,KAAKwvC,EAAK9N,QAAQ7hC,IAE5B,OAAO6hC,EAET,KAAKwN,EAAOrL,cAAc+M,QAAS,CACjC,MAAMjP,EAAU,GAChB,IAAK,IAAI9hC,EAAI,EAAGA,EAAI2vC,EAAKuC,gBAAiBlyC,IACxC8hC,EAAQ3hC,KAAKwvC,EAAK7N,QAAQ9hC,IAE5B,OAAO8hC,EAST,QACE,MAAM,IAAI/hC,MAAM,+BAA+BsvC,EAAOrL,cAAc2L,EAAKztC,aA3OjF,e,qbC3BA,gBA0EMiwC,EAAsC,IAAIhxC,IAgChD,SAAeixC,EAAeC,G,yCAC5B,MAAMC,EAAa,EAAA9yC,QAEnB,QAAuC,IAA5B8yC,EAAWD,IAexB,SAAmBpe,GAEjB,MAAMntB,EAAImtB,EAGV,MACI,eAAgBntB,GAA6B,mBAAjBA,EAAEyrC,YAC9B,yBAA0BzrC,GAAuC,mBAA3BA,EAAEnH,sBACxC,YAAamH,GAA0B,mBAAdA,EAAE0rC,QAvBuBC,CAAUH,EAAWD,IAAe,CACxF,MAAM7yC,EAAU8yC,EAAWD,GAC3B,IAAI3yC,EAAOF,EAAQ+yC,aAInB,GAHoB,iBAAT7yC,GAAqB,SAAUA,IACxCA,QAAaA,GAEXA,EAEF,OADAyyC,EAActwC,IAAIwwC,EAAa7yC,GACxBA,MAzCA,EAAAA,QAAqC,CAChDgB,MAAO,IAAI,EAAAkyC,cAOb,0BAAsB/sC,EAAegtC,G,yCACnC,IAAKA,EACH,OAAOhtC,EAAe,CAAC,UAClB,CACL,MAAMitC,EAAwB,iBAATD,EAAoB,CAACA,GAAQA,EAElD,IAAK,MAAMN,KAAeO,EAAO,CAC/B,MAAMnZ,EAAQ0Y,EAAc3vC,IAAI6vC,GAChC,GAAI5Y,EACF,OAAOA,EAGT,MAAMj6B,QAAgB4yC,EAAeC,GACrC,GAAI7yC,EACF,OAAOA,GAKb,MAAM,IAAIO,MAAM,oC,mGCvGlB,gBAEA,UAGA,UAEA,UAOA,qBAGM8yC,gBACF,OAAO,EAAAzyC,IAAII,MAAMqyC,UAEfA,cAAUlyC,GACZ,EAAAP,IAAII,MAAMqyC,UAAYlyC,EAGpBmyC,yBACF,OAAO,EAAA1yC,IAAII,MAAMsyC,mBAEfA,uBAAmBnyC,GACrB,EAAAP,IAAII,MAAMsyC,mBAAqBnyC,EAG7BoyC,uBACF,OAAO,EAAA3yC,IAAII,MAAMuyC,iBAEfA,qBAAiBpyC,GACnB,EAAAP,IAAII,MAAMuyC,iBAAmBpyC,EAG3BqyC,WACF,OAAO,EAAA5yC,IAAII,MAAMwyC,KAEfA,SAAKryC,GACP,EAAAP,IAAII,MAAMwyC,KAAOryC,EAGfyC,YACF,OAAO,EAAAhD,IAAII,MAAM4C,MAEfA,UAAMzC,GACR,EAAAP,IAAII,MAAM4C,MAAQzC,EAGpB4xC,aACE,IAsBE,OArBAjyC,KAAK2yC,UAAY,EAAAC,mBAAmB5yC,KAAKuyC,WACF,iBAA5BvyC,KAAKwyC,qBACdxyC,KAAKwyC,mBAAqB,IAES,iBAA1BxyC,KAAKyyC,mBACdzyC,KAAKyyC,iBAAmB,QAED,kBAAdzyC,KAAK0yC,OACd1yC,KAAK0yC,MAAO,GAEY,kBAAf1yC,KAAK8C,QACd9C,KAAK8C,OAAQ,GAGf,EAAA+vC,OAAOC,WAAW,EAAAhzC,KAElB,EAAA+yC,OAAOE,QACH,eACA,gCAAgC/yC,KAAK2yC,sCACjC3yC,KAAKwyC,yCAAyCxyC,KAAKyyC,2BAA2BzyC,KAAK0yC,gBACnF1yC,KAAK8C,WACN,EACP,MAAOoC,GAEP,OADA,EAAA2tC,OAAOG,QAAQ,eAAgB,sCAAsC9tC,MAC9D,GAGX7F,qBAAqB4zC,GACnB,OAAO,IAAI,EAAAC,oBAAoBlzC,KAAMizC,GAEvCf,UACElyC,KAAK2yC,UAAUT,a,oGCrFnB,gBAEA,UACA,UACA,UAEA,UAMA,MAAaiB,UAAsB,EAAAC,QAGjCrzC,YAAYkzC,GACVI,MAAMJ,GAERK,eACE,OAAO,OAAP,8FACKtzC,KAAKuzC,kBACLvzC,KAAKwzC,kBACLxzC,KAAKyzC,SACLzzC,KAAK0zC,aAEL1zC,KAAK2zC,sBACL3zC,KAAK4zC,6BACL5zC,KAAK6zC,4BAGZC,iBACE,MAAO,GAMCP,iBAER,MAAO,CACLA,eAAgB,IAAI,EAAAQ,eAAe,4PAe7BP,iBAER,MAAO,CACLA,eAAgB,IAAI,EAAAO,eAAe,sPAe7BF,2BACR,MAAMG,EAAeh0C,KAAKizC,QAAQgB,oBAClC,OAAID,EAAaE,SACRl0C,KAAKm0C,+BAA+BH,GAEpCh0C,KAAKo0C,iCAAiCJ,GAOvCG,+BAA+BH,GACvC,MAAMK,EAAWL,EAAaM,cACxBC,EAAc,CAACP,EAAal7B,MAAOk7B,EAAaj7B,QAChD+d,EAA2C,GAC3C0d,EAAW,kBACjB,OAAQH,EAAS10C,QACf,KAAK,EACHm3B,EAAO0d,GAAYx0C,KAAKy0C,wBACxB,MACF,KAAK,EACH3d,EAAO0d,GAAYx0C,KAAK00C,wBAAwBL,EAAsBE,GACtE,MACF,KAAK,EACHzd,EAAO0d,GAAYx0C,KAAK20C,wBAAwBN,EAA8BE,GAC9E,MACF,KAAK,EACHzd,EAAO0d,GACHx0C,KAAK40C,wBAAwBP,EAAsCE,GACvE,MACF,QACEzd,EAAO0d,GAAYx0C,KAAK60C,wBAAwBR,EAAUE,GAE9D,MAGMO,EAA4B,+CAHrB,EAAAC,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAKjCykB,+BAKX,OADAlN,EAAkC,oBAAI,IAAI,EAAAid,eAAee,GAClDhe,EAMCsd,iCAAiCJ,GACzC,MAAMK,EAAWL,EAAaM,cACxBC,EAAc,CAACP,EAAal7B,MAAOk7B,EAAaj7B,QAChD+d,EAA2C,GAC3C0d,EAAW,kBACjB,OAAQH,EAAS10C,QACf,KAAK,EACHm3B,EAAO0d,GAAYx0C,KAAKy0C,wBACxB,MACF,KAAK,EACH3d,EAAO0d,GAAYx0C,KAAKg1C,0BAA0BX,EAAsBE,GACxE,MACF,KAAK,EACHzd,EAAO0d,GACHx0C,KAAKi1C,0BAA0BZ,EAA8BE,GACjE,MACF,KAAK,EACHzd,EAAO0d,GACHx0C,KAAKk1C,0BAA0Bb,EAAsCE,GACzE,MACF,KAAK,EACHzd,EAAO0d,GAAYx0C,KAAKm1C,0BACpBd,EAA8CE,GAClD,MACF,KAAK,EACHzd,EAAO0d,GAAYx0C,KAAKo1C,0BACpBf,EAAsDE,GAC1D,MACF,KAAK,EACHzd,EAAO0d,GAAYx0C,KAAKq1C,0BACpBhB,EAA8DE,GAClE,MACF,QACE,MAAM,IAAI90C,MAAM,sCAAsC40C,EAAS10C,UAEnE,MAGM21C,EAAyB,oDAHlB,EAAAP,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAK/BykB,gDAKb,OADAlN,EAA+B,iBAAI,IAAI,EAAAid,eAAeuB,GAC/Cxe,EAMC2d,wBACR,OAAO,IAAI,EAAAV,eAAe,qEAUlBW,wBAAwB1N,EAAiBuO,GACjD,MAAMC,EAAiBD,EACvB,IAAIE,EAAS,GACb,OAA0B,IAAtBD,EAAe,IACjBC,EAAS,iFAE4BD,EAAe,gCAG7C,IAAI,EAAAzB,eAAe0B,IAGF,IAAtBD,EAAe,IACjBC,EAAS,iFAE4BD,EAAe,gCAG7C,IAAI,EAAAzB,eAAe0B,KAG5BA,EAAS,6HAG2BD,EAAe,OAAOA,EAAe,6CACxCA,EAAe,uCAGzC,IAAI,EAAAzB,eAAe0B,IAMlBd,wBAAwB3N,EAAyBuO,GACzD,IAAIE,EAAS,GACb,GAAI,EAAAC,UAAUC,YAAY3O,EAAOuO,GAM/B,OALAE,EAAS,uFAEkCF,EAAS,OAAOA,EAAS,2BAG7D,IAAI,EAAAxB,eAAe0B,GAG5B,MAAMD,EAAiBD,EAEjBK,EAAqBl/B,KAAKC,KAAKqwB,EAAM,GAAK,GAyBhD,OAdAyO,EAAS,8HAG0BD,EAAe,OAAOA,EAAe,+CAEvCA,EAAe,4GAGpBI,2CACCA,0DAKtB,IAAI,EAAA7B,eAAe0B,GAMlBb,wBAAwB5N,EAAiCuO,GACjE,MAAMC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCK,EAAqBl/B,KAAKC,KAAKqwB,EAAM,GAAK,GAC1C6O,EAAgBD,EAAqBl/B,KAAKC,KAAKqwB,EAAM,GAAK,GAC1DyO,EAAS,8HAGoBD,EAAe,OAAOA,EAAe,6CACvCA,EAAe,iDAExBK,8BACHA,8FAGOD,2CACCA,6DAK7B,OAAO,IAAI,EAAA7B,eAAe0B,GAMlBZ,wBAAwB7N,EAA0BuO,GAC1D,MAAMC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IAExCK,EAAqBl/B,KAAKC,KAAKqwB,EAAMA,EAAMrnC,OAAS,GAAK,GACzDk2C,EAAgBD,EAAqBl/B,KAAKC,KAAKqwB,EAAMA,EAAMrnC,OAAS,GAAK,GAC/E,IAAIm2C,EAAiBD,EACjBE,EAAU,GACVC,EAAS,UAEb,IAAK,IAAI7uC,EAAI,EAAGA,EAAI6/B,EAAMrnC,OAAS,EAAGwH,IACpC2uC,GAAkB9O,EAAMA,EAAMrnC,OAASwH,EAAI,GAC3C4uC,EAAU,gBACH5uC,eAAe2uC,uBACV3uC,OAAO2uC,WACjBC,EACFC,EAAS,IAAI7uC,MAAQ6uC,EAEvB,MAAMP,EAAS,eACPzO,EAAMrnC,iHAEmB61C,EAAe,OAAOA,EAAe,2CACvCA,EAAe,+BAExCO,gCAEgBF,4BACHA,0FAGOD,yCACCA,6BAEV5O,EAAMrnC,UAAUq2C,qBAGjC,OAAO,IAAI,EAAAjC,eAAe0B,GAMlBT,0BAA0BhO,EAAiBuO,GACnD,MAAME,EAAS,4HAGoBF,EAAS,OAAOA,EAAS,wCAChCA,EAAS,sCAGrC,OAAO,IAAI,EAAAxB,eAAe0B,GAMlBR,0BAA0BjO,EAAyBuO,GAC3D,MAAME,EAAS,8HAGoBF,EAAS,OAAOA,EAAS,6CAC3BA,EAAS,+CAClBvO,EAAM,sCACFA,EAAM,wDAIlC,OAAO,IAAI,EAAA+M,eAAe0B,GAMlBP,0BAA0BlO,EAAiCuO,GACnE,IAAIE,EAAS,GACb,MAAMQ,EAAOjP,EAAMrnC,OAEnB,IAAIu2C,EAAU,KACVD,EAAO,IACTC,EAAU,IAGZA,EAAU,IAAIn0C,MAAMk0C,EAAO,GAC3BC,EAAQD,EAAO,GAAKjP,EAAMiP,EAAO,GACjC,IAAK,IAAIv2C,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/Bw2C,EAAQx2C,GAAKw2C,EAAQx2C,EAAI,GAAKsnC,EAAMtnC,EAAI,GAE1C,MAAMy2C,EAAkB,CAAC,IAAK,IAAK,KAC7BC,EACFF,EACKxxC,KAAI,CAAC2xC,EAAQ32C,IAKL,OAJcy2C,EAAgBz2C,gBAAgB22C,MACvC32C,IAAMw2C,EAAQv2C,OAAS,EACjC,OAAOw2C,EAAgBz2C,EAAI,gBAAgBy2C,EAAgBz2C,QAAQ22C,IACnE,YAAYF,EAAgBz2C,QAAQ22C,SAGzCjxC,KAAK,IAWd,OATAqwC,EAAS,8HAG0BF,EAAS,OAAOA,EAAS,6CAC3BA,EAAS,+BAClCa,yDAID,IAAI,EAAArC,eAAe0B,GAMlBN,0BAA0BnO,EAAyCuO,GAE3E,IAAIE,EAAS,GACb,MAAMQ,EAAOjP,EAAMrnC,OAEnB,IAAIu2C,EAAU,KACVD,EAAO,IACTC,EAAU,IAGZA,EAAU,IAAIn0C,MAAMk0C,EAAO,GAC3BC,EAAQD,EAAO,GAAKjP,EAAMiP,EAAO,GACjC,IAAK,IAAIv2C,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/Bw2C,EAAQx2C,GAAKw2C,EAAQx2C,EAAI,GAAKsnC,EAAMtnC,EAAI,GAE1C,MAAMy2C,EAAkB,CAAC,IAAK,IAAK,IAAK,MAClCC,EACFF,EACKxxC,KAAI,CAAC2xC,EAAQ32C,IAKL,OAJcy2C,EAAgBz2C,gBAAgB22C,MACvC32C,IAAMw2C,EAAQv2C,OAAS,EACjC,OAAOw2C,EAAgBz2C,EAAI,gBAAgBy2C,EAAgBz2C,QAAQ22C,IACnE,YAAYF,EAAgBz2C,QAAQ22C,SAGzCjxC,KAAK,IAWd,OATAqwC,EAAS,4HAG0BF,EAAS,OAAOA,EAAS,6CAC3BA,EAAS,+BAClCa,6DAID,IAAI,EAAArC,eAAe0B,GAMlBL,0BAA0BpO,EAAiDuO,GAEnF,IAAIE,EAAS,GACb,MAAMQ,EAAOjP,EAAMrnC,OAEnB,IAAIu2C,EAAU,KACVD,EAAO,IACTC,EAAU,IAGZA,EAAU,IAAIn0C,MAAMk0C,EAAO,GAC3BC,EAAQD,EAAO,GAAKjP,EAAMiP,EAAO,GACjC,IAAK,IAAIv2C,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/Bw2C,EAAQx2C,GAAKw2C,EAAQx2C,EAAI,GAAKsnC,EAAMtnC,EAAI,GAE1C,MAAMy2C,EAAkB,CAAC,IAAK,IAAK,IAAK,KAAM,MACxCC,EACFF,EACKxxC,KAAI,CAAC2xC,EAAQ32C,IAKL,OAJcy2C,EAAgBz2C,gBAAgB22C,MACvC32C,IAAMw2C,EAAQv2C,OAAS,EACjC,OAAOw2C,EAAgBz2C,EAAI,gBAAgBy2C,EAAgBz2C,QAAQ22C,IACnE,YAAYF,EAAgBz2C,QAAQ22C,SAGzCjxC,KAAK,IAWd,OATAqwC,EAAS,4HAG0BF,EAAS,OAAOA,EAAS,6CAC3BA,EAAS,+BAClCa,iEAID,IAAI,EAAArC,eAAe0B,GAMlBJ,0BAA0BrO,EAAyDuO,GAG3F,IAAIE,EAAS,GACb,MAAMQ,EAAOjP,EAAMrnC,OAEnB,IAAIu2C,EAAU,KACVD,EAAO,IACTC,EAAU,IAGZA,EAAU,IAAIn0C,MAAMk0C,EAAO,GAC3BC,EAAQD,EAAO,GAAKjP,EAAMiP,EAAO,GACjC,IAAK,IAAIv2C,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/Bw2C,EAAQx2C,GAAKw2C,EAAQx2C,EAAI,GAAKsnC,EAAMtnC,EAAI,GAE1C,MAAMy2C,EAAkB,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,MAC9CC,EACFF,EACKxxC,KAAI,CAAC2xC,EAAQ32C,IAKL,OAJcy2C,EAAgBz2C,gBAAgB22C,MACvC32C,IAAMw2C,EAAQv2C,OAAS,EACjC,OAAOw2C,EAAgBz2C,EAAI,gBAAgBy2C,EAAgBz2C,QAAQ22C,IACnE,YAAYF,EAAgBz2C,QAAQ22C,SAGzCjxC,KAAK,IAWd,OATAqwC,EAAS,yHAGyBF,EAAS,OAAOA,EAAS,4CAC3BA,EAAS,8BAClCa,kEAIA,IAAI,EAAArC,eAAe0B,GAMlB9B,qBACR,MAAM7c,EAA2C,GACjD,IAAI0d,EAAW,aACf1d,EAAO0d,GAAY,IAAI,EAAAT,eAAe,yWAStCS,EAAW,iBACX1d,EAAO0d,GAAY,IAAI,EAAAT,eAAe,6RAQtCS,EAAW,iBACX1d,EAAO0d,GAAY,IAAI,EAAAT,eAAe,6VAQtCS,EAAW,iBACX1d,EAAO0d,GAAY,IAAI,EAAAT,eAAe,kZAUtCS,EAAW,gBACX,MAAM8B,EAAO,EAAAvB,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAK5C,OAJAuX,EAAO0d,GAAY,IAAI,EAAAT,eAAe,0FAErBuC,EAAKC,+CAEfzf,EAMC8c,4BACR,MAAM9c,EAA2C,GAC3Ckd,EAAeh0C,KAAKizC,QAAQgB,oBAsBlC,OArBAj0C,KAAKizC,QAAQuD,YAAY/yC,WAAWsW,SAAQ,CAAC08B,EAAa/2C,KACxD,MAAMg3C,EAAc12C,KAAKizC,QAAQ0D,oBAAoBj3C,GAC/C80C,EAAW,EAAAoC,2CAA2CH,GACxDC,EAAYxC,SACdpd,EAAO0d,GAAYx0C,KAAK62C,0BAA0BrC,EAAUiC,EAAaC,GAEzE5f,EAAO0d,GAAYx0C,KAAK82C,4BAA4BtC,EAAUiC,EAAaC,GAG7E,MAAMK,EAAmB,EAAAC,sDAAsDP,GAC3EC,EAAYpC,cAAc30C,QAAUq0C,EAAaM,cAAc30C,SAC7D+2C,EAAYxC,SACdpd,EAAOigB,GACH/2C,KAAKi3C,+BAA+BF,EAAkBL,EAAa1C,EAAcyC,GAErF3f,EAAOigB,GACH/2C,KAAKk3C,iCAAiCH,EAAkBL,EAAa1C,EAAcyC,OAKtF3f,EAMCmgB,+BACNzC,EAAkBkC,EAA4B1C,EAA6B/0C,GAC7E,MAAMk4C,EAAUT,EAAYpC,cACtBD,EAAWL,EAAaM,cACxB8C,EAAUn4C,EACVo4C,EAAiB,EAAAT,2CAA2CQ,GAE5DE,EAASH,EAAQx3C,OACjB43C,EAAUlD,EAAS10C,OAEnB63C,EAAgB,EAAAC,cAAcC,iBAAiBP,EAAS9C,GAExDzyC,EAAO,EAAA+1C,kBAAkBJ,GACzBK,EAAWL,EAAUD,EAC3B,IAAIO,EACJ,MAAMC,EAAS,EAAAC,gBAGbF,EADa,IAAXP,EACc,GACPC,EAAU,GAAKC,EAAc73C,QAAU,EAChC,cAEA63C,EAAc9yC,KAAIuC,GAAK,UAAU6wC,EAAO7wC,EAAI2wC,YAAkBxyC,KAAK,MAErF,IAAI4yC,EAAwB,GAE1BA,EADET,EAAU,GAAKD,EAAS,EACF,SAEAH,EAAQzyC,KAAI,CAACgC,EAAGhH,IAAM,UAAUo4C,EAAOp4C,EAAIk4C,OAAaxyC,KAAK,MAGvF,IAAI4+B,EAAS,sBACb,MACMiU,EAA2B,IADlB,EAAAC,UAAU71C,KAAK80C,GAGxBgB,EAA6B,IADnB,EAAAD,UAAU71C,KAAKgyC,GAG/B,GAAe,IAAXiD,GAAiBW,GAAkBE,GAIhC,GAAIF,IAAkBE,EAEzBnU,EADc,IAAZuT,EACO,2EAIA,yDAIN,GAAIC,EAAc73C,OAAQ,CAC/B,MAAMy4C,EAAOd,EAAS,EAChBe,EAAOf,EAAS,EAElBE,EAAcl3C,QAAQ83C,IAAS,GAAKZ,EAAcl3C,QAAQ+3C,IAAS,EACrErU,EAAS,8BACAwT,EAAcl3C,QAAQ83C,IAAS,EACxCpU,EAAS,2EAEAwT,EAAcl3C,QAAQ+3C,IAAS,IACxCrU,EAAS,sDAvBXA,EAAS,iEA2BX,MAKMyR,EAAS,gBACNjB,kBACH5yC,yEANqBk2C,EAAOP,EAAU,uBAC/BO,EAAOP,EAAU,eAAeO,EAAOP,EAAU,uBACjDO,EAAOP,EAAU,kCAMxBM,iCACmBR,KAAkBW,gBACrChU,mBAGN,OAAO,IAAI,EAAA+P,eAAe0B,EAAQ,CAAC,gCAM3ByB,iCACN1C,EAAkBkC,EAA4B1C,EAA6B/0C,GAC7E,MAAMs1C,EAAc,CAACP,EAAal7B,MAAOk7B,EAAaj7B,QAChDu/B,EAAa,CAAC5B,EAAY59B,MAAO49B,EAAY39B,QAC7Cu+B,EAASZ,EAAYpC,cAAc30C,OACnC43C,EAAUvD,EAAaM,cAAc30C,OACrCw3C,EAAUT,EAAYpC,cACtBD,EAAWL,EAAaM,cACxB+C,EAAiB,EAAAT,2CAA2C33C,GAElE,GAAIq4C,IAAWC,GAAW,EAAA7B,UAAUC,YAAY2C,EAAY/D,GAAc,CACxE,MAAMkB,EAAS,qBACHjB,2CACiBv1C,wCAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,8BAGrC,MAAM7zC,EAAO,EAAA+1C,kBAAkBJ,GACzBC,EAAgB,EAAAC,cAAcC,iBAAiBP,EAAS9C,GACxDuD,EAAWL,EAAUD,EAC3B,IAAIO,EACJ,MAAMC,EAAS,EAAAC,gBAGbF,EADa,IAAXP,EACc,GACPC,EAAU,GAAKC,EAAc73C,QAAU,EAChC,cAEA63C,EAAc9yC,KAAIuC,GAAK,UAAU6wC,EAAO7wC,EAAI2wC,YAAkBxyC,KAAK,MAErF,IAAI4yC,EAAwB,GAE1BA,EADET,EAAU,GAAKD,EAAS,EACF,SAEAZ,EAAYpC,cAAc5vC,KAAI,CAACgC,EAAGhH,IAAM,UAAUo4C,EAAOp4C,EAAIk4C,OAAaxyC,KAAK,MAEzG,MAAMqwC,EAAS,mBACHjB,oBACJ5yC,4CACAi2C,uBACOR,KAAkBW,yBAGjC,OAAO,IAAI,EAAAjE,eAAe0B,EAAQ,CAAC,gCAM3BoB,0BAA0BrC,EAAkBv1C,EAAcy3C,GAClE,OAAQA,EAAYpC,cAAc30C,QAChC,KAAK,EACH,OAAOK,KAAKu4C,uBAAuB/D,EAAUv1C,GAC/C,KAAK,EACH,OAAOe,KAAKw4C,mBAAmBhE,EAAUv1C,EAAMy3C,GACjD,KAAK,EACH,OAAO12C,KAAKy4C,mBAAmBjE,EAAUv1C,EAAMy3C,GACjD,KAAK,EACH,OAAO12C,KAAK04C,mBAAmBlE,EAAUv1C,EAAMy3C,GACjD,QACE,OAAO12C,KAAK24C,mBAAmBnE,EAAUv1C,EAAMy3C,IAO3CI,4BAA4BtC,EAAkBv1C,EAAcy3C,GACpE,MAAM1P,EAAQ0P,EAAYpC,cAC1B,OAAQtN,EAAMrnC,QACZ,KAAK,EACH,OAAOK,KAAK44C,yBAAyBpE,EAAUv1C,EAAMy3C,GACvD,KAAK,EACH,OAAO12C,KAAK64C,qBAAqBrE,EAAUv1C,EAAMy3C,GACnD,KAAK,EACH,OAAO12C,KAAK84C,qBAAqBtE,EAAUv1C,EAAMy3C,GACnD,KAAK,EACH,OAAO12C,KAAK+4C,qBAAqBvE,EAAUv1C,EAAMy3C,GACnD,KAAK,EACH,OAAO12C,KAAKg5C,qBAAqBxE,EAAUv1C,EAAMy3C,GACnD,KAAK,EACH,OAAO12C,KAAKi5C,qBAAqBzE,EAAUv1C,EAAMy3C,GACnD,KAAK,EACH,OAAO12C,KAAKk5C,qBAAqB1E,EAAUv1C,EAAMy3C,GACnD,QAEE,MAAM,IAAIj3C,MAAM,yBAAyBunC,EAAMrnC,aAO3C44C,uBAAuB/D,EAAkBv1C,GACjD,MACMw2C,EAAS,oBACFjB,6BAFA,EAAAO,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAGtBg3B,aAAat3C,qCAGnC,OAAO,IAAI,EAAA80C,eAAe0B,GAMlB+C,mBAAmBhE,EAAkBv1C,EAAcy3C,GAC3D,MAAMnB,EAAW,CAACmB,EAAY59B,MAAO49B,EAAY39B,QAC3Cy8B,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCe,EAAO,EAAAvB,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAOtCk2B,EALgB,QAAQjB,0DAE1BgB,EAAe,OAAOA,EAAe,6BAC9Bc,EAAKC,aAAat3C,iBAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,+BAM3BgD,mBAAmBjE,EAAkBv1C,EAAcy3C,GAC3D,MAAM1P,EAAQ0P,EAAYpC,cACpBiB,EAAW,CAACmB,EAAY59B,MAAO49B,EAAY39B,QAC3Cu9B,EAAO,EAAAvB,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SACtC45B,EAAU5D,EAAS,GACnB6D,EAAU7D,EAAS,GAEzB,GAAgB,MAAZA,GAAoB,EAAAG,UAAUC,YAAY3O,EAAOuO,GAAW,CAC9D,MAAM8D,EAAgB,QAAQ7E,6EACiB4E,QAAcD,yBAClD7C,EAAKC,aAAat3C,mBAG7B,OAAO,IAAI,EAAA80C,eAAesF,GAE5B,MAAM7D,EAAiBD,EACjB+D,EAAe5iC,KAAKC,KAAKqwB,EAAM,GAAK,GAKpCyO,EAJgB,QAAQjB,yDACDgB,EAAe,OAAOA,EAAe,OAAO8D,+BAC9DhD,EAAKC,aAAat3C,iBAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,+BAM3BiD,mBAAmBlE,EAAkBv1C,EAAcy3C,GAC3D,MAAM1P,EAAQ0P,EAAYpC,cACpBiB,EAAW,CAACmB,EAAY59B,MAAO49B,EAAY39B,QAC3Cy8B,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCe,EAAO,EAAAvB,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAE5C,GAAiB,IAAbynB,EAAM,GAAU,CAClB,MAAMuS,EAAgBvS,EAAMt+B,MAAM,GAC5B8wC,EAAW,CAAC,EAAG,GACfC,EAAgB,EAAAC,kBAAkB1S,EAAOuS,GACzC7vB,EAAS,CAAC,IAAK,MAAO,OAEtBiwB,EAAgCC,KAAK1hB,MAAM0hB,KAAKC,UAAUnD,IAChEiD,EAAerF,cAAgBmF,EAC/B,MAAMK,EAAiB95C,KAAK62C,0BAA0BrC,EAAUv1C,EAAM06C,GAKhElE,EAJgB,GAAGqE,EAAeC,2BACjCvF,gDACIA,KAAY,EAAAwF,kBAAkBtwB,EAAQ8vB,iBAGjD,OAAO,IAAI,EAAAzF,eAAe0B,EAAQqE,EAAeG,cAEnD,MAAMd,EAAU3D,EAAe,GACzB4D,EAAU5D,EAAe,GAEzB8D,EAAe5iC,KAAKC,KAAKqwB,EAAM,GAAK,GAOpCyO,EAJgB,QAAQjB,0EAExB4E,MAAYD,MAJIG,EAAe5iC,KAAKC,KAAKqwB,EAAM,GAAK,OAIVsS,kCACrChD,EAAKC,aAAat3C,WAE7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,+BAK3BkD,mBAAmBnE,EAAkBv1C,EAAcy3C,GAC3D,MAAM1P,EAAQ0P,EAAYpC,cACpB2B,EAAOjP,EAAMrnC,OACb41C,EAAW,CAACmB,EAAY59B,MAAO49B,EAAY39B,QAC3Cu9B,EAAO,EAAAvB,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAEtCi2B,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxC4D,EAAU3D,EAAe,GACzB4D,EAAU5D,EAAe,GACzB8D,EAAe5iC,KAAKC,KAAKqwB,EAAMiP,EAAO,GAAK,GACjD,IAAIJ,EAAgByD,EAAe5iC,KAAKC,KAAKqwB,EAAMiP,EAAO,GAAK,GAC3DvsB,EAAS,0BACTC,EAAQ,OAAOksB,mBAA+ByD,gBAClD,IAAK,IAAInyC,EAAI,EAAGA,EAAI8uC,EAAO,EAAG9uC,IAC5BuiB,EAAS,QAAQviB,MAAQuiB,EACzBmsB,GAAiB7O,EAAMiP,EAAO9uC,EAAI,GAClCwiB,EAAQ,IAAIxiB,OAAO0uC,OAAqBlsB,EAE1C,MAOM8rB,EAPgB,QAAQjB,KAAY9qB,2BAC1BC,gCACOyvB,uCACOA,0DACmBA,MAAYD,qBAClD7C,EAAKC,aAAat3C,iBAG7B,OAAO,IAAI,EAAA80C,eAAe0B,GAMlBmD,yBAAyBpE,EAAkBv1C,EAAcy3C,GACjE,MAAOyC,EAASC,GAAW,CAAC1C,EAAY59B,MAAO49B,EAAY39B,QAC3D,GAAgB,IAAZogC,GAA6B,IAAZC,EAAe,CAClC,MAAM3D,EAAS,qBACHjB,2CACiBv1C,qCAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,8BAGrC,MAAMA,EAAS,mBACHjB,+BACOv1C,iCAAoCk6C,MAAYC,uCACtCD,MAAYC,aAAmBn6C,uCAC/BA,6BAG7B,OAAO,IAAI,EAAA80C,eACP0B,EAAQ,CAAC,yBAA0B,4BAA6B,+BAM5DoD,qBAAqBrE,EAAkBv1C,EAAcy3C,GAC7D,MAAMwD,EAAQxD,EAAY59B,MACpBqhC,EAAQzD,EAAY39B,OAE1B,GAAc,IAAVohC,GAAyB,IAAVD,EAAa,CAC9B,MAAMzE,EAAS,mBACLjB,kDACiBv1C,iCAG3B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,8BAGrC,GAAc,IAAV0E,EAAa,CACf,MAAM1E,EAAS,qBACHjB,qEACkC0F,gDACjBj7C,iCAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,8BAErC,GAAc,IAAVyE,EAAa,CACf,MAAMzE,EAAS,qBACHjB,0EACuC2F,2CACtBl7C,iCAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,8BAErC,MAAMA,EAAS,mBACHjB,kDACiB0F,MAAUC,8CACVl7C,6BAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,yBAA0B,8BAOrDqD,qBAAqBtE,EAAkBv1C,EAAcy3C,GAC7D,MAAM1P,EAAQ0P,EAAYpC,cAGpBiB,EAAW,CAACmB,EAAY39B,OAAQ29B,EAAY59B,OAElD,GAAgB,MAAZy8B,GAAoB,EAAAG,UAAUC,YAAY3O,EAAOuO,GAAW,CAC9D,MAEME,EAAS,qBACHjB,iFAHIe,EAAS,SACTA,EAAS,4CAIIt2C,iCAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,8BAGrC,MAAM,SAAC2E,EAAQ,SAAEZ,GAAY,EAAAa,aAAarT,GACpCuS,EAAgBa,EACtB,GAAIb,EAAc55C,OAASqnC,EAAMrnC,OAAQ,CACvC,MAAM85C,EAAgB,EAAAC,kBAAkB1S,EAAOuS,GAEzCI,EAAgCC,KAAK1hB,MAAM0hB,KAAKC,UAAUnD,IAChEiD,EAAerF,cAAgBmF,EAE/B,MAAM/vB,EAAS,CAAC,MAAO,OACjB+rB,EAAS,eACTz1C,KAAK82C,4BAA4BtC,EAAUv1C,EAAM06C,GAAgBI,gCAC3DvF,6CACGA,KAAY,EAAAwF,kBAAkBtwB,EAAQ8vB,8BAGrD,OAAO,IAAI,EAAAzF,eAAe0B,EAAQ,CAAC,8BAGrC,MAAM0D,EAAU5D,EAAS,GACnB6D,EAAU7D,EAAS,GACzB,GAAgB,IAAZ6D,EAAe,CACjB,MAAM3D,EAAS,qBACHjB,iDACOv1C,iCAAoCk6C,MAAYC,4DACnBn6C,YAAe+nC,EAAM,gEACzBmS,2CACfl6C,iCAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,4BAA6B,+BAGlE,GAAgB,IAAZ0D,EAAe,CACjB,MAAM1D,EAAS,qBACHjB,iDACOv1C,iCAAoCk6C,MAAYC,4DACnBn6C,YAAe+nC,EAAM,2DAC9BoS,gDACVn6C,iCAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,4BAA6B,+BAGlE,MAAMA,EAAS,mBACHjB,sDACcxN,EAAM,6CACHmS,MAAYC,8CACZn6C,6BAG7B,OAAO,IAAI,EAAA80C,eACP0B,EAAQ,CAAC,yBAA0B,4BAA6B,+BAO5DsD,qBAAqBvE,EAAkBv1C,EAAcy3C,GAC7D,MAAM1P,EAAQ0P,EAAYpC,cACpBgG,EAAUtT,EAAM,GAAKA,EAAM,GAC3BuT,EAAUvT,EAAM,IAEhB,SAACoT,EAAQ,SAAEZ,GAAY,EAAAa,aAAarT,GACpCuS,EAAgBa,EACtB,GAAIb,EAAc55C,OAASqnC,EAAMrnC,OAAQ,CACvC,MAAM85C,EAAgB,EAAAC,kBAAkB1S,EAAOuS,GACzC7vB,EAAS,CAAC,QAAS,MAAO,OAE1BiwB,EAAgCC,KAAK1hB,MAAM0hB,KAAKC,UAAUnD,IAChEiD,EAAerF,cAAgBmF,EAC/B,MAAMe,EAAUx6C,KAAK82C,4BAA4BtC,EAAUv1C,EAAM06C,GAE3Dc,EAAUjB,EAASkB,UACnBjF,EAAS,eACT+E,EAAQT,gCACFvF,wDACGA,KAAY,EAAAwF,kBAAkBtwB,EAAQ+wB,8BAGrD,OAAO,IAAI,EAAA1G,eAAe0B,EAAQ+E,EAAQP,cAG5C,MAEMxE,EAAS,qBACDjB,sJAEgB8F,aAAmBC,8CALjC7D,EAAY59B,UACZ49B,EAAY39B,qDAMG9Z,+BAG/B,OAAO,IAAI,EAAA80C,eACP0B,EAAQ,CAAC,yBAA0B,4BAA6B,+BAO5DuD,qBAAqBxE,EAAkBv1C,EAAcy3C,GAC7D,MAAM1P,EAAQ0P,EAAYpC,cACpBqG,EAAU3T,EAAM,GAChBuT,EAAUvT,EAAM,GAAK2T,EAyBrBlF,EAAS,mBACHjB,6EAzBIxN,EAAM,GAAKuT,aA0BkBA,+BACxBI,8CALLjE,EAAY59B,UACZ49B,EAAY39B,mDAMC9Z,6BAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,yBAA0B,8BAMrDwD,qBAAqBzE,EAAkBv1C,EAAcy3C,GAC7D,MAAM1P,EAAQ0P,EAAYpC,cACpBsG,EAAU5T,EAAM,GAChB2T,EAAU3T,EAAM,GAAK4T,EACrBL,EAAUvT,EAAM,GAAK2T,EACrBL,EAAUtT,EAAM,GAAKuT,GAErB,SAACH,EAAQ,SAAEZ,GAAY,EAAAa,aAAarT,GAC1C,GAAIoT,EAASz6C,OAASqnC,EAAMrnC,OAAQ,CAClC,MAAM85C,EAAgB,EAAAC,kBAAkB1S,EAAOoT,GACzC1wB,EAAS,CAAC,MAAO,MAAO,QAAS,SAAU,UAE3CiwB,EAAgCC,KAAK1hB,MAAM0hB,KAAKC,UAAUnD,IAChEiD,EAAerF,cAAgBmF,EAE/B,MAAMhE,EAAS,eACTz1C,KAAK82C,4BAA4BtC,EAAUv1C,EAAM06C,GAAgBI,gCAC3DvF,gFACGA,KAAY,EAAAwF,kBAAkBtwB,EAAQ8vB,8BAGrD,OAAO,IAAI,EAAAzF,eAAe0B,EAAQ,CAAC,4BAA6B,2BAGlE,MAEMA,EAAS,mBACHjB,yFACc8F,aAAmBC,eAAqBI,2BACjDC,+CALDlE,EAAY59B,UACZ49B,EAAY39B,mDAMC9Z,6BAG7B,OAAO,IAAI,EAAA80C,eAAe0B,EAAQ,CAAC,4BAA6B,2BAMxDyD,qBAAqB1E,EAAkBv1C,EAAcy3C,GAC7D,MAAM1P,EAAQ0P,EAAYpC,cACpBuG,EAAU7T,EAAM,GAChB4T,EAAU5T,EAAM,GAAK6T,EACrBF,EAAU3T,EAAM,GAAK4T,EACrBL,EAAUvT,EAAM,GAAK2T,EACrBL,EAAUtT,EAAM,GAAKuT,GAErB,SAACH,EAAQ,SAAEZ,GAAY,EAAAa,aAAarT,GAC1C,GAAIoT,EAASz6C,OAASqnC,EAAMrnC,OAAQ,CAClC,MAAM85C,EAAgB,EAAAC,kBAAkB1S,EAAOoT,GACzC1wB,EAAS,CAAC,MAAO,MAAO,QAAS,SAAU,SAAU,UAErDiwB,EAAgCC,KAAK1hB,MAAM0hB,KAAKC,UAAUnD,IAChEiD,EAAerF,cAAgBmF,EAE/B,MAAMhE,EAAS,iBACPz1C,KAAK82C,4BAA4BtC,EAAUv1C,EAAM06C,GAAgBI,kCAC3DvF,6GAEGA,KAAY,EAAAwF,kBAAkBtwB,EAAQ8vB,kCAGvD,OAAO,IAAI,EAAAzF,eAAe0B,EAAQ,CAAC,4BAA6B,2BAGlE,MAEMA,EAAS,qBACDjB,oHAEc8F,aAAmBC,eAAqBI,6BACjDC,gBAAsBC,iDANzBnE,EAAY59B,UACZ49B,EAAY39B,qDAOG9Z,iCAG/B,OAAO,IAAI,EAAA80C,eACP0B,EAAQ,CAAC,yBAA0B,4BAA6B,+BAS5DhC,QACR,MAAMzP,EAAShkC,KAAKizC,QAAQgB,oBACtBgC,EAAOjS,EAAOgD,MAAMrnC,OACpBu2C,EAAUlS,EAAOkS,QACjB4E,EAAS9W,EAAOlrB,MAChBiiC,EAAS/W,EAAOjrB,OAEhBiiC,EAAe,GACrB,IAAK,IAAIt7C,EAAI,EAAGA,EAAIu2C,EAAO,IAAKv2C,EAC9Bs7C,EAAan7C,KAAK,eACZH,iBAAiBw2C,EAAQx2C,OAC/Bs7C,EAAan7C,KAAK,yBACFH,QAAQw2C,EAAQx2C,OAElCs7C,EAAan7C,KAAK,eACVo2C,EAAO,gBACf,MAAMgF,EAAO,gDAC4BhF,yDACI6E,MAAWC,gBAClDC,EAAa51C,KAAK,wDAEa6wC,kBAC/B+E,EAAa51C,KAAK,qBAGxB,MAAO,CAACquC,MAAO,IAAI,EAAAM,eAAekH,EAAM,CAAC,gCAQjCvH,YACR,MAAM5c,EAA2C,GAcjD,OAbA92B,KAAKizC,QAAQuD,YAAY/yC,WAAWsW,SAAQ,CAAC9a,EAAMS,KACjD,MAAMw7C,EAASl7C,KAAKizC,QAAQ0D,oBAAoBj3C,GAE1Cu2C,GADQiF,EAAO5G,cAAc30C,OAAS,EAAIu7C,EAAO5G,cAAgB4G,EAAOlU,OAC3DrnC,OACnB,IAAI60C,EAAW,IAAIv1C,IACnB63B,EAAO0d,GAAY,IAAI,EAAAT,eACnB/zC,KAAKm7C,mBAAmBl8C,EAAMg3C,EAAMiF,EAAOpiC,MAAOoiC,EAAOniC,QAAQ,GACjE,CAAC,6BAA6By7B,IAAY,6BAA8B,8BAC5EA,GAAsB,KACtB1d,EAAO0d,GAAY,IAAI,EAAAT,eACnB/zC,KAAKm7C,mBAAmBl8C,EAAMg3C,EAAMiF,EAAOpiC,MAAOoiC,EAAOniC,QAAQ,GACjE,CAAC,6BAA6By7B,IAAY,6BAA8B,iCAEvE1d,EASCqkB,mBAAmBC,EAAiBnF,EAAcn9B,EAAeC,EAAgBsiC,GAEzF,IAAIp8C,EAAO,IAAIm8C,IAKf,OAJIC,IACFp8C,GAAc,MAGT,mBACKA,WAAcg3C,gDACUh3C,yDACS6Z,MAAUC,gDAJ1C,EAAAg8B,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAKDg3B,aAAa6E,6DAahDE,mBAAmBF,EAAiBnF,EAAcn9B,EAAeC,EAAgBsiC,GAEzF,IAAIp8C,EAAO,IAAIm8C,SAKf,OAJIC,IACFp8C,GAAc,MAGT,kBACIA,WAAcg3C,iDACYmF,yDACQtiC,MAAUC,yBAJ1C,EAAAg8B,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAKxBg3B,aAAa6E,oCAtyCrC,mB,0BCRA,IAAYG,E,oKAAAA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KACtB,6BACA,+BAaF,oBACEx7C,YACW4yC,EAAgC6D,EAAiCG,EACjE1C,GADA,KAAAtB,YAAgC,KAAA6D,cAAiC,KAAAG,sBACjE,KAAA1C,wBAEb,gBACEl0C,YAAmBkzC,GAAA,KAAAA,YAMrB,uBACElzC,YAAmBg6C,EAA4BE,GAA5B,KAAAF,cAA4B,KAAAE,iBAKjD,2BAGEl6C,YAAmBd,EAAc86C,EAAsBE,GAApC,KAAAh7C,OAEfe,KAAKi6C,aADHA,GAGkB,GAGlBF,IACF/5C,KAAK+5C,YAAcA,GAGvByB,cAAc3zC,GACRA,GACF7H,KAAKi6C,aAAap6C,KAAKgI,KAM7B,oCACE7D,0BAA0By3C,GACxB,IAAKA,GAA0B,IAAjBA,EAAM97C,OAClB,MAAO,GAGT,GAAqB,IAAjB87C,EAAM97C,OACR,OAAO87C,EAGT,MAAMC,EAAa,IAAIC,IACjBC,EAAmB,IAAID,IACvB7kB,EAAS,IAAI/0B,MAGnB,OADA/B,KAAK67C,mBAAmBJ,EAAOC,EAAYE,EAAkB9kB,GACtDA,EAGD9yB,0BACJ83C,EAAkCJ,EAAyBE,EAC3D9kB,GACF,IAAK,IAAIp3B,EAAI,EAAGA,EAAIo8C,EAAWn8C,SAAUD,EACvCM,KAAK+7C,YAAYD,EAAWp8C,GAAIg8C,EAAYE,EAAkB9kB,GAI1D9yB,mBACJzF,EAA0Bm9C,EAAyBE,EAA+B9kB,GAEpF,IAAKv4B,GAAQq9C,EAAiBI,IAAIz9C,EAAKU,MACrC,OAIF,GAAIy8C,EAAWM,IAAIz9C,EAAKU,MACtB,MAAM,IAAIQ,MAAM,oFAIlBi8C,EAAWlhB,IAAIj8B,EAAKU,MAGpB,MAAMg7C,EAAe17C,EAAK07C,aAC1B,GAAIA,GAAgBA,EAAat6C,OAAS,EACxC,IAAK,IAAID,EAAI,EAAGA,EAAIu6C,EAAat6C,SAAUD,EACzCM,KAAK+7C,YAAY9B,EAAav6C,GAAIg8C,EAAYE,EAAkB9kB,GAKpEA,EAAOj3B,KAAKtB,GAGZq9C,EAAiBphB,IAAIj8B,EAAKU,MAG1By8C,EAAWlM,OAAOjxC,EAAKU,S,sGCnH3B,gBAMA,MAAag9C,UAAwB,EAAA7I,QACnCrzC,YAAYkzC,GACVI,MAAMJ,GAERK,eACE,OAAO,OAAP,wBAAWtzC,KAAKk8C,iBAAoBl8C,KAAKm8C,iBAE3CrI,iBACE,MAAO,GAECoI,gBACR,MAAO,CACL/xB,OAAQ,IAAI,EAAA4pB,eAAe,kGAMrBoI,gBACR,MAAO,CACL5wC,OAAQ,IAAI,EAAAwoC,eAAe,qFAUrBqI,cACR,MAAMC,EAAaJ,EAAgBpsB,iBAAmB,uBAAyB,GAC/E,MAAO,CACL1F,OAAQ,IAAI,EAAA4pB,eAAe,kmBAYvBsI,oHAWEC,cACR,MAAMD,EAAaJ,EAAgBpsB,iBAAmB,uBAAyB,GAC/E,MAAO,CACLtkB,OAAQ,IAAI,EAAAwoC,eAAe,uJAGrBsI,uYAcVr4C,wBACE,MAAMmD,EAAI,IAAIhD,YAAY,GACpBkC,EAAI,IAAIhF,YAAY8F,GACpBN,EAAI,IAAI9F,WAAWoG,GAEzB,GADAd,EAAE,GAAK,WACM,MAATQ,EAAE,GACJ,OAAO,EAET,GAAa,MAATA,EAAE,GACJ,OAAO,EAET,MAAM,IAAIpH,MAAM,uBAvFpB,qB,uGCNA,gBACA,UAOA,MAAa88C,UAAyB,EAAAnJ,QACpCrzC,YAAYkzC,GACVI,MAAMJ,GAERK,eACE,OAAO,OAAP,wBAAWtzC,KAAKw8C,gBAAmBx8C,KAAKy8C,mBAE1C3I,iBACE,MAAO,GAEC0I,eACR,MAAMlG,EAAO,EAAAvB,QAAQ/0C,KAAKizC,QAAQN,UAAUpzB,SAC5C,MAAO,CACLi9B,aAAc,IAAI,EAAAzI,eACd,2DAEIuC,EAAKtS,+CAGT,CAAC,qBAGCyY,kBACR,MAAO,CACLA,gBAAiB,IAAI,EAAA1I,eACjB,wGAKA,CAAC,sBA9BX,sB,mGCRA,MAAM2I,EAAwB,qFAK9B,0BAA+BC,GAC7B,MAAMC,EAAiG,GACvG,IAAIliC,EACJ,KAAwD,QAAhDA,EAAQgiC,EAAsBG,KAAKF,KAAmB,CAC5D,MAAMjzB,EAAShP,EAAM,GACDkC,MAAM,KACNlY,KAAIgC,IACH,MAAMo2C,EAASp2C,EAAEq2C,OAAOngC,MAAM,KAC9B,OAAIkgC,GAA4B,IAAlBA,EAAOn9C,OACZ,CAACiC,KAAMk7C,EAAO,GAAI79C,KAAM69C,EAAO,IAEjC,QAERE,QAAOx5C,GAAW,OAANA,IAChCo5C,EAAWliC,EAAM,IAAM,CAACgP,SAAQuxB,KAAMvgC,EAAM,IAE9C,IAAK,MAAMzb,KAAQ29C,EAAY,CAC7B,MAAMK,EArBc,6DAqBgBx0C,QAAQ,WAAYxJ,GAClDi+C,EAAQ,IAAIvgC,OAAOsgC,EAAa,MACtC,KAAwC,QAAhCviC,EAAQwiC,EAAML,KAAKF,KAAmB,CAC5C,MAAM/6C,EAAO8Y,EAAM,GACbyiC,EAAWziC,EAAM,GACjBgP,EAAShP,EAAM,GAAGkC,MAAM,KACxBwgC,EAAW,EAAS,GAAGx7C,KAAQu7C,KAAc,GACnD,IAAIE,EAAkBT,EAAW39C,GAAMg8C,KACnCqC,EAAiB,GACrBV,EAAW39C,GAAMyqB,OAAO3P,SAAQ,CAACvW,EAAG9D,KAC9B8D,IACF85C,GAAkB,GAAG95C,EAAE5B,QAAQ4B,EAAEvE,UAAUyqB,EAAOhqB,YAGtD29C,EAAU,GAAGC,OAAoBD,IACjCA,EAAUA,EAAQ50C,QAAQ,SAAU,GAAG00C,QACvC,MAAMI,EAAc,WAClBH,uBAEEC,qBAGJV,EAASA,EAAOl0C,QAAQiS,EAAM,GAAI6iC,IAItC,OADSZ,EAAOl0C,QAAQi0C,EAAuB,M,uGC/CjD,gBACA,UACA,UACA,UAYA,yBAKE38C,YACI4yC,EAAyB6D,EAA0BG,EACnD1C,GALK,KAAAuJ,KAAkC,GAClC,KAAAC,8BAA6E,GAKpFz9C,KAAKizC,QAAU,IAAI,EAAAyK,YAAY/K,EAAW6D,EAAaG,EAAqB1C,GAG5E3wC,OAAO+qB,KAAK,EAAAsvB,cAAc5jC,SAAS9a,IACjC,MAAM2+C,EAAM,IAAI,EAAAD,aAAa1+C,GAAMe,KAAKizC,SACxCjzC,KAAKw9C,KAAKv+C,GAAQ2+C,KAIpB,MAAMl5C,EAAM1E,KAAKy9C,8BACjB,IAAK,MAAMI,KAAW79C,KAAKw9C,KAAM,CAC/B,MACMM,EADM99C,KAAKw9C,KAAKK,GACIvK,eAC1B,IAAK,MAAMkH,KAAWsD,EAAe,CACnC,MAAMj6C,EAAMg6C,EAAU,IAAMrD,EAC5B,IAAIuD,EACAr5C,EAAIb,IACNk6C,EAAcr5C,EAAIb,GAClBk6C,EAAYhE,YAAc+D,EAActD,GAAST,cAEjDgE,EAAc,IAAI,EAAAC,mBAAmBn6C,EAAKi6C,EAActD,GAAST,aACjEr1C,EAAIb,GAAOk6C,GAEb,MAAM9D,EAAe6D,EAActD,GAASP,aAC5C,GAAIA,EACF,IAAK,IAAIv6C,EAAI,EAAGA,EAAIu6C,EAAat6C,SAAUD,EACzC,GAAKgF,EAAIu1C,EAAav6C,IAKpBq+C,EAAYvC,cAAc92C,EAAIu1C,EAAav6C,SALlB,CACzB,MAAMmI,EAAO,IAAI,EAAAm2C,mBAAmB/D,EAAav6C,IACjDgF,EAAIu1C,EAAav6C,IAAMmI,EACvBk2C,EAAYvC,cAAc3zC,MAUtCo2C,aACE,MAAMzH,EAAcx2C,KAAKizC,QAAQuD,YACjC,IAAIf,EAASe,EAAY0H,aAWzB,OARKl+C,KAAKizC,QAAQuD,YAAY2H,UAC5B1I,EAAS,GAAGA,YACV,EAAA2I,yBAAyBp+C,KAAKizC,QAAQN,UAAUpzB,QAASvf,KAAKizC,QAAQgB,oBAAoBjN,MAAMrnC,WAGpG81C,EAAS,EAAA4I,eAAe5I,GAGjB,GAAG,EAAA6I,sBAAsBt+C,KAAKizC,QAAQN,UAAUpzB,iBACrDvf,KAAKu+C,YAAY/H,EAAY/yC,WAAY+yC,EAAYgI,mBACrDx+C,KAAKy+C,WAAWhJ,WAChBA,IAGMgJ,WAAW9B,GACnB,MAAM+B,EAAmB1+C,KAAK2+C,kCAAkChC,GAEhE,GAAgC,IAA5B+B,EAAiB/+C,OACnB,MAAO,GAGT,IAAIi/C,EAAW,GACf,IAAK,IAAIl/C,EAAI,EAAGA,EAAIg/C,EAAiB/+C,SAAUD,EAAG,CAChD,IAAIg/C,EAAiBh/C,GAAGq6C,YAGtB,MAAM,IAAIt6C,MAAM,8CAA8Ci/C,EAAiBh/C,GAAGT,QAFlF2/C,GAAYF,EAAiBh/C,GAAGq6C,YAAc,KAMlD,OAAO6E,EAEDD,kCAAkChC,GACxC,MAAMlB,EAA8B,GASpC,OAPAn4C,OAAO+qB,KAAKruB,KAAKy9C,+BAA+B1jC,SAAQ8kC,IACtD,MAAMrE,EAAUqE,EAAgBjiC,MAAM,KAAK,IACV,IAA7B+/B,EAAOr8C,QAAQk6C,IACjBiB,EAAM57C,KAAKG,KAAKy9C,8BAA8BoB,OAI3C,EAAAC,4BAA4BC,mBAAmBtD,GAG9C8C,YAAYS,EAAqBR,GACzC,MAAMS,EAAyB,GAC/B,GAAID,EACF,IAAK,MAAME,KAAWF,EACpBC,EAAap/C,KAAK,qBAAqBq/C,MAG3C,GAAIV,EACF,IAAK,MAAMrB,KAAYqB,EACrBS,EAAap/C,KACT,WAAWs9C,EAASv7C,QAAQu7C,EAASl+C,OAAOk+C,EAASgC,YAAc,IAAIhC,EAASgC,eAAiB,OAGzG,OAAOF,EAAa75C,KAAK,S,mGC7H7B,gBAEA,UACA,UACA,UACA,UAEa,EAAAu4C,aAAwE,CACnF,SAAY,EAAA1B,gBACZ,UAAa,EAAAM,iBACb,IAAO,EAAA6C,WACP,WAAc,EAAAC,kBACd,YAAe,EAAAlM,gB,wGCZjB,gBAMA,MAAakM,UAA0B,EAAAjM,QACrCrzC,YAAYkzC,GACVI,MAAMJ,GAERK,eACE,OAAO,OAAP,kEACKtzC,KAAKs/C,cACLt/C,KAAKu/C,oBACLv/C,KAAKw/C,mBACLx/C,KAAKy/C,mBACLz/C,KAAK0/C,oBAGZ5L,iBACE,MAAO,GAECwL,aACR,MAAMK,EAAa3/C,KAAKizC,QAAQgB,oBAAoBjN,MAAMrnC,OACpDm3B,EAA2C,GAqBjD,OApBA92B,KAAKizC,QAAQuD,YAAY/yC,WAAWsW,SAAQ,CAAC9a,EAAMS,KACjD,MAAMsnC,EAAQhnC,KAAKizC,QAAQ0D,oBAAoBj3C,GAAG40C,cAClD,GAAItN,EAAMrnC,QAAUggD,EAAY,CAC9B,MAAM1J,EAAOjP,EAAMrnC,OACbigD,EAAYD,EAAa1J,EACzBzB,EAAW,gBAAgBv1C,IACjC,IAAI4gD,EAAQ,GACZ,IAAK,IAAIngD,EAAI,EAAGA,EAAIu2C,IAAQv2C,EAC1BmgD,GAAS,2BACKngD,sCAAsCkgD,EAAYlgD,QAAQsnC,EAAMtnC,uBAGhF,MAAMu7C,EAAO,kBACNzG,yBAAgCmL,2BAAoC1J,oBACvE4J,yBAGJ/oB,EAAO0d,GAAY,IAAI,EAAAT,eAAekH,OAGnCnkB,EAECyoB,mBACR,MAAMI,EAAa3/C,KAAKizC,QAAQgB,oBAAoBjN,MAAMrnC,OACpDm3B,EAA2C,GAuBjD,OAtBA92B,KAAKizC,QAAQuD,YAAY/yC,WAAWsW,SAAQ,CAAC9a,EAAMS,KACjD,MAAMsnC,EAAQhnC,KAAKizC,QAAQ0D,oBAAoBj3C,GAAGsnC,MAClD,KAAMA,EAAMrnC,OAAS,GAAKqnC,EAAMrnC,OAASggD,GAAa,CACpD,MAAM1J,EAAOjP,EAAMrnC,OACbigD,EAAYD,EAAa1J,EACzBzB,EAAW,sBAAsBv1C,IACvC,IAAI4gD,EAAQ,GACZ,IAAK,IAAIngD,EAAI,EAAGA,EAAIu2C,EAAO,IAAKv2C,EAC9BmgD,GAAS,2BACKngD,sCAAsCkgD,EAAYlgD,QAAQsnC,EAAMtnC,uBAGhF,MAAMu7C,EAAO,kBACNzG,wBAA+BmL,2BAAoC1J,oBACtE4J,4BACY5J,EAAO,uBAAuB0J,EAAa,8BAC3C1J,EAAO,uBAAuB0J,EAAa,2BAG3D7oB,EAAO0d,GAAY,IAAI,EAAAT,eAAekH,OAGnCnkB,EAEC2oB,kBACR,MAAM3oB,EAA2C,GAWjD,OAVA92B,KAAKizC,QAAQuD,YAAY/yC,WAAWsW,SAAQ,CAAC9a,EAAMS,KACjD,MAAMsnC,EAAQhnC,KAAKizC,QAAQ0D,oBAAoBj3C,GAAGsnC,MAC5CkP,EAAUl2C,KAAKizC,QAAQ0D,oBAAoBj3C,GAAGw2C,QAC9CD,EAAOjP,EAAMrnC,OACnB,IAAI60C,EAAW,mBAAmBv1C,IAClC63B,EAAO0d,GAAY,IAAI,EAAAT,eAAesL,EAAkBS,oBAAoBtL,EAAUyB,EAAMC,IAC5F1B,EAAW,mBAAmBv1C,MAC9B63B,EAAO0d,GACH,IAAI,EAAAT,eAAesL,EAAkBS,oBAAoBtL,EAAUyB,EAAMC,EAAQxtC,QAAQgyC,eAExF5jB,EAET9yB,2BAA2B/E,EAAcg3C,EAAcC,GACrD,IAAI2J,EAAQ,GACZ,IAAK,IAAIngD,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/BmgD,GAAS,+BACangD,QAAQw2C,EAAQx2C,gBAGxC,MAAO,eACCT,iBAAoBg3C,2CAEtB4J,6CAKEL,kBACR,MAAM1oB,EAA2C,GAWjD,OAVA92B,KAAKizC,QAAQuD,YAAY/yC,WAAWsW,SAAQ,CAAC9a,EAAMS,KACjD,MAAMsnC,EAAQhnC,KAAKizC,QAAQ0D,oBAAoBj3C,GAAGsnC,MAC5CkP,EAAUl2C,KAAKizC,QAAQ0D,oBAAoBj3C,GAAGw2C,QAC9CD,EAAOjP,EAAMrnC,OACnB,IAAI60C,EAAW,mBAAmBv1C,IAClC63B,EAAO0d,GAAY,IAAI,EAAAT,eAAesL,EAAkBU,sBAAsBvL,EAAUyB,EAAMC,IAC9F1B,EAAW,mBAAmBv1C,MAC9B63B,EAAO0d,GACH,IAAI,EAAAT,eAAesL,EAAkBU,sBAAsBvL,EAAUyB,EAAMC,EAAQxtC,QAAQgyC,eAE1F5jB,EAET9yB,6BAA6B/E,EAAcg3C,EAAcC,GACvD,MAAM8E,EAAe,GACrB,IAAK,IAAIt7C,EAAI,EAAGA,EAAIu2C,EAAO,IAAKv2C,EAC9Bs7C,EAAan7C,KAAK,mBACRH,iBAAiBw2C,EAAQx2C,OACnCs7C,EAAan7C,KAAK,+BACIH,QAAQw2C,EAAQx2C,OAIxC,OAFAs7C,EAAan7C,KAAK,mBACNo2C,EAAO,gBACZ,gBACEh3C,iCAAoCg3C,kBACvC+E,EAAa51C,KAAK,uBAIhBs6C,mBACR,MAAM5oB,EAA2C,GA0BjD,OAzBA92B,KAAKizC,QAAQuD,YAAY/yC,WAAWsW,SAAQ,CAAC9a,EAAMS,KACjD,MAAMsnC,EAAQhnC,KAAKizC,QAAQ0D,oBAAoBj3C,GAAGsnC,MAC5CiP,EAAOjP,EAAMrnC,OACb60C,EAAW,oBAAoBv1C,IACrC,IAAI+gD,EAAY,GAChB,IAAK,IAAItgD,EAAI,EAAGA,EAAIu2C,IAAQv2C,EAC1BsgD,GAAa,mBACLtgD,QAAQsnC,EAAMtnC,MAExB,MAAMu7C,EAAO,kBACJzG,+BAAsCyB,8BAC/BA,kBACV+J,6BACY/J,uOAUlBnf,EAAO0d,GAAY,IAAI,EAAAT,eAAekH,MAEjCnkB,GA1JX,uB,uKCOA,MAAMmpB,EAAoB,CACxB1gC,QAAS,GACT0kB,UAAW,YACXic,cAAe,UACfC,YAAa,UACb5J,UAAW,YACXvS,OAAQ,eACRoc,kBAAmB,IAEfC,EAAoB,CACxB9gC,QAAS,kBACT0kB,UAAW,KACXic,cAAe,MACfC,YAAa,KACb5J,UAAW,UACXvS,OAAQ,cACRoc,kBAAmB,yBAGrB,SAAgBrL,EAAQx1B,GACtB,OAAmB,IAAZA,EAAgB0gC,EAAcI,EADvC,YAIA,iCAAsC9gC,GACpC,MAAM+2B,EAAOvB,EAAQx1B,GACrB,MAAO,GAAG+2B,EAAK/2B,gDAET+2B,EAAKrS,mCACLqS,EAAKrS,yCAELqS,EAAK4J,2JASb,iCAAsC3gC,GACpC,MAAM+2B,EAAOvB,EAAQx1B,GACrB,MAAO,GAAG+2B,EAAK/2B,sGAIX+2B,EAAK6J,oCACL7J,EAAK8J,uaA8BX,oCAAyC7gC,EAAc+gC,GAErD,MAAO,sCAESA,uFAHHvL,EAAQx1B,GAMZykB,8B,iGChGX,gBAOA,MAAaob,UAAmB,EAAAhM,QAC9BrzC,YAAYkzC,GACVI,MAAMJ,GAERa,iBACE,MAAO,GAETR,eACE,OAAO,OAAP,oDAAWtzC,KAAKugD,sBAAyBvgD,KAAKwgD,WAAcxgD,KAAKygD,cAAiBzgD,KAAK0gD,cAE/EH,qBACR,MACMtK,EADej2C,KAAKizC,QAAQgB,oBACRjN,MAAMrnC,OAC1BghD,EAAmC,CAACnmB,IAAK,KAAMgB,IAAK,KAAMjB,IAAK,KAAMe,IAAK,MAC1ExE,EAA2C,GACjD,IAAK,MAAM73B,KAAQ0hD,EAAQ,CACzB,MAAMC,EAAQ,GAAG3hD,OACjB,IAAI4hD,EAAkB,GACtB,IAAK,IAAInhD,EAAI,EAAGA,EAAIu2C,IAAQv2C,EAC1BmhD,GAAmB,oBACVnhD,MAAMihD,EAAO1hD,UAAaS,kBAGrC,MAAMu7C,EAAO,kBACJ2F,aAAiB3K,oBAAuBA,oBAC3C4K,yBAGN/pB,EAAO8pB,GAAS,IAAI,EAAA7M,eAAekH,GAGrC,OAAOnkB,EAEC0pB,UACR,MACMvK,EADej2C,KAAKizC,QAAQgB,oBACRjN,MAAMrnC,OAChC,IAAIkhD,EAAkB,GACtB,IAAK,IAAInhD,EAAI,EAAGA,EAAIu2C,IAAQv2C,EAC1BmhD,GAAmB,kBACVnhD,YAAYA,gBAGvB,MAAMu7C,EAAO,gCACYhF,oBAAuBA,kBAC1C4K,qBAGN,MAAO,CAACL,QAAS,IAAI,EAAAzM,eAAekH,IAG5BwF,aACR,MACMxK,EADej2C,KAAKizC,QAAQgB,oBACRjN,MAAMrnC,OAChC,IAAIkgD,EAAQ,+CAEK5J,2EAIjB,IAAK,IAAIv2C,EAAI,EAAGA,EAAIu2C,EAAO,IAAKv2C,EAC9BmgD,GAAS,+BACangD,qBACZA,4BAGZmgD,GAAS,iCAEG5J,EAAO,wBAEnB,MAAMgF,EAAO,qCACiBhF,wCACxB4J,uBAGN,MAAO,CAACY,WAAY,IAAI,EAAA1M,eAAekH,IAE/ByF,aACR,MACMzK,EADej2C,KAAKizC,QAAQgB,oBACRjN,MAAMrnC,OAChC,IAAIkgD,EAAQ,gDAEM5J,wEAIlB,IAAK,IAAIv2C,EAAI,EAAGA,EAAIu2C,EAAO,IAAKv2C,EAC9BmgD,GAAS,+BACangD,4BACLA,cAGnBmgD,GAAS,wCAEU5J,EAAO,gBAE1B,MAAMgF,EAAO,gCACYhF,6BACnB4J,mBAGN,MAAO,CAACa,WAAY,IAAI,EAAA3M,eAAekH,KApG3C,gB,kbCNA,gBACA,UACA,UACA,UACA,UAEA,UACA,UAGA,UACA,UAeA,8BAGEl7C,YAAmB2tC,GAAA,KAAAA,UACjB1tC,KAAK8gD,uBAAyB,IAAIjgD,IAClCb,KAAK+gD,yBAA2B,IAAIlgD,IAMtCmgD,+BAA+Bha,EAA0Bia,GACvD,OAAO,EAAAD,+BAA+BhhD,KAAK0tC,QAAQwT,eAAgBla,EAAOia,GAG5EE,eAAeC,EAAwCC,GACrD,GAAIA,EAAO1hD,OAASyhD,EAAQ39C,WAAW9D,OACrC,MAAM,IAAIF,MAAM,mCAAmC2hD,EAAQ39C,WAAW9D,WAExE,GAAIyhD,EAAQ39C,WAAW9D,SAAWyhD,EAAQE,WAAW3hD,OACnD,MAAM,IAAIF,MAAM,+CAIlB,MAAM8hD,EAAmC,GACzC,IAAK,IAAI7hD,EAAI,EAAGA,EAAI0hD,EAAQ39C,WAAW9D,SAAUD,EAC/C6hD,EAAkB7hD,GAAKM,KAAKwhD,uBAAuBH,EAAO3hD,GAAI0hD,EAAQE,WAAW5hD,IAGnF,MAAMmE,EAzCN,EAAC2yC,EAA4C+K,KAC3C,MAAMF,EACFE,EAAkB78C,KAAI+8C,GAAW,GAAGA,EAAQnN,cAAclvC,KAAK,QAAQq8C,EAAQ3oC,SAAS2oC,EAAQ1oC,WAC3F3T,KAAK,KACd,IAAIvB,EAAM2yC,EAAYv3C,KAKtB,OAJIu3C,EAAYkL,YACd79C,GAAO,IAAM2yC,EAAYkL,UAAY,KAEvC79C,GAAO,IAAMw9C,EACNx9C,GAgCG89C,CAAwBP,EAASG,GAC7C,IAAIK,EAAW5hD,KAAK0tC,QAAQmU,eAAeC,YAAYj+C,GACvD,MAAM2yC,EAAcoL,EAChBA,EAASpL,YACsC,mBAAtC4K,EAA8Bl/C,IAAsBk/C,EAA8Bl/C,MAC9Bk/C,EAG3DnN,EAAsB,EAAA8N,mCACxB/hD,KAAK0tC,QAAQwT,eAAgB1K,EAAYxS,OAAOliC,KAAM00C,EAAYxS,OAAOid,aACvEe,EAAoBhiD,KAAKiiD,kBAAkBhO,EAAqBuC,EAAYxS,OAAOpiC,MAQzF,OANKggD,IACHA,EAAW5hD,KAAK0tC,QAAQmU,eAAeva,MAAMkP,EAAa+K,EAAmBS,GAC7EhiD,KAAK0tC,QAAQmU,eAAeK,YAAYr+C,EAAK+9C,IAG/C5hD,KAAKmiD,WAAWP,EAAUL,EAAmBS,GACtCA,EAGTr+C,IAAIy9C,EAA4BC,GAE9B,OAD0BrhD,KAAKmhD,eAAeC,EAASC,GAC9Be,OAGnBD,WAAWP,EAAoBP,EAAuBrd,GAE5D,IAAK,IAAItkC,EAAI,EAAGA,EAAI2hD,EAAO1hD,SAAUD,EACnC,KAAM2hD,EAAO3hD,GAAGw0C,WAAc0N,EAASpL,YAAY8K,WAAW5hD,KAAO,EAAA2iD,YAAYC,QAC/E,MAAM,IAAI7iD,MAAM,SAASC,mCAK7B,KAAMskC,EAAOkQ,WAAc0N,EAASpL,YAAYxS,OAAOid,cAAgB,EAAAoB,YAAYC,QACjF,MAAM,IAAI7iD,MAAM,uCAGlBO,KAAK0tC,QAAQmU,eAAel+C,IAAIi+C,EAAUP,EAAQrd,GAc5Cwd,uBAAuBY,EAAgBnB,GAC7C,IAAIsB,EAAKviD,KAAKwiD,eAAeJ,EAAOK,OAAQxB,IAAgB,EAAAoB,YAAYC,QAExE,IAAKC,IAEHA,EAAKviD,KAAKwiD,eAAeJ,EAAOK,OAAQxB,IAAgB,EAAAoB,YAAYC,QAChEC,GACF,OAAItB,IAAgB,EAAAoB,YAAYC,OACvBtiD,KAAK0yC,KAAK6P,GAEVviD,KAAK0iD,OAAOH,GAKzB,IAAKA,EAAI,CACP,MAAMrH,EAAS,EAAA6G,mCAAmC/hD,KAAK0tC,QAAQwT,eAAgBkB,EAAOtgD,KAAMm/C,GAE5F,GAAIA,IAAgB,EAAAoB,YAAYM,oBAAqB,CACnD,MAAMC,EAAQ,EACRC,EAAW,EACX7b,EAAQob,EAAOtgD,KACrB,GAAqB,IAAjBklC,EAAMrnC,OAAc,CAQtB,MAAMmjD,EAAsB,CAAC9b,EAAM,GAAItwB,KAAKC,KAAMqwB,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAM6b,IAC9EE,EACF,EAAAhB,mCAAmC/hD,KAAK0tC,QAAQwT,eAAgB4B,EAAqB7B,GACzF,IAAI58C,EAAS+9C,EAAOY,WACpB,GAAIhc,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAK6b,GAAa,EAAG,CACnD,MAAMI,EAAiBjc,EAAM,GACvBkc,EAAalc,EAAM,GAAKA,EAAM,GAAKA,EAAM,GACzCmc,EAAazsC,KAAKC,KAAKusC,EAAaN,EAAQC,GAAYA,EAE9Dx+C,EAAS,IAAIvD,aADGmiD,EAAiBE,GAEjC,IAAK,IAAIr8C,EAAI,EAAGA,EAAIm8C,IAAkBn8C,EAAG,CACvC,MAAMs8C,EAAYt8C,EAAIo8C,EAChBG,EAAYv8C,EAAIq8C,EAAar8C,EAAI87C,EAAQM,EAC/C7+C,EAAO9C,IAAI6gD,EAAOY,WAAWt3C,SAAS03C,EAAWA,EAAYF,GAAaG,IAG9E,OAAOrjD,KAAKiiD,kBAAkBc,EAAgBX,EAAOxgD,KAAMyC,EAAQ+9C,EAAQ,IAI/E,GAAInB,IAAgB,EAAAoB,YAAYC,OAAQ,CACtC,MAAMgB,EACF,EAAAC,6BAA6BvjD,KAAK0tC,QAAQwT,eAAgBkB,EAAOtgD,KAAM,EAAG,GAAI,CAAC0hD,WAAW,IACxFC,EAAsBzjD,KAAKiiD,kBAC7BqB,EAAuBlB,EAAOxgD,KAAMwgD,EAAOY,WAAYZ,EAAQ,GACnEG,EAAKviD,KAAK0yC,KAAK+Q,QAEflB,EAAKviD,KAAKiiD,kBAAkB/G,EAAQkH,EAAOxgD,KAAMwgD,EAAOY,WAAYZ,EAAQ,GAGhF,OAAOG,EAYTmB,sCACIxI,EAAuBvV,EAA2B9jC,EAAyBugD,GAC7E,OAAOpiD,KAAKiiD,kBAAkB/G,EAAQvV,EAAU9jC,EAAMugD,EAAQ,GAGxDH,kBACJ/G,EAAuBvV,EAA2B9jC,EAA0BugD,EAC5EuB,GACF,EAAA9Q,OAAOE,QAAQ,mBAAoB,iCAAiC6G,KAAKC,UAAUqB,OACnF,MAAMuG,EAAUzhD,KAAK0tC,QAAQkW,eAAeC,wBAAwBle,EAAUuV,EAAQr5C,EAAM8hD,GAC5F,OAAO3jD,KAAK8jD,6BAA6B5I,EAAQvV,EAAU8b,EAASW,GAGtE2B,gBAAgBhgB,EAAeigB,GAC7B,MAAMC,EAAUjkD,KAAKwhD,uBAAuBzd,EAAO,EAAAse,YAAY6B,UACzDC,EAAkC,CACtCtB,SAAUoB,EAAQpB,SAClB9pC,OAAQkrC,EAAQlrC,OAChBD,MAAOmrC,EAAQnrC,MAEfkuB,MAA+B,IAAxBgd,EAAarkD,OAAeqkD,EAAe,CAAC,GACnD9N,QAAS,EAAAgC,UAAUkM,eAAeJ,GAClC1P,cAAe0P,GAGjB,OADuBhkD,KAAK8jD,6BAA6BK,EAAkBpgB,EAAMniC,KAAMqiD,EAAQxC,SACzEW,OAGxBiC,cAActgB,EAAeigB,GAC3B,MAAMC,EAAUjkD,KAAKwhD,uBAAuBzd,EAAO,EAAAse,YAAYC,QAG/D,GAAI,EAAAgC,eAAevgB,EAAMjiC,KAAMkiD,GAAe,CAC5C,MAAMG,EAAkC,CACtCtB,SAAUoB,EAAQpB,SAClB9pC,OAAQkrC,EAAQlrC,OAChBD,MAAOmrC,EAAQnrC,MAEfkuB,MAA+B,IAAxBgd,EAAarkD,OAAeqkD,EAAe,CAAC,GACnD9N,QAAS,EAAAgC,UAAUkM,eAAeJ,GAClC1P,cAAe0P,EACf9P,UAAU,GAGZ,OADuBl0C,KAAK8jD,6BAA6BK,EAAkBpgB,EAAMniC,KAAMqiD,EAAQxC,SACzEW,OAGxB,MAAMmC,EAAqB,EAAAC,cAAczgB,EAAMjiC,MACzC2iD,EAAsB,EAAAD,cAAcR,GAEpCU,EAAsB1kD,KAAKqkD,cAActgB,EAAOwgB,GAChDI,EAAuB3kD,KAAK2D,IAC9B,EAAAihD,uCAAuC5kD,KAAM0kD,EAAqBD,GAAsB,CAACC,IAE7F,OADqB1kD,KAAKqkD,cAAcM,EAAsBX,GAIhEa,KAAK9gB,EAAeniC,GAClB,MAAMqiD,EAAUjkD,KAAKwhD,uBAAuBzd,EAAO,EAAAse,YAAY6B,UAE/D,OADuBlkD,KAAK8jD,6BAA6BG,EAA0BriD,EAAMqiD,EAAQxC,SAC3EW,OAGhB0B,6BACJ5I,EAAuBvV,EAA2B8b,EAAuBW,EAAiB0C,GAC5F,MAAMC,EAAW,+BACZ7J,GAAM,CACTkH,OAAQA,GACJ,IAAI,EAAA5gD,OACI05C,EAAO5G,cAAe3O,GAAWqf,GAAmBhlD,KAAKilD,YAAYF,KAC9DC,GAAmB,EAAD,gCAAC,OAAAhlD,KAAKklD,iBAAiBH,YAAcvlD,EAAWslD,GACrFrD,YAGF,OADAzhD,KAAKmlD,eAAeJ,EAAY3C,OAAOK,OAAQsC,EAAa7J,EAAOhH,UAC5D6Q,EAGDvC,eAAesC,EAAqB5Q,GAAW,GACrD,OAAOl0C,KAAK0tC,QAAQ0X,cAAcN,GAC9B9kD,KAAK0tC,QAAQ8U,eAAesC,EAAU5Q,GACtCA,EAAWl0C,KAAK8gD,uBAAuB5+C,IAAI4iD,GAAY9kD,KAAK+gD,yBAAyB7+C,IAAI4iD,GAE/FK,eAAeL,EAAqBvC,EAAiBrO,GAAW,GAC1Dl0C,KAAK0tC,QAAQ0X,cAAcN,GAC7B9kD,KAAK0tC,QAAQyX,eAAeL,EAAUvC,EAAIrO,IAEzCA,EAAWl0C,KAAK8gD,uBAAyB9gD,KAAK+gD,0BAA0Bx/C,IAAIujD,EAAUvC,GAG3F8C,sBAAsBjD,EAAgBlO,GAAW,GAC/C,QAASl0C,KAAKwiD,eAAeJ,EAAOK,OAAQvO,GAG9ChC,UACElyC,KAAK0tC,QAAQkW,eAAe0B,sBAC5BtlD,KAAK8gD,uBAAuB/mC,SAAQwoC,GAAMviD,KAAK0tC,QAAQkW,eAAe2B,eAAehD,KACrFviD,KAAK8gD,uBAAyB,IAAIjgD,IAClCb,KAAK+gD,yBAAyBhnC,SAAQwoC,GAAMviD,KAAK0tC,QAAQkW,eAAe2B,eAAehD,KACvFviD,KAAK+gD,yBAA2B,IAAIlgD,IAGtCokD,YAAYF,GACV,OAAIA,EAAY7Q,SACPl0C,KAAKilD,YAAYjlD,KAAK0iD,OAAOqC,IAEjC/kD,KAAK0tC,QAAQxuC,QAAQyzC,UAAU6S,2BAG7BxlD,KAAK0tC,QAAQkW,eAAeqB,YAAYF,EAAaA,EAAY3C,OAAOxgD,KAAMmjD,EAAYlC,UAFxF7iD,KAAK0tC,QAAQkW,eAAe6B,wBAAwB,EAAAC,cAAc1lD,KAAM+kD,IAK7EG,iBAAiBH,G,yCACrB,OAAIA,EAAY7Q,SACPl0C,KAAKklD,iBAAiBllD,KAAK0iD,OAAOqC,IAEtC/kD,KAAK0tC,QAAQxuC,QAAQyzC,UAAU6S,2BAG7BxlD,KAAK0tC,QAAQkW,eAAesB,iBAAiBH,EAAaA,EAAY3C,OAAOxgD,KAAMmjD,EAAYlC,UAF7F7iD,KAAK0tC,QAAQkW,eAAe6B,wBAAwB,EAAAC,cAAc1lD,KAAM+kD,OAKnFrS,KAAK3O,GAEH,OAD0B/jC,KAAKmhD,eAAe,EAAAwE,4BAA4B3lD,KAAM+jC,EAAMqe,QAAS,CAACre,EAAMqe,SAIxGM,OAAO3e,GAEL,OAD0B/jC,KAAKmhD,eAAe,EAAAyE,8BAA8B5lD,KAAM+jC,EAAMqe,QAAS,CAACre,EAAMqe,Y,gpBClT5G,gBACA,aACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aACA,UACA,UAEa,EAAAyD,uBAAuD,CAClE,CAAC,MAAO,GAAI,KAAMC,EAAShpC,KAC3B,CAAC,OAAQ,GAAI,KAAMgpC,EAASC,MAC5B,CAAC,MAAO,GAAI,KAAMC,EAAUxrB,KAC5B,CAAC,MAAO,GAAI,KAAMwrB,EAAUzmB,KAC5B,CAAC,OAAQ,GAAI,KAAMumB,EAASG,MAC5B,CAAC,OAAQ,GAAI,KAAMH,EAASI,MAE5B,CAAC,cAAe,GAAI,KAAM,EAAAC,YAAa,EAAAC,4BACvC,CAAC,qBAAsB,GAAI,KAAM,EAAAC,mBAAoB,EAAAC,mCACrD,CAAC,OAAQ,GAAI,KAAM,EAAAzB,KAAM,EAAA0B,qBACzB,CAAC,OAAQ,GAAI,KAAMT,EAASnvC,MAC5B,CAAC,OAAQ,GAAI,OAAQmvC,EAASU,KAAMV,EAASW,qBAC7C,CAAC,OAAQ,GAAI,MAAOX,EAASY,SAC7B,CAAC,SAAU,GAAI,KAAM,EAAAC,OAAQ,EAAAC,uBAC7B,CAAC,OAAQ,GAAI,KAAM,EAAAC,KAAM,EAAAC,qBACzB,CAAC,MAAO,GAAI,KAAMhB,EAASiB,KAC3B,CAAC,MAAO,GAAI,KAAMf,EAAU1qB,KAC5B,CAAC,UAAW,GAAI,KAAMwqB,EAASkB,UAC/B,CAAC,eAAgB,GAAI,KAAM,EAAAC,aAAc,EAAAC,6BACzC,CAAC,QAAS,GAAI,KAAMlB,EAAUmB,OAC9B,CAAC,MAAO,GAAI,KAAMrB,EAASsB,IAAKtB,EAASuB,oBACzC,CAAC,MAAO,GAAI,KAAMvB,EAASwB,KAC3B,CAAC,UAAW,GAAI,KAAM,EAAAC,QAAS,EAAAC,wBAC/B,CAAC,QAAS,GAAI,KAAM1B,EAASz5B,OAC7B,CAAC,YAAa,gBAAiB,KAAM,EAAAw6B,KAAM,EAAAC,qBAC3C,CAAC,SAAU,GAAI,KAAM,EAAAW,OAAQ,EAAAC,uBAC7B,CAAC,OAAQ,GAAI,OAAQ,EAAAC,KAAM,EAAAC,uBAC3B,CAAC,OAAQ,GAAI,MAAO,EAAAD,KAAM,EAAAE,wBAC1B,CAAC,oBAAqB,GAAI,KAAM,EAAAC,kBAAmB,EAAAC,kCACnD,CAAC,gBAAiB,GAAI,KAAM,EAAAC,eAC5B,CAAC,UAAW,GAAI,KAAMhC,EAAUiC,SAChC,CAAC,WAAY,GAAI,KAAMnC,EAASkB,UAChC,CAAC,cAAe,GAAI,KAAM,EAAAkB,YAAa,EAAAC,4BACvC,CAAC,wBAAyB,GAAI,KAAM,EAAAC,sBAAuB,EAAAC,sCAC3D,CAAC,YAAa,GAAI,KAAMvC,EAASwC,UAAWxC,EAASyC,0BACrD,CAAC,OAAQ,GAAI,KAAMvC,EAAUwC,MAC7B,CAAC,MAAO,GAAI,KAAM1C,EAASv7C,KAC3B,CAAC,SAAU,GAAI,KAAM,EAAAk+C,OAAQ,EAAAC,uBAE7B,CAAC,UAAW,GAAI,KAAM,EAAAC,QAAS,EAAAC,wBAC/B,CAAC,MAAO,GAAI,KAAM5C,EAAUzrB,KAC5B,CAAC,MAAO,GAAI,KAAMurB,EAASlsB,KAC3B,CAAC,MAAO,GAAI,KAAMksB,EAAS3oB,KAC3B,CAAC,KAAM,GAAI,KAAM6oB,EAAUxmB,IAC3B,CAAC,MAAO,GAAI,OAAQ,EAAAqpB,MAAO,EAAAC,sBAC3B,CAAC,MAAO,GAAI,MAAO,EAAAC,OAAQ,EAAAC,uBAC3B,CAAC,MAAO,GAAI,KAAMhD,EAAUz5B,KAC5B,CAAC,QAAS,GAAI,KAAMy5B,EAAUiD,OAC9B,CAAC,eAAgB,GAAI,KAAM,EAAAC,aAAc,EAAAC,uBACzC,CAAC,YAAa,GAAI,KAAM,EAAAC,UAAW,EAAAD,uBACnC,CAAC,aAAc,GAAI,KAAM,EAAAE,WAAY,EAAAF,uBACrC,CAAC,YAAa,GAAI,KAAM,EAAAG,UAAW,EAAAH,uBACnC,CAAC,aAAc,GAAI,KAAM,EAAAI,WAAY,EAAAJ,uBACrC,CAAC,YAAa,GAAI,OAAQ,EAAAK,UAAW,EAAAL,uBACrC,CAAC,kBAAmB,GAAI,KAAM,EAAAM,mBAAoB,EAAAN,uBAClD,CAAC,OAAQ,GAAI,KAAMrD,EAAS4D,MAC5B,CAAC,UAAW,GAAI,KAAM,EAAA/mD,SACtB,CAAC,SAAU,GAAI,KAAM,EAAAgnD,OAAQ,EAAAC,0BAC7B,CAAC,SAAU,GAAI,MAAO,EAAAD,OAAQ,EAAAE,0BAC9B,CAAC,QAAS,GAAI,KAAM,EAAA7iB,OACpB,CAAC,UAAW,GAAI,KAAM8e,EAASgE,SAC/B,CAAC,MAAO,GAAI,KAAMhE,EAASiE,KAC3B,CAAC,QAAS,GAAI,MAAO,EAAAC,UACrB,CAAC,QAAS,GAAI,MAAO,EAAAthD,MAAO,EAAAuhD,sBAE5B,CAAC,UAAW,GAAI,OAAQ,EAAAC,QAAS,EAAAC,wBACjC,CAAC,UAAW,GAAI,MAAO,EAAAC,WAAY,EAAAC,2BAKnC,CAAC,QAAS,GAAI,OAAQ,EAAAztC,MAAO,EAAA0tC,sBAC7B,CAAC,OAAQ,GAAI,KAAMxE,EAASyE,MAC5B,CAAC,UAAW,GAAI,OAAQ,EAAAC,QAAS,EAAAC,wBACjC,CAAC,UAAW,GAAI,MAAO,EAAAC,YACvB,CAAC,MAAO,GAAI,KAAM1E,EAAUxqB,KAC5B,CAAC,MAAO,GAAI,KAAM,EAAAmvB,KAClB,CAAC,MAAO,GAAI,KAAM7E,EAAS8E,KAC3B,CAAC,OAAQ,GAAI,KAAM9E,EAAS+E,MAC5B,CAAC,OAAQ,GAAI,KAAM,EAAAC,MACnB,CAAC,YAAa,GAAI,KAAM,EAAAzP,UAAW,EAAA0P,0BACnC,CAAC,WAAY,GAAI,MAAO,EAAAC,SAAU,EAAAC,2BAClC,CAAC,WAAY,GAAI,IAAK,EAAAD,SAAU,EAAAE,2BAChC,CAAC,YAAa,GAAI,OAAQ,EAAAC,UAAW,EAAAC,0BACrC,CAAC,YAAa,GAAI,MAAO,EAAAC,cACzB,CAAC,MAAO,GAAI,KAAMrF,EAAUvmB,O,6ICzH9B,eAIA,UAEA,UAQM6rB,EAAoC,CACxCrsD,KAAM,qBACNwE,WAAY,CAAC,IAAK,QAAS,IAAK,OAAQ,YACxC69C,WACI,CAAC,EAAAe,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,WAG9F,EAAAmC,mBACT,CAACkF,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GAQR,CAPQkK,EAAiB5nD,IAAI,OAAD,wBAE1B2nD,GAAiC,CACpC5J,UAAWpiC,EAAWqvB,SACtBzsC,IAAK,IAAMupD,EAAoCF,EAAkBlK,EAAQ/hC,KAE3E+hC,KAIG,EAAAiF,kCACRz+C,IACC,MAAM6jD,EAAU7jD,EAAKyX,WAAWmwB,SAAS,UAAW,MAC9Ckc,EAAW9jD,EAAKyX,WAAWmwB,SAAS,WAAY,IAChDmc,EAAU/jD,EAAKyX,WAAWowB,OAAO,UAAW,GAClD,OAAO,EAAAZ,4BAA4B,CAAC4c,UAASC,WAAUC,aAG7D,MAAMH,EACF,CAACF,EAAyClK,EAAkB/hC,KAEtD,MAAMg3B,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,SAC1D02B,EAAOoL,EAAO,GAAGv/C,KAAKnC,QACrBksD,EAAYC,GACfP,EAAiBvK,+BAA+BK,EAAO,GAAGv/C,KAAM,EAAAugD,YAAY6B,UAC1EhG,EAAe,yBACTjI,iEAC2B4V,MAAeC,0CAC5BxV,EAAKC,kEACND,EAAKC,qEACDD,EAAKC,kEACZD,EAAKC,iGAE+Bj3B,EAAWosC,wBAErE,OAAO,OAAP,wBACKJ,GAAiC,CACpCtnB,OAAQ,CAACliC,KAAMu/C,EAAO,GAAGv/C,KAAMF,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC9EhG,kBAINsN,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,yCAGlB,MAAMyM,EAAIm1C,EAAO,GACX0K,EAAQ1K,EAAO,GACf96C,EAAI86C,EAAO,GACX2K,EAAO3K,EAAO,GACd4K,EAAO5K,EAAO,GAIpB,GAAIn1C,EAAEpK,KAAKnC,OAAS,GAA2B,IAAtBosD,EAAMjqD,KAAKnC,QAAkC,IAAlB4G,EAAEzE,KAAKnC,QAAqC,IAArBqsD,EAAKlqD,KAAKnC,QAC5D,IAArBssD,EAAKnqD,KAAKnC,OACZ,MAAM,IAAIF,MAAM,wBAElB,GAAIssD,EAAMjqD,KAAK,KAAOoK,EAAEpK,KAAK,IAAMyE,EAAEzE,KAAK,KAAOoK,EAAEpK,KAAK,IAAMkqD,EAAKlqD,KAAK,KAAOoK,EAAEpK,KAAK,IAClFmqD,EAAKnqD,KAAK,KAAOoK,EAAEpK,KAAK,GAC1B,MAAM,IAAIrC,MAAM,wBAElB,GAAgB,YAAXyM,EAAEtK,MAAiC,YAAXsK,EAAEtK,MAAuC,YAAfmqD,EAAMnqD,MAAqC,YAAfmqD,EAAMnqD,MACzE,YAAX2E,EAAE3E,MAAiC,YAAX2E,EAAE3E,MAAsC,YAAdoqD,EAAKpqD,MAAoC,YAAdoqD,EAAKpqD,MACpE,YAAdqqD,EAAKrqD,MAAoC,YAAdqqD,EAAKrqD,KACnC,MAAM,IAAInC,MAAM,iC,oSCzFpB,gBACA,UACA,UAEA,UAEA,SAAgBysD,IAUd,MAAO,CAACjR,KARK,4HAQCh8C,KATD,OASO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBC,IAUd,MAAO,CAACnR,KARK,4HAQCh8C,KATD,OASO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBE,IAUd,MAAO,CAACpR,KARK,4HAQCh8C,KATD,OASO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBG,IAUd,MAAO,CAACrR,KARK,4HAQCh8C,KATD,OASO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBI,IAUd,MAAO,CAACtR,KARK,oJAQCh8C,KATD,SASO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBK,IACd,MAAMvtD,EAAO,WAYb,MAAO,CAACg8C,KAXK,aACLh8C,gEAGDA,+HAOOA,OAAM2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBM,IAad,MAAO,CAACxR,KAXK,4OAWCh8C,KAZD,QAYO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBO,IAed,MAAO,CAACzR,KAbK,mTAaCh8C,KAdD,OAcO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBQ,IAed,MAAO,CAAC1R,KAbK,iTAaCh8C,KAdD,MAcO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBS,IAed,MAAO,CAAC3R,KAbK,mTAaCh8C,KAdD,OAcO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBU,IACd,OAoBF,SAA2BjM,GACzB,MAAM3hD,EAAO,OASb,MAAO,CAACg8C,KARK,oIAQCh8C,OAAM2C,KAAM,EAAA25C,aAAa4Q,YA9BhCW,GAET,SAAgBC,IAed,MAAO,CAAC9R,KAbK,+SAaCh8C,KAdD,SAcO2C,KAAM,EAAA25C,aAAa4Q,YA/JzC,YAYA,YAYA,YAYA,YAYA,cAYA,gBAeA,aAeA,YAiBA,WAiBA,YAiBA,YAGA,cA+BA,MAAMa,EACF,CAACnqD,EAAgCw+C,EAAkB4L,EAClDC,EAAoC7L,EAAO,GAAGz/C,KAAM+sC,KACnD,MAAMsS,EAAcp+C,EAAQ6qC,QAAQgF,KAAO,EAAA2P,YAAYC,OAAS,EAAAD,YAAY6B,SAC5E,MAAO,CACLjlD,KAAMguD,EAAShuD,KACfwE,WAAY,CAAC,IAAK,KAClB69C,WAAY,CAACL,EAAaA,GAC1BS,UAAW/S,EACXzsC,IAAK,IAAMirD,EAAwBtqD,EAASw+C,EAAQ4L,EAAUC,KAIhEC,EACF,CAACtqD,EAAgCw+C,EAAkB4L,EAClDC,EAAoC7L,EAAO,GAAGz/C,QAC7C,MAAMq/C,EAAcp+C,EAAQ6qC,QAAQgF,KAAO,EAAA2P,YAAYC,OAAS,EAAAD,YAAY6B,SACtEkJ,GAAe,EAAAlV,UAAUmV,SAAShM,EAAO,GAAGv/C,KAAMu/C,EAAO,GAAGv/C,MAClE,IAAIwrD,EAAcjM,EAAO,GAAGv/C,KAE5B,MAAMyrD,EAAmB1qD,EAAQ6qC,QAAQgF,KAEzC,GAAI0a,EAAa,CACf,MAAMI,EAAkB,EAAA/V,cAAcgW,UAAUpM,EAAO,GAAGv/C,KAAMu/C,EAAO,GAAGv/C,MAAM,GAChF,IAAK0rD,EACH,MAAM,IAAI/tD,MAAM,gDAElB6tD,EAAcE,EACd,MAAM7N,EAAa2N,EAAY3tD,OACzB+tD,EAAkC,IAA1BrM,EAAO,GAAGv/C,KAAKnC,OAAe0hD,EAAO,GAAGv/C,KAAKnC,OAAS,EAC9DguD,EAAkC,IAA1BtM,EAAO,GAAGv/C,KAAKnC,OAAe0hD,EAAO,GAAGv/C,KAAKnC,OAAS,EAC9DiuD,EAAmC,IAA1BvM,EAAO,GAAGv/C,KAAKnC,OAAe,qCAAuC,mBAC9EkuD,EAAmC,IAA1BxM,EAAO,GAAGv/C,KAAKnC,OAAe,qCAAuC,mBAE9E22C,EAAO,EAAAvB,QAAQlyC,EAAQ6qC,QAAQxuC,QAAQyzC,UAAUpzB,SACjD2+B,EAAeqP,EAAmB,WACxCN,EAAShS,8HAIOgS,EAAShuD,wBACvBq3C,EAAKtS,4BAEiC,WACxCipB,EAAShS,yCACiB0E,+BACX+N,6BACAC,gBACbC,cACAC,qBACOZ,EAAShuD,6CAGlB,MAAO,CACLA,KAAMguD,EAAShuD,KACfwE,WAAY,CAAC,IAAK,KAClB69C,WAAY,CAACL,EAAaA,GAC1Bjd,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMsrD,EAAkBjM,eACpD/C,eACAC,QAASoP,GAGb,MAAMjX,EAAO,EAAAvB,QAAQlyC,EAAQ6qC,QAAQxuC,QAAQyzC,UAAUpzB,SACjD2+B,EAAe,SACrB+O,EAAShS,4CAEG3E,EAAKC,6CACLD,EAAKC,iDACD0W,EAAShuD,wBACvBq3C,EAAKtS,gCAIP,MAAO,CACL/kC,KAAMguD,EAAShuD,KACfwE,WAAY,CAAC,IAAK,KAClB69C,WAAY,CAACL,EAAaA,GAC1Bjd,OAAQ,CAACliC,KAAMu/C,EAAO,GAAGv/C,KAAMF,KAAMsrD,EAAkBjM,eACvD/C,eACAC,SAAS,IAIJ,EAAA3jB,IAAM,CAAC33B,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQ6K,KAAY7K,IAE3E,EAAA9hB,IAAM,CAAC18B,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQqL,IAAW,QAASrL,IAEnF,EAAA/lB,IAAM,CAACz4B,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQ+K,KAAY/K,IAE3E,EAAA8F,MAAQ,CAACtkD,EAAgCw+C,IACtC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQkL,IAAa,QAASlL,IAErF,EAAA4G,QAAU,CAACplD,EAAgCw+C,IACxC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQmL,IAAe,QAASnL,IAEvF,EAAAmH,KAAO,CAAC3lD,EAAgCw+C,IACrC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQoL,IAAY,QAASpL,IAEpF,EAAA9mB,IAAM,CAAC13B,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQgL,KAAYhL,IAE3E,EAAA7hB,GAAK,CAAC38B,EAAgCw+C,IACnC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQsL,IAAU,QAAStL,IAElF,EAAA90B,IAAM,CAAC1pB,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQwL,KAAYxL,IAE3E,EAAA4H,MAAQ,CAACpmD,EAAgCw+C,IACtC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQ0L,KAAc1L,IAE7E,EAAA7lB,IAAM,CAAC34B,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQiL,KAAYjL,IAE3E,EAAA5hB,IAAM,CAAC58B,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIqpD,EAA8BnqD,EAASw+C,EAAQuL,IAAW,QAASvL,K,iHCxShG,gBAGa,EAAAwD,KACT,CAAChiD,EAAgCw+C,EAAkByM,KACjDtC,EAAenK,GACR,CAACx+C,EAAQgiD,KAAKxD,EAAO,GAAIyM,KAGzB,EAAAvH,oBAAgE1+C,GACzE,EAAAkmD,UAAUC,wBAAwBnmD,EAAKyX,WAAWowB,OAAO,OAE7D,MAAM8b,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,0BAGlB,GAAuB,WAAnB4hD,EAAO,GAAGz/C,KACZ,MAAM,IAAInC,MAAM,yB,0HCpBpB,gBAEA,UACA,UAGA,UAoHa,EAAAwuD,oCACT,CAACprD,EAAgCw+C,EAAkB/hC,KACjD,MAAM4uC,GApH+BC,EAoHc9M,EAAO1hD,OApHD+hD,EAoHSpiC,EAAWqvB,SApHE,CACnF1vC,KAAM,kBACNwE,WAAY1B,MAAMtB,KAAK,CAACd,OAAQwuD,IAAa,CAAC3qD,EAAG9D,IAAM,IAAIA,MAC3D4hD,WAAYv/C,MAAMosD,GAAYt3C,KAAK,EAAAwrC,YAAYC,QAC/CZ,cAJwC,IAACyM,EAAoBzM,EAqHzD,OAAO,OAAP,wBAAWwM,GAAQ,CAAEhsD,IAAK,IA7G5B,EAACW,EAAgCqrD,EAA2B7M,EAAkB+M,KAC5E,MAAMC,EAAahN,EAAO,GAAGv/C,KAAK4G,QAClC,GAAI0lD,GAAQC,EAAW1uD,QAAUyuD,GAAS,EAAIC,EAAW1uD,OACvD,MAAM,IAAIF,MAAM,gEAEd2uD,EAAO,IACTA,EAAOC,EAAW1uD,OAASyuD,GAI7B,MAAMd,EAAce,EAAW3lD,MAAM,GACrC,IAAK,IAAIhJ,EAAI,EAAGA,EAAI2hD,EAAO1hD,OAAQD,IAAK,CACtC,MAAM4uD,EAAajN,EAAO3hD,GAAGoC,KAAK4G,QAClC,IAAK,IAAI6lD,EAAY,EAAGA,EAAYF,EAAW1uD,OAAQ4uD,IAErD,GAAIA,IAAcH,EAChBd,EAAYc,IAASE,EAAWC,QAG7B,GAAIF,EAAWE,KAAeD,EAAWC,GAC5C,MAAM,IAAI9uD,MAAM,oCAKtB,MAAMw2C,EAAOqX,EAAY3tD,OACnBq2C,EAAS,EAAAwY,YAAY,SAAUvY,GAC/BwY,EAAQ,EAAA9W,kBAAkB1B,GAC1ByY,EAAgB,EAAAC,oBAEhBC,EAASvN,EAAO38C,KAAIhF,GAAKA,EAAEoC,OAC3B+gD,EAAW,EAAA9K,cAAc9B,GACzB4Y,EAAoB,IAAI9sD,MAAM6sD,EAAOjvD,OAAS,GAEpDkvD,EAAQ,GAAKD,EAAO,GAAGR,GACvB,IAAK,IAAI1uD,EAAI,EAAGA,EAAImvD,EAAQlvD,OAAQD,IAClCmvD,EAAQnvD,GAAKmvD,EAAQnvD,EAAI,GAAKkvD,EAAOlvD,GAAG0uD,GAG1C,MAAMU,EAAUjM,EAASuL,GACnBW,EAAelM,EAASn6C,OAAO,GAC/BsmD,EAAcnM,EAASz9C,OAE7B,IAAI6pD,EAAkB,OAAOH,OAAaD,EAAQ,wDAEpCG,YAAsBD,EAAa3pD,uBAEjD,IAAK,IAAI1F,EAAI,EAAGA,EAAImvD,EAAQlvD,OAAQD,IAAK,CACvC,MAAMiO,EAAQkhD,EAAQnvD,EAAI,GAC1BuvD,GAAmB,qBACTH,OAAaD,EAAQnvD,UAAUovD,QAAcD,EAAQnvD,EAAI,gEAErDA,KAAKwvD,EAA0BrM,EAAUiM,EAASnhD,8BACjDuhD,EAA0BH,EAAcD,EAASnhD,uBAGlE,MAAMwhD,EAAYN,EAAQlvD,OACpBgO,EAAQkhD,EAAQA,EAAQlvD,OAAS,GACvCsvD,GAAmB,uDAELE,KAAaD,EAA0BrM,EAAUiM,EAASnhD,4BACzDuhD,EAA0BH,EAAcD,EAASnhD,QAEhE,MAAM2oC,EAAO,EAAAvB,QAAQlyC,EAAQ6qC,QAAQxuC,QAAQyzC,UAAUpzB,SAEjD2+B,EAAe,eACfwQ,+BACe7L,EAASn+C,KAAI2F,GAAK,OAASA,uBACxC4kD,0DAIAR,mEACqB5L,EAAS5M,EAAO,2BAC9B4M,EAAS5M,EAAO,eAAe4M,EAAS5M,EAAO,2BAC/C4M,EAAS5M,EAAO,4DAEKD,mCAE5BA,EAAOC,EAAO,QAAQD,EAAOC,EAAO,4BAChCD,EAAOC,EAAO,QAAQqX,EAAYrX,EAAO,4CACvBD,qCAGtBA,EAAOC,EAAO,QAAQD,EAAOC,EAAO,4BAChCD,EAAOC,EAAO,QAAQqX,EAAYrX,EAAO,4CACvBD,qCAGtBA,EAAOC,EAAO,QAAQD,EAAOC,EAAO,4BAChCD,EAAOC,EAAO,QAAQqX,EAAYrX,EAAO,0BACzCD,EAAOC,EAAO,QAAQqX,EAAYrX,EAAO,4CACvBD,mCAEtBM,EAAKtS,0CAIb,OAAO,OAAP,wBACKkqB,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAYC,QAC3EpE,eACAC,SAAS,KAOqBiR,CAA8BvsD,EAASqrD,EAAU7M,EAAQ/hC,EAAW8uC,SAG1G,MAAMc,EAA4B,CAACrM,EAAoBiM,EAAiBnhD,KACtE,MAAM0hD,EAAaxM,EAASviD,QAAQwuD,GAQpC,OAPYjM,EAASn+C,KAAI,CAACmC,EAAGyoD,IACvBA,IAAQD,EACH,GAAGxoD,OAAO8G,IAEV9G,IAGAzB,S,qHC1Ib,eAKA,UAEA,UAMa,EAAAuhD,OACT,CAAC4E,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GACXkK,EAAiB7d,QAAQgF,MAAQ2O,EAAO,GAAGv/C,KAAKnC,OAAS,EAGpD,CADH4rD,EAAiB5nD,IAAI,EAAAsqD,oCAAoC1C,EAAkBlK,EAAQ/hC,GAAa+hC,IAK7F,CADHkK,EAAiB5nD,IAAI4rD,EAAsChE,EAAkBlK,EAAQ/hC,GAAa+hC,KAK9G,MAwEMkO,EACF,CAAC1sD,EAAgCw+C,EAAkB/hC,KACjD,MAAM4uC,GA1EiCC,EA0Ec9M,EAAO1hD,OA1ED+hD,EA0ESpiC,EAAWqvB,SA1EE,CACrF1vC,KAAM,SACNwE,WAAY1B,MAAMtB,KAAK,CAACd,OAAQwuD,IAAa,CAAC3qD,EAAG9D,IAAM,IAAIA,MAC3D4hD,WAAYv/C,MAAMosD,GAAYt3C,KAAK,EAAAwrC,YAAY6B,UAC/CxC,cAJ0C,IAACyM,EAAoBzM,EA2E3D,OAAO,OAAP,wBAAWwM,GAAQ,CAAEhsD,IAAK,IAnE5B,EAACW,EAAgCqrD,EAA2B7M,EAAkB+M,KAC5E,MAAMC,EAAahN,EAAO,GAAGv/C,KAAK4G,QAClC,GAAI0lD,GAAQC,EAAW1uD,QAAUyuD,GAAS,EAAIC,EAAW1uD,OACvD,MAAM,IAAIF,MAAM,gEAEd2uD,EAAO,IACTA,EAAOC,EAAW1uD,OAASyuD,GAI7B,MAAMd,EAAce,EAAW3lD,MAAM,GACrC,IAAK,IAAIhJ,EAAI,EAAGA,EAAI2hD,EAAO1hD,OAAQD,IAAK,CACtC,MAAM4uD,EAAajN,EAAO3hD,GAAGoC,KAAK4G,QAClC,IAAK,IAAI6lD,EAAY,EAAGA,EAAYF,EAAW1uD,OAAQ4uD,IAErD,GAAIA,IAAcH,EAChBd,EAAYc,IAASE,EAAWC,QAG7B,GAAIF,EAAWE,KAAeD,EAAWC,GAC5C,MAAM,IAAI9uD,MAAM,oCAKtB,MAAMw2C,EAAOqX,EAAY3tD,OAEnB6vD,EAAmB,IAAIztD,MAAcs/C,EAAO1hD,QAClD,IAAI8vD,EAAc,EAClB,IAAK,IAAI/vD,EAAI,EAAGA,EAAI8vD,EAAiB7vD,SAAUD,EAC7C+vD,GAAepO,EAAO3hD,GAAGoC,KAAKssD,GAC9BoB,EAAiB9vD,GAAK+vD,EAGxB,IAAIC,EAAwC,GAG1CA,EADErO,EAAO1hD,OAAS,EACsBgwD,EAA4CH,GAE5CI,EAA4CJ,GAGtF,MAEMtR,EAAe,aAFqB2R,EAAqCxO,EAAO1hD,OAAQs2C,eAC9C6Z,EAA2CN,eAIvFE,wCAC0BzZ,2EAC+BmY,kEAG7CA,gBAAmBA,oKAKnC,OAAO,OAAP,wBACKF,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,kBAO8B6R,CAAgCltD,EAASqrD,EAAU7M,EAAQ/hC,EAAW8uC,SAGtGuB,EAA+CH,GAG5C,sDAFYA,EAAiB9qD,KAAI,CAACrC,EAAM3C,IAAM,YAAY2C,cAAiB3C,UAGjE0F,KAAK,aAKlBwqD,EAA+CJ,GACjDG,EAA4CH,GAE1CK,EAAuC,CAACG,EAAyBC,KACrE,MAAMC,EAAsB,CAAC,mEAAmED,SAChG,IAAK,IAAIvwD,EAAI,EAAGA,EAAIswD,IAAmBtwD,EAC3B,IAANA,EACFwwD,EAAUrwD,KAEN,yBAAuBH,iBAAiBA,iBACnCA,IAAMswD,EAAkB,EACjCE,EAAUrwD,KAEN,qBAAmBH,iBAEvBwwD,EAAUrwD,KAEN,8BAA4BH,iBAAiBA,iBAMrD,OAHAwwD,EAAUrwD,KACN,OAEGqwD,EAAU9qD,KAAK,OAGlB0qD,EAA8CN,IAClD,MAAMU,EAAsB,CAAC,sDAC7B,IAAK,IAAIxwD,EAAI,EAAGA,EAAI8vD,EAAiB7vD,SAAUD,EACnC,IAANA,EACFwwD,EAAUrwD,KAEN,kBAAgBH,eAAe8vD,EAAiB9vD,SAC3CA,IAAM8vD,EAAiB7vD,OAAS,EACzCuwD,EAAUrwD,KAEN,mBAAiB2vD,EAAiB9vD,SAEtCwwD,EAAUrwD,KAEN,uBAAqBH,eAAe8vD,EAAiB9vD,SAO7D,OAJAwwD,EAAUrwD,KACN,OAGGqwD,EAAU9qD,KAAK,OAGX,EAAAwhD,sBAAmE/+C,GAC5E,EAAAinC,4BAA4B,CAACsf,KAAMvmD,EAAKyX,WAAWowB,OAAO,UAE9D,MAAM8b,EAAkBnK,IACtB,IAAKA,GAAUA,EAAO1hD,OAAS,EAC7B,MAAM,IAAIF,MAAM,kBAGlB,MAAM0wD,EAAY9O,EAAO,GAAGz/C,KACtBwuD,EAAsB/O,EAAO,GAAGv/C,KAAKnC,OAG3C,GAAkB,WAAdwwD,EACF,MAAM,IAAI1wD,MAAM,sCAGlB,IAAK,MAAMskC,KAASsd,EAAQ,CAE1B,GAAItd,EAAMniC,OAASuuD,EACjB,MAAM,IAAI1wD,MAAM,oCAIlB,GAAIskC,EAAMjiC,KAAKnC,SAAWywD,EACxB,MAAM,IAAI3wD,MAAM,+C,iIC5LtB,gBAEA,UAEA,UAEA,UACA,UAyEa,EAAA4wD,2CACT,CAAC9E,EAAyClK,EAA2B/hC,KAE/D,MAAM4uC,GA1EkCoC,EA0EkBjP,EAAO1hD,OAAS,EA1EhB+hD,EA0EmBpiC,EAAWqvB,SA1ES,CACzG1vC,KAAM,cACNwE,WAAY6sD,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDhP,WAAYgP,EAAU,CAAC,EAAAjO,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzD,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzDxC,cAL+C,IAAC4O,EAAkB5O,EA2E1D,OAAO,OAAP,wBACKwM,GAAQ,CACXhsD,IAAK,IApEb,EAACqpD,EAAyClK,EAA2B6M,EACpE5uC,KACC,MACMixC,EADUlP,EAAO1hD,OAAS,EACF,oCAAsC,GAC9D6wD,EAASnP,EAAO,GAAGv/C,KAAK4G,QACxB+nD,EAASpP,EAAO,GAAGv/C,KAAK4G,QACxBgoD,EAAyBD,EAAO,GAAKnxC,EAAWsjC,MACtD,EAAA/P,OAAOE,QACH,cACA,WAAWzzB,EAAWqxC,sBAAsBrxC,EAAWsxC,oBAAoBtxC,EAAWsjC,sBAClFtjC,EAAWuxC,qBAAqBvxC,EAAWwxC,iBAAiBxxC,EAAW42B,WAC/E,MAAMoX,EACF,EAAAyD,qBAAqBP,EAAQC,EAAQnxC,EAAWsxC,UAAWtxC,EAAWwxC,KAAMxxC,EAAW42B,SACrFI,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,UAC1D,mBAACyxC,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqB5xC,GAE7D4+B,EAAe,mCACK5+B,EAAW42B,QAAQ,OAAO52B,EAAW42B,QAAQ,oCAChD52B,EAAWwxC,KAAK,OAAOxxC,EAAWwxC,KAAK,WAChEE,oNAMkCN,2EAGMD,EAAO,6DACZA,EAAO,2DACNA,EAAO,mEACCnxC,EAAWsxC,UAAU,gDAE7BJ,EAAO,kFAIPC,EAAO,kEACCnxC,EAAWsxC,UAAU,8CAC7BJ,EAAO,8PAUzCD,UACAU,UACA3a,EAAKtS,2CAGL,OAAO,OAAP,wBACKkqB,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,eACAC,SAAS,KAUMgT,CAAqC5F,EAAkBlK,EAAQ6M,EAAU5uC,O,2HCpFhG,gBACA,UACA,SAEa,EAAA8xC,sBACT,CAAC7F,EAAyClK,EAA2B/hC,KACnE,MAAM+xC,EAAShQ,EAAO,GAAGv/C,KACnBwvD,EAASjQ,EAAO,GAAGv/C,KACnBwrD,EACF,EAAAyD,qBAAqBM,EAAQC,EAAQhyC,EAAWsxC,UAAWtxC,EAAWwxC,KAAMxxC,EAAW42B,SACrFqb,EAAYhG,EAAiBlH,cAAchD,EAAO,GAAI,CAACgQ,EAAO,GAAIA,EAAO,GAAKA,EAAO,KACrFG,EAAYjG,EAAiBlH,cAAchD,EAAO,GAAI,CAACiQ,EAAO,GAAIA,EAAO,KAEzEG,EAAepQ,EAAO1hD,OAAS,EAAI,CAAC6xD,EAAWD,EAAWlQ,EAAO,IAAM,CAACmQ,EAAWD,GACnFG,EAAenG,EAAiB5nD,IAClC,EAAAguD,oCAAoCpG,EAAkBkG,EAAcnyC,GAAamyC,GACrF,OAAOlG,EAAiBlH,cAAcqN,EAAcpE,IAG7C,EAAAsE,aACT,CAACrG,EAAyClK,EAA2B/hC,KACnE,MAAM+xC,EAAShQ,EAAO,GAAGv/C,KACnBwvD,EAASjQ,EAAO,GAAGv/C,KACnBwrD,EACF,EAAAyD,qBAAqBM,EAAQC,EAAQhyC,EAAWsxC,UAAWtxC,EAAWwxC,KAAMxxC,EAAW42B,SAGrF2b,EAAetG,EAAiB5nD,IAClC,EAAAmuD,oCAAoCvG,EAAkBlK,EAAO,GAAIA,EAAO,GAAIiM,EAAahuC,GACzF,CAAC+hC,EAAO,KAGN0Q,EAAiBxG,EAAiBlH,cAAchD,EAAO,GAAI,CAACiQ,EAAO,GAAIA,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAGtGG,EACiB,IAAlBpQ,EAAO1hD,OAAgB,CAACoyD,EAAgBF,EAAcxQ,EAAO,IAAM,CAAC0Q,EAAgBF,GACnFH,EAAenG,EAAiB5nD,IAClC,EAAAguD,oCAAoCpG,EAAkBkG,EAAcnyC,GAAamyC,GAIrF,OADuBlG,EAAiBlH,cAAcqN,EAAcpE,K,wIC3C1E,eAKA,UAGA,UACA,UACA,UACA,UACA,UACA,UAGa,EAAAyD,qBACT,CAAC1C,EAA+BwC,EAAgCD,EAC/DoB,EAA+B9b,KAC9B,MAAM+b,EAAY5D,EAAW,GACvB6D,EAAoB7D,EAAW3lD,MAAM,GACrCypD,EAAcD,EAAkBvyD,OAChCyyD,EAAcvB,EAAY,GAE1BwB,EADqBxB,EAAYnoD,MAAM,GACChE,KAAI,CAAClB,EAAG9D,IAAM8D,GAAKA,EAAI,IAAMotD,EAAUlxD,GAAK,KAEpF4yD,EAD2BJ,EAAkBxtD,KAAI,CAAClB,EAAG9D,IAAM8D,EAAIwuD,EAAWtyD,GAAKsyD,EAAWtyD,EAAIyyD,KAEvEztD,KAAI,CAAClB,EAAG9D,IAAMgX,KAAK2V,OAAO7oB,EAAI6uD,EAAmB3yD,GAAKw2C,EAAQx2C,IAAMw2C,EAAQx2C,MAEzG,MADoB,CAACuyD,EAAWG,GAAazL,UAAU2L,IAahD,EAAAzL,KACT,CAAC0E,EAAoClK,EAAkB/hC,KACrDksC,EAAenK,EAAQ/hC,GAChBizC,EAAOhH,EAAkBlK,EAAQ/hC,IAG9C,MAAMizC,EACF,CAAChH,EAAyClK,EAAkB/hC,KAC1D,MAAMkzC,EAAqBC,EAA0BnzC,EAAY+hC,GAC3DqR,EAAWnH,EAAiB7d,QAAQgF,KACpCigB,EAAoD,IAAtCH,EAAmB3B,YAAY,IAAkD,IAAtC2B,EAAmB3B,YAAY,GAC9F,OAAI2B,EAAmB5P,MAAQ,EAGtB,CAFQ2I,EAAiB5nD,IAC5B,EAAA0sD,2CAA2C9E,EAAkBlK,EAAQmR,GAAqBnR,IAErFsR,GAAeD,EACjB,CAACE,EAAwBrH,EAAkBlK,EAAQmR,IACjDE,GAAsC,IAA1BrR,EAAO,GAAGv/C,KAAKnC,QAAsC,IAAtB0hD,EAAO,GAAGv/C,KAAK,KAAa6wD,EACzE,CAAC,EAAAf,aAAarG,EAAkBlK,EAAQmR,IAExC,CAACK,EAAetH,EAAkBlK,EAAQmR,KAInDI,EACF,CAACrH,EAAyClK,EAA2B/hC,KACnE,MAAM+xC,EAAShQ,EAAO,GAAGv/C,KACnBwvD,EAASjQ,EAAO,GAAGv/C,KACnBwrD,EACF,EAAAyD,qBAAqBM,EAAQC,EAAQhyC,EAAWsxC,UAAWtxC,EAAWwxC,KAAMxxC,EAAW42B,SACrFqb,EAAYhG,EAAiBxH,gBAAgB1C,EAAO,GAAI,CAACgQ,EAAO,GAAIA,EAAO,GAAKA,EAAO,KACvFG,EAAYjG,EAAiBxH,gBAAgB1C,EAAO,GAAI,CAACiQ,EAAO,GAAIA,EAAO,KAE3EG,EAAepQ,EAAO1hD,OAAS,EAAI,CAAC6xD,EAAWD,EAAWlQ,EAAO,IAAM,CAACmQ,EAAWD,GACnFG,EAAenG,EAAiB5nD,IAAI,EAAAmvD,8BAA8BrB,EAAcnyC,GAAamyC,GACnG,OAAOlG,EAAiBxH,gBAAgB2N,EAAcpE,IAGtDuF,EACF,CAACtH,EAAyClK,EAA2B/hC,KACnE,MAAM+xC,EAAShQ,EAAO,GAAGv/C,KACnBwvD,EAASjQ,EAAO,GAAGv/C,KACnBwrD,EACF,EAAAyD,qBAAqBM,EAAQC,EAAQhyC,EAAWsxC,UAAWtxC,EAAWwxC,KAAMxxC,EAAW42B,SACrF6c,EAAUxH,EAAiB5nD,IAC7B,EAAAqvD,8BAA8BzH,EAAkBlK,EAAO,GAAIA,EAAO,GAAIiM,EAAahuC,GAAa,CAAC+hC,EAAO,KAEtG4R,EAAqC,IAAlB5R,EAAO1hD,OAAe,CAACozD,EAAS1R,EAAO,GAAIA,EAAO,IAAM,CAAC0R,EAAS1R,EAAO,IAGlG,OAFekK,EAAiB5nD,IAC5B,EAAAuvD,kCAAkC3H,EAAkBlK,EAAQiM,EAAahuC,GAAa2zC,IAI1FR,EAA4B,CAA2BnzC,EAAe+hC,KAC1E,MAAMwP,EAAcvxC,EAAWuxC,YAAYnoD,QAE3C,GAAsC,IAAlC4W,EAAWuxC,YAAYlxD,OACzB,IAAK,IAAID,EAAI,EAAGA,EAAI2hD,EAAO,GAAGv/C,KAAKnC,SAAUD,EAC3CmxD,EAAYhxD,KAAKwhD,EAAO,GAAGv/C,KAAKpC,IAGpC,MAAMoxD,EAAOxxC,EAAWwxC,KAAKpoD,QAC7B,EAAAyqD,aAAaC,yBACT/R,EAAO,GAAGv/C,KAAMwd,EAAW42B,QAAS52B,EAAWsxC,UAAWC,EAAaC,EAAMxxC,EAAWqxC,SAG5F,MAAM0C,EAAmB/vD,OAAOorC,OAAO,GAAIpvB,GAE3C,OADAhc,OAAOorC,OAAO2kB,EAAe,CAACxC,cAAaC,OAAMniB,SAAUrvB,EAAWqvB,WAC/D0kB,GAGI,EAAAvM,oBAA+Dj/C,IAC1E,MAAMyX,EAAazX,EAAKyX,WAClBg0C,EAAuB,EAAAC,kCAAkCj0C,GAEzDqxC,EAAUrxC,EAAWqwB,UAAU,WAAY,UAC3CihB,EAAYtxC,EAAWwwB,QAAQ,YAAa,CAAC,EAAG,IAChD8S,EAAQtjC,EAAWowB,OAAO,QAAS,GACnCmhB,EAAcvxC,EAAWwwB,QAAQ,eAAgB,IACjDghB,EAAOxxC,EAAWwwB,QAAQ,OAAQ,CAAC,EAAG,EAAG,EAAG,IAC5CoG,EAAU52B,EAAWwwB,QAAQ,UAAW,CAAC,EAAG,IAElD,OAAO,EAAAhB,4BAA4B,OAAD,QAAE6hB,UAASC,YAAWhO,QAAOiO,cAAaC,OAAM5a,WAAYod,KAGhG,MAAM9H,EAAiB,CAACnK,EAAkB/hC,KAGxC,IAAK+hC,GAA6B,IAAlBA,EAAO1hD,QAAkC,IAAlB0hD,EAAO1hD,OAC5C,MAAM,IAAIF,MAAM,+BAIlB,GAA8B,IAA1B4hD,EAAO,GAAGv/C,KAAKnC,QAA0C,IAA1B0hD,EAAO,GAAGv/C,KAAKnC,OAChD,MAAM,IAAIF,MAAM,6CAMlB,GAFoB4hD,EAAO,GAAGv/C,KAAK,KACXu/C,EAAO,GAAGv/C,KAAK,GAAKwd,EAAWsjC,MAErD,MAAM,IAAInjD,MAAM,qDAIlB,GAAsB,IAAlB4hD,EAAO1hD,SAA2C,IAA1B0hD,EAAO,GAAGv/C,KAAKnC,QAAgB0hD,EAAO,GAAGv/C,KAAK,KAAOu/C,EAAO,GAAGv/C,KAAK,IAC9F,MAAM,IAAIrC,MAAM,gBAGlB,MAAM0yD,EAAc9Q,EAAO,GAAGv/C,KAAKnC,OAAS,EAE5C,GAAI2f,EAAWsxC,UAAUjxD,SAAWwyD,EAClC,MAAM,IAAI1yD,MAAM,uBAAuB0yD,MAIzC,GAAI7yC,EAAW42B,QAAQv2C,SAAWwyD,EAChC,MAAM,IAAI1yD,MAAM,qBAAqB0yD,MAIvC,GAAI7yC,EAAWwxC,KAAKnxD,SAAyB,EAAdwyD,EAC7B,MAAM,IAAI1yD,MAAM,kBAAgC,EAAd0yD,MAKpC,GAAsC,IAAlC7yC,EAAWuxC,YAAYlxD,QAAgB2f,EAAWuxC,YAAYlxD,SAAW0hD,EAAO,GAAGv/C,KAAKnC,OAAS,EACnG,MAAM,IAAIF,MAAM,wBAIlB,GAAuB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KAC5C,MAAM,IAAInC,MAAM,0CAGlB,GAAsB,IAAlB4hD,EAAO1hD,QAAmC,YAAnB0hD,EAAO,GAAGz/C,KACnC,MAAM,IAAInC,MAAM,6C,iIC7KpB,gBAOa,EAAAwnD,aACT,CAACsE,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GACf,MAAMmS,EAAYl0C,EAAWk0C,UACvBC,EAAeD,EAAYA,EAC3BE,EAAoC,QAApBp0C,EAAWq0C,KAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACjFC,EAAwC,QAApBt0C,EAAWq0C,KACjC,CACEtS,EAAO,GAAGv/C,KAAK,GAAI0xD,EAAWA,EAAWnS,EAAO,GAAGv/C,KAAK,GAAK2xD,EAAcpS,EAAO,GAAGv/C,KAAK,GAC1Fu/C,EAAO,GAAGv/C,KAAK,IAEjB,CACEu/C,EAAO,GAAGv/C,KAAK,GAAIu/C,EAAO,GAAGv/C,KAAK,GAAK2xD,EAAcD,EAAWA,EAAWnS,EAAO,GAAGv/C,KAAK,GAC1Fu/C,EAAO,GAAGv/C,KAAK,IASf+xD,EAAsBtI,EAAiBxH,gBAAgB1C,EAAO,GAAIuS,GAGlEE,EAA2C,CAACC,KAAML,EAAe/kB,SAAU,GAAG+kB,MAC7EM,GAAmB,EAAA3Y,UAAUkQ,EAAkB,CAACsI,GAAsBC,GAGvEG,EAAqB,CACzB5S,EAAO,GAAGv/C,KAAK,GAAIu/C,EAAO,GAAGv/C,KAAK,GAAK2xD,EAAcpS,EAAO,GAAGv/C,KAAK,GAAK0xD,EACzEnS,EAAO,GAAGv/C,KAAK,GAAK0xD,GAGtB,MAAO,CADQjI,EAAiBxH,gBAAgBiQ,EAAiBC,KAI1D,EAAA/M,4BACRr/C,IAEC,MAAM2rD,EAAY3rD,EAAKyX,WAAWowB,OAAO,aACzC,GAAI8jB,EAAY,EACd,MAAM,IAAI/zD,MAAM,qCAAqC+zD,sBAEvD,MAAMG,EAAO9rD,EAAKyX,WAAWqwB,UAAU,OAAQ,OAC/C,GAAa,QAATgkB,GAA2B,QAATA,EACpB,MAAM,IAAIl0D,MAAM,sBAAsBk0D,sBAExC,MAAO,CAACA,OAAMH,cAGpB,MAAMhI,EAAkBnK,IACtB,GAAsB,IAAlBA,EAAO1hD,OACT,MAAM,IAAIF,MAAM,yCAAyC4hD,EAAO1hD,UAKlE,GAAuB,WAAnB0hD,EAAO,GAAGz/C,MAA+C,IAA1By/C,EAAO,GAAGv/C,KAAKnC,OAChD,MAAM,IAAIL,UAAU,uD,wHCtExB,gBACA,UAEA,UACA,UACA,UA2Da,EAAA4zD,kCACT,CAAC3H,EAAyClK,EAA2BiM,EACpEhuC,KACC,MAAM4uC,EA5D4B,EAACoC,EAAkBhxC,KAA6C,CACtGrgB,KAAM,iBACNwE,WAAY6sD,EAAU,CAAC,SAAU,IAAK,KAAO,CAAC,SAAU,KACxDhP,WAAYgP,EAAU,CAAC,EAAAjO,YAAY6B,SAAU,EAAA7B,YAAYM,oBAAqB,EAAAN,YAAY6B,UACpE,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAYM,qBACzDhU,SAAUrvB,EAAW40C,qBAuDAC,CAAgC9S,EAAO1hD,OAAS,EAAG2f,GACpE,OAAO,OAAP,wBACK4uC,GAAQ,CACXhsD,IAAK,IAtDT,EAACqpD,EAAyC2C,EAA2B7M,EACpEiM,EAAuBhuC,KACtB,MAAM+xC,EAAShQ,EAAO,GAAGv/C,KACnBwvD,EAASjQ,EAAO,GAAGv/C,KACnBghD,EAAsB,CAACwO,EAAO,GAAI56C,KAAKC,KAAM06C,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAM,IAClF8C,EAAc,EAAAC,oBAAoBhD,EAAQC,EAAQhE,IACjDgH,EAAQC,GACXhJ,EAAiBvK,+BAA+B8B,EAAqB,EAAAT,YAAYM,qBAE/E6R,EAAgB,EAAAtc,UAAUkM,eAAegQ,IACxCK,EAAaC,GAChBnJ,EAAiBvK,+BAA+BoT,EAAa,EAAA/R,YAAYM,qBACvE1M,EAAOqX,EAAY3tD,OAEnBg1D,EAAatT,EAAO1hD,OAAS,EAAK,MAAQ,QAC1Ci1D,EAAYl+C,KAAKC,KAAK06C,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAK,IAC1D,mBAACN,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqB5xC,GAC7Dg3B,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,SAC1D2+B,EAAe,KACzB8S,gCAC0B/a,iLAOOue,EAAc,oBAAoBA,EAAc,oBACzEA,EAAc,0CACY1R,EAAoB,wBACtC6R,6BACMC,mEAC+BH,MAAgBC,6DAChBJ,MAAWC,yBAC/Cje,EAAKC,oCAAoCD,EAAKC,kFAI7D0a,wBAGE,OAAO,OAAP,wBACK/C,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,kBAUW2W,CAA4BtJ,EAAkB2C,EAAU7M,EAAQiM,EAAahuC,O,uHCpEhG,gBAGa,EAAAioC,QACT,CAACgE,EAAyClK,EAAkB+M,KAC1D5C,EAAenK,EAAQ+M,GAEvB,MAAM0G,EAAa,EAAA5c,UAAU6c,aAAa1T,EAAO,GAAGv/C,KAAMssD,GAC1D,MAAO,CAAC7C,EAAiBxH,gBAAgB1C,EAAO,GAAIyT,KAG7C,EAAAtN,uBAA0D3/C,GACnEA,EAAKyX,WAAWowB,OAAO,OAAQ,GAEnC,MAAM8b,EAAiB,CAACnK,EAAkB+M,KACxC,IAAK/M,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,6BAGlB,MAAM0G,EAAIk7C,EAAO,GAAGv/C,KAAKnC,OACzB,GAAU,IAANwG,EACF,MAAM,IAAI1G,MAAM,mCAGlB,GAAI2uD,GAAQjoD,GAAKioD,EAAOjoD,EACtB,MAAM,IAAI1G,MAAM,gBAIlB,GAAuB,WAAnB4hD,EAAO,GAAGz/C,KACZ,MAAM,IAAInC,MAAM,qC,+IChCpB,gBAEA,UASA,gCAAqC6f,GACnC,IAAI01C,EACJ,OAAQ11C,EAAW21C,YACjB,IAAK,OACHD,EAAO,EAAAE,WACP,MACF,IAAK,UACHF,EAAO,EAAAG,cACP,MACF,IAAK,OACHH,EAAO,EAAAI,SAAS91C,EAAW+1C,QAAU/1C,EAAWg2C,SAChD,MAEF,QACE,MAAO,CAACtE,mBAAoB,GAAIC,gBAAiB,IAGrD,MAAMsE,EAAiBP,EAAK/1D,KAG5B,MAAO,CAAC+xD,mBAFmBgE,EAAK/Z,KAEJgW,gBADJ,WAAWsE,eAIxB,EAAAhC,kCAAqCj0C,IAChD,MAAM21C,EAAa31C,EAAWqwB,UAAU,aAAc,IAEtD,GAAmB,SAAfslB,EAAuB,CACzB,MAAOI,EAASC,GAAWh2C,EAAWuwB,UAAU,oBAAqB,CAAC,EAAA2lB,SAAU,EAAAC,WAChF,MAAO,CAACR,aAAYK,UAASD,UAASnB,mBAAoB,GAAGe,KAAcI,KAAWC,KAExF,MAAO,CAACL,aAAYf,mBAAoBe,K,qHC1C1C,eAEA,SAEA,UAEA,UAMa,EAAAxN,OACT,CAAC8D,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,EAAQ/hC,EAAW8uC,MAE3B,CADQ7C,EAAiB5nD,IAAI+xD,EAA8BnK,EAAkBlK,EAAQ/hC,GAAa+hC,KAIlG,EAAAqG,sBAAmE7/C,GAC5E,EAAAinC,4BAA4B,CAACsf,KAAMvmD,EAAKyX,WAAWowB,OAAO,OAAQ,KAEtE,MAAMimB,EAAwB,CAC5B12D,KAAM,SACNwE,WAAY,CAAC,IAAK,KAClB69C,WAAY,CAAC,EAAAe,YAAY6B,SAAU,EAAA7B,YAAY6B,WAmD3CwR,EACF,CAAC7yD,EAAgCw+C,EAAkB/hC,KACjD,MAAM4uC,EAAW,OAAH,wBAAOyH,GAAqB,CAAEjU,UAAWpiC,EAAWqvB,WAClE,OAAO,OAAP,wBAAWuf,GAAQ,CAAEhsD,IAAK,IAlD5B,EAACW,EAAgCqrD,EAA2B7M,EAAkB+M,KAC5E,MAAMC,EAAahN,EAAO,GAAGv/C,KAAK4G,QAC5BktD,EAAiBvU,EAAO,GAAGv/C,KAAK4G,QAChC4kD,EAAc,IAAIvrD,MAAMssD,EAAW1uD,OAASi2D,EAAej2D,OAAS,GAE1EyuD,EAAO,EAAAlW,UAAU2d,cAAczH,EAAMC,EAAW1uD,QAChD,MAAMm2D,EAAyB,GAC/B,IAAK,IAAIp2D,EAAI,EAAGA,EAAI4tD,EAAY3tD,OAAQD,IAMlCA,EAAI0uD,GACNd,EAAY5tD,GAAK2uD,EAAW3uD,GAC5Bo2D,EAAaj2D,KAAK,YAAYH,kBAAkBA,QAE5CA,EAAI0uD,EAAOwH,EAAej2D,QAC5B2tD,EAAY5tD,GAAKk2D,EAAel2D,EAAI0uD,GACpC0H,EAAaj2D,KAAK,gBAAgBH,EAAI0uD,kBAAqB1uD,SAE3D4tD,EAAY5tD,GAAK2uD,EAAW3uD,EAAIk2D,EAAej2D,OAAS,GACxDm2D,EAAaj2D,KAAK,YAAYH,EAAIk2D,EAAej2D,OAAS,kBAAkBD,QAKlF,MAGMw+C,EAAe,uCAHPoP,EAAY3tD,QAAU,+BACtB0uD,EAAW1uD,sCACVi2D,EAAej2D,QAAU,8CAMpCm2D,EAAa1wD,KAAK,6EAETgpD,wBAA2BC,EAAWD,mDAGnD,OAAO,OAAP,wBACKF,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,kBAO8B6X,CAAwBlzD,EAASqrD,EAAU7M,EAAQ/hC,EAAW8uC,SAG9F5C,EAAiB,CAACnK,EAAkB+M,KACxC,IAAK/M,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,6BAElB,MAAMwwD,EAAa5O,EAAO,GAAGv/C,KAAKnC,OAClC,GAAIswD,EAAa,EACf,MAAM,IAAIxwD,MAAM,wBAElB,GAAI2uD,GAAQ6B,GAAc7B,EAAO6B,EAAa,EAC5C,MAAM,IAAIxwD,MAAM,iBAElB,IAA8C,IAA1C,EAAAu2D,aAAa11D,QAAQ+gD,EAAO,GAAGz/C,MACjC,MAAM,IAAInC,MAAM,sBAElB,GAAuB,UAAnB4hD,EAAO,GAAGz/C,MAAuC,UAAnBy/C,EAAO,GAAGz/C,KAC1C,MAAM,IAAInC,MAAM,wB,4ICjGpB,eAIA,UAEA,UAUa,EAAAkoD,KACT,CAAC4D,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,EAAQ/hC,GAEhB,CADQisC,EAAiB5nD,IAAIsyD,EAA4B5U,EAAQ/hC,GAAa+hC,KAI3F,MAAM6U,EAAsB,CAACruD,EAAkBsuD,KAC7C,MAAMC,EAAiD,IAAxCvuD,EAAKyX,WAAWowB,OAAO,SAAU,GAC1C2mB,EAAiD,IAAxCxuD,EAAKyX,WAAWowB,OAAO,SAAU,GAC1CtxB,EAAQvW,EAAKyX,WAAWmwB,SAAS,QAAS,GAC1C6mB,EAAOzuD,EAAKyX,WAAWmwB,SAAS,OAAQ,GAC9C,OAAO,EAAAX,4BAA4B,CAACsnB,SAAQC,SAAQj4C,QAAOk4C,OAAMH,iBAGtD,EAAAvO,sBAAiE//C,GAC1EquD,EAAoBruD,GAAM,GAEjB,EAAAggD,uBAAkEhgD,GAC3EquD,EAAoBruD,GAAM,GAE9B,MAAMouD,EAA8B,CAAC5U,EAAkB/hC,KACrD,MAAM4uC,EAAW,CACfjvD,KAAM,OACNwE,WAA8B,IAAlB49C,EAAO1hD,OAAe,CAAC,IAAK,IAAK,KAAO,CAAC,IAAK,KAC1D2hD,WAA8B,IAAlBD,EAAO1hD,OAAe,CAAC,EAAA0iD,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzD,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACrErgD,IAAKyb,EAAWqvB,UAGlB,OAAO,OAAP,wBAAWuf,GAAQ,CAAEhsD,IAAK,IAAMq0D,EAAsBrI,EAAU7M,EAAQ/hC,MAGpEi3C,EACF,CAACrI,EAA2B7M,EAAkB/hC,KAC5C,MAAMk3C,EAASnV,EAAO,GAAGv/C,KAAK4G,QACxB+tD,EAASpV,EAAO,GAAGv/C,KAAK4G,SACvB+B,EAAGuB,GAAK,EAAA0qD,SAASC,qBACpBH,EAAQl3C,EAAW82C,OAAQK,EAAQn3C,EAAW+2C,OAA0B,IAAlBhV,EAAO1hD,OAAe0hD,EAAO,GAAGv/C,UAAOtC,GAC3F8tD,EAAc,CAAC7iD,EAAGuB,GACxB,IAAKshD,EACH,MAAM,IAAI7tD,MAAM,uCAElB,IAAIm1D,EAAY4B,EAAOA,EAAO72D,OAAS,GACnCi3D,EAAO,GACPt3C,EAAW82C,SACbxB,EAAY4B,EAAO,IAEjBl3C,EAAW82C,QAAU92C,EAAW+2C,OAClCO,EAAO,8BACEt3C,EAAW82C,SAAW92C,EAAW+2C,OAC1CO,EAAO,6BACGt3C,EAAW82C,QAAU92C,EAAW+2C,OAC1CO,EAAO,4BACGt3C,EAAW82C,QAAW92C,EAAW+2C,SAC3CO,EAAO,2BAET,MAAM3gB,EAAOqX,EAAY3tD,OAInBu+C,EAAe,qCACOjI,0BAChBA,wBACAA,kBANuB,IAAlBoL,EAAO1hD,OAAe,SAAS0hD,EAAO,GAAGv/C,KAAKnC,WAAa,mFACvC,IAAlB0hD,EAAO1hD,OAAe,8BAAgC,iEAanDi1D,8BACV3e,EAAO,4BACPA,EAAO,0BACT2gB,iEAf2B,IAAlBvV,EAAO1hD,OAAe,yBAA2B,uCAsBpE,OAAO,OAAP,wBACKuuD,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3E1F,UAAW,CACT,CAACv/C,KAAM,QAAS2C,KAAM,QAASC,KAAMyd,EAAWlB,OAAQ,CAACnf,KAAM,OAAQ2C,KAAM,QAASC,KAAMyd,EAAWg3C,OAEzGpY,kBAIFsN,EAAiB,CAACnK,EAAkB/hC,KACxC,IAAK+hC,EACH,MAAM,IAAI5hD,MAAM,oBAElB,GAAI6f,EAAW62C,cAAgB9U,EAAO1hD,OAAS,GAAK0hD,EAAO1hD,OAAS,GAClE,MAAM,IAAIF,MAAM,uBAElB,IAAK6f,EAAW62C,aAAiC,IAAlB9U,EAAO1hD,OACpC,MAAM,IAAIF,MAAM,0BAIlB,GAAsB,IAAlB4hD,EAAO1hD,QAA0C,IAA1B0hD,EAAO,GAAGv/C,KAAKnC,QAA0C,IAA1B0hD,EAAO,GAAGv/C,KAAKnC,OACvE,MAAM,IAAIF,MAAM,4BAGlB,GAAwB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,MACvB,YAAnBy/C,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,MACxB,IAAlBy/C,EAAO1hD,QAAmC,YAAnB0hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KACpE,MAAM,IAAInC,MAAM,uBAGlB,GAAK4hD,EAAO,GAAGz/C,OAASy/C,EAAO,GAAGz/C,MAA4B,IAAlBy/C,EAAO1hD,QAAgB0hD,EAAO,GAAGz/C,OAASy/C,EAAO,GAAGz/C,KAC9F,MAAM,IAAInC,MAAM,gC,0HClIpB,gBAEA,UAEA,UA0Ea,EAAAqyD,oCACT,CAACvG,EAAyClhD,EAAW3C,EAAW4lD,EAC/DhuC,KACC,MAAM4uC,GA3E+BxM,EA2EcpiC,EAAWqvB,SA3EH,CAC/D1vC,KAAM,kBACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAYC,QACzBZ,cAJwC,IAACA,EA4ErC,OAAO,OAAP,wBACKwM,GAAQ,CACXhsD,IAAK,IAtET,EAACqpD,EAAyC2C,EAA2B7jD,EAAW3C,EAC/E4lD,EAAgChuC,KAC/B,MAAM+xC,EAAShnD,EAAEvI,KACX+0D,EAASnvD,EAAE5F,KAGXm0C,EAAOqX,EAAY3tD,OACnBy0D,EAAc,CAACyC,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAIvJ,EAAY,GAAKA,EAAY,IAC/EwJ,EAAaD,EAAO,GAAKA,EAAO,GAChCnI,EAAgB,EAAAC,oBAChBrY,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,SAChE,IAAIw3C,EAAW,GAEf,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAC1BF,GAAY,qCACYE,gCACPD,qCAEG5C,EAAY,eAAeA,EAAY,oDACzB9G,EAAYrX,EAAO,UAAU32B,EAAW42B,QAAQ,yBAC1E52B,EAAWwxC,KAAK,qCACHxxC,EAAWsxC,UAAU,mBAAmBkG,QAAiBD,EAAO,iCAEvExF,EApBH,gEAqBwB/D,EAAYrX,EAAO,SAAS32B,EAAW42B,QAAQ,2BACxE52B,EAAWwxC,KAAK,uCACHxxC,EAAWsxC,UAAU,uBAAuBkG,OAAgBD,EAAO,mCAE1ExF,EAxBL,8DA0BoByF,mFAEN,EAANE,EAAUC,+LAWjC,MAAM/Y,EAAe,WACnBwQ,2MAOIqI,gBACAzgB,EAAKtS,0CAGX,OAAO,OAAP,wBACKkqB,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMsyD,EAAaxyD,KAAMyI,EAAEzI,KAAMq/C,YAAa,EAAAoB,YAAYC,QACnEpE,eACAC,SAAS,KAUE+Y,CAA8B3L,EAAkB2C,EAAU7jD,EAAG3C,EAAG4lD,EAAahuC,O,0ICnFhG,gBAuEa,EAAA0zC,8BACT,CAACzH,EAAyClhD,EAAW3C,EAAW4lD,EAC/DhuC,KACC,MAAM4uC,GAvEyBxM,EAuEcpiC,EAAWqvB,SAvEH,CACzD1vC,KAAM,SACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,UACzBxC,cAJkC,IAACA,EAwE/B,OAAO,OAAP,wBACKwM,GAAQ,CACXhsD,IAAK,IAlET,EAACqpD,EAAyC2C,EAA2B7jD,EAAW3C,EAC/E4lD,EAAgChuC,KAC/B,MAAM+xC,EAAShnD,EAAEvI,KACX+0D,EAASnvD,EAAE5F,KAEXm0C,EAAOqX,EAAY3tD,OACnBw3D,EAAa,EAAA9C,oBAAoBhD,EAAQwF,EAAQvJ,EAAa,GAE9DpP,EAAe,4BACFmT,EAAO,+BACPA,EAAO,+BACPA,EAAO,+BACP/xC,EAAWuxC,YAAY,+BACvBvxC,EAAWuxC,YAAY,sCAChBvxC,EAAWsxC,UAAU,sCACrBtxC,EAAWsxC,UAAU,oCACvBtxC,EAAW42B,QAAQ,oCACnB52B,EAAW42B,QAAQ,iCACtB52B,EAAWwxC,KAAK,iCAChBxxC,EAAWwxC,KAAK,wJAIR7a,onBAabob,EAAO1xD,mYAiBvB,OAAO,OAAP,wBACKuuD,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMq1D,EAAYv1D,KAAMyI,EAAEzI,KAAMq/C,YAAa,EAAAoB,YAAYM,qBAClEzE,kBAUWkZ,CAAwB7L,EAAkB2C,EAAU7jD,EAAG3C,EAAG4lD,EAAahuC,MAK7E,EAAA+0C,oBACT,CAAChG,EAA+BwC,EAAgCvD,EAAgCzK,EAAW,IAEnG,CAACyK,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAC5C52C,KAAKC,KAAK03C,EAAW,GAAKwC,EAAY,GAAKA,EAAY,GAAKhO,K,+HCxFzE,eAKA,UAOa,EAAAqF,YACT,CAACqD,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GAGR,CADHkK,EAAiB5nD,IAAI0zD,EAAmC9L,EAAkBlK,EAAQ/hC,GAAa+hC,KAI5F,EAAA8G,2BACRtgD,IACC,MAAMkkD,EAAQlkD,EAAKyX,WAAWmwB,SAAS,SACjC6nB,EAAOzvD,EAAKyX,WAAWuwB,UAAU,QACvC,OAAO,EAAAf,4BAA4B,CAACid,QAAOuL,UAGjD,MAAMC,EAA6B,CACjCt4D,KAAM,cACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAyBrBmT,EACF,CAACx0D,EAAgCw+C,EAAkB/hC,KACjD,MAAM4uC,EAAW,OAAH,wBAAOqJ,GAA0B,CAAE7V,UAAWpiC,EAAWqvB,WACvE,OAAO,OAAP,wBAAWuf,GAAQ,CAAEhsD,IAAK,IAxB5B,EAACW,EAAgCqrD,EAA2B7M,EAAkB/hC,KAExE,MAAMguC,EAAcjM,EAAO,GAAGv/C,KAAK4G,QAC7ButC,EAAOqX,EAAY3tD,OAEnBu+C,EAAe,WADCsZ,EAAoBl4C,EAAWg4C,KAAK33D,4CAGlCs2C,kFAGxB,OAAO,OAAP,wBACKiY,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3E1F,UAAW,CACT,CAACv/C,KAAM,OAAQ2C,KAAM,QAASu9C,YAAa7/B,EAAWg4C,KAAK33D,OAAQkC,KAAMyd,EAAWg4C,MACpF,CAACr4D,KAAM,QAAS2C,KAAM,QAASC,KAAMyd,EAAWysC,QAElD7N,kBAO0BuZ,CAA6B50D,EAASqrD,EAAU7M,EAAQ/hC,MAGxFk4C,EAAuBE,IAC3B,MAAMxH,EAAsB,CAAC,4BAA4BwH,sBACzD,IAAK,IAAIh4D,EAAI,EAAGA,EAAIg4D,IAAeh4D,EACvB,IAANA,EACFwwD,EAAUrwD,KAEN,oBAAkBH,oBAAoBA,SACjCA,IAAMg4D,EAAc,EAC7BxH,EAAUrwD,KAEN,wBAAsBH,SAE1BwwD,EAAUrwD,KAEN,yBAAuBH,oBAAoBA,SAMnD,OAHAwwD,EAAUrwD,KACN,OAEGqwD,EAAU9qD,KAAK,OAGlBomD,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,iCAElB,GAA8B,IAA1B4hD,EAAO,GAAGv/C,KAAKnC,OACjB,MAAM,IAAIF,MAAM,wBAElB,GAAuB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KAC5C,MAAM,IAAInC,MAAM,yB,mJCzFpB,gBAEA,UAEa,EAAA2oD,sBACT,CAACmD,EAAyClK,EAAkBqK,KAC1DF,EAAenK,GAEf,MAAMsW,EAAkBpM,EAAiB5nD,IAAIi0D,EAAuCvW,EAAO,IAAKA,GAIhG,MAAO,CAHQkK,EAAiB5nD,IAC5Bk0D,EAAqCtM,EAAkBlK,EAAO,GAAIqK,EAASiM,EAAgB71D,MAC3F,CAACu/C,EAAO,GAAIsW,EAAiBtW,EAAO,GAAIA,EAAO,OAI5C,EAAAgH,qCAAwExgD,GACjFA,EAAKyX,WAAWmwB,SAAS,UAAW,MAExC,MAAMqoB,EAAiC,CACrC74D,KAAM,wCACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WA8CrB0T,EAA0C7zB,GAAsC,OAAD,wBAChF+zB,GAA8B,CACjC51D,IAAK,IA7CkC,EAACgsD,EAA2BnqB,KACnE,MAAMg0B,EAAQh0B,EAAMjiC,KAAK4G,QACnBomD,EAAUiJ,EAAM,GAChBC,EAAcD,EAAM,GAAKA,EAAM,GAC/BzK,EAAc,CAACyK,EAAM,GAAIjJ,GAEzB5Q,EAAe,uMAOI6Z,EAAM,iEAEJA,EAAM,wJAMCC,sDAETD,EAAM,iEAEJA,EAAM,4LAONC,oCAI3B,OAAO,OAAP,wBACK9J,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAYM,qBACvEzE,kBAMS+Z,CAAiCH,EAAgC/zB,KAGxEm0B,EAA+B,CACnCj5D,KAAM,sCACNwE,WAAY,CAAC,IAAK,kBAAmB,QAAS,KAC9C69C,WAAY,CAAC,EAAAe,YAAY6B,SAAU,EAAA7B,YAAYM,oBAAqB,EAAAN,YAAY6B,SAAU,EAAA7B,YAAY6B,WAwClG2T,EACF,CAACtM,EAAyCxnB,EAAe2nB,EAAiByM,KAEpE,MAAMjK,EAAW,OAAH,wBAAOgK,GAA4B,CAAExW,UAAW,GAAGgK,MACjE,OAAO,OAAP,wBACKwC,GAAQ,CACXhsD,IAAK,IA1Cb,EAACqpD,EAAyC2C,EAA2BnqB,EAAe2nB,EACnFyM,KACC,MAAM7hB,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,UACzD64C,EAAcC,GACjB9M,EAAiBvK,+BAA+BmX,EAAsB,EAAA9V,YAAYM,sBAC/E2V,EAAsBC,GAAyB,CAACH,EAAe,EAAGC,GACnEna,EAAe,0JAGoBoa,MAAyBC,uBACvDjiB,EAAKC,ogBAkBhB,OAAO,OAAP,wBACK2X,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMiiC,EAAMjiC,KAAMF,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UACtE1F,UAAW,CAAC,CAACv/C,KAAM,UAAW2C,KAAM,QAASC,KAAM6pD,IACnDxN,kBAUesa,CAA+BjN,EAAkB2C,EAAUnqB,EAAO2nB,EAASyM,MAI5F3M,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,4CAGlB,MAAMyM,EAAIm1C,EAAO,GACX0K,EAAQ1K,EAAO,GACf96C,EAAI86C,EAAO,GAIjB,GAAIn1C,EAAEpK,KAAKnC,OAAS,GAA2B,IAAtBosD,EAAMjqD,KAAKnC,QAAkC,IAAlB4G,EAAEzE,KAAKnC,OACzD,MAAM,IAAIF,MAAM,wBAElB,GAAIssD,EAAMjqD,KAAK,KAAOoK,EAAEpK,KAAK,IAAMyE,EAAEzE,KAAK,KAAOoK,EAAEpK,KAAK,GACtD,MAAM,IAAIrC,MAAM,gCAElB,GAAgB,YAAXyM,EAAEtK,MAAiC,YAAXsK,EAAEtK,MAAuC,YAAfmqD,EAAMnqD,MAAqC,YAAfmqD,EAAMnqD,MACzE,YAAX2E,EAAE3E,MAAiC,YAAX2E,EAAE3E,KAC7B,MAAM,IAAInC,MAAM,uBAElB,GAA8B,IAA1B4hD,EAAO,GAAGv/C,KAAKnC,OACjB,MAAM,IAAIF,MAAM,mC,yHCrJpB,gBACA,UACA,UAEA,UACA,UAEA,UACA,UAyEa,EAAAkyD,oCACT,CAACpG,EAAyClK,EACzCiS,KACC,MAAMpF,GA1E+BoC,EA0EcjP,EAAO1hD,OAAS,EA1EZ+hD,EA0Ee4R,EAAqBY,mBA1Ed,CACjFj1D,KAAM,kBACNwE,WAAY6sD,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDhP,WAAYgP,EAAU,CAAC,EAAAjO,YAAYC,OAAQ,EAAAD,YAAYC,OAAQ,EAAAD,YAAYC,QACrD,CAAC,EAAAD,YAAYC,OAAQ,EAAAD,YAAYC,QACvDZ,cALwC,IAAC4O,EAAkB5O,EA2EvD,OAAO,OAAP,wBACKwM,GAAQ,CACXhsD,IAAK,IApET,EAACqpD,EAAyC2C,EAA2B7M,EACpEiS,KACC,MAAMhD,EAAUjP,EAAO1hD,OAAS,EAC1B4wD,EAAcD,EAAU,+BAAiC,GACzDkG,EAASnV,EAAO,GAAGv/C,KACnB20D,EAASpV,EAAO,GAAGv/C,KACnBwrD,EAAc,EAAA7V,cAAcgW,UAAU+I,EAAQC,GAAQ,GACtDrJ,GAAe,EAAAlV,UAAUmV,SAAShM,EAAO,GAAGv/C,KAAMu/C,EAAO,GAAGv/C,MAElE,IAAKwrD,EACH,MAAM,IAAI7tD,MAAM,yCAElB,MAAMm1D,EAAY4B,EAAOA,EAAO72D,OAAS,GACnC84D,EAAiB/hD,KAAKC,KAAKi+C,EAAY,GACvClH,EAAQ8I,EAAO72D,OACfguD,EAAQ8I,EAAO92D,OAEf22C,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,SAC1Dm5C,EAAiB,EAAA/gB,kBAAkB2V,EAAY3tD,QAC/C43C,EAAU+V,EAAY3tD,OACtBg5D,EAAgB,EAAA5gB,iBAChB,mBAACiZ,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqBoC,GAE7DsF,EACFtI,EAAU,GAAG,EAAAuI,iBAAiBH,EAAgBC,EAAetX,EAAO,GAAGv/C,KAAMwrD,GAAa,KAAU,GAElGwL,EACF1L,EAAc,GA6CxB,SACIsL,EAAwBC,EAAkCtX,EAAkBhN,GAC9E,IAAI0kB,EAAyB,GACzBC,EAAyB,GAE7B,MAAMC,EAAW5X,EAAO,GAAGv/C,KACrBo3D,EAAW7X,EAAO,GAAGv/C,KAErBq3D,EAAUF,EAASt5D,OACnBy5D,EAAUF,EAASv5D,OAEnB43C,EAAUlD,EAAS10C,OACnB05D,EAAY9hB,EAAU4hB,EACtBG,EAAY/hB,EAAU6hB,EAE5BL,EAAyBE,EAASv0D,KAAI,CAACgC,EAAGhH,IAAM,UAAUi5D,EAAcj5D,EAAI25D,OAC5EN,EAAuBI,EAAU,GAAK,MACtCJ,EAAuB3zD,KAAK,MAC5B4zD,EAAyBE,EAASx0D,KAAI,CAACgC,EAAGhH,IAAM,UAAUi5D,EAAcj5D,EAAI45D,OAC5EN,EAAuBI,EAAU,GAAK,MACtCJ,EAAuB5zD,KAAK,MAE5B,MAAMm0D,EAAiB,EAAA9hB,cAAcC,iBAAiBuhB,EAAU5kB,GAC1DmlB,EAAiB,EAAA/hB,cAAcC,iBAAiBwhB,EAAU7kB,GAE1DolB,EAAiBF,EAAe70D,KAAIuC,GAAK,UAAU0xD,EAAc1xD,EAAIoyD,YAAmBj0D,KAAK,MAC7Fs0D,EAAiBF,EAAe90D,KAAIuC,GAAK,UAAU0xD,EAAc1xD,EAAIqyD,YAAmBl0D,KAAK,MAC7Fu0D,EAAiB,wBAAwBhB,EAAcphB,EAAU,iBAC9DohB,EAAcphB,EAAU,eAAeohB,EAAcphB,EAAU,iBAC/DohB,EAAcphB,EAAU,gBAmBjC,MAjBoC,4CAElCmhB,oCACAiB,QACAF,gCACwBV,2EAKxBL,oCACAiB,QACAD,gCACwBV,gCAzFDY,CAAyBlB,EAAgBC,EAAetX,EAAQiM,KAAiB,GAEhGuM,EAA2BzM,EAAc,2BAA6B,QA8FlF,SAAcuL,EAAyB1iB,GACrC,IAAIxX,EAAM,GACV,IAAK,IAAI/+B,EAAI,EAAGA,EAAIu2C,EAAO,EAAGv2C,IAC5B++B,GAAO,MAAMk6B,EAAcj5D,OAI7B,OAFA++B,GAAO,MAAMk6B,EAAc1iB,EAAO,UAE3BxX,EArGiFq7B,CAAKnB,EAAejL,MAClGqM,EAA2B3M,EAAc,2BAA6B,QAuGlF,SAAcuL,EAAyB1iB,GACrC,IAAIxX,EAAM,GACV,IAAK,IAAI/+B,EAAI,EAAGA,EAAIu2C,EAAO,EAAGv2C,IAC5B++B,GAAO,MAAMk6B,EAAcj5D,OAI7B,OAFA++B,GACI,WAAMk6B,EAAc1iB,EAAO,KACxBxX,EA9GiFu7B,CAAKrB,EAAehL,MAKlGzP,EAAe,iBACb4a,kBACAF,kBACA5H,+CAPuB5D,EAAc,GAAK,GAAGsL,yDACXC,EAAcphB,EAAU,UAAUohB,EAAcphB,EAAU,sBAC3FohB,EAAcphB,EAAU,UAAUohB,EAAcphB,EAAU,qGAUrCkhB,uCACToB,gCACAE,kIAKXxJ,oBACAU,oBACA3a,EAAKtS,iCAEf,OAAO,OAAP,wBACKkqB,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAYC,QAC3EpE,eACAC,SAAS,KAUE8b,CAA8B1O,EAAkB2C,EAAU7M,EAAQiS,O,wKCrFrF,gBAEA,UACA,UACA,UACA,SAwEA,SAAgBR,EACZzR,EAAkBiS,GACpB,MAAMpF,GAzD6BoC,EAyDUjP,EAAO1hD,OAAS,EAzDR+hD,EAyDW4R,EAAqBY,mBAzDV,CAC3Ej1D,KAAM,SACNwE,WAAY6sD,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDhP,WAAYgP,EAAU,CAAC,EAAAjO,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzD,CAAC,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,UACzDxC,cALkC,IAAC4O,EAAkB5O,EA0DrD,OAAO,OAAP,wBAAWwM,GAAQ,CAAEhsD,IAAK,IAlD5B,SACIgsD,EAA2B7M,EAAkBiS,GAC/C,MAAMkD,EAASnV,EAAO,GAAGv/C,KACnB20D,EAASpV,EAAO,GAAGv/C,KACnBwrD,EAAc,EAAA7V,cAAcgW,UAAU+I,EAAQC,GAAQ,GAC5D,IAAKnJ,EACH,MAAM,IAAI7tD,MAAM,yCAElB,MAAMi5D,EAAiB,EAAA/gB,kBAAkB2V,EAAY3tD,QAC/Cg5D,EAAgB,EAAA5gB,iBAChB,mBAACiZ,EAAkB,gBAAEC,GAAmB,EAAAC,qBAAqBoC,GAE7DhD,EAAUjP,EAAO1hD,OAAS,EAC1B4wD,EAAcD,EAAU,+BAAiC,GACzDsI,EACFtI,EAAU,GAAGuI,EAAiBH,EAAgBC,EAAetX,EAAO,GAAGv/C,KAAMwrD,GAAa,KAAW,GAEnGrX,EAAOqX,EAAY3tD,OACnBu6D,EAAQ1D,EAAO72D,OACfw6D,EAAQ1D,EAAO92D,OAEfu+C,EAAe,SACjB8S,UACA4H,oCAC0B3iB,wBAChBikB,sBACAC,8IANI3D,EAAOA,EAAO72D,OAAS,6BAY3Bu6D,EAAQ,0BACRC,EAAQ,oEAGd5J,cACAU,kCAGR,OAAO,OAAP,wBACK/C,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,iBAO8Bkc,CAAwBlM,EAAU7M,EAAQiS,KAzE/D,EAAA7K,OACT,CAAC8C,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GAEXkK,EAAiB7d,QAAQgF,KACpB,CAAC6Y,EAAiB5nD,IACrB,EAAAguD,oCAAoCpG,EAAkBlK,EAAQ/hC,GAAa+hC,IAExE,CAACkK,EAAiB5nD,IAAImvD,EAA8BzR,EAAQ/hC,GAAa+hC,KAI3E,EAAAqH,sBACR7gD,GAAmD,EAAA0rD,kCAAkC1rD,EAAKyX,YAyD/F,kCAMA,MAAMksC,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,6BAGlB,GAAI4hD,EAAO,GAAGv/C,KAAKu/C,EAAO,GAAGv/C,KAAKnC,OAAS,KAAO0hD,EAAO,GAAGv/C,KAAKu/C,EAAO,GAAGv/C,KAAKnC,OAAS,GACvF,MAAM,IAAIF,MAAM,oCAGlB,GAAwB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,MACvB,YAAnBy/C,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KAC7C,MAAM,IAAInC,MAAM,+BAGlB,GAAI4hD,EAAO,GAAGz/C,OAASy/C,EAAO,GAAGz/C,KAC/B,MAAM,IAAInC,MAAM,8BAIpB,SAAgBo5D,EACZH,EAAwBC,EAAkCxhB,EAA4B9C,EACtFH,GACF,IAAI8D,EAAwB,GAC5B,MAAMV,EAASH,EAAQx3C,OACjB43C,EAAUlD,EAAS10C,OACnBi4C,EAAWL,EAAUD,EAEzBU,EADET,EAAU,GAAKD,EAAS,EACF,SAEAH,EAAQzyC,KAAI,CAACgC,EAAGhH,IAAM,UAAUi5D,EAAcj5D,EAAIk4C,OAAaxyC,KAAK,MAE9F,MACMyyC,EADgB,EAAAJ,cAAcC,iBAAiBP,EAAS9C,GAC1B3vC,KAAIuC,GAAK,UAAU0xD,EAAc1xD,EAAI2wC,YAAkBxyC,KAAK,MAGhG,IAAI4+B,EAAS,uCAkBb,OAnBiC,IADlB,EAAAkU,UAAU71C,KAAK80C,KAI5BnT,EAAS,uBAEoBkQ,EAAW,kCAExCwkB,oCACA7gB,mCAC2BG,iBACpBhU,QAEiC,mCAExC00B,oCACA7gB,oCA9BJ,sB,kHCxGA,gBAEA,UACA,UAEA,UAEMwiB,EAAsB,CAC1Bp7D,KAAM,OACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAYiY,mBA+Cd,EAAA3U,4BAA8B,CAAC9iD,EAAgCkhC,IACvE,OAAD,wBAAKs2B,GAAmB,CAAEn4D,IAAK,IA7CL,EAACW,EAAgCkhC,KAC7D,MAAMuS,EAAO,EAAAvB,QAAQlyC,EAAQ6qC,QAAQxuC,QAAQyzC,UAAUpzB,SACjD8uC,EAAatqB,EAAMjiC,KAEnBy4D,EAAYlM,EAAW1uD,OAEvBggD,EAAa5b,EAAMjiC,KAAKnC,OAExB+4D,EAAiB,EAAA/gB,kBAAkBgI,GACnCkD,EAAW,EAAA2L,YAAY,KAAM7O,GAC7B6a,GA8FUvkB,EA9FO0J,EA8FO79C,EA9FK+gD,EA8FWzK,EA9FDiW,EAAWA,EAAW1uD,OAAS,GA8FhB04C,EA9FoBgW,EAAWA,EAAW1uD,OAAS,GA+FlG,IAATs2C,GAAuB,IAATA,EACT,GAIO,iBACJn0C,EAAKm0C,EAAO,oBACZn0C,EAAKm0C,EAAO,sBACVn0C,EAAKm0C,EAAO,0BACZn0C,EAAKm0C,EAAO,oCACFoC,+BACAD,YAZ1B,IAAkBnC,EAAcn0C,EAAgBs2C,EAAcC,EA5F5D,IAAIoiB,EAEFA,EADgB,IAAdF,EACgB,CAAC,EAAG,GACC,IAAdA,EACS,CAAClM,EAAW,GAAI,GAEhB,CAACA,EAAW1O,EAAa,GAAI0O,EAAW1O,EAAa,IAEzE,MAAM+a,EA8BR,SAAiCzkB,EAAcjP,EAA0BllC,GACvE,GAAa,IAATm0C,EACF,MAAO,QAET,GAAa,IAATA,EACF,MAAO,QAAQjP,EAAM,KAGvB,IAAI2zB,EAAO,GACX,IAAK,IAAIj7D,EAAIu2C,EAAO,EAAGv2C,EAAIu2C,EAAMv2C,IAC/Bi7D,GAAQ,GAAG74D,EAAKpC,SAASsnC,EAAMtnC,EAAIu2C,EAAO,KACtCv2C,EAAIu2C,EAAO,IACb0kB,GAAQ,MAIZ,OAAOA,EA9CsBC,CAAwBjb,EAAY8a,EAAiB5X,GAC5E7e,EAmDR,SAAmBgD,EAA0BllC,GAC3C,MAAMm0C,EAAOjP,EAAMrnC,OAEnB,GAAa,IAATs2C,EACF,MAAO,kBAGT,GAAa,IAATA,EACF,MAAO,oCACajP,EAAM,4CAQ5B,IAAIj8B,EAAI,GACR,GAAIkrC,EAAO,EACT,IAAK,IAAIv2C,EAAI,EAAGA,EAAIu2C,EAAO,IAAKv2C,EAC9BqL,GAAQ,GAAGjJ,EAAKpC,MAGpB,MAAO,QAAQqL,wCACaA,0CACAA,mDACSA,aA7EtB8vD,CAAUxM,EAAYxL,GAE/B3E,EAAe,sCAEXwa,6CAEGgC,qBACDpkB,EAAKtS,sDAELw2B,oBAEAlkB,EAAKtS,iBAAiBA,sCAIlC,OAAO,OAAP,wBACKq2B,GAAmB,CACtBlc,SAAS,EACTna,OAAQ,CAACliC,KAAMiiC,EAAMjiC,KAAMF,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAYC,QACtEpE,kBAKqC4c,CAAsBj4D,EAASkhC,M,uIC3DxE,gBAEA,SAAgBg3B,EAAe97D,EAAcg3C,GAC3C,OAAO,EAAA8B,cAAc9B,GAAMvxC,KAAIuC,GAAK,GAAGhI,KAAQgI,MADjD,mBAIA,uBAA4BhI,EAAcg3C,GACxC,OAAa,IAATA,EACK,CAACh3C,GAEH87D,EAAe97D,EAAMg3C,IAG9B,+BACE,MAAO,sX,oJCdT,eAIA,UACA,UAEA,UAQM+kB,EAAqB,CACzB/7D,KAAM,MACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAGd,EAAA2E,MACT,CAAC0C,EAAyClK,EAAkB/hC,KAC1D27C,EAAiB5Z,GAQV,CAPQkK,EAAiB5nD,IAAI,OAAD,wBAE1Bq3D,GAAkB,CACrBtZ,UAAWpiC,EAAWqvB,SACtBzsC,IAAK,IAAMg5D,EAAqB3P,EAAkBlK,EAAO,GAAI/hC,KAE/D+hC,KAIG,EAAAyH,qBAA+DjhD,IAC1E,MAAM8rD,EAAO9rD,EAAKyX,WAAWqwB,UAAU,OAAQ,YACzCtvC,EAAQwH,EAAKyX,WAAWmwB,SAAS,QAAS,GAC1CqhB,EAAOjpD,EAAKyX,WAAWwwB,QAAQ,QACrC,OAAO,EAAAhB,4BAA4B,CAAC6kB,OAAMtzD,QAAOywD,UAGtC,EAAA/H,OACT,CAACwC,EAAyClK,EAAkBsS,KAC1DwH,EAAkB9Z,GAClB,MAAM+Z,EAAaC,EAAgC9P,EAAkBlK,EAAQsS,GAC7E,OAAO,EAAA9K,MAAM0C,EAAkB,CAAClK,EAAO,IAAK+Z,IAGrC,EAAApS,sBAAyDnhD,GAClEA,EAAKyX,WAAWqwB,UAAU,OAAQ,YAEtC,MAAM0rB,EACF,CAAC9P,EAAyClK,EAAkBsS,KAC1D,IAAKpI,EAAiB7d,QAAQ0X,cAAc/D,EAAO,GAAGoB,SACjDpB,EAAO1hD,QAAU,IAAM4rD,EAAiB7d,QAAQ0X,cAAc/D,EAAO,GAAGoB,QAC3E,MAAM,IAAIhjD,MAAM,0CAGlB,MAAMqxD,EAAO/uD,MAAMtB,KAAK4gD,EAAO,GAAGia,aAC5Bj7D,EAASghD,EAAO1hD,QAAU,EAAK0hD,EAAO,GAAGjc,UAAU,GAAK,EAE9D,OAAO,EAAA0J,4BAA4B,CAAC6kB,OAAM7C,OAAMzwD,WAGhD66D,EACF,CAAC3P,EAAyCxnB,EAAezkB,KACvD,MAAMguC,EAAc,EAAApV,UAAUqjB,SAASx3B,EAAMjiC,KAAK4G,QAAS4W,EAAWwxC,MAChE7a,EAAOqX,EAAY3tD,OAEnBu+C,EAAe,WADDsd,EAAejQ,EAAkBxnB,EAAOzkB,+BAGxC22B,0DAGpB,MAAO,CACLh3C,KAAM,MACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,UACzBlgB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UACvEhG,iBAIF+c,EAAoB5Z,IACxB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,wBAElB,GAAuB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KAC5C,MAAM,IAAInC,MAAM,wBAId07D,EAAqB9Z,IACzB,IAAKA,GAA6B,IAAlBA,EAAO1hD,QAAkC,IAAlB0hD,EAAO1hD,OAC5C,MAAM,IAAIF,MAAM,8BAElB,GAAuB,UAAnB4hD,EAAO,GAAGz/C,KACZ,MAAM,IAAInC,MAAM,uBAElB,GAAI4hD,EAAO1hD,QAAU,GAAwB,WAAnB0hD,EAAO,GAAGz/C,KAClC,MAAM,IAAInC,MAAM,wBAId+7D,EAAiB,CAACjQ,EAAyCxnB,EAAezkB,KAC9E,MAAMg3B,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,UACzDzG,EAAOC,GAAUwyC,EAAiBvK,+BAA+Bjd,EAAMjiC,KAAM,EAAAugD,YAAY6B,UAC1FhO,EAAU,EAAAgC,UAAUkM,eAAergB,EAAMjiC,MAE/C,OAAQwd,EAAWq0C,MACjB,IAAK,WACH,OAAO8H,EAAenlB,EAAMvS,EAAMjiC,KAAMo0C,EAASp9B,EAAOC,EAAQuG,EAAWwxC,KAAMxxC,EAAWjf,OAC9F,IAAK,UACH,OAAOq7D,EAAcplB,EAAMvS,EAAMjiC,KAAMo0C,EAASp9B,EAAOC,EAAQuG,EAAWwxC,MAC5E,IAAK,OACH,OAAO6K,EAAWrlB,EAAMvS,EAAMjiC,KAAMo0C,EAASp9B,EAAOC,EAAQuG,EAAWwxC,MACzE,QACE,MAAM,IAAIrxD,MAAM,kBAIhBg8D,EACF,CAACnlB,EAAYtP,EAA0BkP,EAA4Bp9B,EAAeC,EAAgB+3C,EACjGzwD,KACC,MAAM41C,EAAOjP,EAAMrnC,OACnB,IAAIkgD,EAAQ,GACZ,IAAK,IAAIngD,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/BmgD,GAAS,mBACDngD,QAAQoxD,EAAKpxD,+DAEVsnC,EAAMtnC,+CACDw2C,EAAQx2C,gBAG1B,MAAO,4BACYu2C,+CACc51C,6DAG7Bw/C,mDACqC/mC,MAAUC,8CACjBu9B,EAAKC,kEAMvCmlB,EACF,CAACplB,EAAYtP,EAA0BkP,EAA4Bp9B,EAAeC,EAAgB+3C,KAE5F,MAAM7a,EAAOjP,EAAMrnC,OAEnB,IAAIkgD,EAAQ,GACZ,IAAK,IAAIngD,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/BmgD,GAAS,mBACLngD,QAAQoxD,EAAKpxD,+EAGC,GAAKsnC,EAAMtnC,GAAK,gFAE1BsnC,EAAMtnC,4DAEFw2C,EAAQx2C,gBAGtB,MAAO,4BACQu2C,+DAGf4J,mDACqC/mC,MAAUC,8CACjBu9B,EAAKC,kEAMvColB,EACF,CAACrlB,EAAYtP,EAA0BkP,EAA4Bp9B,EAAeC,EAAgB+3C,KAE5F,MAAM7a,EAAOjP,EAAMrnC,OAEnB,IAAIkgD,EAAQ,GACZ,IAAK,IAAIngD,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/BmgD,GAAS,mBACLngD,QAAQoxD,EAAKpxD,qDAEVsnC,EAAMtnC,WAAWsnC,EAAMtnC,GAAK,6BACvBw2C,EAAQx2C,cAGtB,MAAO,4BACQu2C,+DAGf4J,mDACqC/mC,MAAUC,8CACjBu9B,EAAKC,mE,yOCrM7C,eAIA,UAEA,UAWa,EAAA4P,YACT,CAACoF,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GACf,MAAM6M,EACF,CAACjvD,KAAM,cAAewE,WAAY,CAAC,KAAM69C,WAAY,CAAC,EAAAe,YAAY6B,UAAWxC,UAAWpiC,EAAWqvB,UAGvG,MAAO,CAFQ4c,EAAiB5nD,IAAI,OAAD,wBAC3BuqD,GAAQ,CAAEhsD,IAAK,IAAM05D,EAA6Bva,EAAQ6M,GAAU,EAAO5uC,KAAc+hC,KAI1F,EAAA+E,2BACRv+C,IACC,MAAM8oD,EAAU9oD,EAAKyX,WAAWqwB,UAAU,WAAY,UAChDksB,EAAWh0D,EAAKyX,WAAWowB,OAAO,YAAa,GAC/CosB,EAAsE,IAAnDj0D,EAAKyX,WAAWowB,OAAO,oBAAqB,GAC/DmhB,EAAchpD,EAAKyX,WAAWwwB,QAAQ,gBACtCoG,EAAUruC,EAAKyX,WAAWwwB,QAAQ,UAAW,IAC7CghB,EAAOjpD,EAAKyX,WAAWwwB,QAAQ,OAAQ,IAG7C,GAAiB,IAAb+rB,EACF,MAAM,IAAIp8D,MAAM,0EAGlB,OAAO,EAAAqvC,4BAA4B,CAAC6hB,UAASkL,WAAUC,kBAAiBjL,cAAa3a,UAAS4a,UAGpG,MAAM8K,EACF,CAACva,EAAkB6M,EAA2B6N,EAA2Bz8C,KAEnE,MAAOkzC,EAAoBlF,GACvB0O,EAAwC3a,EAAQ/hC,EAAYy8C,GAC1DjF,EAAa,EAAA5e,UAAU71C,KAAKmwD,EAAmB3B,aAErD,IAAIoL,EAAM,GACNzJ,EAAmBsJ,gBACrBG,GAAO,kBAAkBnF,MAEzBmF,GAAO,kBAAkBnF,YAE3B,MACM5Y,EAAe,aADDge,EAAoB7a,EAAO,GAAGv/C,KAAM0wD,EAP5C,kBAOqEyJ,EAAK,iBAItF,OAAO,OAAP,wBACK/N,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,kBAIC,EAAA4J,kBACT,CAACyD,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GACf,MAAM6M,EAAW,CACfjvD,KAAM,oBACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,UACzBxC,UAAW,GAAGpiC,EAAWw8C,mBAI3B,MAAO,CAFQvQ,EAAiB5nD,IAAI,OAAD,wBAC3BuqD,GAAQ,CAAEhsD,IAAK,IAAM05D,EAA6Bva,EAAQ6M,GAAU,EAAM5uC,KAAc+hC,KAIzF,EAAA0G,iCACRlgD,IACC,MAAMi0D,EAAsE,IAAnDj0D,EAAKyX,WAAWowB,OAAO,oBAAqB,GACrE,OAAO,EAAAZ,4BACH,CAAC6hB,QAAS,GAAIkL,SAAU,EAAGC,kBAAiBjL,YAAa,GAAI3a,QAAS,GAAI4a,KAAM,MAQ7E,EAAAnI,QACT,CAAC4C,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GACf,MAAM6M,EACF,CAACjvD,KAAM,UAAWwE,WAAY,CAAC,KAAM69C,WAAY,CAAC,EAAAe,YAAY6B,UAAWxC,UAAWpiC,EAAWqvB,UAGnG,MAAO,CAFQ4c,EAAiB5nD,IAAI,OAAD,wBAC3BuqD,GAAQ,CAAEhsD,IAAK,IAAMi6D,EAAyB9a,EAAQ6M,GAAU,EAAO5uC,KAAc+hC,KAItF,EAAAuH,uBACR/gD,IACC,MAAM8oD,EAAU9oD,EAAKyX,WAAWqwB,UAAU,WAAY,UAChDksB,EAAWh0D,EAAKyX,WAAWowB,OAAO,YAAa,GAC/CmhB,EAAchpD,EAAKyX,WAAWwwB,QAAQ,gBACtCoG,EAAUruC,EAAKyX,WAAWwwB,QAAQ,UAAW,IAC7CghB,EAAOjpD,EAAKyX,WAAWwwB,QAAQ,OAAQ,IACvCssB,EAAev0D,EAAKyX,WAAWowB,OAAO,gBAAiB,GACvDkhB,EAAY/oD,EAAKyX,WAAWwwB,QAAQ,YAAa,IAGvD,GAAqB,IAAjBssB,EACF,MAAM,IAAI38D,MAAM,+DAElB,GAAiB,IAAbo8D,EACF,MAAM,IAAIp8D,MAAM,sEAGlB,OAAO,EAAAqvC,4BACH,CAAC6hB,UAASkL,WAAUC,iBAAiB,EAAOjL,cAAa3a,UAAS4a,OAAMsL,eAAcxL,eAGhG,MAAMuL,EACF,CAAC9a,EAAkB6M,EAA2B6N,EAA2Bz8C,KAEnE,MAAOkzC,EAAoBlF,GACvB0O,EAAwC3a,EAAQ/hC,EAAYy8C,GAM1D7d,EAAe,WADDge,EAAoB7a,EAAO,GAAGv/C,KAAM0wD,EAJ5C,2CAGA,GAC0E,gBAItF,OAAO,OAAP,wBACKtE,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,kBAIN8d,EACF,CAAC3a,EAAkB/hC,EAAqDy8C,KAElE,MAAM1N,EAAahN,EAAO,GAAGv/C,KAAK4G,QAC5B2zD,EAAe/4D,OAAOQ,eAAeC,KAAKub,EAAY,aACtDuxC,EAAcvxC,EAAWuxC,YAAYnoD,QACrCwtC,EAAU52B,EAAW42B,QAAQxtC,QAC7BkoD,EAAsByL,EAAgB/8C,EAAiCsxC,UAAUloD,QAAU,GAC3FooD,EAAOxxC,EAAWwxC,KAAKpoD,QAC7B,EAAAyqD,aAAamJ,qBAAqBP,EAAkB1N,EAAYwC,EAAa3a,EAAS0a,EAAWE,GAEjG,MAAMxD,EAAc,EAAA6F,aAAaoJ,uBAC7BR,EAAkB1N,EAAYnY,EAAS0a,EAAWC,EAAaC,EAAMxxC,EAAWqxC,SAE9E0C,EAAgB/vD,OAAOorC,OAAO,GAAIpvB,GAMxC,OALI+8C,EACF/4D,OAAOorC,OAAO2kB,EAAe,CAACxC,cAAa3a,UAAS4a,OAAMF,YAAWjiB,SAAUrvB,EAAWqvB,WAE1FrrC,OAAOorC,OAAO2kB,EAAe,CAACxC,cAAa3a,UAAS4a,OAAMniB,SAAUrvB,EAAWqvB,WAE1E,CAAC0kB,EAAe/F,IAG3BkP,EAA0B,CAC9B7L,QAAS,GACTkL,SAAU,EACVC,iBAAiB,EACjBjL,YAAa,GACb3a,QAAS,GACT4a,KAAM,GACNsL,aAAc,EACdxL,UAAW,GACXjiB,SAAU,IAGN8tB,EAAwB,CAC5Bx9D,KAAM,gBACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAGd,EAAA8D,cAAgB,CAACuD,EAAyClK,KACrEmK,EAAenK,GAOR,CANQkK,EAAiB5nD,IAAI,OAAD,wBAE1B84D,GAAqB,CACxBv6D,IAAK,IAAMi6D,EAAyB9a,EAAQob,GAAuB,EAAMD,KAE3Enb,KAIN,MAAMmK,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,8BAElB,GAAuB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KAC5C,MAAM,IAAInC,MAAM,wBAIdy8D,EACF,CAACQ,EAA8Bp9C,EAAmCq9C,EAAaV,EAAa7xC,KAEtF,MAAM6rB,EAAOymB,EAAU/8D,OACvB,GAAI2f,EAAWuxC,YAAYlxD,QAAU,EAAG,CACtC,MAAMi9D,EAAKt9C,EAAWuxC,YAAYvxC,EAAWuxC,YAAYlxD,OAAS,GAC5Dk9D,EAAKv9C,EAAW42B,QAAQ52B,EAAW42B,QAAQv2C,OAAS,GACpDm9D,EAAUx9C,EAAWwxC,KAAKxxC,EAAWwxC,KAAKnxD,OAAS,EAAI,GACvDo9D,EAAQz9C,EAAWwxC,KAAKxxC,EAAWwxC,KAAKnxD,OAAS,GACjDq9D,EAAON,EAAUzmB,EAAO,GAC9B,IAAIgnB,EAAQ,GACRC,EAAQ,GACRC,EAAW,GAmBf,GAjBEF,EADEH,EAAUC,IAAU,EACd,mCACUH,4BAChB3mB,oBAAuBA,YAAe4mB,OAAQC,6BAC1C7mB,mBAAsBA,aAAgB+mB,mFAI5CL,iBAGQ,mCACUC,4BAChB3mB,oBAAuBA,YAAe4mB,OAAQC,uBAChDH,iBAIoC,IAAlCr9C,EAAWuxC,YAAYlxD,OAAc,CACvC,MAAMy9D,EAAK99C,EAAWuxC,YAAYvxC,EAAWuxC,YAAYlxD,OAAS,GAC5D09D,EAAK/9C,EAAW42B,QAAQ52B,EAAW42B,QAAQv2C,OAAS,GACpD29D,EAAUh+C,EAAWwxC,KAAKxxC,EAAWwxC,KAAKnxD,OAAS,EAAI,GACvD49D,EAAQj+C,EAAWwxC,KAAKxxC,EAAWwxC,KAAKnxD,OAAS,GACjD69D,EAAOd,EAAUzmB,EAAO,GAE5BinB,EADEI,EAAUC,IAAU,EACd,qCACUH,8BAChBnnB,oBAAuBA,YAAeonB,OAAQC,+BAC1CrnB,mBAAsBA,aAAgBunB,+BACpCZ,6DAKA,qCACUQ,8BAChBnnB,oBAAuBA,YAAeonB,OAAQC,uBAGlDH,EAAW,0BAmBb,MAdoB,uCACIlnB,0BAClBA,kEAGQ7rB,yCAEd8yC,gBACAD,gBACAE,gBACAlB,gDAKK,CACL,MAAMnF,EAAa,EAAA5e,UAAU71C,KAAKid,EAAWuxC,aACvC4M,EAAgB,EAAAvlB,UAAUkM,eAAe9kC,EAAWuxC,aACpD6M,EAAcD,EAAc99D,OAC5Bg+D,EAAWr+C,EAAWwxC,KAAKnxD,OAC3Bi+D,EAA0Bpe,EAAgBke,GAC1CG,EAAgBC,EAAUpB,EAAW,aACrCqB,EAAWD,EAAUx+C,EAAWwxC,KAAM,QACtCkN,EAAoBF,EAAUL,EAAe,iBAC7CQ,EAAcH,EAAUx+C,EAAW42B,QAAS,WAElD,IAAIgoB,EAAU,GAiDd,OA/CEA,EAHc5+C,EAAWwxC,KAAKqN,QAAO,CAACxT,EAAKyT,IAAQzT,EAAMyT,IAG/C,oMAQVzB,iBAGU,4BAEZA,cAGoB,aACtBiB,wCAC0B3nB,0BAClBA,6DAEKynB,2BACFC,gCACK1nB,oCACIynB,8BACNA,kBACZK,gBACAF,gBACAI,gBACAD,gCAEc5zC,4FAGM0sC,2HAGL7gB,OAAUynB,UAAoBznB,4DACTA,OAAUynB,oCAC3BznB,OAAUynB,oCACzBQ,6BAEJjC,oDASN6B,EAAY,CAACO,EAA0BC,KAC3C,IAAIze,EAAQ,GACZ,IAAK,IAAIngD,EAAI,EAAGA,EAAI2+D,EAAM1+D,OAAQD,IAChCmgD,GAAS,WACLye,KAAa5+D,QAAQ2+D,EAAM3+D,YAGjC,OAAOmgD,GAGHL,EAAmBvJ,GAAyB,4CACTA,uBAA0BA,0BACzDA,4DAGgBA,wHAIZA,yB,8MC1Wd,eAEA,SAEA,UAEA,UAUMkoB,EACF,CAAC5S,EAAyClK,EAAkB/hC,EAA8BrgB,EACzFs/D,KACC/S,EAAenK,GAEf,MAAMmd,EAAwB,CAC5Bv/D,OACAwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAW3B,MAAO,CARQqH,EAAiB5nD,IAAI,OAAD,wBAE1B66D,GAAqB,CACxB9c,UAAWpiC,EAAWqvB,SACtBzsC,IAAK,IACDu8D,EAAwBlT,EAAkBlK,EAAQ/hC,EAAYrgB,EAAMs/D,EAAUC,KAEpFnd,KAIG,EAAA8H,sBAAmEthD,IAC9E,MAAM62D,EAAO72D,EAAKyX,WAAWwwB,QAAQ,OAAQ,IACvC6uB,EAAqD,IAA1C92D,EAAKyX,WAAWowB,OAAO,WAAY,GACpD,OAAO,EAAAZ,4BAA4B,CAAC4vB,OAAMC,cAG5C,MAAMF,EACF,CAAC57D,EAAgCw+C,EAAkB/hC,EAA8BrgB,EAAcs/D,EAC9FC,KACC,MAAMlR,EAAwB,GACxBsR,EAAQvd,EAAO,GAAGv/C,KAAKnC,QAAU,EAEjCk/D,EAAU,GAEVH,EAAO,EAAAxmB,UAAU4mB,cAAcx/C,EAAWo/C,KAAMrd,EAAO,GAAGv/C,KAAKnC,QAC/Do/D,EAAMR,EAASld,EAAQqd,GAC7B,IAAIM,EAAYD,EAAI,GAEpB,IAAK,IAAI50D,EAAI,EAAGA,EAAIk3C,EAAO,GAAGv/C,KAAKnC,OAAQwK,IAErCu0D,EAAKp+D,QAAQ6J,IAAM,GAAqB,IAAhBu0D,EAAK/+D,QAC3B2f,EAAWq/C,UACbrR,EAAYztD,KAAK,GAInBm/D,EAAY,wBACD70D,WAAWA,OAAOk3C,EAAO,GAAGv/C,KAAKqI,QAAQA,gCACvCA,SAASA,mBAClB60D,mBAGJH,EAAQh/D,KAAK,YAAYsK,kBAAkBmjD,EAAY3tD,YAEvD2tD,EAAYztD,KAAKwhD,EAAO,GAAGv/C,KAAKqI,KAIpC,MAEM+zC,EAAe,uCAFPoP,EAAY3tD,QAAU,qFAKnBi/D,8CACbC,EAAQz5D,KAAK,kBACb25D,EAAI,oDACJC,cACAD,EAAI,gFAIR,OAAO,OAAP,wBACKP,GAAqB,CACxBx6B,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,kBAIFsN,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,+BAGlB,IAA8C,IAA1C,EAAAu2D,aAAa11D,QAAQ+gD,EAAO,GAAGz/C,MACjC,MAAM,IAAInC,MAAM,wBAIP,EAAA+pD,UACT,CAAC+B,EAAyClK,EAAkB/hC,IAEnD6+C,EAAO5S,EAAkBlK,EAAQ/hC,EAAY,aADzB,IAAgB,CAAC,eAAgB,yBAA0B,MAI/E,EAAA+pC,WACT,CAACkC,EAAyClK,EAAkB/hC,IAWnD6+C,EAAO5S,EAAkBlK,EAAQ/hC,EAAY,cAVzB,CAAC+hC,EAAkBqd,KAC5C,IAAIr8D,EAAO,EACX,IAAK,IAAI8H,EAAI,EAAGA,EAAIk3C,EAAO,GAAGv/C,KAAKnC,OAAQwK,KACrCu0D,EAAKp+D,QAAQ6J,IAAM,GAAqB,IAAhBu0D,EAAK/+D,UAC/B0C,GAAQg/C,EAAO,GAAGv/C,KAAKqI,IAI3B,MAAO,CAAC,eAAgB,yBAA0B,YAAY9H,UAKzD,EAAA+mD,UACT,CAACmC,EAAyClK,EAAkB/hC,IAWnD6+C,EAAO5S,EAAkBlK,EAAQ/hC,EAAY,aAVzB,CAAC+hC,EAAkBqd,KAC5C,MAAMO,EAAU,GAChB,IAAK,IAAI90D,EAAI,EAAGA,EAAIk3C,EAAO,GAAGv/C,KAAKnC,OAAQwK,KACrCu0D,EAAKp+D,QAAQ6J,IAAM,GAAqB,IAAhBu0D,EAAK/+D,SAC/Bs/D,EAAQp/D,KAAK,YAAYsK,WAI7B,MAAO,CAAC,GAAG80D,EAAQ75D,KAAK,+BAAgC,oCAAqC,OAKxF,EAAAkkD,UACT,CAACiC,EAAyClK,EAAkB/hC,IAWnD6+C,EAAO5S,EAAkBlK,EAAQ/hC,EAAY,aAVzB,CAAC+hC,EAAkBqd,KAC5C,MAAMO,EAAU,GAChB,IAAK,IAAI90D,EAAI,EAAGA,EAAIk3C,EAAO,GAAGv/C,KAAKnC,OAAQwK,KACrCu0D,EAAKp+D,QAAQ6J,IAAM,GAAqB,IAAhBu0D,EAAK/+D,SAC/Bs/D,EAAQp/D,KAAK,YAAYsK,WAI7B,MAAO,CAAC,GAAG80D,EAAQ75D,KAAK,+BAAgC,oCAAqC,OAKxF,EAAAmkD,WACT,CAACgC,EAAyClK,EAAkB/hC,IAEnD6+C,EAAO5S,EAAkBlK,EAAQ/hC,EAAY,cADzB,IAAgB,CAAC,eAAgB,yBAA0B,MAI/E,EAAA4pC,aACT,CAACqC,EAAyClK,EAAkB/hC,IAEnD6+C,EAAO5S,EAAkBlK,EAAQ/hC,EAAY,gBADzB,IAAgB,CAAC,eAAgB,yBAA0B,yBAI/E,EAAAmqC,mBACT,CAAC8B,EAAyClK,EAAkB/hC,IAEnD6+C,EAAO5S,EAAkBlK,EAAQ/hC,EAAY,sBADzB,IAAgB,CAAC,wBAAyB,oCAAqC,O,8JC1KhH,gBACA,UAEA,UAEA,UAyEa,EAAAslC,uCACT,CAAC/hD,EAAgCq8D,EAAiBC,KAChD,MAAMjR,EAzEiC,CAACiR,IAC1C,CAAElgE,KAAM,mBAAoBqiD,WAAY,CAAC,EAAAe,YAAYC,QAAS7+C,WAAY,CAAC,KAAMi+C,UAAW,GAAGyd,MAwE5EC,CAAqCD,GACtD,OAAO,OAAP,wBAAWjR,GAAQ,CAAEhsD,IAAK,IAtE5B,EAACW,EAAgCq8D,EAAiBhR,EAA2BiR,KAEvE,MAAME,EAAeH,EAAQp9D,KACvB2iD,EAAsB0a,EAE5B,IAAIG,EAAW,GACf,IAAK,IAAI5/D,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI6/D,EAAe,GACnB,OAAQ7/D,GACN,KAAK,EACH6/D,EAAe,qBACf,MACF,KAAK,EACHA,EAAe,4CACf,MACF,KAAK,EACHA,EAAe,4CACf,MACF,KAAK,EACHA,EAAe,8CACf,MACF,QACE,MAAM,IAAI9/D,MAGd6/D,GAAY,aACdC,cACA7/D,EAAI,EAAI,sDAAwD,+OAMvDA,iFAETA,EAAI,EAAI,IAAM,aAGd,MAAM42C,EAAO,EAAAvB,QAAQlyC,EAAQ6qC,QAAQxuC,QAAQyzC,UAAUpzB,SAEjD2+B,EAAe,WAsE/B,SAAgClX,GAC9B,MAAMkP,EAAU,EAAAgC,UAAUkM,eAAepd,GACnCgP,EAAS,CAAC,IAAK,IAAK,KAY1B,MAAO,oEAVwBE,EACKxxC,KAAI,CAAC2xC,EAAQ32C,IAKL,OAJcs2C,EAAOt2C,gBAAmB22C,MACjC32C,IAAMw2C,EAAQv2C,OAAS,EACjC,OAAOq2C,EAAOt2C,EAAI,gBAAmBs2C,EAAOt2C,QAAQ22C,IACpD,YAAYL,EAAOt2C,QAAQ22C,SAGhCjxC,KAAK,+CAjFnCo6D,CAAuBH,aA2F/B,SAAiCr4B,GAC/B,MAAMkP,EAAU,EAAAgC,UAAUkM,eAAepd,GAEzC,MAAO,+FAGekP,EAAQ,mBAAmBA,EAAQ,wBAhGnDupB,CAAwBhb,aACxB,EAAAkK,4KAQalK,EAAoB,2BACpBA,EAAoB,kBAE/B6a,cACAhpB,EAAKtS,kCAIL,OAAO,OAAP,wBACKkqB,GAAQ,CACXlqB,OAAQ,CAACliC,KAAM2iD,EAAqB7iD,KAAMs9D,EAAQt9D,KAAMq/C,YAAa,EAAAoB,YAAYC,QACjFpE,eACAC,SAAS,KAOiBuhB,CAAiC78D,EAASq8D,EAAShR,EAAUiR,MAGnG,yBAA8Bn4B,GAC5B,GAAqB,IAAjBA,EAAMrnC,OACR,MAAO,CAAC,EAAG,EAAG,GAGhB,IAAIggE,EAAQ,EACZ,IAAK,IAAIjgE,EAAI,EAAGA,EAAIsnC,EAAMrnC,OAAS,IAAKD,EACtCigE,GAAS34B,EAAMtnC,GAEjB,MAAO,CAACigE,EAAO34B,EAAMrnC,OAAS,EAAIqnC,EAAMA,EAAMrnC,OAAS,GAAK,EAAGqnC,EAAMA,EAAMrnC,OAAS,KActF,0BAA+BmC,EAAyBkiD,GACtD,IAAI4b,GAAiB,EAUrB,OAREA,EADkB,IAAhB99D,EAAKnC,QAAwC,IAAxBqkD,EAAarkD,SAE3BmC,EAAKnC,OAAS,GAAKqkD,EAAarkD,OAAS,EACjCmC,EAAKA,EAAKnC,OAAS,KAAOqkD,EAAaA,EAAarkD,OAAS,GAE7DmC,EAAKA,EAAKnC,OAAS,KAAOqkD,EAAaA,EAAarkD,OAAS,IAC1EmC,EAAKA,EAAKnC,OAAS,KAAOqkD,EAAaA,EAAarkD,OAAS,IAG5DigE,I,6FCtHT,gBAGa,EAAAj9D,QAAU,CAACE,EAAgCw+C,KACtD,MAAM2C,EAAe,EAAA9L,UAAU2nB,sBAAsBxe,EAAO,GAAGv/C,KAAMu/C,EAAO,GAAGia,aAC/E,OAAIz4D,EAAQ6qC,QAAQgF,KACX,CAAC7vC,EAAQwhD,cAAchD,EAAO,GAAI2C,IAElC,CAACnhD,EAAQkhD,gBAAgB1C,EAAO,GAAI2C,M,mJCN/C,gBAEA,UACA,UAEA,UACA,UAEM8b,EAAwB,CAC5B7gE,KAAM,SACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAYC,SAGd,EAAAqH,OACT,CAAC4B,EAAyClK,EAAkB/hC,KAC1D,EAAAksC,eAAenK,EAAQ/hC,GAQhB,CAPQisC,EAAiB5nD,IAAI,OAAD,wBAE1Bm8D,GAAqB,CACxBpe,UAAWpiC,EAAWqvB,SACtBzsC,IAAK,IAAM69D,EAA8BxU,EAAkBlK,EAAQ/hC,KAErE+hC,KAIG,EAAAuI,yBACR/hD,GAAyC,EAAAm4D,wBAAwBn4D,EAAM,IAE/D,EAAAgiD,yBACRhiD,GAAyC,EAAAm4D,wBAAwBn4D,EAAM,IAE5E,MAAMk4D,EACF,CAACxU,EAAyClK,EAAkB/hC,KAC1D,MAAMg3B,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,UACzD0gD,EAAQ3S,GAAe4S,EAAc7e,EAAQ/hC,GAIpD,GADI2gD,EAAOE,OAAOz5D,GAAoB,IAANA,KAAmD,uBAAvC4Y,EAAW8gD,wBAErD,OAAO,OAAP,wBACKN,GAAqB,CACxB97B,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAYC,QAC3EnE,SAAS,EACTD,aAAc,+CACO5H,EAAKC,iDACdD,EAAKtS,mCAKrB,MAAM1hC,EAAMgrD,EAAY3tD,OACxB,GAAI2C,EAAM,EACR,MAAM,IAAI7C,MAAM,kDAAkD6C,KAGpE,MAAM+9D,EAAe/S,EAAYhrD,EAAM,GACjCg+D,EAAchT,EAAYhrD,EAAM,GAEhC+rD,EAAahN,EAAO,GAAGv/C,KAC7B,GAAIQ,IAAQ+rD,EAAW1uD,OACrB,MAAM,IAAIF,MAAM,uCAAuC4uD,EAAW1uD,mBAAmB2C,KAEvF,MAAMi+D,EAAclS,EAAW/rD,EAAM,GAC/Bk+D,EAAanS,EAAW/rD,EAAM,GAE9Bm+D,EAAeR,EAAO39D,EAAM,GAC5Bo+D,EAAcT,EAAO39D,EAAM,GAEjC,IAAIq+D,EAAqB,GAEzB,GAAwB,WAApBrhD,EAAWq0C,KAEb,MAAM,IAAIl0D,MAAM,2CAA2C6f,EAAWq0C,SAExE,OAAQr0C,EAAW8gD,yBACjB,IAAK,aACHO,EAAqB,mKAKrB,MACF,IAAK,aACHA,EAAqB,iLAKrB,MACF,IAAK,gBACHA,EAAqB,8GAEeL,cAAwBD,cAAyBC,2CACjED,6DACiBG,cAAuBD,cAAwBC,2CAChED,+KAKpB,MACF,QAEE,MAAM,IAAI9gE,MAAM,8FACS6f,EAAW8gD,4BAGxC,MAAM1H,EAAiB,EAAA/gB,kBAAkBr1C,GAEnC47C,EAAe,2CACaqiB,QAAkBC,kDAChBC,QAAmBC,QAAkBD,QAAmBC,sBAHtE,EAAA/R,oCAKdgS,iMAKIjI,s8BAiByB2H,EAAe,gDACfC,EAAc,urEAsCvChqB,EAAKtS,oDAGjB,OAAO,OAAP,wBACK87B,GAAqB,CACxB97B,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAYC,QAC3EnE,SAAS,EACTD,kBAKFgiB,EAAgB,CAAC7e,EAAkB/hC,KACvC,MACMy4C,EADI1W,EAAO,GACDv/C,KAEhB,IACI8+D,EADAX,EAAS3gD,EAAW2gD,OAExB,GAAsB,IAAlBA,EAAOtgE,OAAc,CACvB,MAAMkhE,EAAexf,EAAO/hC,EAAWwhD,gBACvC,GAAID,GAAsC,IAAtBA,EAAax+D,KAAY,CAC3C,GAAIg/C,EAAO/hC,EAAWyhD,eACpB,MAAM,IAAIthE,MAAM,0DAElBwgE,EAASe,EAAgBH,EAAcvhD,EAAWq0C,KAAMr0C,EAAW2hD,cAC9D,CACL,MAAMC,EAAc7f,EAAO/hC,EAAWyhD,eACtC,IAAKG,GAAoC,IAArBA,EAAY7+D,KAC9B,MAAM,IAAI5C,MAAM,qDAGlBmhE,EAAc7+D,MAAMtB,KAAKygE,EAAY5F,aACrC2E,EAASkB,EAA8BP,EAAa7I,EAAOz4C,EAAWq0C,KAAMr0C,EAAW2hD,gBAGzF,GAAI5f,EAAO/hC,EAAWyhD,eACpB,MAAM,IAAIthE,MAAM,0DAIpB,MAAM2hE,EAAQR,GAAgB7I,EAAMrzD,KAAI,CAACpC,EAAK5C,IAAMgX,KAAK2V,MAAM/pB,EAAM29D,EAAOvgE,MAE5E,MAAO,CAACugE,EAAQmB,IAGZJ,EAAkB,CAACjV,EAAe4H,EAAcsN,KACpD,MAAMhB,EAASl+D,MAAMtB,KAAKsrD,EAAM3mB,WAEhC,OADA,EAAAi8B,iBAAiBpB,EAAQtM,EAAMsN,GACxBhB,GAGHkB,EACF,CAACC,EAA0BrJ,EAA0BpE,EAAcsN,KACjE,MAAMthE,EAASo4D,EAAMp4D,OACfsgE,EAAS,IAAIl+D,MAAcpC,GAEjC,IAAK,IAAID,EAAI,EAAG2qB,EAAM1qB,EAAQD,EAAI2qB,EAAK3qB,IACrC,GAAiB,IAAbq4D,EAAMr4D,GAAU,CAClB,GAAiB,IAAb0hE,EAAM1hE,GACR,MAAM,IAAID,MAAM,0DAElBwgE,EAAOvgE,GAAK,OAEZugE,EAAOvgE,GAAK0hE,EAAM1hE,GAAKq4D,EAAMr4D,GAIjC,OADA,EAAA2hE,iBAAiBpB,EAAQtM,EAAMsN,GACxBhB,I,4FCtPb,gBAGa,EAAAj5B,MAAQ,CAACukB,EAAyClK,KAC7DmK,EAAenK,GACR,CAAC,IAAI,EAAA7/C,OAAO,CAAC6/C,EAAO,GAAGv/C,KAAKnC,QAAS,aAASH,OAAWA,EAAW,IAAI2B,WAAWkgD,EAAO,GAAGv/C,SAGtG,MAAM0pD,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,6B,8HCVpB,eAEA,SAEA,UAEA,UAQM6hE,EAAuB,CAC3BriE,KAAM,QACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAGd,EAAAx7C,MACT,CAAC6iD,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GAQR,CAPQkK,EAAiB5nD,IAAI,OAAD,wBAE1B29D,GAAoB,CACvB5f,UAAWpiC,EAAWqvB,SACtBzsC,IAAK,IAAMq/D,EAAuBhW,EAAkBlK,EAAO,GAAI/hC,KAEjE+hC,KAIG,EAAA4I,qBAAiEpiD,IAC5E,MAAM25D,EAAS35D,EAAKyX,WAAWwwB,QAAQ,UACjC2xB,EAAO55D,EAAKyX,WAAWwwB,QAAQ,QAC/B4uB,EAAO72D,EAAKyX,WAAWwwB,QAAQ,OAAQ,IAC7C,OAAO,EAAAhB,4BAA4B,CAAC0yB,SAAQC,OAAM/C,UAGpD,MAAM6C,EACF,CAAChW,EAAyCxnB,EAAezkB,KACvD,MAAMo/C,EAAmC,IAA3Bp/C,EAAWo/C,KAAK/+D,OAAgBokC,EAAMjiC,KAAK4G,MAAM,GAAGhE,KAAI,CAAC2mB,EAAK3rB,IAAMA,IAAK4f,EAAWo/C,KAC5FgD,EAAiB,EAAAxpB,UAAU4mB,cAAcJ,EAAM36B,EAAMjiC,KAAKnC,QAC1D6hE,EAASliD,EAAWkiD,OAAO98D,KAAI,CAAC0lB,EAAO1qB,IACvC0qB,EAAQ2Z,EAAMjiC,KAAK4/D,EAAehiE,IAAM,EACnCqkC,EAAMjiC,KAAK4/D,EAAehiE,IAE5B,EAAAw4C,UAAU2d,cAAczrC,EAAO2Z,EAAMjiC,KAAK4/D,EAAehiE,OAE5D+hE,EAAOniD,EAAWmiD,KAAK/8D,KAAI,CAAC2lB,EAAK3qB,IACjC2qB,EAAM0Z,EAAMjiC,KAAK4/D,EAAehiE,IAAM,EACjCqkC,EAAMjiC,KAAK4/D,EAAehiE,IAE5B,EAAAw4C,UAAU2d,cAAcxrC,EAAK0Z,EAAMjiC,KAAK4/D,EAAehiE,OAG1D4tD,EAAcvpB,EAAMjiC,KAAK4G,QAEzBi5D,EAAqB,GAC3B,IAAK,IAAIjiE,EAAI,EAAGA,EAAIgiE,EAAe/hE,OAAQD,IACzC4tD,EAAYoU,EAAehiE,IAAM+hE,EAAK/hE,GAAK8hE,EAAO9hE,GAC9C8hE,EAAO9hE,GAAK,GACdiiE,EAAS9hE,KAAK,aAAa6hE,EAAehiE,UAAU8hE,EAAO9hE,OAI/D,MACMw+C,EAAe,uCADRoP,EAAY3tD,uBAGrBgiE,EAASv8D,KAAK,sDAGlB,OAAO,OAAP,wBACKk8D,GAAoB,CACvBt9B,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UACvEhG,kBAIFsN,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,2BAElB,IAA8C,IAA1C,EAAAu2D,aAAa11D,QAAQ+gD,EAAO,GAAGz/C,MACjC,MAAM,IAAInC,MAAM,wBAIP,EAAAuqD,SAAW,CAACuB,EAAyClK,KAChEugB,EAAkBvgB,GAClB,MAAM/hC,EAAauiD,EAAkCtW,EAAkBlK,GAQvE,MAAO,CAPQkK,EAAiB5nD,IAAI,OAAD,wBAE1B29D,GAAoB,CACvB5f,UAAWpiC,EAAWqvB,SACtBzsC,IAAK,IAAMq/D,EAAuBhW,EAAkBlK,EAAO,GAAI/hC,KAEjE,CAAC+hC,EAAO,OAId,MAAMwgB,EACF,CAACtW,EAAyClK,KACxC,IAAKkK,EAAiB7d,QAAQ0X,cAAc/D,EAAO,GAAGoB,UACjD8I,EAAiB7d,QAAQ0X,cAAc/D,EAAO,GAAGoB,SACjDpB,EAAO1hD,QAAU,IAAM4rD,EAAiB7d,QAAQ0X,cAAc/D,EAAO,GAAGoB,SACxEpB,EAAO1hD,QAAU,IAAM4rD,EAAiB7d,QAAQ0X,cAAc/D,EAAO,GAAGoB,QAC3E,MAAM,IAAIhjD,MAAM,4CAGlB,GAAI4hD,EAAO1hD,QAAU,GAAK0hD,EAAO,GAAGia,YAAYwG,MAAMpiE,GAAoB,IAANA,IAClE,MAAM,IAAID,MAAM,oDAGlB,MAAM+hE,EAASz/D,MAAMtB,KAAK4gD,EAAO,GAAGia,aAC9BmG,EAAO1/D,MAAMtB,KAAK4gD,EAAO,GAAGia,aAC5BoD,EAAOrd,EAAO1hD,QAAU,EAAIoC,MAAMtB,KAAK4gD,EAAO,GAAGia,aAAe,GAEtE,MAAO,CAACkG,SAAQC,OAAM/C,OAAM/vB,SADX,GAAG+vB,KAAQ8C,KAAUC,MAItCG,EAAqBvgB,IACzB,IAAKA,GAAUA,EAAO1hD,OAAS,GAAK0hD,EAAO1hD,OAAS,EAClD,MAAM,IAAIF,MAAM,yBAElB,GAAuB,UAAnB4hD,EAAO,GAAGz/C,MAA8C,IAA1By/C,EAAO,GAAGv/C,KAAKnC,OAC/C,MAAM,IAAIF,MAAM,uBAElB,GAAuB,UAAnB4hD,EAAO,GAAGz/C,MAA8C,IAA1By/C,EAAO,GAAGv/C,KAAKnC,OAC/C,MAAM,IAAIF,MAAM,uBAElB,GAAI4hD,EAAO1hD,QAAU,IAAyB,UAAnB0hD,EAAO,GAAGz/C,MAA8C,IAA1By/C,EAAO,GAAGv/C,KAAKnC,QACtE,MAAM,IAAIF,MAAM,uBAElB,GAAI4hD,EAAO1hD,QAAU,IAAyB,UAAnB0hD,EAAO,GAAGz/C,MAA8C,IAA1By/C,EAAO,GAAGv/C,KAAKnC,QACtE,MAAM,IAAIF,MAAM,yB,gKCxIpB,eAIA,UACA,UAEA,UACA,UAMMsiE,EAAmC,CACvC9iE,KAAM,oBACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAGrB8d,EAAqC,CACzC/iE,KAAM,sBACNwE,WAAY,CAAC,IAAK,OAClB69C,WAAY,CAAC,EAAAe,YAAY6B,SAAU,EAAA7B,YAAY6B,WAG3C+d,EAAyB,CAC7BhjE,KAAM,UACNwE,WAAY,CAAC,IAAK,MAAO,QACzB69C,WAAY,CAAC,EAAAe,YAAY6B,SAAU,EAAA7B,YAAY6B,SAAU,EAAA7B,YAAY6B,WAG1D,EAAAgG,QACT,CAACqB,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GAEf,MAAMgN,EAAahN,EAAO,GAAGv/C,KAAK4G,QAC5B0lD,EAAO,EAAAlW,UAAU2d,cAAcv2C,EAAW8uC,KAAMC,EAAW1uD,QAC3DuiE,EAAkB,EAAAhqB,UAAUiqB,gBAAgB9T,EAAYD,GACxDgU,EAAe,EAAAlqB,UAAUmqB,kBAAkBhU,EAAYD,GAG7D,OADekU,EAAe/W,EAAkBlK,EAAQ/hC,EAAY4iD,EAAiBE,IAI9E,EAAAjY,uBACRtiD,GAAwC,EAAAinC,4BAA4B,CAACsf,KAAMvmD,EAAKyX,WAAWowB,OAAO,OAAQ,KAElG,EAAA2a,0BACRxiD,GAAwC,EAAAinC,4BAA4B,CAACsf,KAAMvmD,EAAKyX,WAAWowB,OAAO,QAAS,KAQnG,EAAA0a,WACT,CAACmB,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GAEf,MAAMgN,EAAahN,EAAO,GAAGv/C,KAAK4G,QAC5B0lD,EAAO,EAAAlW,UAAU2d,cAAcv2C,EAAW8uC,KAAMC,EAAW1uD,QAC3Ds2C,EAAOoY,EAAW1uD,OAElB4iE,EAAuBnU,IAASnY,EAAO,EACvCusB,EAAiC,GACvC,IAEIC,EAFA1O,EAAiB,GACjB2O,EAA6B,GAG7BH,IACFxO,EAAOhyD,MAAMtB,KAAK,CAACd,OAAQs2C,IAAOvxC,KAAI,CAAC4C,EAAG5H,IAAMA,IAGhDq0D,EAAK3F,GAAQnY,EAAO,EACpB8d,EAAK9d,EAAO,GAAKmY,EAEjB2F,EAAKrvD,KAAIsC,GAAKw7D,EAAqB3iE,KAAKwuD,EAAWrnD,MAEnDy7D,EAAqB,EAAA3zB,4BAA4B,CAACilB,SAClD2O,EAAmB,EAAArnB,UAAUkQ,EAAkBlK,EAAQohB,IAGzD,MAAMP,EAAkBK,EAAsB,EAAArqB,UAAUiqB,gBAAgBK,EAAsBvsB,EAAO,GACvD,EAAAiC,UAAUiqB,gBAAgB9T,EAAYpY,EAAO,GACrFmsB,EAAeG,EAAsB,EAAArqB,UAAUmqB,kBAAkBG,EAAsBvsB,EAAO,GACzD,EAAAiC,UAAUmqB,kBAAkBhU,EAAYpY,EAAO,GAEpFjS,EAASs+B,EACX/W,EAAkBgX,EAAsBG,EAAmBrhB,EAAQ/hC,EAAY4iD,EAAiBE,GAEpG,OAAIG,EACqB,EAAAlnB,UAAUkQ,EAAkBvnB,EAAQy+B,GAGpDz+B,GAIf,MAAMs+B,EACF,CAAC/W,EAAyClK,EAAkB/hC,EAA+B4iD,EAC1FE,KACC,MAAMO,EACFC,EAA4BrX,EAAkBlK,EAAO,GAAI6gB,EAAiBE,EAAc,CAACF,IACvFpnD,EAAMywC,EAAiB5nD,IAAI,OAAD,wBACxBo+D,GAAgC,CAAErgB,UAAWpiC,EAAWqvB,SAAUzsC,IAAK,IAAMygE,IACjFthB,GAEEwhB,EAA0BC,EAC5BvX,EAAkBlK,EAAO,GAAI6gB,EAAiBE,EAAcO,EAAsB3+B,OAAOliC,KACzF,CAACogE,IACCnW,EAAQR,EAAiB5nD,IAAI,OAAD,wBAC1Bq+D,GAAkC,CAAEtgB,UAAWpiC,EAAWqvB,SAAUzsC,IAAK,IAAM2gE,IACnF,CAACxhB,EAAO,GAAIvmC,IAEVioD,EAAqBC,EACvBzX,EAAkBlK,EAAO,GAAI6gB,EAAiBE,EAAcO,EAAsB3+B,OAAOliC,KACzF+gE,EAAwB7+B,OAAOliC,MAInC,MAAO,CAHQypD,EAAiB5nD,IAAI,OAAD,wBAC3Bs+D,GAAsB,CAAEvgB,UAAWpiC,EAAWqvB,SAAUzsC,IAAK,IAAM6gE,IACvE,CAAC1hB,EAAO,GAAIvmC,EAAKixC,MAOrB6W,EACF,CAACrX,EAAyCxnB,EAAem+B,EAAyBE,EACjF9U,KACC,MAAO8K,EAAcC,GACjB9M,EAAiBvK,+BAA+Bjd,EAAMjiC,KAAM,EAAAugD,YAAY6B,UACtEjO,EAAOqX,EAAY3tD,OAEzB,GAAIuiE,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAI3iE,MAAM,8EAGlB,GAA2B,IAAvB6tD,EAAY3tD,OACd,MAAM,IAAIF,MAAM,4CAGlB,GAAI6tD,EAAY,KAAO4U,EACrB,MAAM,IAAIziE,MAAM,4DAGlB,MAAM62C,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,SAC1D2+B,EAAe,6BACDjI,sEAC4BmsB,6CAEhB9rB,EAAKC,yDAAyD6hB,eAC1FC,kCACe+J,iEAEmB9rB,EAAKC,0EACnC6hB,MAAiBC,0GAOzB,OAAO,OAAP,wBACK0J,GAAgC,CACnC/9B,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UACvEhG,kBAOF4kB,EACF,CAACvX,EAAyCxnB,EAAem+B,EAAyBE,EACjFa,EAA4C3V,KAC3C,MAAO8K,EAAcC,GACjB9M,EAAiBvK,+BAA+Bjd,EAAMjiC,KAAM,EAAAugD,YAAY6B,UACtEjO,EAAOqX,EAAY3tD,OAEzB,GAAIuiE,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAI3iE,MAAM,8EAGlB,GAA2B,IAAvB6tD,EAAY3tD,OACd,MAAM,IAAIF,MAAM,4CAGlB,GAAI6tD,EAAY,KAAO4U,EACrB,MAAM,IAAIziE,MAAM,4DAGlB,GAAuC,IAAnCwjE,EAAwBtjE,OAC1B,MAAM,IAAIF,MAAM,0DAGlB,GAAIwjE,EAAwB,KAAOf,EACjC,MAAM,IAAIziE,MAAM,0EAGlB,MACMy+C,EAAe,6BACDjI,sEAC4BmsB,sGAI7BA,oEAPN,EAAArtB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,SASlBg3B,0EACtC6hB,MAAiBC,kEAKzB,OAAO,OAAP,wBACK2J,GAAkC,CACrCh+B,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UACvEhG,kBAIF8kB,EACF,CAACzX,EAAyCxnB,EAAem+B,EAAyBE,EACjFa,EAA4CC,KAC3C,MAAO9K,EAAcC,GACjB9M,EAAiBvK,+BAA+Bjd,EAAMjiC,KAAM,EAAAugD,YAAY6B,UACtEjO,EAAOlS,EAAMjiC,KAAKnC,OAExB,GAAIuiE,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAI3iE,MAAM,8EAGlB,GAAuC,IAAnCwjE,EAAwBtjE,QAAsD,IAAtCujE,EAA2BvjE,OACrE,MAAM,IAAIF,MAAM,0DAGlB,GAAIwjE,EAAwB,KAAOf,GAAmBgB,EAA2B,KAAOhB,EACtF,MAAM,IAAIziE,MAAM,0EAGlB,MAAMy+C,EAAe,6BACDjI,mKAGqBmiB,MAAiBC,mIAIxB+J,uTAYlC,OAAO,OAAP,wBACKH,GAAsB,CACzBj+B,OAAQ,CAACliC,KAAMiiC,EAAMjiC,KAAMF,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UACtEhG,kBAIFsN,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,6BAGlB,GAAuB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KAC5C,MAAM,IAAInC,MAAM,wB,mHCnRpB,eAIA,UAEA,UAQM0jE,EAAuB,CAC3BlkE,KAAM,QACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAGd,EAAAtnC,MACT,CAAC2uC,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GAEf,MAAM+M,EAAO,EAAAlW,UAAU2d,cAAcv2C,EAAW8uC,KAAM/M,EAAO,GAAGv/C,KAAKnC,QAC/Dy4B,EAAQgrC,EAAgB7X,EAAkBlK,EAAQ+M,EAAM9uC,GACxD0kB,EAAmB,GACzB,IAAK,IAAItkC,EAAI,EAAGA,EAAI04B,IAAS14B,EAC3BskC,EAAOnkC,KAAK0rD,EAAiB5nD,IAAI,OAAD,wBAEvBw/D,GAAoB,CACvBzhB,UAAW,GAAGpiC,EAAWqvB,YAAYjvC,IACrCwC,IAAK,IAAMmhE,EAAuB9X,EAAkBlK,EAAO,GAAI/hC,EAAY8uC,EAAM1uD,KAEnF2hD,IAGN,OAAOrd,GAGA,EAAAsmB,qBAAiEziD,IAC5E,MAAMumD,EAAOvmD,EAAKyX,WAAWowB,OAAO,OAAQ,GACtC9yB,EAAQ/U,EAAKyX,WAAWwwB,QAAQ,QAAS,IACzCwzB,EAAaz7D,EAAK07D,QAAQ5jE,OAChC,OAAO,EAAAmvC,4BAA4B,CAACsf,OAAMxxC,QAAO0mD,gBAGnD,MAAMF,EACF,CAAC7X,EAAyClK,EAAkB+M,EAAc9uC,KACxE,MAAO,CAAEuvC,GAAW,EAAA2U,UAAUC,WAAWpiB,EAAO,GAAGv/C,KAAMssD,EAAM9uC,EAAW1C,MAAO0C,EAAWgkD,YAC5F,OAAOzU,EAAQlvD,QAGf0jE,EACF,CAAC9X,EAAyCxnB,EAAezkB,EAA6B8uC,EAAczkC,KAE9F,MAAOilC,EAAQC,GAAW,EAAA2U,UAAUC,WAAW1/B,EAAMjiC,KAAMssD,EAAM9uC,EAAW1C,MAAO0C,EAAWgkD,YACxFlsD,EAASy3C,EAAQllC,GACjB2jC,EAAcsB,EAAOjlC,GAErBu0B,EAAe,qCADRoP,EAAY3tD,+BAGjByuD,SAAYh3C,iDAIpB,OAAO,OAAP,wBACK+rD,GAAoB,CACvBzhB,UAAW,GAAGpiC,EAAWqvB,YAAYhlB,IACrCqa,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UACvEhG,kBAINsN,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,6BAGlB,GAAuB,SAAnB4hD,EAAO,GAAGz/C,MAAsC,UAAnBy/C,EAAO,GAAGz/C,MAAuC,UAAnBy/C,EAAO,GAAGz/C,MAClD,WAAnBy/C,EAAO,GAAGz/C,MAAwC,UAAnBy/C,EAAO,GAAGz/C,MAAuC,WAAnBy/C,EAAO,GAAGz/C,MACpD,YAAnBy/C,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,MAAyC,SAAnBy/C,EAAO,GAAGz/C,KAC5E,MAAM,IAAInC,MAAM,yB,oIC/EpB,gBAGa,EAAA+qD,QACT,CAACe,EAAyClK,EAAkBqd,KAC1DlT,EAAenK,GACf,MAAMiM,EAAc,EAAApV,UAAUmC,aAAagH,EAAO,GAAGv/C,KAAM48D,GAE3D,MAAO,CADQnT,EAAiBxH,gBAAgB1C,EAAO,GAAIiM,KAIpD,EAAA5C,WAAa,CAACa,EAAyClK,KAClEqiB,EAAkBriB,GACX,EAAAmJ,QAAQe,EAAkB,CAAClK,EAAO,IAAKt/C,MAAMtB,KAAK4gD,EAAO,GAAGia,eAGxD,EAAA7Q,uBAA4D5iD,GACrEA,EAAKyX,WAAWwwB,QAAQ,QAE5B,MAAM0b,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,6BAGlB,GAAuB,WAAnB4hD,EAAO,GAAGz/C,KACZ,MAAM,IAAInC,MAAM,gCAIdikE,EAAqBriB,IACzB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,8BAGlB,GAAuB,UAAnB4hD,EAAO,GAAGz/C,KACZ,MAAM,IAAInC,MAAM,yB,0FCrCpB,gBAEA,UAEa,EAAAkrD,IAAM,CAACY,EAAyClK,KAC3DmK,EAAenK,GAEf,MAAMsiB,EAAqB,CACzB1kE,KAAM,MACNwE,WAAY49C,EAAO38C,KAAI,CAAClB,EAAG9D,IAAM,IAAIA,MACrC4hD,WAAY,IAAIv/C,MAAMs/C,EAAO1hD,QAAQkX,KAAK,EAAAwrC,YAAY6B,WAKxD,MAAO,CAFQqH,EAAiB5nD,IAAI,OAAD,wBAC3BggE,GAAkB,CAAEzhE,IAAK,IAAM0hE,EAAqBrY,EAAkBlK,EAAQsiB,KAAsBtiB,KAI9G,MAAMuiB,EACF,CAACrY,EAAyClK,EAAkBsiB,KAC1D,MAAMrtB,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,SAC1D+tC,EAAcjM,EAAO,GAAGv/C,KAAK4G,QAE7Bw1C,EAAe,gDADLmD,EAAO38C,KAAI,CAAClB,EAAG9D,IAAM,GAAG42C,EAAKC,cAAc72C,iBAAgB0F,KAAK,oBAI5EkxC,EAAKtS,kCAGT,OAAO,OAAP,wBACK2/B,GAAkB,CACrB3/B,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3E/F,SAAS,EACTD,kBAIFsN,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,wBAGlB,MAAME,EAAS0hD,EAAO,GAAGv/C,KAAKnC,OAC9B,IAAK,IAAID,EAAI,EAAGA,EAAI2hD,EAAO1hD,OAAQD,IAAK,CACtC,GAAIC,IAAW0hD,EAAO3hD,GAAGoC,KAAKnC,OAC5B,MAAM,IAAIF,MAAM,gCAGlB,IAAK,IAAI4L,EAAI,EAAGA,EAAI1L,EAAQ0L,IAC1B,GAAIg2C,EAAO,GAAGv/C,KAAKuJ,KAAOg2C,EAAO3hD,GAAGoC,KAAKuJ,GACvC,MAAM,IAAI5L,MAAM,iCAKtB,GAAuB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KAC5C,MAAM,IAAInC,MAAM,uBAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI2hD,EAAO1hD,OAAQD,IACjC,GAAI2hD,EAAO,GAAGz/C,OAASy/C,EAAO3hD,GAAGkC,KAC/B,MAAM,IAAInC,MAAM,kC,2FC7DtB,eAGA,UAEa,EAAAqrD,KAAO,CAACS,EAAyClK,KAC5DmK,EAAenK,GAEf,MAAMwiB,EAAsB,CAC1B5kE,KAAM,OACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAM3B,MAAO,CAHQqH,EAAiB5nD,IAAI,OAAD,wBAC3BkgE,GAAmB,CAAE3hE,IAAK,IAAM4hE,EAAsBvY,EAAkBlK,EAAQwiB,KACpFxiB,KAIN,MAAMyiB,EACF,CAACjhE,EAAgCw+C,EAAkBwiB,KACjD,MAAMxV,EAAahN,EAAO,GAAGv/C,KAAK4G,QAC5B4kD,EAAc,IAAIvrD,MAAMssD,EAAW1uD,QAEnCokE,EAAoB,GAC1B,IAAK,IAAIrkE,EAAI,EAAGA,EAAI2uD,EAAW1uD,OAAQD,IACrC4tD,EAAY5tD,GAAK2uD,EAAW3uD,GAAK2hD,EAAO,GAAG2B,WAAWtjD,GACtDqkE,EAAQlkE,KAAK,YAAYH,gCAAgCA,QAAQ2uD,EAAW3uD,UAG9E,MAAMu2C,EAAOqX,EAAY3tD,OACnBu+C,EAAe,uCACSjI,+BACbA,gBACb8tB,EAAQ3+D,KAAK,qDAIjB,OAAO,OAAP,wBACKy+D,GAAmB,CACtB7/B,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,kBAIFsN,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,0BAElB,GAA8B,IAA1B4hD,EAAO,GAAGv/C,KAAKnC,OACjB,MAAM,IAAIF,MAAM,4CAElB,GAAI4hD,EAAO,GAAGv/C,KAAK,KAAOu/C,EAAO,GAAGv/C,KAAKnC,OACvC,MAAM,IAAIF,MAAM,wBAElB,IAA8C,IAA1C,EAAAu2D,aAAa11D,QAAQ+gD,EAAO,GAAGz/C,MACjC,MAAM,IAAInC,MAAM,uBAElB,GAAuB,UAAnB4hD,EAAO,GAAGz/C,MAAuC,UAAnBy/C,EAAO,GAAGz/C,KAC1C,MAAM,IAAInC,MAAM,0B,2HC5DpB,eAIA,UAEA,UAMMukE,EAA2B,CAC/B/kE,KAAM,YACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAGd,EAAA7I,UACT,CAACkQ,EAAyClK,EAAkB/hC,KAC1DksC,EAAenK,GAQR,CAPQkK,EAAiB5nD,IAAI,OAAD,wBAE1BqgE,GAAwB,CAC3BtiB,UAAWpiC,EAAWqvB,SACtBzsC,IAAK,IAAM+hE,EAA2B1Y,EAAkBlK,EAAO,GAAI/hC,EAAWy0C,QAEhF1S,KAIG,EAAA0J,yBACRljD,GAA0C,EAAAinC,4BAA4B,CAACilB,KAAMlsD,EAAKyX,WAAWwwB,QAAQ,OAAQ,MAElH,MAAMm0B,EACF,CAAC1Y,EAAyCxnB,EAAegwB,KACvD,MAAM1F,EAAatqB,EAAMjiC,KACzBiyD,EAAOmQ,EAAgB7V,EAAY0F,GACnC,MAAMoQ,EAAsBC,EAAe/V,EAAY0F,GACjD9d,EAAOoY,EAAW1uD,OAIlBu+C,EAAe,WACnBmmB,EAAoB,OAAQtQ,EAAM9d,uCACRA,wBAClBA,iEAIV,OAAO,OAAP,wBACK+tB,GAAwB,CAC3BhgC,OAAQ,CAACliC,KAAMqiE,EAAqBviE,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC/EhG,kBAIFgmB,EAAkB,CAAC7V,EAA+B0F,KAClDA,GAAQA,EAAKp0D,SAAW0uD,EAAW1uD,SACrCo0D,EAAO,IAAK1F,EAAWhgC,QAASqsB,WAE3BqZ,GAGHqQ,EAAiB,CAAC/V,EAA+B0F,KACrDA,EAAOmQ,EAAgB7V,EAAY0F,GAC5B,EAAA7b,UAAUosB,gBAAgBjW,EAAY0F,IAGzCsQ,EAAsB,CAACplE,EAAc80D,EAAgB9d,KACzD,MAAMsuB,EAAc,GACpBA,EAAY1kE,KAAK,QAAQZ,eAAkBg3C,eAAkBA,SAC7D,IAAK,IAAIv2C,EAAI,EAAGA,EAAIu2C,IAAQv2C,EAC1B6kE,EAAY1kE,KAAK,OAAOk0D,EAAKr0D,WAAWA,OAG1C,OADA6kE,EAAY1kE,KAAK,OACV0kE,EAAYn/D,KAAK,OAGpBomD,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,+BAGlB,GAAuB,YAAnB4hD,EAAO,GAAGz/C,MAAyC,YAAnBy/C,EAAO,GAAGz/C,KAC5C,MAAM,IAAInC,MAAM,kC,oGCrFpB,gBAEA,UAEa,EAAAimD,cAAgB,CAAC6F,EAAyCxnB,KACrE,MAAMupB,EAAcvpB,EAAMiD,MACpBsP,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,SAI1D2+B,EAAe,0oCA6CD5H,EAAKC,oCACnBD,EAAKtS,wCAELwS,EAAc,CAClBv3C,KAAM,cACNqiD,WAAY,CAAC,EAAAe,YAAY6B,UACzBzgD,WAAY,CAAC,KACbugC,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMmiC,EAAMqe,OAAOxgD,KAAMq/C,YAAa,EAAAoB,YAAYmiB,sBAC9EtmB,eACAC,SAAS,GAEX,OAAOoN,EAAiBpK,eAAe3K,EAAa,CAACzS,EAAMqe,W,siBClE7D,eAGA,UACA,UACA,UAEA,UAEA,SAAgBqiB,IACd,OAAOC,EAAiB,OAE1B,SAAgBC,IACd,OAAOD,EAAiB,QAE1B,SAAgBE,IACd,OAAOF,EAAiB,QAE1B,SAAgBG,IACd,OAAOH,EAAiB,QAE1B,SAAgBI,IACd,OAAOJ,EAAiB,QAE1B,SAAgBK,IACd,OAAOL,EAAiB,OAE1B,SAAgBM,EAAQ5mD,GAYtB,MAAO,CAAC68B,KAVK,iCACe78B,sLASdnf,KAXD,MAWO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgB8Y,IACd,OAAOP,EAAiB,OAE1B,SAAgBQ,IACd,OAAOR,EAAiB,SAE1B,SAAgBtP,EAASv3C,EAAa/C,GAapC,MAAO,CAACmgC,KAXK,+BACap9B,kCACA/C,wIASZ7b,KAZD,OAYO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBgZ,IACd,MAAMlmE,EAAO,YASb,MAAO,CAACg8C,KARK,aACLh8C,6CAGDA,uCAIOA,OAAM2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBiZ,EAAchnD,GAC5B,MAAMnf,EAAO,YAWb,MAAO,CAACg8C,KAVK,iCACe78B,kBAEpBnf,mEAGDA,iCACSA,YAAeA,YAAeA,YAAeA,qBAG/CA,OAAM2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBkZ,IACd,OAAOX,EAAiB,OAE1B,SAAgBY,IAUd,MAAO,CAACrqB,KARK,iGAQCh8C,KATD,MASO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBoZ,IAgBd,MAAO,CAACtqB,KAdK,wRAcCh8C,KAfD,MAeO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBqZ,IACd,OAAOd,EAAiB,OAE1B,SAAgBxP,IAUd,MAAO,CAACja,KARK,yHAQCh8C,KATD,OASO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBgJ,IAUd,MAAO,CAACla,KARK,+IAQCh8C,KATD,UASO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAAgBsZ,IACd,OAAOf,EAAiB,QAE1B,SAAgBgB,IACd,OAAOhB,EAAiB,OAE1B,SAAgBiB,IAcd,MAAO,CAAC1qB,KAZK,yOAYCh8C,KAbD,OAaO2C,KAAM,EAAA25C,aAAa4Q,YAEzC,SAASuY,EAAiBzlE,GASxB,MAAO,CAACg8C,KARK,aACLh8C,6BACGA,sBAEJA,4BACIA,iBAGGA,OAAM2C,KAAM,EAAA25C,aAAa4Q,YA1KzC,YAGA,aAGA,aAGA,aAGA,aAGA,YAGA,YAcA,YAGA,cAGA,aAeA,iBAYA,kBAcA,YAGA,YAYA,YAkBA,YAGA,aAYA,gBAYA,aAGA,YAGA,aAgCA,MAoBMyZ,EACF,CAAC/iE,EAAgCkhC,EAAekpB,EAA6Bte,KAEvE,MAAMsS,EAAcp+C,EAAQ6qC,QAAQgF,KAAO,EAAA2P,YAAYC,OAAS,EAAAD,YAAY6B,SACtEgK,EAAW,CAACjvD,KAAMguD,EAAShuD,KAAMqiD,WAAY,CAACL,GAAcx9C,WAAY,CAAC,KAAMi+C,UAAW/S,GAChG,OAAO,OAAP,wBAAWuf,GAAQ,CAAEhsD,IAAK,IAxBhC,EAACW,EAAgCqrD,EAA2BnqB,EAAekpB,KAErE,MAAMhM,EAAcp+C,EAAQ6qC,QAAQgF,KAAO,EAAA2P,YAAYC,OAAS,EAAAD,YAAY6B,SACtE5N,EAAO,EAAAvB,QAAQlyC,EAAQ6qC,QAAQxuC,QAAQyzC,UAAUpzB,SACvD,OAAO,OAAP,wBACK2uC,GAAQ,CACXlqB,OAAQ,CAACliC,KAAMiiC,EAAMjiC,KAAMF,KAAMmiC,EAAMniC,KAAMq/C,eAC7C/C,aAAc,UACnB+O,EAAShS,6CAEE3E,EAAKC,wCACV0W,EAAShuD,qBACbq3C,EAAKtS,6BAGFma,SAAS,KASqB0nB,CAA6BhjE,EAASqrD,EAAUnqB,EAAOkpB,MAGpF,EAAAnwC,IAAM,CAACja,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIojB,KAAYpjB,IAEnF,EAAA0E,KAAO,CAACljD,EAAgCw+C,IACrC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIsjB,KAAatjB,IAEpF,EAAA4E,KAAO,CAACpjD,EAAgCw+C,IACrC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIujB,KAAavjB,IAEpF,EAAA6E,KAAO,CAACrjD,EAAgCw+C,IACrC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIwjB,KAAaxjB,IAOpF,EAAAmF,KACT,CAAC3jD,EAAgCw+C,EAAkB/hC,IAAyC,CAACzc,EAAQc,IACjGiiE,EACI/iE,EAASw+C,EAAO,GAAI+T,EAAS91C,EAAWzB,IAAKyB,EAAWxE,KAAMwE,EAAWqvB,UAC7E0S,IAEK,EAAAoF,oBAAuB5+C,GAAqC,EAAAinC,4BACrE,CAACjxB,IAAKhW,EAAKyX,WAAWmwB,SAAS,MAAO,EAAA+lB,UAAW16C,IAAKjT,EAAKyX,WAAWmwB,SAAS,MAAO,EAAAgmB,YAE7E,EAAA/O,QAAU,CAAC7jD,EAAgCw+C,KACtD,MAAM/hC,EAAawmD,EAAiCjjE,EAASw+C,GAC7D,OAAO,EAAAmF,KAAK3jD,EAAS,CAACw+C,EAAO,IAAK/hC,IAGpC,MAAMwmD,EAAmC,CAACjjE,EAAgCw+C,KACxE,GAAIA,EAAO1hD,QAAU,KACfkD,EAAQ6qC,QAAQ0X,cAAc/D,EAAO,GAAGoB,UAAY5/C,EAAQ6qC,QAAQ0X,cAAc/D,EAAO,GAAGoB,SAChG,MAAM,IAAIhjD,MAAM,2CAGlB,MAAMoe,EAAOwjC,EAAO1hD,QAAU,EAAK0hD,EAAO,GAAG2B,WAAW,GAAK,EAAAwS,SACvD16C,EAAOumC,EAAO1hD,QAAU,EAAK0hD,EAAO,GAAG2B,WAAW,GAAK,EAAAyS,SAC7D,OAAO,EAAA3mB,4BAA4B,CAACjxB,MAAK/C,SAG9B,EAAAnE,KAAO,CAAC9T,EAAgCw+C,IACrC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIyjB,KAAazjB,IAEpF,EAAA0F,IAAM,CAAClkD,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAI0jB,KAAY1jB,IAMnF,EAAA+F,IACT,CAACvkD,EAAgCw+C,EAAkB/hC,IAAwC,CAACzc,EAAQc,IAChGiiE,EAAmC/iE,EAASw+C,EAAO,GAAI2jB,EAAQ1lD,EAAWlB,OAAQkB,EAAWqvB,UAC7F0S,IAEK,EAAAgG,mBAAsBx/C,GAC/B,EAAAinC,4BAA4B,CAAC1wB,MAAOvW,EAAKyX,WAAWmwB,SAAS,QAAS,KAE7D,EAAA6X,IAAM,CAACzkD,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAI4jB,KAAY5jB,IAEnF,EAAAh1B,MAAQ,CAACxpB,EAAgCw+C,IACtC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAI6jB,KAAc7jB,IAErF,EAAA2F,SAAW,CAACnkD,EAAgCw+C,IACzC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAI8jB,KAAiB9jB,IAMxF,EAAAiH,UACT,CAACzlD,EAAgCw+C,EAAkB/hC,IAA8C,CAACzc,EAAQc,IACtGiiE,EAAmC/iE,EAASw+C,EAAO,GAAI+jB,EAAc9lD,EAAWlB,OAAQkB,EAAWqvB,UACnG0S,IAEK,EAAAkH,yBAA4B1gD,GACrC,EAAAinC,4BAA4B,CAAC1wB,MAAOvW,EAAKyX,WAAWmwB,SAAS,QAAS,OAE7D,EAAAllC,IAAM,CAAC1H,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIgkB,KAAYhkB,IAEnF,EAAAznB,IAAM,CAAC/2B,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIikB,KAAYjkB,IAEnF,EAAAlkB,IAAM,CAACt6B,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIkkB,KAAYlkB,IAEnF,EAAAqI,KAAO,CAAC7mD,EAAgCw+C,IACrC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAI6T,KAAa7T,IAEpF,EAAAyI,QAAU,CAACjnD,EAAgCw+C,IACxC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAI8T,KAAgB9T,IAEvF,EAAA0I,IAAM,CAAClnD,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAImkB,KAAYnkB,IAEnF,EAAAkJ,KAAO,CAAC1nD,EAAgCw+C,IACrC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIokB,KAAapkB,IAEpF,EAAAuJ,IAAM,CAAC/nD,EAAgCw+C,IACpC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIqkB,KAAYrkB,IAEnF,EAAAwJ,KAAO,CAAChoD,EAAgCw+C,IACrC,CAACx+C,EAAQc,IAAIiiE,EAAmC/iE,EAASw+C,EAAO,GAAIskB,KAAatkB,K,8IC/TjG,gBAEA,UACA,UACA,UAEM0kB,EAAwB,CAC5B9mE,KAAM,SACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAYC,SAGd,EAAA0jB,wBAA0B,CAACnjE,EAAgCkhC,KACtE,MAAMkS,EAAOlS,EAAMjiC,KAAKnC,OAElBkjD,EAAW,EAAA2L,YAAY,KAAMvY,GAC7BgwB,EAAYpjB,EAASn6C,OAAO,GAC5BgwD,EAAiB,EAAA/gB,kBAAkB1B,GACnCyY,EAAgB,EAAAC,oBAEhBuX,EADkC,IAAtBniC,EAAMjiC,KAAKnC,OACG,GA0BlC,SAAyBs2C,EAAcn0C,GACrC,GAAa,IAATm0C,EACF,MAAO,KAGT,IAAID,EAAS,GACb,IAAK,IAAIt2C,EAAI,EAAGA,EAAIu2C,EAAMv2C,IACxBs2C,GAAUl0C,EAAKpC,GACXA,EAAIu2C,EAAO,IACbD,GAAU,KAGd,OAAOA,EAtC8BmwB,CAAgBlwB,EAAM4M,GACrD7M,EAASC,GAAQ,EAAI,KAAO,QAAQgwB,EAAU7gE,KAAK,QAEnD84C,EAAe,SACjBwQ,+BAEEgK,4IAGyBwN,iBAPlB,EAAAnxB,QAAQlyC,EAAQ6qC,QAAQxuC,QAAQyzC,UAAUpzB,SAS3CykB,yCAAyCgS,6BAIrD,OAAO,OAAP,wBACK+vB,GAAqB,CACxB5nB,SAAS,EACTna,OAAQ,CAACliC,KAAMiiC,EAAMjiC,KAAMF,KAAMmiC,EAAMniC,KAAMq/C,YAAa,EAAAoB,YAAY6B,UACtEhG,kBAIS,EAAA0H,8BAAgC,CAAC/iD,EAAgCkhC,IACzE,OAAD,wBAAKgiC,GAAqB,CAAE7jE,IAAK,IAAM,EAAA8jE,wBAAwBnjE,EAASkhC,M,0IC1C5E,gBAGa,EAAAonB,UACT,CAACI,EAAyClK,EAAkBqd,KAC1DlT,EAAenK,GACf,MAAMiM,EAAc,EAAApV,UAAUkuB,eAAe/kB,EAAO,GAAGv/C,KAAM48D,GAE7D,MAAO,CADQnT,EAAiBxH,gBAAgB1C,EAAO,GAAIiM,KAIpD,EAAAjC,aAAe,CAACE,EAAyClK,KACpEqiB,EAAkBriB,GACX,EAAA8J,UAAUI,EAAkB,CAAClK,EAAO,IAAKt/C,MAAMtB,KAAK4gD,EAAO,GAAGia,eAG1D,EAAAlQ,yBAA8DvjD,GACvEA,EAAKyX,WAAWwwB,QAAQ,QAE5B,MAAM0b,EAAkBnK,IACtB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,+BAGlB,GAAuB,WAAnB4hD,EAAO,GAAGz/C,KACZ,MAAM,IAAInC,MAAM,gCAIdikE,EAAqBriB,IACzB,IAAKA,GAA4B,IAAlBA,EAAO1hD,OACpB,MAAM,IAAIF,MAAM,gCAGlB,GAAuB,UAAnB4hD,EAAO,GAAGz/C,KACZ,MAAM,IAAInC,MAAM,yB,qNCtCpB,eAIA,UAEA,UAoBM4mE,EAA0B,CAC9BpnE,KAAM,WACNwE,WAAY,CAAC,KACb69C,WAAY,CAAC,EAAAe,YAAY6B,WAGd,EAAA8G,SACT,CAACO,EAAyClK,EAAkB/hC,KAC1D,EAAAksC,eAAenK,EAAQ/hC,GAQhB,CAPQisC,EAAiB5nD,IAAI,OAAD,wBAE1B0iE,GAAuB,CAC1B3kB,UAAWpiC,EAAWqvB,SACtBzsC,IAAK,IAAMokE,EAA0B/a,EAAkBlK,EAAQ/hC,KAEjE+hC,KAIG,EAAA4J,0BACRpjD,GAAyC,EAAAm4D,wBAAwBn4D,EAAM,GAE/D,EAAAqjD,0BACRrjD,GAAyC,EAAAm4D,wBAAwBn4D,EAAM,GAE/D,EAAAm4D,wBAA0B,CAACn4D,EAAkB0+D,KACxD,MAAMtF,EAAYsF,GAAS,GAGrB5S,EAAO9rD,EAAKyX,WAAWqwB,UAAU,OAAQ,WAC/C,GAAa,YAATgkB,GAA+B,WAATA,IAAsB4S,EAAQ,IAAe,UAAT5S,GAC5D,MAAM,IAAIl0D,MAAM,sBAAsBk0D,KAGxC,IAAIsM,EAAmB,GACnBsG,EAAQ,IACVtG,EAASp4D,EAAKyX,WAAWuwB,UAAU,UACnC,EAAAwxB,iBAAiBpB,EAAQtM,EAAMsN,IAGjC,MAAMuF,EAAqB3+D,EAAKyX,WAAWmwB,SAAS,sBAAuB,GAErE2wB,EACFmG,EAAQ,GAAK1+D,EAAKyX,WAAWqwB,UAAU,iCAAkC,cAAgB,aAC7F,IAE4C,IAFxC,CACE,aAAc,qBAAsB,uBAAwB,gBAAiB,qBAAsB,cACnGrvC,QAAQ8/D,GACZ,MAAM,IAAI3gE,MAAM,8BAA8B2gE,uBAEhD,MAAMqG,EAA4C,uBAA5BrG,EAChBsG,EAAmBD,EAEnBE,EACQ,YAAThT,GAAsB4S,GAAS,GAAM1+D,EAAKyX,WAAWqwB,UAAU,eAAgB,sBAAwB,GAC5G,IAA+F,IAA3F,CAAC,qBAAsB,oBAAqB,QAAS,OAAQ,IAAIrvC,QAAQqmE,GAC3E,MAAM,IAAIlnE,MAAM,iBAAiBknE,uBAGnC,MAAMC,EAAoB/+D,EAAKyX,WAAWmwB,SAAS,iBAAkB,KAC/Do3B,EAAkE,IAAjDh/D,EAAKyX,WAAWowB,OAAO,kBAAmB,GACjE,GAAIm3B,GAA2B,UAATlT,EACpB,MAAM,IAAIl0D,MAAM,4DAGlB,MAAMqnE,EACDP,EAAQ,IAAuB,YAAT5S,GAAkD,eAA5ByM,GAA4D,UAAhBuG,EAE7F,IAAII,EAAc,EACdjG,EAAiB,EACjBC,EAAgB,EAUpB,OARIwF,EAAQ,IACVQ,EAAc,EACdjG,EAAiB,EACjBC,EAAgB,GACG,IAAVwF,IACTzF,EAAiB,GAGZ,EAAAhyB,4BAA4B,CACjCy3B,QACAtF,WACAtN,OACAsM,SACAuG,qBACApG,0BACAsG,mBACAD,eACAE,cACAC,oBACAC,iBACAC,2BACAC,cACAjG,iBACAC,mBAIJ,MAAMuF,EACF,CAAC/a,EAAyClK,EAAkB/hC,KAC1D,MAAMg3B,EAAO,EAAAvB,QAAQwW,EAAiB7d,QAAQxuC,QAAQyzC,UAAUpzB,UACzDihD,EAAYD,GACfhV,EAAiBvK,+BAA+BK,EAAO,GAAGv/C,KAAM,EAAAugD,YAAY6B,UAE1EoJ,EAAcjM,EAAO,GAAGv/C,KAAK4C,KAAI,CAACpC,EAAK5C,IAAMgX,KAAK2V,MAAM/pB,EAAMgd,EAAW2gD,OAAOvgE,OAC/E4gE,EAAaD,GAChB9U,EAAiBvK,+BAA+BsM,EAAa,EAAAjL,YAAY6B,UACvE5hD,EAAMgrD,EAAY3tD,OAElBqnE,EAAgB,IAAIjlE,MAAcO,GAClC2kE,EAAe,IAAIllE,MAAcO,GACvC,IAAI4kE,EAAuB,8BACN5kE,gCACDA,cAEpB,IAAK,IAAI2E,EAAI3E,EAAM,EAAG2E,GAAK,EAAGA,IAC5B+/D,EAAc//D,GAAMA,IAAM3E,EAAM,EAAK,EAAI0kE,EAAc//D,EAAI,GAAKqmD,EAAYrmD,EAAI,GAChFggE,EAAahgE,GAAMA,IAAM3E,EAAM,EAAK,EAAI2kE,EAAahgE,EAAI,GAAKo6C,EAAO,GAAGv/C,KAAKmF,EAAI,GAEjFigE,GAAwB,4BACPjgE,QAAQ+/D,EAAc//D,8BACvBA,QAAQggE,EAAahgE,gBAGvC,MAAMkgE,EAAwB,yFAEU3G,MAAeD,8CACrBjqB,EAAKC,iEAKjC2H,EAAmC,YAApB5+B,EAAWq0C,KAE5B,SACJwT,oCAC0B7kE,yFAEqBg+D,MAAgBD,gBAE7D6G,uDAGwB5kE,+YAed,IAARA,EAEI,SACR6kE,0HAG+C7G,MAAgBD,gBAE7D6G,kkCA2B4B7lB,EAAO,GAAGv/C,KAAK,gtBAuBrC,SACRqlE,0HAG+C7G,MAAgBD,gBAE7D6G,uvBAoB4B7lB,EAAO,GAAGv/C,KAAK,gtBAsB7C,OAAO,OAAP,wBACKukE,GAAuB,CAC1BriC,OAAQ,CAACliC,KAAMwrD,EAAa1rD,KAAMy/C,EAAO,GAAGz/C,KAAMq/C,YAAa,EAAAoB,YAAY6B,UAC3EhG,eACAM,UAAW,CAAC,CACVv/C,KAAM,SACN2C,KAAM,MACNu9C,YAAa7/B,EAAW2gD,OAAOtgE,OAC/BkC,KAAMyd,EAAW2gD,OAAOv7D,KAAI2F,GAAKqM,KAAKC,KAAKtM,UAKxC,EAAAmhD,eAAiB,CAACnK,EAAkBpd,KAC/C,IAAKod,GAAWpd,EAAUsiC,MAAQ,GAAuB,IAAlBllB,EAAO1hD,QACzCskC,EAAUsiC,OAAS,GAAKtiC,EAAUsiC,MAAQ,IAAwB,IAAlBllB,EAAO1hD,QACvDskC,EAAUsiC,OAAS,IAAwB,IAAlBllB,EAAO1hD,QAAkC,IAAlB0hD,EAAO1hD,OAC1D,MAAM,IAAIF,MAAM,mBAGlB,GAAIwkC,EAAUg8B,OAAOtgE,OAAS,GAAK0hD,EAAO,GAAGv/C,KAAKnC,SAAWskC,EAAUg8B,OAAOtgE,OAC5E,MAAM,IAAIF,MAAM,wBAGlB,GAAuB,WAAnB4hD,EAAO,GAAGz/C,KACZ,MAAM,IAAInC,MAAM,gCAIP,EAAA4hE,iBAAmB,CAACpB,EAAkBtM,EAAcsN,KAC/D,GAAKA,GAOH,IAAK,MAAMlV,KAASkU,EAClB,GAAIlU,GAAS,EACX,MAAM,IAAItsD,MAAM,8CARpB,IAAK,MAAMssD,KAASkU,EAClB,GAAIlU,EAAQ,EACV,MAAM,IAAItsD,MAAM,qDAUtB,KAAa,WAATk0D,GAA8B,UAATA,GACD,IAAlBsM,EAAOtgE,QAAmC,IAAlBsgE,EAAOtgE,QAA8B,IAAdsgE,EAAO,IAA0B,IAAdA,EAAO,IAC3E,MAAM,IAAIxgE,MAAM,+KAELwhE,EAAW,SAAW,0B,qGCjVvC,gBACA,UAEA,UACA,UAcA,uBAKElhE,YACWqnE,EAAqCz0B,EACrC00B,GADA,KAAAD,WAAqC,KAAAz0B,YACrC,KAAA00B,wBACTrnE,KAAKsnE,KAAO,IAAIzmE,IAChBb,KAAKunE,iBAAkB,EAEzBzlB,YAAYj+C,GACV,OAAO7D,KAAKsnE,KAAKplE,IAAI2B,GAEvBq+C,YAAYr+C,EAAc+9C,GACxB5hD,KAAKsnE,KAAK/lE,IAAIsC,EAAK+9C,GAErBj+C,IAAI6jE,EAAyBnmB,EAAuBrd,G,MAClDhkC,KAAKonE,SAASK,MAAM,KAAM,sBAAoD,QAA9B,EAAAD,EAAchxB,YAAYv3C,YAAI,QAAI,oBAAoB,K,MACpG,MAAMyoE,EAAK1nE,KAAK2yC,UAAU+0B,GACpBtmB,EAAUomB,EAAcpmB,QAC9BsmB,EAAGC,WAAWvmB,GACd,IACEphD,KAAK4nE,WAAW5jC,GACXhkC,KAAKunE,iBACRvnE,KAAK6nE,eAAeL,EAAcM,iBAEpC9nE,KAAK+nE,aAAaP,EAAcQ,iBAAqD,QAAnC,EAAAR,EAAchxB,YAAYgI,iBAAS,QAAI,GAAI6C,GAC7F,MAAOl8C,GAEP,MADA,EAAA0tC,OAAO1pC,MAAM,iBAAkBq+D,EAAchxB,YAAY0H,cACnD/4C,EAERnF,KAAKonE,SAASK,MAAM,UAAW,oBAAoB,KACjDznE,KAAK2yC,UAAUs1B,YAEhBjoE,KAAK2yC,WAEVT,UACMlyC,KAAKkoE,cACPloE,KAAK2yC,UAAUw1B,aAAanoE,KAAKkoE,cAEnCloE,KAAKsnE,KAAKvtD,SAAQ1T,GAAKrG,KAAK2yC,UAAUy1B,cAAc/hE,EAAE+6C,WAExD9Z,MAAMkP,EAA0BG,EAAsC1C,GACpE,OAAOj0C,KAAKonE,SAASK,MAAM,UAAW,wBAAwB,KAC5D,MAAMY,EAAe,IAAI,EAAAC,iBAAiBtoE,KAAK2yC,UAAW6D,EAAaG,EAAqB1C,GACtFs0B,EAAaF,EAAapqB,aAC1BmD,EAAUphD,KAAKwoE,QAAQD,GAQ7B,MAPiB,CACf/xB,cACA4K,UACA4mB,iBAAkBhoE,KAAKyoE,oBACnBrnB,EAASinB,EAAap1B,QAAQuD,YAAY/yC,WAAY4kE,EAAap1B,QAAQuD,YAAYgI,WAC3FspB,gBAAiB9nE,KAAK0oE,mBAAmBtnB,OAKrConB,QAAQG,GAChB,IAAK3oE,KAAKkoE,aAAc,CACtB,EAAAr1B,OAAOE,QAAQ,kBAAmB,0DAClC,MAAM61B,EAAqB,EAAAC,sBAAsB7oE,KAAK2yC,UAAUpzB,SAChEvf,KAAKkoE,aAAeloE,KAAK2yC,UAAUm2B,cAAcF,EAAoB5oE,KAAK2yC,UAAU+0B,GAAGqB,eAErF,EAAAjpE,IAAIkpE,OACN,EAAAn2B,OAAOE,QAAQ,kBAAmB,gBACtC41B,OAGE,MAAMM,EAAajpE,KAAK2yC,UAAUm2B,cAAcH,EAAkB3oE,KAAK2yC,UAAU+0B,GAAGwB,iBAC9E9nB,EAAUphD,KAAK2yC,UAAUw2B,cAAcnpE,KAAKkoE,aAAce,GAEhE,OADAjpE,KAAK2yC,UAAUw1B,aAAac,GACrB7nB,EAETwmB,WAAWrlB,GACT,MAAMzpC,EAAQypC,EAAGzpC,MACXC,EAASwpC,EAAGxpC,OAClB,EAAA85B,OAAOE,QACH,kBACA,8CAA8Cj6B,KAASC,YAAiBwpC,EAAGvb,eAAeub,EAAGH,OAAOxgD,QACxG5B,KAAK2yC,UAAUy2B,kBAAkB7mB,EAAGd,QAAS3oC,EAAOC,GAEtD8uD,eAAeC,GACb,MAAMuB,EAAiBvB,EAAgBp2C,SACjC43C,EAAqBxB,EAAgByB,aAC3CvpE,KAAK2yC,UAAU62B,oBAAoBH,EAAgBC,GACnDtpE,KAAKunE,iBAAkB,EAEzBQ,aAAaC,EAA6CxpB,EAA8BirB,G,MAEtF,MAAM/B,EAAK1nE,KAAK2yC,UAAU+0B,GAC1B,IAAIgC,EAAkB,EACtB,IAAK,MAAM,KAACzqE,EAAI,KAAE2C,EAAI,SAAEyH,EAAQ,YAAE81C,KAAgB6oB,EAAkB,CAClE,MAAM3nE,EAA4C,QAApC,EAAAm+C,EAAUmrB,MAAKnmE,GAAKA,EAAEvE,OAASA,WAAK,eAAE4C,KACpD,GAAa,cAATD,IAAyBvB,EAC3B,MAAM,IAAIZ,MAAM,aAAaR,iDAE/B,OAAQ2C,GACN,IAAK,YACH5B,KAAK4pE,YAAYH,EAASC,GAAkBrgE,EAAUqgE,GACtDA,IACA,MACF,IAAK,QACCvqB,EACFuoB,EAAGmC,WAAWxgE,EAAUhJ,GAExBqnE,EAAGoC,UAAUzgE,EAAUhJ,GAEzB,MACF,IAAK,MACC8+C,EACFuoB,EAAGqC,WAAW1gE,EAAUhJ,GAExBqnE,EAAGsC,UAAU3gE,EAAUhJ,GAEzB,MACF,QACE,MAAM,IAAIZ,MAAM,4BAA4BmC,OAIpDgoE,YAAYrnB,EAAiB0nB,EAAqCv4C,GAChE1xB,KAAK2yC,UAAUu3B,qBAAqB3nB,EAAGd,QAAS/vB,EAAUu4C,GAE5DvB,mBAAmBtnB,GACjB,MAAO,CACL1vB,SAAU1xB,KAAKmqE,kBAAkB/oB,EAAS,YAC1CmoB,aAAcvpE,KAAKmqE,kBAAkB/oB,EAAS,iBAGlDqnB,oBAAoBrnB,EAAuBpC,EAAqBR,GAE9D,MAAMwpB,EAA8C,GACpD,GAAIhpB,EACF,IAAK,MAAME,KAAWF,EACpBgpB,EAAiBnoE,KAAK,CAACZ,KAAMigD,EAASt9C,KAAM,YAAayH,SAAUrJ,KAAKoqE,mBAAmBhpB,EAASlC,KAGxG,GAAIV,EACF,IAAK,MAAMrB,KAAYqB,EACrBwpB,EAAiBnoE,KAAK,OAAD,wBAAKs9C,GAAQ,CAAE9zC,SAAUrJ,KAAKoqE,mBAAmBhpB,EAASjE,EAASl+C,SAG5F,OAAO+oE,EAEToC,mBAAmBhpB,EAAuBniD,GACxC,MACMorE,EADKrqE,KAAK2yC,UAAU+0B,GACL0C,mBAAmBhpB,EAASniD,GACjD,GAAkB,OAAdorE,EACF,MAAM,IAAI5qE,MAAM,WAAWR,gBAE7B,OAAOorE,EAETF,kBAAkB/oB,EAAuBniD,GAGvC,OAFWe,KAAK2yC,UAAU+0B,GACWyC,kBAAkB/oB,EAASniD,M,0GC3KpE,gBAEA,UAKA,UACA,UACA,UACA,UACA,UAGA,4BAWEc,YAA4Bb,EAAuC+zC,GAAvC,KAAA/zC,UAAuC,KAAA+zC,UACjEjzC,KAAKkhD,eAAiB,IAAI,EAAAopB,sBAAsBprE,EAAQyzC,UAAU43B,gBAClEvqE,KAAK6hD,eAAiB,IAAI,EAAA2oB,eAAexqE,KAAKizC,QAAQm0B,SAAUloE,EAAQyzC,UAAW3yC,KAAKkhD,gBACxFlhD,KAAK4jD,eAAiB,IAAI,EAAA6mB,eACtBvrE,EAAQyzC,UAAW3yC,KAAKkhD,eAAgBlhD,KAAKizC,QAAQm0B,SACrD,CAACsD,cAA4C,SAA7BxrE,EAAQuzC,mBAC5BzyC,KAAK8gD,uBAAyB,IAAIjgD,IAClCb,KAAK+gD,yBAA2B,IAAIlgD,IACpCb,KAAK0yC,KAAOxzC,EAAQwzC,KACpB1yC,KAAK2qE,eAAiB,IAAI9pE,IAC1Bb,KAAK4qE,eAAiB,IAAI/pE,IAG5BgqE,yBACE,OAAO,IAAI,EAAAC,sBAAsB9qE,MAEnC+qE,mBAAmBpmC,GACjB,MAAMqmC,EAAermC,EAAMsmC,YAAYjuB,QAAOx5C,IAAiB,IAAZA,EAAE/C,MAAe+C,EAAE4+C,SAAQ19C,KAAIlB,GAAKA,EAAE4+C,OAAQK,SACjGziD,KAAKgrE,aAAe,IAAIrvB,IAAIqvB,GAE9B5lB,cAAcN,GACZ,QAAO9kD,KAAKgrE,cAAehrE,KAAKgrE,aAAahvB,IAAI8I,GAEnDomB,eAAepmB,GACb9kD,KAAKgrE,aAAaxwC,IAAIsqB,GAExBtC,eAAesC,EAAqB5Q,GAClC,OAAIA,EACKl0C,KAAK8gD,uBAAuB5+C,IAAI4iD,GAEhC9kD,KAAK+gD,yBAAyB7+C,IAAI4iD,GAG7CK,eAAeL,EAAqBC,EAA0B7Q,GAAW,GACvE,EAAArB,OAAOE,QAAQ,sBAAuB,iCAClCmB,EACFl0C,KAAK8gD,uBAAuBv/C,IAAIujD,EAAUC,GAE1C/kD,KAAK+gD,yBAAyBx/C,IAAIujD,EAAUC,GAGhD7S,UACElyC,KAAK6hD,eAAe3P,UACpBlyC,KAAK4jD,eAAe0B,sBACpBtlD,KAAK8gD,uBAAuB/mC,SAAQwoC,GAAMviD,KAAK4jD,eAAe2B,eAAehD,GAAI,KACjFviD,KAAK8gD,uBAAyB,IAAIjgD,IAClCb,KAAK+gD,yBAAyBhnC,SAAQwoC,GAAMviD,KAAK4jD,eAAe2B,eAAehD,GAAI,KACnFviD,KAAK+gD,yBAA2B,IAAIlgD,IAEtC6hB,QAAQ7a,EAAkBsjE,EAA0BxmC,GAClD,MAAMymC,EAAK,EAAAC,gBAAgBxjE,EAAMsjE,EAAQ,EAAAtlB,wBACzC,MAAO,CAACylB,KAAMF,EAAGG,OAAQt4B,QAASm4B,EAAGI,OAASJ,EAAGI,OAAO3jE,EAAM88B,GAAS98B,M,sJC9E3E,gBAqCA,8BAKE9H,YAAY2nE,EAA4B7kB,EAAW,GACjD,GAAiB,IAAbA,EACF7iD,KAAKyrE,eAAiB/D,EAAGgE,KACzB1rE,KAAK2rE,OAASjE,EAAGkE,IACjB5rE,KAAKihD,YAAcymB,EAAGx3B,MACtBlwC,KAAKg4D,YAAcnV,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAIpjD,MAAM,+BAA+BojD,KAL/C7iD,KAAKyrE,eAAiB/D,EAAGmE,QACzB7rE,KAAK2rE,OAASjE,EAAGoE,KACjB9rE,KAAKihD,YAAcymB,EAAGx3B,MACtBlwC,KAAKg4D,YAAcnV,GAKvB14B,OAAOxkB,EAA4BomE,GACjC,IAAIj1C,EACA2e,EAcJ,OAbI9vC,EAAI5F,cAAgBe,eACtB,EAAA+xC,OAAOG,QAAQ,UAAW,2DAC1ByC,EAAS,IAAI30C,aAAa6E,IAExBomE,EAAc/rE,KAAKg4D,YAAcryD,EAAIhG,QACvC,EAAAkzC,OAAOG,QAAQ,UAAW,kDAC1ByC,EAAS9vC,EACTmxB,EAAS92B,KAAK0wB,SAASq7C,EAAc/rE,KAAKg4D,aAC1CviB,EAAO17B,SAAQ,CAACvW,EAAG9D,IAAMo3B,EAAOp3B,GAAK8D,MAErCiyC,EAAS9vC,EACTmxB,EAAS2e,GAEJ3e,EAETpG,SAASruB,GACP,OAAO,IAAIvB,aAAoB,EAAPuB,GAE1BkJ,OAAOlH,EAA+B2nE,GACpC,OAAyB,IAArBhsE,KAAKg4D,YACe3zD,EAAwB24C,QAAO,CAAC38C,EAAOspB,IAAUA,EAAQ,GAAM,IAAGje,SAAS,EAAGsgE,GAG/F3nE,EAAOqH,SAAS,EAAGsgE,KAM9B,6BAKEjsE,YAAY2nE,EAA2B7kB,EAAW,EAAG5B,GACnD,GAAiB,IAAb4B,GAA+B,IAAbA,EACpB,MAAM,IAAIpjD,MAAM,+BAA+BojD,KAEjD7iD,KAAKyrE,eAAiB/D,EAAGoE,KACzB9rE,KAAK2rE,OAASjE,EAAGoE,KACjB9rE,KAAKg4D,YAAcnV,EACnB7iD,KAAKihD,YAAcA,GAAeymB,EAAGx3B,MAEvC/lB,OAAOxkB,EAAmBomE,GACxB,IAAIE,EAAOtmE,EAMX,OALyB,IAArB3F,KAAKg4D,cACP,EAAAnlB,OAAOE,QAAQ,UAAW,iCAC1Bk5B,EAAOjsE,KAAK0wB,SAASq7C,GACrBpmE,EAAIoU,SAAQ,CAACvW,EAAG9D,IAAMusE,EAAS,EAAJvsE,GAAS8D,KAE/ByoE,EAETv7C,SAASruB,GACP,OAAO,IAAIvB,aAAoB,EAAPuB,GAE1BkJ,OAAOlH,EAA+B2nE,GACpC,OAAyB,IAArBhsE,KAAKg4D,YACe3zD,EAAwB24C,QAAO,CAAC38C,EAAOspB,IAAUA,EAAQ,GAAM,IAAGje,SAAS,EAAGsgE,GAG/F3nE,EAAOqH,SAAS,EAAGsgE,KAI9B,yBAKEjsE,YAAY2nE,EAA2B7kB,EAAW,GAChD,GAFF,KAAAmV,YAAc,EAEK,IAAbnV,EACF7iD,KAAKyrE,eAAiB/D,EAAGwE,MACzBlsE,KAAK2rE,OAASjE,EAAGwE,MACjBlsE,KAAKihD,YAAcymB,EAAGyE,cACtBnsE,KAAKg4D,YAAcnV,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAIpjD,MAAM,+BAA+BojD,KAL/C7iD,KAAKyrE,eAAiB/D,EAAGoE,KACzB9rE,KAAK2rE,OAASjE,EAAGoE,KACjB9rE,KAAKihD,YAAcymB,EAAGyE,cACtBnsE,KAAKg4D,YAAcnV,GAKvB14B,OAAOxkB,EAAiBymE,GACtB,OAAO,IAAIrrE,WAAW4E,EAAItB,OAAQsB,EAAIrB,WAAYqB,EAAIpB,YAExDmsB,SAASruB,GACP,OAAO,IAAItB,WAAWsB,EAAOrC,KAAKg4D,aAEpCzsD,OAAOlH,EAA+B2nE,GACpC,GAAI3nE,aAAkBtD,WACpB,OAAOsD,EAAOqH,SAAS,EAAGsgE,GAE5B,MAAM,IAAIvsE,MAAM,uBAAuB4E,EAAOtE,kB,uPC1JlD,gBACA,UAoJA,SAAgBs6C,EAAarT,EAAiBonB,GAC5C,MAAMhU,EAAqB,GACrBZ,EAAqB,GACrB6yB,EAAuB,MAARje,GAAgBrsD,MAAMC,QAAQosD,IAAyB,IAAhBA,EAAKzuD,OAC3D++D,EAAgB,MAARtQ,GAAgBie,EAAgB,KAAOC,EAAele,EAAMpnB,GAAO6H,OACjF,IAAIxjC,EAAI,EACR,IAAK,IAAI3L,EAAI,EAAGA,EAAIsnC,EAAMrnC,SAAUD,EAAG,CACrC,GAAY,MAARg/D,EAAc,CAChB,GAAIA,EAAKrzD,KAAO3L,GAAkB,IAAbsnC,EAAMtnC,GACzB,MAAM,IAAID,MAAM,sBAAsBC,oBAAoBsnC,EAAMtnC,iBAElD,MAAXg/D,EAAKrzD,IAAcqzD,EAAKrzD,GAAK3L,IAAmB,IAAbsnC,EAAMtnC,KAC5C06C,EAASv6C,KAAKmnC,EAAMtnC,IACpB85C,EAAS35C,KAAKH,IAEZg/D,EAAKrzD,IAAM3L,GACb2L,IAGa,IAAb27B,EAAMtnC,KACR06C,EAASv6C,KAAKmnC,EAAMtnC,IACpB85C,EAAS35C,KAAKH,IAGlB,MAAO,CAAC06C,WAAUZ,YAGpB,SAAgB8yB,EAAele,EAAuBpnB,GACpD,MAAMiP,EAAOjP,EAAMrnC,OAkBnB,OAfAyuD,EAAe,MAARA,EAAepnB,EAAMtiC,KAAI,CAACgC,EAAGhH,IAAMA,IAAM,GAAgBinD,OAAOyH,GAGvE,EAAAme,OACIne,EAAK+R,OAAMqM,GAAMA,IAAOv2B,GAAQu2B,EAAKv2B,KACrC,IAAM,+CAA+CA,MAASA,mBAC9CmY,MAGpB,EAAAme,OACIne,EAAK+R,MAAMsM,IACX,IACI,0DAAYre,MAGbA,EAAK1pD,KAAI2B,GAAKA,EAAI,EAAI4vC,EAAO5vC,EAAIA,IAE1C,SAAgBomE,EAAMpmE,GACpB,OAAOA,EAAI,GAAM,EAEnB,SAAgBqmE,EAAc1lC,GAC5B,GAAqB,IAAjBA,EAAMrnC,OAER,OAAO,EAET,IAAI0C,EAAO2kC,EAAM,GACjB,IAAK,IAAItnC,EAAI,EAAGA,EAAIsnC,EAAMrnC,OAAQD,IAChC2C,GAAQ2kC,EAAMtnC,GAEhB,OAAO2C,EAST,SAAgBsqE,EAAoBtqE,GAClC,MAAMyW,EAAQpC,KAAKC,KAAKD,KAAK6zC,KAAKloD,IAClC,MAAO,CAACyW,EAAOpC,KAAKC,KAAKtU,EAAOyW,IAzMlC,uCACE/Y,YAAmBwqE,GAAA,KAAAA,iBACnBqC,iBAAiB5lC,EAA0B6lC,GAEzC,GAAqB,IAAjB7lC,EAAMrnC,OACR,MAAO,CAAC,EAAG,GAEb,MAAM4qE,EAAiBvqE,KAAKuqE,eAC5B,GAAIsC,QAA6BrtE,IAApBqtE,EAAMC,UAAyB,CAE1C,MAAMC,EAAQF,EAAMC,WAAa9lC,EAAMrnC,OAAS,EAAIqnC,EAAMt+B,MAAMmkE,EAAMC,WAAW3O,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IAChG6lE,EAAQH,EAAMC,WAAa,EAAI,EAAI9lC,EAAMt+B,MAAM,EAAGmkE,EAAMC,WAAW3O,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IAC9F,KAAI4lE,EAAQxC,GAAkByC,EAAQzC,GAOpC,MAAO,CAACwC,EAAOC,GAJf,EAAAn6B,OAAOE,QACH,gBACA,2DAA2D/L,gBAAoB6lC,EAAMC,aAK7F,MAAMG,EAAYjmC,EAAMm3B,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IAE7C,IAAI2R,EAAQpC,KAAK2V,MAAM3V,KAAK6zC,KAAK0iB,IAEjC,KAAOn0D,EAAQyxD,GAAkBzxD,EAAQm0D,GACnCA,EAAYn0D,GAAU,EADwBA,KAMpD,GAAIA,GAASyxD,GAAkB0C,EAAYn0D,GAAU,EACnD,MAAM,IAAIrZ,MAAM,2DAA2DunC,KAE7E,MAAO,CAACluB,EAAOm0D,EAAYn0D,KAI/B,8BACE/Y,YAAmBwqE,GAAA,KAAAA,iBACnBqC,iBAAiB5lC,EAA0B6lC,GACzC,MAAMK,EAAKltE,KAAKmtE,eAAenmC,EAAO6lC,GAKtC,OAJIA,GAASA,EAAM34B,WACjBg5B,EAAG,IAAM,EACTA,EAAG,IAAM,GAEPL,GAASA,EAAMrpB,UACV,CAAC0pB,EAAG,GAAIA,EAAG,IAEbA,EAGTC,eAAenmC,EAA0B6lC,GACvC,MAAM34B,EAAW24B,GAASA,EAAM34B,SAEhC,GAAqB,IAAjBlN,EAAMrnC,OACR,OAAOu0C,EAAW,CAAC,EAAG,GAAK,CAAC,EAAG,GAEjC,IAAIq2B,EAAiBvqE,KAAKuqE,eAC1B,GAAIsC,QAA6BrtE,IAApBqtE,EAAMC,UAAyB,CAE1C,MAAMC,EAAQF,EAAMC,WAAa9lC,EAAMrnC,OAAS,EAAIqnC,EAAMt+B,MAAMmkE,EAAMC,WAAW3O,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IAChG6lE,EAAQH,EAAMC,WAAa,EAAI,EAAI9lC,EAAMt+B,MAAM,EAAGmkE,EAAMC,WAAW3O,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IAC9F,KAAI4lE,EAAQxC,GAAkByC,EAAQzC,GAOpC,MAAO,CAACwC,EAAOC,GAJf,EAAAn6B,OAAOE,QACH,gBACA,2DAA2D/L,gBAAoB6lC,EAAMC,aAK7F,IAAIM,EAAWpmC,EAAMt+B,MAAM,GAoB3B,GAnBIwrC,IACFq2B,GAAkC,EAOlC6C,EAAWA,EAAS1oE,KAChB,CAACuC,EAAGvH,IAAMA,GAAK0tE,EAASztE,OAAS,EAAKytE,EAAS1tE,GAAK,GAAM,EAAI0tE,EAAS1tE,GAAK0tE,EAAS1tE,GAAK,EAAK0tE,EAAS1tE,KAIpF,IAApB0tE,EAASztE,SACXytE,EAAW,CAAC,EAAGA,EAAS,MAKJ,IAApBA,EAASztE,OAAc,CACzB,MAAM0tE,EAAgBhzB,EAAa+yB,GACnCA,EAAWC,EAAcjzB,SAG3B,MAAM/3C,EAAOqqE,EAAcU,GAC3B,OAAIA,EAASztE,QAAU,GAAK0C,GAAQkoE,EAC3B,CAAC,EAAGloE,GACkB,IAApB+qE,EAASztE,QAAgBytE,EAAS,IAAM7C,GAAkB6C,EAAS,IAAM7C,EAC3E6C,EACsB,IAApBA,EAASztE,QAAgBytE,EAAS,GAAKA,EAAS,IAAM7C,GAAkB6C,EAAS,IAAM7C,EACzF,CAAC6C,EAAS,GAAKA,EAAS,GAAIA,EAAS,IACf,IAApBA,EAASztE,QAAgBytE,EAAS,IAAM7C,GAAkB6C,EAAS,GAAKA,EAAS,IAAM7C,EACzF,CAAC6C,EAAS,GAAIA,EAAS,GAAKA,EAAS,IAEtB,IAApBA,EAASztE,QAAgBytE,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAM7C,GACpE6C,EAAS,IAAM7C,EACV,CAAC6C,EAAS,GAAKA,EAAS,GAAKA,EAAS,GAAIA,EAAS,IAEpC,IAApBA,EAASztE,QAAgBytE,EAAS,IAAM7C,GACxC6C,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAM7C,EACtC,CAAC6C,EAAS,GAAIA,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAEtDl5B,EAMKy4B,EAAoBtqE,EAAO,GAAGqC,KAAIuC,GAAS,EAAJA,IAEzC0lE,EAAoBtqE,KAKjC,iBA2BA,mBAqBA,UAGA,kBAWA,uBAA4B2kC,GAC1B,GAAqB,IAAjBA,EAAMrnC,OACR,MAAMF,MAAM,wDAGd,MAAO,CAACunC,EAAMrnC,OAAS,EAAIqnC,EAAMA,EAAMrnC,OAAS,GAAK,EAAGqnC,EAAMA,EAAMrnC,OAAS,KAE/E,wBAIA,uBAA4BqnC,EAAiBsmC,EAAa,GACxD,OAAOZ,EAAc1lC,EAAMt+B,MAAM,EAAGs+B,EAAMrnC,OAAS2tE,M,yLC/NrD,gBAEA,UAEa,EAAAvrB,mCACT,CAACslB,EAA8CrgC,EAC9Cia,KACC,MAAM6N,EAAW7N,IAAgB,EAAAoB,YAAY6B,UAAYjD,IAAgB,EAAAoB,YAAYiY,iBAAoB,EAAI,EACvGpmB,EAAW+M,IAAgB,EAAAoB,YAAYC,OACvCkB,EAAavC,IAAgB,EAAAoB,YAAYiY,kBAAoBrZ,IAAgB,EAAAoB,YAAYC,OACzFwqB,EAAY7rB,IAAgB,EAAAoB,YAAYM,oBAAsB3b,EAAMrnC,OAAS,OAAIH,EACjF80C,EAAgB2M,IAAgB,EAAAoB,YAAYM,oBAC9C3b,EAAMtiC,KAAI,CAACuC,EAAGvH,IAAMA,IAAMsnC,EAAMrnC,OAAS,EAAQ,EAAJsH,EAAQA,SACrDzH,EACJ,OAAO,EAAA+jD,6BACH8jB,EAAuBrgC,EAAO8nB,EAASxa,EAAe,CAACJ,WAAUsP,YAAWspB,eAGzE,EAAA9rB,+BACT,CAACqmB,EAA8CrgC,EAA0Bia,KAEnE,MAAM/F,EAAS,EAAA6G,mCAAmCslB,EAAuBrgC,EAAOia,GAChF,MAAO,CAAC/F,EAAOpiC,MAAOoiC,EAAOniC,SAM1B,EAAAwqC,6BACT,CAAC8jB,EAA8CrgC,EAA0B6b,EAAgB,EACxFvO,EAAmCu4B,KAClC,MAAM34B,KAAc24B,IAASA,EAAM34B,WAC5Bp7B,EAAOC,GAAUsuD,EAAsBuF,iBAAiB14B,GAAWI,GAAyBtN,EAAO6lC,GACpG52B,EAAOjP,EAAMrnC,OACnB,IAAI4tE,EAAevmC,EAAMt+B,MAAM,GAI/B,GAHa,IAATutC,IACFs3B,EAAe,CAAC,IAED,IAAb1qB,EAEFvO,EAAgBtN,OACX,GAAIkN,EAAU,CACnB,GAAiB,IAAb2O,EACF,MAAM,IAAIpjD,MAAM,sCAElB60C,EAAgBtN,EACZiP,EAAO,IACTs3B,EAAat3B,EAAO,GAAKv/B,KAAKC,KAAK42D,EAAat3B,EAAO,GAAK,IAE1DA,EAAO,IACTs3B,EAAat3B,EAAO,GAAKv/B,KAAKC,KAAK42D,EAAat3B,EAAO,GAAK,SAEzD,IAAK3B,EACV,MAAM,IAAI70C,MAAM,oDAElB,MAAO,CACLqZ,QACAC,SACA8pC,WACA3O,WACAlN,MAAOumC,EACPr3B,QAAS,EAAAgC,UAAUkM,eAAempB,GAClCj5B,gBACAk5B,WAAaX,GAASA,EAAMrpB,a,2aC/DpC,gBAsBA,uBAMEzjD,YACW4yC,EAAgCuO,EAA8CkmB,EAC7EqG,GADD,KAAA96B,YAAgC,KAAAuO,iBAA8C,KAAAkmB,WAC7E,KAAAqG,SAJK,KAAAC,YAAuE,IAAI7sE,IAKtF4sE,EAAO/C,gBACT1qE,KAAK2tE,cAAgB,IAAI9sE,IACzBb,KAAK4tE,aAAe,IAAI/sE,IACxBb,KAAK6tE,cAAgB,IAAIhtE,KAG7BgjD,wBACIle,EAA2BuV,EAAuBr5C,EAA0B8hD,GAC9E,MAAMmqB,EAAkB9tE,KAAK+tE,cAAcpoC,GAErCqoC,EAAUhuE,KAAK2yC,UAAUs7B,WAAWH,EAAiB5yB,EAAO2H,UAAY,EAAGc,GACjF,GAAIzI,EAAOhH,UAAsB,IAAVyP,EACrB,MAAM,IAAIlkD,MAAM,mBAElB,MAAMqZ,EAAQoiC,EAAOpiC,MACfC,EAASmiC,EAAOniC,OAEtB,IAAIlV,EACA8pE,EACJ,GAAI3tE,KAAKytE,OAAO/C,cAAe,CAC7B7mE,EAAM,GAAGiV,KAASC,KAAUi1D,EAAQrC,UAAUqC,EAAQvC,kBAAkBuC,EAAQ/sB,cAChF0sB,EAAgB3tE,KAAK2tE,cAAczrE,IAAI2B,GAClC8pE,IACHA,EAAgB,GAChB3tE,KAAK2tE,cAAcpsE,IAAIsC,EAAK8pE,IAG9B,MAAMC,EAAe5tE,KAAK4tE,aAAa1rE,IAAI2B,GAC3C,GAAI+pE,GAAgBA,EAAajuE,OAAS,EAAG,CAC3C,MAAM8hD,EAAUmsB,EAAa98D,MAK7B,OAJA68D,EAAc9tE,KAAK4hD,GACL,IAAVkC,GACF3jD,KAAK2yC,UAAUu7B,cAAczsB,EAAS3oC,EAAOC,EAAQi1D,EAAShuE,KAAKmuE,cAAcxoC,EAAU9jC,IAEtF4/C,GAIX,EAAA5O,OAAOE,QAAQ,iBAAkB,gCAAgCmI,EAAOpiC,SAASoiC,EAAOniC,UACxF,MAAM0oC,EAAUzhD,KAAK2yC,UAAUy7B,gBAAgBt1D,EAAOC,EAAQi1D,EAAShuE,KAAKmuE,cAAcxoC,EAAU9jC,IAMpG,OAJI7B,KAAKytE,OAAO/C,gBACdiD,EAAe9tE,KAAK4hD,GACpBzhD,KAAK6tE,cAActsE,IAAIkgD,EAAS59C,IAE3B49C,EAETwD,YAAY1C,EAAiB5c,EAA2Bkd,GAItD,OAHKA,IACHA,EAAW,GAEN7iD,KAAKonE,SAASK,MAAM,UAAW,8BAA8B,KAClE,MAAMuE,EAAWzpB,EAAGvb,MAAMm3B,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IAAK07C,EAC9ChhD,EAAO7B,KAAK2yC,UAAUsS,YACxB1C,EAAGd,QAASc,EAAGzpC,MAAOypC,EAAGxpC,OAAQizD,EAAUhsE,KAAK+tE,cAAcpoC,GAAWkd,GAC7E,OAAO7iD,KAAKquE,aAAa1oC,EAAU9jC,MAGjCqjD,iBAAiB3C,EAAiB5c,EAA2Bkd,G,yCACjE,MAAMJ,EAASF,EAAGH,OAAOK,OAIzB,GAHKI,IACHA,EAAW,GAET7iD,KAAK0tE,YAAY1xB,IAAIyG,GAAS,CAChC,MAAM6rB,EAActuE,KAAK0tE,YAAYxrE,IAAIugD,GACzC,OAAO,IAAI77C,SAA2B8b,GAAW4rD,aAAW,EAAXA,EAAazuE,KAAK6iB,KAErE,OAAO1iB,KAAKonE,SAASK,MAAM,UAAW,mCAAmC,IAAY,EAAD,gCAClFznE,KAAK0tE,YAAYnsE,IAAIkhD,EAAQ,IAC7B,MAAMupB,EAAWzpB,EAAGvb,MAAMm3B,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IAAK07C,QAE9C7iD,KAAK2yC,UAAU47B,wBACrB,MAAM1sE,EAAO7B,KAAK2yC,UAAUsS,YACxB1C,EAAGd,QAASc,EAAGzpC,MAAOypC,EAAGxpC,OAAQizD,EAAUhsE,KAAK+tE,cAAcpoC,GAAWkd,GACvE2rB,EAAaxuE,KAAKquE,aAAa1oC,EAAU9jC,GACzCysE,EAActuE,KAAK0tE,YAAYxrE,IAAIugD,GAGzC,OAFAziD,KAAK0tE,YAAYl+B,OAAOiT,GACxB6rB,WAAav0D,SAAQ2I,GAAWA,EAAQ8rD,KACjCA,UAGX/oB,wBAAwBlD,GACtB,OAAOviD,KAAKonE,SAASK,MAAM,UAAW,0CAA0C,KAC9E,MAAMuE,EAAWzpB,EAAGvb,MAAMm3B,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IACzCtF,EAAO7B,KAAK2yC,UAAUsS,YAAY1C,EAAGd,QAASc,EAAGzpC,MAAOypC,EAAGxpC,OAAmB,EAAXizD,EAAc,OAAQ,GAC/F,OAAO,IAAIlrE,aAAae,EAAKwC,OAAQxC,EAAKyC,WAAY0nE,MAG1DzmB,eAAeR,EAA0B0pB,GACvC,IAAI5qE,EACJ,GAAI7D,KAAKytE,OAAO/C,gBACd7mE,EAAM7D,KAAK6tE,cAAc3rE,IAAI6iD,EAAYtD,SACrC59C,GAAK,CACH4qE,GACFzuE,KAAK6tE,cAAcr+B,OAAO3rC,GAE5B,MAAM8pE,EAAgB3tE,KAAK2tE,cAAczrE,IAAI2B,GAC7C,GAAI8pE,EAAe,CACjB,MAAMhkD,EAAQgkD,EAAcrtE,QAAQykD,EAAYtD,SAChD,IAAe,IAAX93B,EAAc,CAChBgkD,EAAc/tE,OAAO+pB,EAAO,GAC5B,IAAIikD,EAAe5tE,KAAK4tE,aAAa1rE,IAAI2B,GACpC+pE,IACHA,EAAe,GACf5tE,KAAK4tE,aAAarsE,IAAIsC,EAAK+pE,IAE7BA,EAAa/tE,KAAKklD,EAAYtD,WAMjC59C,IAAO4qE,IACV,EAAA57B,OAAOE,QAAQ,iBAAkB,4BAA4BgS,EAAYjsC,SAASisC,EAAYhsC,UAC9F/Y,KAAK2yC,UAAU87B,cAAc1pB,EAAYtD,UAG7C4sB,aAAa1oC,EAA2B9jC,GACtC,OAAQ8jC,GACN,IAAK,QACH,OAAO9jC,aAAgBX,WAAaW,EAAOX,WAAWT,KAAKoB,GAC7D,IAAK,QACH,OAAOA,aAAgBV,WAAaU,EAAOV,WAAWV,KAAKoB,GAC7D,IAAK,OACH,OAAOA,aAAgBb,UAAYa,EAAOb,UAAUP,KAAKoB,GAC3D,IAAK,SACH,OAAOA,aAAgBZ,YAAcY,EAAOZ,YAAYR,KAAKoB,GAC/D,IAAK,SACH,OAAOA,aAAgBR,YAAcQ,EAAOR,YAAYZ,KAAKoB,GAC/D,IAAK,QACL,IAAK,OACH,OAAOA,aAAgBd,WAAac,EAAOd,WAAWN,KAAKoB,GAC7D,IAAK,UACH,OAAOA,aAAgBf,aAAee,EAAOf,aAAaL,KAAKoB,GACjE,IAAK,UACH,OAAOA,aAAgBT,aAAeS,EAAOT,aAAaX,KAAKoB,GACjE,QACE,MAAM,IAAIpC,MAAM,mBAAmBkmC,uBAGzCwoC,cAAcxoC,EAA2B9jC,GACvC,GAAKA,EAGL,OAAQA,aAAgBf,aAAgBe,EAAO,IAAIf,aAAae,GAoBlEksE,cAAcW,GACZ,MAAO,QAiBTppB,sBACEtlD,KAAK2yC,UAAU2S,yB,0BChLnB,IAAYjD,E,uEAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACrB,yBACA,2CACA,uBACA,mDACA,kD,0mBC3CF,gBAOA,0BAA+B/N,GAC7B,MAAM3lB,EAAM2lB,EAAc30C,OAC1B,OAAO20C,EAAc5rC,MAAM,EAAGimB,EAAM,GAAGg4B,OAAOrS,EAAc3lB,EAAM,GAAK,IAGzE,uBACIggD,EAAwBC,EAAU,CAACC,GAAqB,GAAGC,G,yCAC7D,OAAO,IAAIloE,SAAc,CAAC8b,EAASmH,KACjC,IAAIklD,EAAW,EAEf,MAAMC,EAAQ,KACZ,GAAIL,IAEF,YADAjsD,IAIFqsD,IAEA,MAAME,EAAcL,EAAQG,GAEV,MAAdD,GAAsBC,GAAYD,EACpCjlD,IAGF7L,WAAWgxD,EAAOC,IAGpBD,WAQJ,sDAA2Dv4B,GAEzD,OADA,EAAA81B,YAA8B,IAAhB91B,GAAsD,IAAvBA,EAAY92C,QAAc,IAAM,wCACtE,MAAQ82C,EAAYzsB,OAAO,GAAGklD,cAAgBz4B,EAAY/tC,MAAM,IAOzE,iEAAsE+tC,GAEpE,OADA,EAAA81B,YAA8B,IAAhB91B,GAAsD,IAAvBA,EAAY92C,QAAc,IAAM,wCACtE,MAAQ82C,EAAYzsB,OAAO,GAAGklD,cAAgBz4B,EAAY/tC,MAAM,GAAK,eAI9E,6BAAkC2lD,EAA+B9U,GAE/D,IAAIE,EAA0BG,KAAK1hB,MAAM0hB,KAAKC,UAAUwU,IAExD,OADA5U,EAAgBF,EACTE,GAIT,6BAAkC/vB,EAAkB8vB,GAClD,OAAOA,EAAS90C,KAAIuC,GAAKyiB,EAAOziB,KAAI7B,KAAK,OAI3C,6BAAkC6wC,GAChC,GAAIA,GAAQ,EACV,MAAO,MACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QAEP,MAAMx2C,MAAM,gBAAgBw2C,2BAIhC,yBAA8BA,EAAO,GACnC,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKvtC,MAAM,EAAGutC,K,iICzFjD,gBAEA,UAEM9c,EAA6C,GAuCnD,SAAgBg2C,EAAsB58B,GACpC,MAAM/yB,EAsCR,WACE,MAAMA,EAA4B/Z,SAAS2pE,cAAc,UAGzD,OAFA5vD,EAAO1G,MAAQ,EACf0G,EAAOzG,OAAS,EACTyG,EA1CQ6vD,GAUf,IAAI3H,EACJ,MAAMvpD,EAV4C,CAChDC,OAAO,EACPC,OAAO,EACPE,WAAW,EACXD,SAAS,EACTG,uBAAuB,EACvBD,oBAAoB,EACpBG,8BAA8B,GAIhC,KAAK4zB,GAA2B,WAAdA,KAChBm1B,EAAKloD,EAAOL,WAAW,SAAUhB,GAC7BupD,GACF,IACE,OAAO,IAAI,EAAA4H,aAAa5H,EAAI,GAC5B,MAAOviE,GACP,EAAA0tC,OAAOG,QAAQ,mBAAoB,kEAAkE7tC,KAI3G,KAAKotC,GAA2B,UAAdA,KAChBm1B,EAAKloD,EAAOL,WAAW,QAAShB,IAAOqB,EAAOL,WAAW,qBAAsBhB,GAC3EupD,GACF,IACE,OAAO,IAAI,EAAA4H,aAAa5H,EAAI,GAC5B,MAAOviE,GACP,EAAA0tC,OAAOG,QACH,mBACA,yFAAyF7tC,KAKnG,MAAM,IAAI1F,MAAM,0BApElB,8BAAgBmzC,EAAmBL,GACjC,IAAIU,EACEV,GAA2B,WAAdA,KAA2B,WAAYpZ,GAE7CoZ,GAA2B,UAAdA,KAA0B,UAAWpZ,KAC7D8Z,EAAU9Z,EAAMj5B,OAFhB+yC,EAAU9Z,EAAMo2C,OAKlBt8B,EAAUA,GAAWk8B,EAAsB58B,GAC3CA,EAAYA,GAAiC,IAApBU,EAAQ1zB,QAAgB,QAAU,SAC3D,MAAMmoD,EAAKz0B,EAAQy0B,GAInB,OAFAvuC,EAAMoZ,GAAaU,EAEfy0B,EAAG8H,wBACEr2C,EAAMoZ,GACNK,EAAmBL,KAG5Bm1B,EAAG+H,QAAQ/H,EAAGgI,YACdhI,EAAG+H,QAAQ/H,EAAGiI,cACdjI,EAAG+H,QAAQ/H,EAAGkI,OACdlI,EAAG+H,QAAQ/H,EAAGmI,QACdnI,EAAG+H,QAAQ/H,EAAGoI,qBACdpI,EAAG+H,QAAQ/H,EAAGqI,iBACdrI,EAAGsI,OAAOtI,EAAGuI,cACbvI,EAAGsI,OAAOtI,EAAGwI,WACbxI,EAAGyI,SAASzI,EAAG0I,MAERn9B,IAGT,2B,y9BC3CA,gBAEA,aAEA,UAWA,SAAgBo9B,EAAqBr/B,GACnC,IAAItxC,EAAI,EACR,KAAOA,EAAIsxC,EAAIrxC,QACEqxC,EAAItxC,OADIA,GAMzB,OAAOA,EAAI,EARb,yBAcA,qBAwCEK,YAAY2nE,EAA2BnoD,GAF/B,KAAA+wD,kBAAmB,EAogBnB,KAAAC,YAA0B,GAjgBhCvwE,KAAK0nE,GAAKA,EACV1nE,KAAKuf,QAAUA,EAEfvf,KAAKwwE,gBACLxwE,KAAKywE,aAAezwE,KAAK0wE,qBACzB1wE,KAAK2wE,YAAc3wE,KAAK4wE,oBACxB5wE,KAAK6wE,uBAGPzC,gBAAgBt1D,EAAeC,EAAgBi1D,EAAsBnsE,GACnE,MAAM6lE,EAAK1nE,KAAK0nE,GAEVjmB,EAAUimB,EAAGoJ,gBAEnBpJ,EAAGkC,YAAYlC,EAAGqJ,WAAYtvB,GAC9BimB,EAAGsJ,cAActJ,EAAGqJ,WAAYrJ,EAAGuJ,mBAAoBvJ,EAAGwJ,SAC1DxJ,EAAGsJ,cAActJ,EAAGqJ,WAAYrJ,EAAGyJ,mBAAoBzJ,EAAGwJ,SAC1DxJ,EAAGsJ,cAActJ,EAAGqJ,WAAYrJ,EAAG0J,eAAgB1J,EAAG2J,eACtD3J,EAAGsJ,cAActJ,EAAGqJ,WAAYrJ,EAAG4J,eAAgB5J,EAAG2J,eACtD,MAAMhtE,EAASxC,EAAOmsE,EAAQ7jD,OAAOtoB,EAAMiX,EAAQC,GAAU,KAQ7D,OAPA2uD,EAAG6J,WACC7J,EAAGqJ,WACH,EACA/C,EAAQvC,eAAgB3yD,EAAOC,EAC/B,EACAi1D,EAAQrC,OAAQqC,EAAQ/sB,YAAa58C,GACzCrE,KAAKwxE,aACE/vB,EAETysB,cACIzsB,EAAuB3oC,EAAeC,EAAgBi1D,EAAsBnsE,GAC9E,MAAM6lE,EAAK1nE,KAAK0nE,GAChBA,EAAGkC,YAAYlC,EAAGqJ,WAAYtvB,GAC9B,MAAMp9C,EAAS2pE,EAAQ7jD,OAAOtoB,EAAMiX,EAAQC,GAC5C2uD,EAAG+J,cACC/J,EAAGqJ,WACH,EACA,EACA,EACAj4D,EAAOC,EAAQi1D,EAAQrC,OAAQqC,EAAQ/sB,YAAa58C,GACxDrE,KAAKwxE,aAEPpI,kBAAkB3nB,EAAuB3oC,EAAeC,GACtD,MAAM2uD,EAAK1nE,KAAK0nE,GAEhBA,EAAGkC,YAAYlC,EAAGqJ,WAAYtvB,GAC9BimB,EAAGgK,gBAAgBhK,EAAGiK,YAAa3xE,KAAK2wE,aACxCjJ,EAAGkK,qBACClK,EAAGiK,YAAajK,EAAGmK,kBAAmBnK,EAAGqJ,WAAYtvB,EACrD,GACJzhD,KAAKwxE,aACL9J,EAAG1uD,SAAS,EAAG,EAAGF,EAAOC,GACzB2uD,EAAGoK,QAAQ,EAAG,EAAGh5D,EAAOC,GAE1BksC,YACIxD,EAAuB3oC,EAAeC,EAAgBizD,EAAkBrmC,EACxEkd,GACF,MAAM6kB,EAAK1nE,KAAK0nE,GACX7kB,IACHA,EAAW,GAER7iD,KAAKswE,kBACRtwE,KAAKopE,kBAAkB3nB,EAAS3oC,EAAOC,GAEzC,MAAMi1D,EAAUhuE,KAAKiuE,WAAWtoC,EAAUkd,GACpCx+C,EAAS2pE,EAAQt9C,SAAS5X,EAAQC,GAUxC,OARA2uD,EAAGkC,YAAYlC,EAAGqJ,WAAYtvB,GAC9BimB,EAAGkK,qBACClK,EAAGiK,YAAajK,EAAGmK,kBAAmBnK,EAAGqJ,WAAYtvB,EACrD,GAEJimB,EAAGqK,WAAW,EAAG,EAAGj5D,EAAOC,EAAQ2uD,EAAGoE,KAAMkC,EAAQ/sB,YAAa58C,GACjErE,KAAKwxE,aAEExD,EAAQziE,OAAOlH,EAAQ2nE,GAGhCgG,qBAEE,OAAO,EAETC,mBACE,MAAMvK,EAAK1nE,KAAK0nE,GAEhB,MAAO,WADGA,EAAG7uD,aAAa7Y,KAAK0nE,GAAGwK,gBACZxK,EAAGyK,UAE3BC,oBACE,OAAOpyE,KAAK0nE,GAAG7uD,aAAa7Y,KAAK0nE,GAAG2K,oBAEtCC,wBACE,OAAOtyE,KAAK0nE,GAAG7uD,aAAa7Y,KAAK0nE,GAAG6K,qBAEtC/I,oBAAoBH,EAAwBC,GAC1C,MAAM5B,EAAK1nE,KAAK0nE,GAChBA,EAAG8K,oBAAoBnJ,EAAgB,EAAG3B,EAAGx3B,OAAO,EAAO,GAAI,GAC/Dw3B,EAAG+K,wBAAwBpJ,IACC,IAAxBC,IACF5B,EAAG8K,oBAAoBlJ,EAAoB,EAAG5B,EAAGx3B,OAAO,EAAO,GAAI,IACnEw3B,EAAG+K,wBAAwBnJ,IAE7BtpE,KAAKwxE,aAEPrI,cACIjB,EACAe,GAEF,MAAMvB,EAAK1nE,KAAK0nE,GACVtmB,EAAUsmB,EAAGyB,gBAMnB,OAHAzB,EAAGgL,aAAatxB,EAAS8mB,GACzBR,EAAGgL,aAAatxB,EAAS6nB,GACzBvB,EAAGiL,YAAYvxB,GACRA,EAET0nB,cAAc5qB,EAAsB00B,GAClC,MAAMlL,EAAK1nE,KAAK0nE,GACVmL,EAASnL,EAAGoL,aAAaF,GAC/B,IAAKC,EACH,MAAM,IAAIpzE,MAAM,0CAA0CmzE,KAK5D,GAFAlL,EAAGxpB,aAAa20B,EAAQ30B,GACxBwpB,EAAGoB,cAAc+J,IACwC,IAArDnL,EAAGqL,mBAAmBF,EAAQnL,EAAGsL,gBACnC,MAAM,IAAIvzE,MAAM,6BAA6BioE,EAAGuL,iBAAiBJ,uBAErE30B,KAEE,OAAO20B,EAET1K,aAAa0K,GACX7yE,KAAK0nE,GAAGS,aAAa0K,GAEvB3I,qBAAqBzoB,EAAuB/vB,EAAkBu4C,GAC5D,MAAMvC,EAAK1nE,KAAK0nE,GAChBA,EAAGwL,cAAcxL,EAAGyK,SAAWzgD,GAC/B1xB,KAAKwxE,aACL9J,EAAGkC,YAAYlC,EAAGqJ,WAAYtvB,GAC9BzhD,KAAKwxE,aACL9J,EAAGsC,UAAUC,EAAev4C,GAC5B1xB,KAAKwxE,aAEPvJ,OACEjoE,KAAK0nE,GAAGyL,WAAWnzE,KAAK0nE,GAAG0L,eAAgB,EAAG,GAC9CpzE,KAAKwxE,aAEPA,aACE,GAAI,EAAA1xE,IAAIkpE,MAAO,CACb,MAAMtB,EAAK1nE,KAAK0nE,GACVv+D,EAAQu+D,EAAG2L,WACjB,IAAIC,EAAQ,GACZ,OAAQnqE,GACN,KAAMu+D,EAAW,SACf,OACF,KAAMA,EAAe,aACnB4L,EAAQ,eACR,MACF,KAAM5L,EAAgB,cACpB4L,EAAQ,gBACR,MACF,KAAM5L,EAAoB,kBACxB4L,EAAQ,oBACR,MACF,KAAM5L,EAAgC,8BACpC4L,EAAQ,gCACR,MACF,KAAM5L,EAAgB,cACpB4L,EAAQ,gBACR,MACF,KAAM5L,EAAqB,mBACzB4L,EAAQ,qBACR,MACF,QACEA,EAAQ,wBAAwBnqE,EAAM2S,SAAS,MAEnD,MAAM,IAAIrc,MAAM6zE,IAGpB7E,cAAchtB,GACZzhD,KAAK0nE,GAAG+G,cAAchtB,GAExB2mB,cAAchnB,GACZphD,KAAK0nE,GAAGU,cAAchnB,GAExB6sB,WAAWtoC,EAA4Bkd,EAAkBc,EAAA,GACvD,GAAqB,IAAjB3jD,KAAKuf,QACP,OAAO,IAAIg0D,EAAaC,sBAAsBxzE,KAAK0nE,GAA8B7kB,GAGnF,OAAQld,GACN,IAAK,QACH,OAAc,IAAVge,GAAsC3jD,KAAKyzE,yBACtC,IAAIF,EAAaG,qBAAqB1zE,KAAK0nE,GAAI7kB,GAE/C,IAAI0wB,EAAaG,qBACpB1zE,KAAK0nE,GAAI7kB,EAAU7iD,KAAK2zE,0BAA2BC,gBAE3D,IAAK,MACH,MAAM,IAAIn0E,MAAM,mBAClB,IAAK,OACH,OAAO,IAAI8zE,EAAaM,iBAAiB7zE,KAAK0nE,GAAI7kB,GACpD,QACE,MAAM,IAAIpjD,MAAM,qBAAqBkmC,MAG3C2f,sBACE,MAAMoiB,EAAK1nE,KAAK0nE,GAChB,IAAK,IAAIoM,EAAO,EAAGA,EAAO9zE,KAAK+zE,uBAAwBD,EACrDpM,EAAGwL,cAAcxL,EAAGyK,SAAW2B,GAC/BpM,EAAGkC,YAAYlC,EAAGqJ,WAAY,MAGlC7+B,UACE,GAAIlyC,KAAKg0E,SACP,OAEF,MAAMtM,EAAK1nE,KAAK0nE,GAChBA,EAAGgK,gBAAgBhK,EAAGiK,YAAa,MACnCjK,EAAGuM,kBAAkBj0E,KAAK2wE,aAC1BjJ,EAAGwM,WAAWxM,EAAGyM,aAAc,MAC/BzM,EAAG0M,aAAap0E,KAAKywE,cACrB/I,EAAGwM,WAAWxM,EAAG2M,qBAAsB,MACvC3M,EAAGhzC,SACH10B,KAAKg0E,UAAW,EAGVM,wBAEN,OAAO,IAAIxzE,aAAa,EACrB,EAAK,EAAM,EAAK,EAAK,GACrB,GAAM,EAAK,EAAK,EAAK,EACtB,EAAM,EAAM,EAAK,EAAK,EACtB,GAAO,EAAK,EAAK,EAAK,IAGlB4vE,qBACN,MAAMhJ,EAAK1nE,KAAK0nE,GACVrjE,EAASqjE,EAAG6M,eAClB,IAAKlwE,EACH,MAAM,IAAI5E,MAAM,gCAElB,MAAM+0E,EAAWx0E,KAAKs0E,wBAItB,OAHA5M,EAAGwM,WAAWxM,EAAGyM,aAAc9vE,GAC/BqjE,EAAG+M,WAAW/M,EAAGyM,aAAcK,EAAU9M,EAAGgN,aAC5C10E,KAAKwxE,aACEntE,EAEDusE,oBACN,MAAMlhE,EAAK1P,KAAK0nE,GAAGkJ,oBACnB,IAAKlhE,EACH,MAAM,IAAIjQ,MAAM,mCAElB,OAAOiQ,EAGDmhE,uBACN,MAAMnJ,EAAK1nE,KAAK0nE,GAMhB,GAJA1nE,KAAK20E,sCAAwC30E,KAAK40E,2CAClD50E,KAAKyzE,yBAA2BzzE,KAAK60E,qBACrC70E,KAAKwlD,2BAA6BxlD,KAAK80E,uBAElB,IAAjB90E,KAAKuf,UAAkBvf,KAAK2zE,4BAA8B3zE,KAAKyzE,yBACjE,MAAM,IAAIh0E,MAAM,0DAGlBO,KAAK+0E,kBAAoB/0E,KAAKyzE,0BAA4BzzE,KAAKg1E,oBAG/Dh1E,KAAKuqE,eAAiB7C,EAAG7uD,aAAa6uD,EAAGuN,kBACzCj1E,KAAK+zE,qBAAuBrM,EAAG7uD,aAAa6uD,EAAGwN,yBAM3Cl1E,KAAKuf,QAOHixD,gBACe,IAAjBxwE,KAAKuf,SACPvf,KAAKm1E,0BAA4Bn1E,KAAK0nE,GAAGhoD,aAAa,0BACtD1f,KAAKo1E,kCAAoCp1E,KAAK0nE,GAAGhoD,aAAa,qCAE9D1f,KAAKq1E,sBAAwBr1E,KAAK0nE,GAAGhoD,aAAa,qBAClD1f,KAAK2zE,0BAA4B3zE,KAAK0nE,GAAGhoD,aAAa,2BAIlDk1D,2CAGN,MAAMlN,EAAK1nE,KAAK0nE,GACVjmB,EAAUimB,EAAGoJ,gBACnBpJ,EAAGkC,YAAYlC,EAAGqJ,WAAYtvB,GAE9B,MAAMgqB,EAAkC,IAAjBzrE,KAAKuf,QAAiBmoD,EAAoCmE,QAAUnE,EAAGoE,KAC9FpE,EAAG6J,WAAW7J,EAAGqJ,WAAY,EAAGtF,EAAgB,EAAG,EAAG,EAAG/D,EAAGoE,KAAMpE,EAAGx3B,MAAO,MAE5E,MAAMolC,EAAc5N,EAAGkJ,oBACvBlJ,EAAGgK,gBAAgBhK,EAAGiK,YAAa2D,GAEnC5N,EAAGkK,qBAAqBlK,EAAGiK,YAAajK,EAAGmK,kBAAmBnK,EAAGqJ,WAAYtvB,EAAS,GAEtF,MAAM8zB,EAAa7N,EAAG8N,uBAAuB9N,EAAGiK,eAAiBjK,EAAG+N,qBAKpE,OAJA/N,EAAGkC,YAAYlC,EAAGqJ,WAAY,MAC9BrJ,EAAGgK,gBAAgBhK,EAAGiK,YAAa,MACnCjK,EAAG+G,cAAchtB,GACjBimB,EAAGuM,kBAAkBqB,GACdC,EAGDV,qBACN,GAAqB,IAAjB70E,KAAKuf,SACP,IAAKvf,KAAKm1E,0BACR,OAAO,OAGT,IAAKn1E,KAAKq1E,sBACR,OAAO,EAGX,OAAOr1E,KAAK20E,sCAGNG,uBACN,GAAqB,IAAjB90E,KAAKuf,SACP,IAAKvf,KAAKm1E,0BACR,OAAO,MAEJ,CACL,IAAKn1E,KAAKq1E,sBACR,OAAO,EAET,IAAKr1E,KAAK0nE,GAAGhoD,aAAa,4BACxB,OAAO,EAGX,OAAO1f,KAAK20E,sCAMNK,oBAIN,MAAMtN,EAAK1nE,KAAK0nE,GAEhB,IAAIjmB,EACA6zB,EACApN,EACAwN,EACAt0B,EAEJ,IACEK,EAAUimB,EAAGoJ,gBACbwE,EAAc5N,EAAGkJ,oBACjBlJ,EAAGkC,YAAYlC,EAAGqJ,WAAYtvB,GAG9B,MAAMgqB,EAAkC,IAAjBzrE,KAAKuf,QAAiBmoD,EAAoCmE,QAAUnE,EAAGoE,KAS9F,OARApE,EAAG6J,WAAW7J,EAAGqJ,WAAY,EAAGtF,EAAgB,EAAG,EAAG,EAAG/D,EAAGoE,KAAMpE,EAAGx3B,MAAO,MAE5Ew3B,EAAGgK,gBAAgBhK,EAAGiK,YAAa2D,GACnC5N,EAAGkK,qBAAqBlK,EAAGiK,YAAajK,EAAGmK,kBAAmBnK,EAAGqJ,WAAYtvB,EAAS,GAEtFimB,EAAGsI,OAAOtI,EAAGkI,OAEb1H,EAAeR,EAAGoL,aAAapL,EAAGqB,iBAC7Bb,IAGLR,EAAGxpB,aAAagqB,EAAc,iBAC9BR,EAAGoB,cAAcZ,GAEjBwN,EAAiBhO,EAAGoL,aAAapL,EAAGwB,mBAC/BwM,IAGLhO,EAAGxpB,aAAaw3B,EAAgB,8DAChChO,EAAGoB,cAAc4M,GAEjBt0B,EAAUsmB,EAAGyB,kBACR/nB,IAGLsmB,EAAGgL,aAAatxB,EAAS8mB,GACzBR,EAAGgL,aAAatxB,EAASs0B,GACzBhO,EAAGiL,YAAYvxB,GACfsmB,EAAGC,WAAWvmB,GAEdsmB,EAAGyL,WAAWzL,EAAGiO,OAAQ,EAAG,GACrBjO,EAAG2L,aAAe3L,EAAGkO,Y,QAG5BlO,EAAG+H,QAAQ/H,EAAGkI,OAEVxuB,GACFsmB,EAAGU,cAAchnB,GAEf8mB,GACFR,EAAGS,aAAaD,GAEdwN,GACFhO,EAAGS,aAAauN,GAEdJ,IACF5N,EAAGgK,gBAAgBhK,EAAGiK,YAAa,MACnCjK,EAAGuM,kBAAkBqB,IAEnB7zB,IACFimB,EAAGkC,YAAYlC,EAAGqJ,WAAY,MAC9BrJ,EAAG+G,cAAchtB,KAKvBo0B,aACE,GAAqB,IAAjB71E,KAAKuf,SAAiBvf,KAAKo1E,kCAAmC,CAChE,MAAMU,EAAM91E,KAAK0nE,GACXqO,EAAM/1E,KAAKo1E,kCAEXY,EAAQF,EAAIG,cAElB,OADAH,EAAII,WAAWH,EAAII,iBAAkBH,GAC9BA,EAGP,MAAM,IAAIv2E,MAAM,6CAIpB22E,WACE,GAAqB,IAAjBp2E,KAAKuf,UAAiBvf,KAAKo1E,kCAO7B,MAAM,IAAI31E,MAAM,4CAPlB,CACE,MAAMq2E,EAAM91E,KAAK0nE,GACXqO,EAAM/1E,KAAKo1E,kCACjBU,EAAIO,SAASN,EAAII,mBAQrBG,uBAAuBN,GACrB,IAAIO,GAAY,EAAOC,GAAW,EAClC,GAAqB,IAAjBx2E,KAAKuf,UAAiBvf,KAAKo1E,kCAQ7B,MAAM,IAAI31E,MAAM,4CARgD,CAChE,MAAMq2E,EAAM91E,KAAK0nE,GACXqO,EAAM/1E,KAAKo1E,kCAEjBmB,EAAYT,EAAIW,kBAAkBT,EAAOF,EAAIY,wBAC7CF,EAAWV,EAAIj9D,aAAak9D,EAAIY,kBAMlC,OAAOJ,IAAcC,EAGvBI,eAAeZ,GACb,IAAIa,EAAc,EAClB,GAAqB,IAAjB72E,KAAKuf,QAMP,MAAM,IAAI9f,MAAM,4CANM,CACtB,MAAMq2E,EAAM91E,KAAK0nE,GACjBmP,EAAcf,EAAIW,kBAAkBT,EAAOF,EAAIgB,cAC/ChB,EAAIiB,YAAYf,GAMlB,OAAOa,EAAc,IAGjBG,uBAAuBhB,G,yCAE3B,aADM,EAAAiB,aAAY,IAAMj3E,KAAKs2E,uBAAuBN,KAC7Ch2E,KAAK42E,eAAeZ,MAGhBzH,wB,yCACX,MAAM2I,EAAel3E,KAAKm3E,YAAYn3E,KAAK0nE,IAC3C,OAAO1nE,KAAKo3E,UAAUF,MAGhBC,YAAYzP,GAClB,IAAI2P,EACJ,MAAMvB,EAAMpO,EACNsO,EAAQF,EAAIwB,UAAUxB,EAAIyB,2BAA4B,GAU5D,OATA7P,EAAG8P,QAEDH,EADY,OAAVrB,EACc,KAAM,EAEN,KACd,MAAMhsE,EAAS8rE,EAAI2B,eAAezB,EAAO,EAAG,GAC5C,OAAOhsE,IAAW8rE,EAAI4B,kBAAoB1tE,IAAW8rE,EAAI6B,qBAGtD,CAAC3B,QAAOqB,iBAGXD,UAAUF,G,yCACd,OAAO,IAAItwE,SAAc8b,IAClB1iB,KAAK43E,eAAc,IAAMV,EAAaG,kBAAiB,IAAM30D,YAMtEm1D,YAEE,MAAMluD,EAAQ0mD,EAAqBrwE,KAAKuwE,YAAY7rE,KAAI2F,GAAKA,EAAEytE,YAC/D,IAAK,IAAIp4E,EAAI,EAAGA,GAAKiqB,IAASjqB,EAAG,CAC/B,MAAM,UAACq4E,GAAa/3E,KAAKuwE,YAAY7wE,GACrCq4E,IAEF/3E,KAAKuwE,YAAcvwE,KAAKuwE,YAAY7nE,MAAMihB,EAAQ,GAGtCiuD,cAAcE,EAAyBC,G,yCACnD/3E,KAAKuwE,YAAY1wE,KAAK,CAACi4E,WAAUC,cAC7B/3E,KAAKuwE,YAAY5wE,OAAS,UAKxB,EAAAs3E,aAAY,KAChBj3E,KAAK63E,YAE8B,IAA5B73E,KAAKuwE,YAAY5wE,iB,0aC3lB9B,gBAIA,MAAMq4E,EACJj4E,YAAmBqrE,EAAqBvjE,GAArB,KAAAujE,KAAqB,KAAAvjE,QAG1C,sBACE9H,YAAoB4kC,EAAco6B,EAAyBqI,GAAvC,KAAAziC,QAAuC,KAAAyiC,WACzDpnE,KAAKiyC,WAAW8sB,GAGlB9sB,WAAW8sB,GACT/+D,KAAKonE,SAASK,MAAM,UAAW,4BAA4B,KACzD,MAAM3rB,EAAa97C,KAAK2kC,MAAMszC,WAC9B,GAAIn8B,EAAWn8C,SAAWo/D,EAAIp/D,OAC5B,MAAM,IAAIF,MAAM,2CAGlBO,KAAKk4E,KAAOnZ,EAAIr6D,KAAI,CAAC0mE,EAAI1rE,IAAM,IAAIs4E,EAAS5M,EAAItvB,EAAWp8C,MAC3DM,KAAKmtC,QAGLntC,KAAKm4E,SAAW,GAChBn4E,KAAKk4E,KAAKn+D,SAAQ,CAACqxD,EAAI1rE,KACrB,IAAI04E,GAAW,EACf,IAAK,MAAMr0C,KAASqnC,EAAGvjE,KAAKw5C,OAC1B,IACKrhD,KAAKq4E,QAAQt0C,KACsC,IAAjD/jC,KAAK2kC,MAAM2zC,kBAAkBh4E,QAAQyjC,GAC1C,CACAq0C,GAAW,EACX,MAGAA,GACFp4E,KAAKm4E,SAASt4E,KAAKH,SAM3BytC,QACEntC,KAAKq4E,QAAUr4E,KAAK2kC,MAAMsmC,YAAYvmE,KAAIhF,GAAKA,EAAE0iD,SAG7Cm2B,QAAQC,EAAgCC,G,yCAC5C,OAAOz4E,KAAKonE,SAASK,MAAM,UAAW,yBAAyB,IAAY,EAAD,gCAExEznE,KAAKmtC,QAGL,MAAMoe,EAAmBitB,EAAe3N,yBAGlC6N,EAAc14E,KAAK2kC,MAAM2zC,kBAC/B,GAAIG,EAAY94E,SAAW+4E,EAAY/4E,OACrC,MAAM,IAAIF,MAAM,kFACZg5E,EAAY94E,oBAAoB+4E,EAAY/4E,UAGlD84E,EAAY1+D,SAAQ,CAACgqB,EAAOrkC,KAC1B,MAAMiqB,EAAQ+uD,EAAYh5E,GAC1BM,KAAKq4E,QAAQ1uD,GAASoa,KAIxB,MAAM40C,EAAqB34E,KAAKm4E,SAASzvE,MAAM,GAGzCkwE,EAAc54E,KAAK2kC,MAAMsmC,YACzBnvB,EAAa97C,KAAK2kC,MAAMszC,WAE9B,IAAIY,EAAO,EACX,KAAOA,EAAOF,EAASh5E,QAAQ,CAC7B,MAAMm5E,EAAcH,EAASE,KACvBE,EAAS/4E,KAAKk4E,KAAKY,GAGnBE,EAAYD,EAAOlxE,KAAKw5C,OAAO38C,KAAIhF,GAAKM,KAAKq4E,QAAQ34E,KAC3D,IAAsC,IAAlCs5E,EAAU14E,aAAQd,GACpB,MAAM,IAAIC,MAAM,kCAAkCs5E,EAAOlxE,QAI3D,MAAMoxE,EAAeD,EACrB,EAAAnmC,OAAOE,QACH,WACA,aAAagmC,EAAOlxE,KAAK5I,SACrBg6E,EAAav0E,KAAI,CAACkB,EAAGlG,IAAM,IAAIq5E,EAAOlxE,KAAKw5C,OAAO3hD,QAAQkG,EAAEhE,QAAQgE,EAAE9D,KAAKsD,KAAK,UAASA,KAAK,UAEtG,MAAM8zE,QAAmBl5E,KAAKonE,SAASK,MACnC,OAAQsR,EAAOlxE,KAAK5I,MAAM,IAAY,EAAD,gCAAC,OAAA85E,EAAO3N,GAAGE,KAAK/f,EAAkB0tB,EAAcF,EAAO3N,GAAGn4B,cAGnG,GAAIimC,EAAWv5E,SAAWo5E,EAAOlxE,KAAK07D,QAAQ5jE,OAC5C,MAAM,IAAIF,MAAM,uDAIlBy5E,EAAWn/D,SAAQ,CAACiqB,EAAQtkC,KAC1B,MAAM2L,EAAI0tE,EAAOlxE,KAAK07D,QAAQ7jE,GAC9B,GAAIM,KAAKq4E,QAAQhtE,GACf,MAAM,IAAI5L,MAAM,WAAW4L,4BAA4B0tE,EAAOlxE,KAAK5I,QAErEe,KAAKq4E,QAAQhtE,GAAK24B,KAIpB,MAAMm1C,EAAkB,IAAIx9B,IAC5Bu9B,EAAWn/D,SAAQ,CAACiqB,EAAQtkC,KAC1B,MAAM2L,EAAI0tE,EAAOlxE,KAAK07D,QAAQ7jE,GAC9B,IAAK,MAAM05E,KAA8BR,EAAYvtE,GAAGyiD,GAAI,CAC1D,MAAMurB,EAAwBv9B,EAAWs9B,GACzC,IAAIhB,GAAW,EACf,IAAK,MAAMjuE,KAAKkvE,EAAsBh4B,OACpC,IAAKrhD,KAAKq4E,QAAQluE,GAAI,CACpBiuE,GAAW,EACX,MAGAA,GACFe,EAAgB3+C,IAAI4+C,OAI1BT,EAAS94E,QAAQs5E,GAGnB,MAAMn1C,EAAmB,GACzB,IAAK,IAAItkC,EAAI,EAAGA,EAAIM,KAAK2kC,MAAM20C,mBAAmB35E,OAAQD,IAAK,CAC7D,MAAM65E,EAAcv5E,KAAK2kC,MAAM20C,mBAAmB55E,GAC5C85E,EAAex5E,KAAKq4E,QAAQkB,GAClC,QAAqB/5E,IAAjBg6E,EACF,MAAM,IAAI/5E,MAAM,oBAAoB85E,0BAElB,IAAhBA,QACIC,EAAaC,UAGnBD,EAAa33E,KAEfmiC,EAAOnkC,KAAK25E,GAId,OAFA,EAAA3mC,OAAOE,QAAQ,WAAY,iCAC3BwY,EAAiBrZ,UACVlO,a,4FCrJb,gBAEA,UAEA,IAAO+K,EADP,QACgBC,YAAYC,aAAaC,IACzC,gBACA,UAmEa,EAAAwqC,MAAQ,CAInBj5E,KAAM,CAACk5E,EAA2C10C,IAC9C,IAAI20C,EAAUD,EAAY10C,IAGhC,MAAM40C,EACJ95E,YAAYmlC,GACVllC,KAAK85E,WAAQt6E,EACbQ,KAAK+5E,IAAM,GACX/5E,KAAKoiD,YAAS5iD,EACdQ,KAAK4B,UAAOpC,EAER0lC,IACFllC,KAAK4B,KAAO,EAAAmsD,UAAUisB,yBAAyB90C,EAAUtjC,KAAMklC,aAK/DrmC,WACF,OAAOT,KAAK85E,MAGVhsB,SACF,OAAO9tD,KAAK+5E,KAMhB,MAAME,EACJl6E,YAAYm6E,EAAyCj7E,GAC/Ci7E,aAAsB,EAAA15C,KAAKsD,WAC7B9jC,KAAKf,KAAOi7E,EAAWj7E,KACvBe,KAAKkkC,OAASg2C,EAAWh2C,OACzBlkC,KAAKsf,WAAa,IAAI,EAAA6vB,UAAU+qC,EAAWj2C,YAClCi2C,aAAsBnrC,EAAOkrC,OACtCj6E,KAAKf,KAAOA,UAAQi7E,EAAWj7E,OAC/Be,KAAKkkC,OAASg2C,EAAWh2C,SACzBlkC,KAAKsf,WAAa,IAAI,EAAA6vB,UAAU,EAAA4e,UAAUosB,8BAA8BD,KAG1El6E,KAAKqhD,OAAS,GACdrhD,KAAKujE,QAAU,GACfvjE,KAAKo6E,aAAc,GAWvB,MAAMR,EAWJ75E,YAAY4kC,EAAsC01C,GAChD,IAAK11C,EACH,MAAM,IAAIrlC,UAAU,kBAItBU,KAAKs6E,WAAW31C,GAGhB3kC,KAAKu6E,eAAeF,GAGpBr6E,KAAKw6E,iBAGPlC,kBACE,OAAOt4E,KAAKy6E,iBAGdC,gBACE,OAAO16E,KAAK26E,eAGdrB,mBACE,OAAOt5E,KAAK46E,kBAGdC,iBACE,OAAO76E,KAAK86E,gBAGd7P,YACE,OAAOjrE,KAAK+6E,SAGd9C,WACE,OAAOj4E,KAAKg7E,OAGNV,WAAW31C,GAEjB,GAAIA,aAAiB,EAAAnE,KAAK6B,WACxBriC,KAAKi7E,yBAAyBt2C,OACzB,MAAIA,aAAiBoK,EAAO2qC,OAGjC,MAAM,IAAIp6E,UAAU,gCAFpBU,KAAKk7E,wBAAwBv2C,IAKzBs2C,yBAAyBt2C,GAC/B,MAAMw2C,EAAc,IAAIt6E,IACxBb,KAAK+6E,SAAW,GAEhB/6E,KAAKy6E,iBAAmB,GACxBz6E,KAAK26E,eAAiB,GAEtB36E,KAAK46E,kBAAoB,GACzB56E,KAAK86E,gBAAkB,GAEvB96E,KAAKg7E,OAAS,GAEd,MAAMI,EAAe,IAAIv6E,IAGzB,IAAK8jC,EAAMZ,MACT,MAAM,IAAItkC,MAAM,uCAElB,MAAM47E,EAAkB,GACxB,IAAK,MAAM37E,KAAKilC,EAAMZ,MAAO,CAC3B,GAAIo3C,EAAYn/B,IAAIt8C,EAAET,MACpB,MAAM,IAAIQ,MAAM,0BAA0BC,EAAET,QAE9C,MAAMq8E,EAAet7E,KAAK+6E,SAASl7E,KAAK,IAAIg6E,EAAMn6E,IAAM,EACxDy7E,EAAY55E,IAAI7B,EAAET,KAAOq8E,GACzBD,EAAgBx7E,KAAKH,EAAET,MAIzB,IAAK0lC,EAAMM,YACT,MAAM,IAAIxlC,MAAM,6CAElB,IAAK,MAAMC,KAAKilC,EAAMM,YAAa,CACjC,IAAItb,EAAQwxD,EAAYj5E,IAAIxC,EAAET,MAC9B,QAAcO,IAAVmqB,EAAqB,CACvB,MAAMtpB,EAAQ,IAAIw5E,EAClBx5E,EAAMuB,KAAO,CACXolC,MAAO,CAACllC,KAAM,EAAAisD,UAAUwtB,oBAAoB77E,EAAEoC,OAC9CglC,WAAY,EAAAinB,UAAUC,wBAAwBtuD,EAAEimC,WAElDhc,EAAQ3pB,KAAK+6E,SAASl7E,KAAKQ,GAAS,EACpC86E,EAAY55E,IAAI7B,EAAET,KAAO0qB,GAE3B3pB,KAAK+6E,SAASpxD,GAAOmwD,OAAS,EAC9B95E,KAAK+6E,SAASpxD,GAAOy4B,OAAS,EAAA5gD,OAAO2vC,UAAUzxC,GAIjD,IAAK,IAAIA,EAAI,EAAGA,EAAIM,KAAK+6E,SAASp7E,OAAQD,IACnCM,KAAK+6E,SAASr7E,GAAG0iD,SACpBpiD,KAAKy6E,iBAAiB56E,KAAKH,GAC3BM,KAAK26E,eAAe96E,KAAKw7E,EAAgB37E,KAK7C,IAAKilC,EAAMX,OACT,MAAM,IAAIvkC,MAAM,wCAElB,IAAK,MAAMC,KAAKilC,EAAMX,OAAQ,CAC5B,GAAIm3C,EAAYn/B,IAAIt8C,EAAET,MACpB,MAAM,IAAIQ,MAAM,2BAA2BC,EAAET,QAE/C,MAAMq8E,EAAet7E,KAAK+6E,SAASl7E,KAAK,IAAIg6E,EAAMn6E,IAAM,EACxDy7E,EAAY55E,IAAI7B,EAAET,KAAOq8E,GACzBt7E,KAAK46E,kBAAkB/6E,KAAKy7E,GAC5Bt7E,KAAK86E,gBAAgBj7E,KAAKH,EAAET,MAI9B,IAAK0lC,EAAM98B,KACT,MAAM,IAAIpI,MAAM,sCAElB,IAAK,MAAM+7E,KAAa72C,EAAM98B,KAAM,CAClC,IAAK2zE,EAAUv8E,KAEb,IAAK,IAAIw8E,EAAO,GAAIA,IAAQ,CAC1B,MAAMx8E,EAAO,WAAWu8E,EAAUt3C,UAAUu3C,IAC5C,IAAKL,EAAap/B,IAAI/8C,GAAO,CAC3Bu8E,EAAUv8E,KAAOA,EACjB,OAKN,GAAIm8E,EAAap/B,IAAIw/B,EAAUv8E,MAC7B,MAAM,IAAIQ,MAAM,yBAAyB+7E,EAAUv8E,QAErD,MAAMq8E,EAAet7E,KAAKg7E,OAAOn7E,KAAK,IAAIo6E,EAAKuB,IAAc,EAC7DJ,EAAa75E,IAAIi6E,EAAUv8E,KAAMq8E,GAInC,IAAK,IAAI57E,EAAI,EAAGA,EAAIM,KAAKg7E,OAAOr7E,OAAQD,IAAK,CAC3C,MAAMmI,EAAO7H,KAAKg7E,OAAOt7E,GACnB87E,EAAY72C,EAAM98B,KAAKnI,GAC7B,IAAK87E,EAAUx3C,OACb,MAAM,IAAIvkC,MAAM,4BAA4B+7E,EAAUv8E,QAExD,IAAK,MAAM+kC,KAAUw3C,EAAUx3C,OAAQ,CACrC,IAAI03C,EAAYP,EAAYj5E,IAAI8hC,GAOhC,QANyB,IAAd03C,IACTA,EAAY17E,KAAK+6E,SAASl7E,KAAK,IAAIg6E,GAAW,EAC9CsB,EAAY55E,IAAIyiC,EAAQ03C,IAE1B7zE,EAAK07D,QAAQ1jE,KAAK67E,QAEqBl8E,IAAnCQ,KAAK+6E,SAASW,GAAW5B,MAC3B,MAAM,IAAIr6E,MAAM,4CAA4Ci8E,KAM9D,GAJA17E,KAAK+6E,SAASW,GAAW5B,MAAQp6E,EAIR,aAArB87E,EAAUt3C,OAAuB,CACnC,IAAKs3C,EAAUv3C,WAA4C,IAA/Bu3C,EAAUv3C,UAAUtkC,SAAiB67E,EAAUv3C,UAAU,GAAGr+B,EACtF,MAAM,IAAInG,MAAM,uFAElB,IAAK+7E,EAAUx3C,QAAsC,IAA5Bw3C,EAAUx3C,OAAOrkC,OACxC,MAAM,IAAIF,MAAM,4EAElBoI,EAAK07D,QAAQzyD,MACbjJ,EAAKuyE,aAAc,EAEnBp6E,KAAK+6E,SAASW,GAAW5B,OAAS,EAClC95E,KAAK+6E,SAASW,GAAWt5B,OAAS,EAAA5gD,OAAO2vC,UAAUqqC,EAAUv3C,UAAU,GAAGr+B,KAMhF,IAAK,IAAIlG,EAAI,EAAGA,EAAIM,KAAKg7E,OAAOr7E,OAAQD,IAAK,CAC3C,MAAMmI,EAAO7H,KAAKg7E,OAAOt7E,GACnB87E,EAAY72C,EAAM98B,KAAKnI,GAE7B,IAAK87E,EAAUz3C,MACb,MAAM,IAAItkC,MAAM,2BAA2B+7E,EAAUv8E,QAEvD,IAAK,MAAM8kC,KAASy3C,EAAUz3C,MAAO,CACnC,MAAM23C,EAAYP,EAAYj5E,IAAI6hC,GAClC,QAAyB,IAAd23C,EACT,MAAM,IAAIj8E,MAAM,uBAAuBskC,gBAAoBy3C,EAAUv8E,QAEvE4I,EAAKw5C,OAAOxhD,KAAK67E,GAEjB17E,KAAK+6E,SAASW,GAAW3B,IAAIl6E,KAAKH,IAItC,OAAO,EAGDw7E,wBAAwBv2C,G,UAC9B,MAAMw2C,EAAc,IAAIt6E,IACxBb,KAAK+6E,SAAW,GAEhB/6E,KAAKy6E,iBAAmB,GACxBz6E,KAAK26E,eAAiB,GAEtB36E,KAAK46E,kBAAoB,GACzB56E,KAAK86E,gBAAkB,GAEvB96E,KAAKg7E,OAAS,GAEd,MAAMI,EAAe,IAAIv6E,IAGnBw6E,EAAkB,GACxB,IAAK,IAAI37E,EAAI,EAAGA,EAAIilC,EAAMg3C,eAAgBj8E,IAAK,CAC7C,MAAMk8E,EAAYj3C,EAAM0c,OAAO3hD,GAC/B,GAAIy7E,EAAYn/B,IAAI4/B,GAClB,MAAM,IAAIn8E,MAAM,0BAA0Bm8E,KAG5C,IAAK,IAAIvwE,EAAI,EAAGA,EAAIs5B,EAAMk3C,iBAAkBxwE,IAC1C,IAAqB,QAAjB,EAAAs5B,EAAMm3C,SAASzwE,UAAE,eAAEpM,UAAW28E,EAAW,CAC3C,MAAMv7E,EAAQ,IAAIw5E,EAElB,IAD2C,QAAzB,EAAiB,QAAjB,EAAAl1C,EAAMm3C,SAASzwE,UAAE,eAAEzJ,cAAM,eAAEm6E,eAC3BhtC,EAAOitC,cAAcC,YACrC,MAAM,IAAIx8E,MAAM,0CAElB,MAAMylC,EAAYP,EAAMm3C,SAASzwE,GAAIzJ,OAAQvB,MAAM,IAAI0uC,EAAOmtC,oBACxDt6E,EAAO,EAAAmsD,UAAUC,wBAAwB9oB,EAAU6B,YACnDC,EAAQ9B,EAAU8B,QAClBllC,EAAO,GACb,IAAK,IAAIqI,EAAI,EAAGA,EAAI68B,EAAMm1C,YAAchyE,IACtCrI,EAAKjC,KAAK,EAAAixC,SAASC,aAAa/J,EAAM1kC,IAAI6H,GAAI9J,QAASmmC,aAEzDnmC,EAAMuB,KAAO,CAAColC,MAAO,CAACllC,QAAOglC,WAAYllC,GACzC,MAAM05E,EAAet7E,KAAK+6E,SAASl7E,KAAKQ,GAAS,EACjD86E,EAAY55E,IAAIq6E,EAAWN,GAC3BD,EAAgBx7E,KAAK+7E,IAK3B,IAAK,IAAIl8E,EAAI,EAAGA,EAAIilC,EAAMy3C,qBAAsB18E,IAAK,CACnD,MAAMulC,EAAcN,EAAMqmC,aAAatrE,GACvC,IAAIiqB,EAAQwxD,EAAYj5E,IAAI+iC,EAAYhmC,QACxC,QAAcO,IAAVmqB,EAAqB,CACvB,MAAMtpB,EAAQ,IAAIw5E,EACZ/3E,EAAO,EAAAisD,UAAUsuB,wBAAwBp3C,GACzCrjC,EAAO,EAAAmsD,UAAUC,wBAAwB/oB,EAAYU,YAC3DtlC,EAAMuB,KAAO,CAAColC,MAAO,CAACllC,QAAOglC,WAAYllC,GACzC+nB,EAAQ3pB,KAAK+6E,SAASl7E,KAAKQ,GAAS,EACpC86E,EAAY55E,IAAI0jC,EAAYhmC,OAAS0qB,GAEvC3pB,KAAK+6E,SAASpxD,GAAOmwD,OAAS,EAC9B95E,KAAK+6E,SAASpxD,GAAOy4B,OAAS,EAAA5gD,OAAO4vC,cAAcnM,GAIrD,IAAK,IAAIvlC,EAAI,EAAGA,EAAIM,KAAK+6E,SAASp7E,OAAQD,IACnCM,KAAK+6E,SAASr7E,GAAG0iD,SACpBpiD,KAAKy6E,iBAAiB56E,KAAKH,GAC3BM,KAAK26E,eAAe96E,KAAKw7E,EAAgB37E,KAK7C,IAAK,IAAIA,EAAI,EAAGA,EAAIilC,EAAM23C,gBAAiB58E,IAAK,CAC9C,MAAM68E,EAAa53C,EAAM4+B,QAAQ7jE,GACjC,GAAIy7E,EAAYn/B,IAAIugC,GAClB,MAAM,IAAI98E,MAAM,2BAA2B88E,KAE7C,MAAMjB,EAAet7E,KAAK+6E,SAASl7E,KAAK,IAAIg6E,GAAW,EACvDsB,EAAY55E,IAAIg7E,EAAYjB,GAC5Bt7E,KAAK46E,kBAAkB/6E,KAAKy7E,GAC5Bt7E,KAAK86E,gBAAgBj7E,KAAK08E,GAI5B,IAAK53C,EAAM8W,MACT,MAAM,IAAIh8C,MAAM,sCAElB,IAAK,IAAIC,EAAI,EAAGA,EAAIilC,EAAM63C,cAAe98E,IAAK,CAC5C,MAAM87E,EAAY72C,EAAM8W,MAAM/7C,GAC9B,IAAIT,EAAOu8E,EAAWv8E,OACtB,IAAKA,EAEH,IAAK,IAAIw8E,EAAO,EACdx8E,EAAO,WAAWu8E,EAAWt3C,YAAYu3C,IACpCL,EAAap/B,IAAI/8C,GAFJw8E,KAStB,GAAIL,EAAap/B,IAAI/8C,GACnB,MAAM,IAAIQ,MAAM,yBAAyBR,KAE3C,MAAMq8E,EAAet7E,KAAKg7E,OAAOn7E,KAAK,IAAIo6E,EAAKuB,EAAYv8E,IAAS,EACpEm8E,EAAa75E,IAAItC,EAAMq8E,GAIzB,IAAK,IAAI57E,EAAI,EAAGA,EAAIM,KAAKg7E,OAAOr7E,OAAQD,IAAK,CAC3C,MAAMmI,EAAO7H,KAAKg7E,OAAOt7E,GACnB87E,EAAY72C,EAAM8W,MAAM/7C,GAC9B,GAAiB,MAAb87E,EACF,MAAM,IAAI/7E,MAAM,2BAA2BC,KAE7C,GAAmC,KAA/B87E,aAAS,EAATA,EAAWc,iBACb,MAAM,IAAI78E,MAAM,4BAA4B+7E,EAAUv8E,QAExD,IAAK,IAAIoM,EAAI,EAAGA,GAAImwE,aAAS,EAATA,EAAWc,iBAAiBjxE,IAAK,CACnD,MAAM24B,EAASw3C,aAAS,EAATA,EAAWjY,QAAQl4D,GAClC,IAAIqwE,EAAYP,EAAYj5E,IAAI8hC,GAOhC,QANyB,IAAd03C,IACTA,EAAY17E,KAAK+6E,SAASl7E,KAAK,IAAIg6E,GAAW,EAC9CsB,EAAY55E,IAAIyiC,EAAQ03C,IAE1B7zE,EAAK07D,QAAQ1jE,KAAK67E,QAEqBl8E,IAAnCQ,KAAK+6E,SAASW,GAAW5B,MAC3B,MAAM,IAAIr6E,MAAM,4CAA4Ci8E,KAM9D,GAJA17E,KAAK+6E,SAASW,GAAW5B,MAAQp6E,EAIN,aAAvB87E,EAAUt3C,SAAyB,CACrC,GAAqC,IAAjCs3C,EAAUiB,qBAA6BjB,EAAUl8D,WAAW,GAAI1Z,IAClE,MAAM,IAAInG,MAAM,uFAElB,GAAkC,IAA9B+7E,EAAUc,gBACZ,MAAM,IAAI78E,MAAM,4EAElBoI,EAAK07D,QAAQzyD,MACbjJ,EAAKuyE,aAAc,EAEnBp6E,KAAK+6E,SAASW,GAAW5B,OAAS,EAClC95E,KAAK+6E,SAASW,GAAWt5B,OAAS,EAAA5gD,OAAO4vC,cAAcoqC,EAAUl8D,WAAW,GAAI1Z,OAMtF,IAAK,IAAIlG,EAAI,EAAGA,EAAIM,KAAKg7E,OAAOr7E,OAAQD,IAAK,CAC3C,MAAMmI,EAAO7H,KAAKg7E,OAAOt7E,GACnB87E,EAAY72C,EAAM8W,MAAM/7C,GAE9B,GAAiC,IAA7B87E,EAAUG,eACZ,MAAM,IAAIl8E,MAAM,2BAA2B+7E,EAAUv8E,QAEvD,IAAK,IAAIoM,EAAI,EAAGA,EAAImwE,EAAUG,eAAiBtwE,IAAK,CAClD,MAAM04B,EAAQy3C,EAAUn6B,OAAOh2C,GACzBqwE,EAAYP,EAAYj5E,IAAI6hC,GAClC,QAAyB,IAAd23C,EACT,MAAM,IAAIj8E,MAAM,uBAAuBskC,gBAAoBy3C,EAAWv8E,UAExE4I,EAAKw5C,OAAOxhD,KAAK67E,GAEjB17E,KAAK+6E,SAASW,GAAW3B,IAAIl6E,KAAKH,KAKhC86E,iBAEN,MAAMkC,EAAwB,IAAI/gC,IAClC37C,KAAKy6E,iBAAiB1gE,SAAQra,IACfM,KAAK+6E,SAASr7E,GACtBq6E,IAAIhgE,SAAQ1O,IACfqxE,EAASliD,IAAInvB,SAKjB,MAAMsxE,EAAa56E,MAAMtB,KAAKi8E,GACxBE,EAAa,IAAI76E,MAAc/B,KAAKg7E,OAAOr7E,QAAQkX,KAAK,SAE9D,KAAO8lE,EAAWh9E,OAAS,GAAG,CAC5B,MAAMk9E,EAAYF,EAAW7rE,MAEC,SAA1B8rE,EAAWC,GACbD,EAAWC,GAAa,SAGxBF,EAAW98E,KAAKg9E,GAChBD,EAAWC,GAAa,OAExB78E,KAAKg7E,OAAO6B,GAAWtZ,QAAQxpD,SAAS+iE,IACtC,MAAMj7E,EAAO7B,KAAK+6E,SAAS+B,GAC3B,QAA2B,IAAhBj7E,EAAKugD,OACd,MAAM,IAAI3iD,MAAM,0CAElB,GAAIoC,EAAKi4E,QAAU+C,EACjB,MAAM,IAAIp9E,MAAM,iFAElBoC,EAAKk4E,IAAIhgE,SAASgjE,IAEhB,GAAwC,SAApCH,EAAWG,GACb,MAAM,IAAIt9E,MAAM,yBAG2B,UAApCm9E,EAAWG,IAClBJ,EAAW98E,KAAKk9E,WAQpBxC,eAAeF,GAErBr6E,KAAKg9E,yBACLh9E,KAAKi9E,wBACLj9E,KAAKk9E,0BAED7C,GACFA,EAAiBE,eAAev6E,MAIlCA,KAAKm9E,gBASPA,gBACE,IAAI/lE,EAAS,EAEb,IAAK,IAAI1X,EAAI,EAAGA,EAAIM,KAAKg7E,OAAOr7E,OAAQD,IACjCM,KAAKg7E,OAAOt7E,GAAG06E,YAWhBhjE,EAAS,IAEXpX,KAAKg7E,OAAOt7E,GAAG2hD,OAAOtnC,SAAQ1Z,IAC5B,MAAM+8E,EAAMp9E,KAAK+6E,SAAS16E,GAAO05E,IAAIz5E,QAAQZ,EAAI0X,IACpC,IAATgmE,IACFp9E,KAAK+6E,SAAS16E,GAAO05E,IAAIqD,GAAO19E,MAGpCM,KAAKg7E,OAAOt7E,GAAG6jE,QAAQxpD,SAAQ1Z,IACzBL,KAAK+6E,SAAS16E,GAAOy5E,OAAS95E,KAAK+6E,SAAS16E,GAAOy5E,QAAWp6E,EAAI0X,IACpEpX,KAAK+6E,SAAS16E,GAAOy5E,MAASp6E,QAnBlC0X,IAEApX,KAAKg7E,OAAOt7E,GAAG6jE,QAAQxpD,SAAQqjE,IAC7Bp9E,KAAK+6E,SAASqC,GAAKtD,OAAS,KAE9B95E,KAAKg7E,OAAOp7E,OAAOF,EAAG,GACtBA,KAkBJ0X,EAAS,EAET,IAAK,IAAI1X,EAAI,EAAGA,EAAIM,KAAK+6E,SAASp7E,OAAQD,IAExC,IAA+B,IAA3BM,KAAK+6E,SAASr7E,GAAGe,OAA+D,IAAhDT,KAAK46E,kBAAkBt6E,QAAQZ,EAAI0X,IAMvE,GAAIA,EAAS,EAAG,CACd,IAAIgmE,GAAO,OAGmB59E,IAA1BQ,KAAK+6E,SAASr7E,GAAGe,OAAiD,IAA3BT,KAAK+6E,SAASr7E,GAAGe,MAC1D28E,EAAMp9E,KAAKg7E,OAAOh7E,KAAK+6E,SAASr7E,GAAGe,MAAM8iE,QAAQjjE,QAAQZ,EAAI0X,IAChD,IAATgmE,IACFp9E,KAAKg7E,OAAOh7E,KAAK+6E,SAASr7E,GAAGe,MAAM8iE,QAAQ6Z,GAAO19E,KAIpD09E,EAAMp9E,KAAKy6E,iBAAiBn6E,QAAQZ,EAAI0X,IAC3B,IAATgmE,IACFp9E,KAAKy6E,iBAAiB2C,GAAO19E,IAKjCM,KAAK+6E,SAASr7E,GAAGouD,GAAG/zC,SAAQlS,IAC1Bu1E,EAAMp9E,KAAKg7E,OAAOnzE,GAAMw5C,OAAO/gD,QAAQZ,EAAI0X,IAC9B,IAATgmE,IACFp9E,KAAKg7E,OAAOnzE,GAAMw5C,OAAO+7B,GAAO19E,MAGD,IAA/BM,KAAK+6E,SAASr7E,GAAGouD,GAAGnuD,SAEtBy9E,EAAMp9E,KAAK46E,kBAAkBt6E,QAAQZ,EAAI0X,IAC5B,IAATgmE,IACFp9E,KAAK46E,kBAAkBwC,GAAO19E,UAjClC0X,IACApX,KAAK+6E,SAASn7E,OAAOF,EAAG,GACxBA,IA2CE29E,WAAWR,GACjB,MAAMh1E,EAAO7H,KAAKg7E,OAAO6B,GACzB,GAAIh1E,EAAK07D,QAAQ5jE,OAAS,EACxB,IAAK,IAAID,EAAI,EAAGA,EAAImI,EAAK07D,QAAQ5jE,OAAQD,IACvC,GAAIM,KAAK+6E,SAASlzE,EAAK07D,QAAQ7jE,IAAIouD,GAAGnuD,OAAS,EAC7C,MAAM,IAAIF,MAAM,uFAMtBoI,EAAKuyE,aAAc,EACnB,MAAMkD,EAAkBz1E,EAAKw5C,OAAO,GAC9Bk8B,EAAmB11E,EAAK07D,QAAQ,GAChCia,EAAuBx9E,KAAK+6E,SAASwC,GAAkBzvB,GAGvD2vB,EAAWz9E,KAAK+6E,SAASuC,GAAiBxvB,GAAGxtD,QAAQu8E,GAE3D,IAAkB,IAAdY,EACF,MAAM,IAAIh+E,MAAM,yEAElBO,KAAK+6E,SAASuC,GAAiBxvB,GAAGluD,OAAO69E,EAAU,GAGnDz9E,KAAK+6E,SAASwC,GAAkBxD,IAAM,GAGtC,MAAMpwD,EAAQ3pB,KAAK46E,kBAAkBt6E,QAAQi9E,GAM7C,IALe,IAAX5zD,IACF3pB,KAAK46E,kBAAkBjxD,GAAS2zD,GAI9BE,GAAwBA,EAAqB79E,OAAS,EACxD,IAAK,MAAMk9E,KAAaW,EAAsB,CAC5C,MAAME,EAAe19E,KAAKg7E,OAAO6B,GAAWx7B,OAAO/gD,QAAQi9E,GAE3D,IAAsB,IAAlBG,EACF,MAAM,IAAIj+E,MAAM,4EAElBO,KAAKg7E,OAAO6B,GAAWx7B,OAAOq8B,GAAgBJ,EAC9Ct9E,KAAK+6E,SAASuC,GAAiBxvB,GAAGjuD,KAAKg9E,IAK7CI,wBACE,IAAIJ,EAAY,EAChB,IAAK,MAAMh1E,KAAQ7H,KAAKg7E,OAAQ,CAE9B,GAAoB,YAAhBnzE,EAAKq8B,OAAsB,CAE7B,GAA2B,IAAvBr8B,EAAKw5C,OAAO1hD,OACd,MAAM,IAAIF,MAAM,iDAElB,GAA4B,IAAxBoI,EAAK07D,QAAQ5jE,QAAwC,IAAxBkI,EAAK07D,QAAQ5jE,OAC5C,MAAM,IAAIF,MAAM,wDAGlB,GAA4B,IAAxBoI,EAAK07D,QAAQ5jE,QAA8D,IAA9CK,KAAK+6E,SAASlzE,EAAK07D,QAAQ,IAAIwW,IAAIp6E,OAClE,MAAM,IAAIF,MAAM,yEAElBO,KAAKq9E,WAAWR,GAElBA,KAIJG,yBACE,IAAIH,EAAY,EAChB,IAAK,MAAMh1E,KAAQ7H,KAAKg7E,OAEF,aAAhBnzE,EAAKq8B,QACPlkC,KAAKq9E,WAAWR,GAElBA,IAIJc,aAAa13E,GACX,OAAQA,EAAEi+B,QAER,IAAK,OACL,IAAK,UACL,IAAK,OACH,OAAO,EACT,QACE,OAAO,GAIbg5C,0BACE,IAAK,MAAMr1E,KAAQ7H,KAAKg7E,OACtB,GAAoB,SAAhBnzE,EAAKq8B,OAAmB,CAC1B,MAAMqI,EAAOvsC,KAAK+6E,SAASlzE,EAAK07D,QAAQ,IAAIwW,IAC5C,GAAoB,IAAhBxtC,EAAK5sC,QAAgBK,KAAK29E,aAAa39E,KAAKg7E,OAAOzuC,EAAK,KAAM,CAChE,MAAMqxC,EAAQ59E,KAAKg7E,OAAOzuC,EAAK,IAC/B,GAAqB,SAAjBqxC,EAAM15C,OACR,GAA4B,IAAxB05C,EAAMv8B,OAAO1hD,OACf,IACEkI,EAAKyX,WAAW/d,IACZ,oBAAqB,SACrB,CAACq8E,EAAMt+D,WAAWmwB,SAAS,OAAQmuC,EAAMt+D,WAAWmwB,SAAS,SACjE,MAAOvqC,GACP2C,EAAKyX,WAAW/d,IAAI,oBAAqB,SAAU,CAAC,EAAAi0D,SAAU,EAAAC,eAE3D,MACHmoB,EAAMv8B,OAAO1hD,QAAU,QAA+CH,IAA1CQ,KAAK+6E,SAAS6C,EAAMv8B,OAAO,IAAIe,aACjB5iD,IAA1CQ,KAAK+6E,SAAS6C,EAAMv8B,OAAO,IAAIe,QAMjC,SALAv6C,EAAKyX,WAAW/d,IAAI,oBAAqB,SAAU,CACjDvB,KAAK+6E,SAAS6C,EAAMv8B,OAAO,IAAIe,OAAQhd,UAAU,GAAIplC,KAAK+6E,SAAS6C,EAAMv8B,OAAO,IAAIe,OAAQhd,UAAU,KAO5Gv9B,EAAKyX,WAAW/d,IAAI,aAAc,SAAWq8E,EAAY,QACzD59E,KAAKq9E,WAAW9wC,EAAK,S,kbCppB/B,MAAMsxC,EAAiB,CACrB9qC,QAAS,IACT+qC,KAAM,IACN9qC,QAAS,IACT7pC,MAAO,IACP40E,MAAO,KAGHC,EAA+E,CACnF,KAAU,IAtCZ,MACEzzE,IAAI0zE,EAA4BC,EAAkBC,MAsClD,QAAa,IAlCf,MACE5zE,IAAI6zE,EAA2BC,EAAiBC,GAE9Cp1E,QAAQqB,IAAI,GAAGvK,KAAKu+E,MAAMH,MAAaE,EAAW,QAAaA,EAAW,QAAa,KAAKD,KAGtFE,MAAMH,GACZ,OAAQA,GACN,IAAK,UACH,MAAO,gBACT,IAAK,OACH,MAAO,aACT,IAAK,UACH,MAAO,gBACT,IAAK,QACH,MAAO,gBACT,IAAK,QACH,MAAO,cACT,QACE,MAAM,IAAI3+E,MAAM,yBAAyB2+E,SAiB3CI,EAAwB,CAC5BC,SAAU,UACVC,gBAAiB,UACjBC,aAAa,EACbC,mBAAmB,GAErB,IAAIC,EAC0D,CAAC,GAAML,GAMrE,SAASj0E,EACL9I,EAA8BC,EAAeC,EAAsBsC,GACrE,QAAazE,IAATkC,EAEF,OAkB6B48E,EAlBE78E,EAmB1B,CACLsxC,QAASxoC,EAAIwoC,QAAQvoC,KAAK,KAAM8zE,GAChCR,KAAMvzE,EAAIuzE,KAAKtzE,KAAK,KAAM8zE,GAC1BtrC,QAASzoC,EAAIyoC,QAAQxoC,KAAK,KAAM8zE,GAChCn1E,MAAOoB,EAAIpB,MAAMqB,KAAK,KAAM8zE,GAC5BP,MAAOxzE,EAAIwzE,MAAMvzE,KAAK,KAAM8zE,IAvBvB,QAAa9+E,IAATmC,EAETm9E,EAAYr9E,EAAyBC,QAChC,GAAoB,iBAATC,QAA8BnC,IAATyE,EAErC66E,EAAYr9E,EAAyBC,QAChC,GAAoB,iBAATC,QAA8BnC,IAATyE,EAErC66E,EAAYr9E,EAAyBE,EAAM,EAAGD,OACzC,IAAoB,iBAATC,GAAqC,iBAATsC,EAI5C,MAAM,IAAI3E,UAAU,kBAFpBw/E,EAAYr9E,EAAyBE,EAAMsC,EAAMvC,GAMrD,IAAiC48E,EAajC,SAASQ,EAAYV,EAA2BC,EAAiBpgE,EAAeqgE,GAC9E,MAAM7Q,EAASoR,EAAkBP,GAAY,KAAOO,EAAkB,IAClEhB,EAAeO,GAAYP,EAAepQ,EAAOiR,mBAIjDjR,EAAOkR,cACTN,EAAU,IAAG,IAAI3qE,MAAOqrE,iBAAiBV,KAGvC5Q,EAAOmR,kBAIXZ,EAAoBvQ,EAAOgR,UAAUl0E,IAAI6zE,EAAUC,EAASC,KAI9D,SAAU/zE,GA2BR,SAAgB4iC,EAAMsgC,GACpBoR,EAAoB,GACpBt9E,EAAI,GAAIksE,GAAU,IAEpB,SAAgBlsE,EAAI+8E,EAAkB7Q,GACpC,GAAiB,MAAb6Q,EACFnxC,EAAMsgC,OACD,CACL,MAAMuR,EAAiBH,EAAkBP,IAAaE,EACtDK,EAAkBP,GAAY,CAC5BG,SAAUhR,EAAOgR,UAAYO,EAAeP,SAC5CC,gBAAiBjR,EAAOiR,iBAAmBM,EAAeN,gBAC1DC,iBAAqCn/E,IAAvBiuE,EAAOkR,YAA6BK,EAAeL,YAAclR,EAAOkR,YACtFC,uBAAiDp/E,IAA7BiuE,EAAOmR,kBAAmCI,EAAeJ,kBACfnR,EAAOmR,oBAtC3D,EAAA7rC,QAAhB,SAAwBtxC,EAAcC,GACpC6I,EAAI,UAAW9I,EAAMC,IAIP,EAAAo8E,KAAhB,SAAqBr8E,EAAcC,GACjC6I,EAAI,OAAQ9I,EAAMC,IAIJ,EAAAsxC,QAAhB,SAAwBvxC,EAAcC,GACpC6I,EAAI,UAAW9I,EAAMC,IAIP,EAAAyH,MAAhB,SAAsB1H,EAAcC,GAClC6I,EAAI,QAAS9I,EAAMC,IAIL,EAAAq8E,MAAhB,SAAsBt8E,EAAcC,GAClC6I,EAAI,QAAS9I,EAAMC,IAGL,EAAAyrC,MAAK,EAIL,EAAA5rC,IAAG,EAiBH,EAAAuxC,WAAhB,SAA2BhzC,GACzB,MAAM2tE,EAAwB,GAC1B3tE,EAAIM,WACNqtE,EAAOiR,gBAAkB5+E,EAAIM,UAE/BmB,EAAI,GAAIksE,IArDZ,CAAUljE,MAAG,KA0DA,EAAAsoC,OAAiBtoC,EAkB9B,MAAM00E,EACJl/E,YACWu+E,EAAyCr/E,EAAqBigF,EAC7DC,EAAsDC,EAA2B31D,GADlF,KAAA60D,WAAyC,KAAAr/E,OAAqB,KAAAigF,YAC7D,KAAAC,cAAsD,KAAAC,QAA2B,KAAA31D,MAE7FY,MACE,OAAOrqB,KAAKm/E,YAAYn/E,MAGpBq/E,a,yCACJ,QAAiB7/E,IAAbQ,KAAKypB,UAAoCjqB,IAAfQ,KAAKo/E,MACjC,MAAM,IAAI3/E,MAAM,wBAGhB,OADAO,KAAKypB,IAAI2sD,WACFp2E,KAAKypB,IAAIutD,uBAAuBh3E,KAAKo/E,WAKlD,MAAME,EACJv/E,YACWu+E,EAAyCr/E,EAAqBigF,EAA0BK,GAAxF,KAAAjB,WAAyC,KAAAr/E,OAAqB,KAAAigF,YAA0B,KAAAK,WAGrG,iBAQE,YAAoBC,EAA0BC,EAAyBC,GA+H/D,KAAAC,UAAW,EASX,KAAAC,cAAgB,EAvItB5/E,KAAK2/E,UAAW,EAChB3/E,KAAK6/E,sBAAuCrgF,IAApBggF,EAAgC,IAAQA,EAChEx/E,KAAK8/E,qBAAqCtgF,IAAnBigF,EAA+B,GAAKA,EAC3Dz/E,KAAK+/E,kCAA+DvgF,IAAhCkgF,EAA4C,IAAOA,EAXzF17E,cAAcypE,GACZ,YAAejuE,IAAXiuE,EACK,IAAIztE,KAEN,IAAIA,KAAKytE,EAAO+R,gBAAiB/R,EAAOgS,eAAgBhS,EAAOiS,6BAWxEt1D,QACEpqB,KAAK2/E,UAAW,EAChB3/E,KAAKggF,cAAgB,GACrBhgF,KAAKigF,WAAa,EAAAzsE,MAClBxT,KAAK4/E,cAAgB,EAIvBM,OAEE,IADAlgF,KAAK2/E,UAAW,EACT3/E,KAAK4/E,cAAgB5/E,KAAKggF,cAAcrgF,OAAQK,KAAK4/E,gBAC1D5/E,KAAKmgF,YAAYngF,KAAKggF,cAAchgF,KAAK4/E,gBAQ7CnY,MAAS6W,EAAkCr/E,EAAc+1D,EAA4BvrC,GAEnF,MAAMg+C,EAAQznE,KAAK2/E,SAAW3/E,KAAKomC,MAAMk4C,EAAUr/E,EAAMwqB,QAAOjqB,EAChE,IAAI4gF,GAAY,EAEhB,MAAM3hD,EAAMu2B,IAGZ,GAAIv2B,GAA2C,mBAA5BA,EAAmBnc,KAEpC,OADA89D,GAAY,EACL,IAAIx5E,SAAW,CAAC8b,EAASmH,KAC7B4U,EACInc,MACSjiB,GAAS,EAAD,gCACRonE,UACIA,EAAMp9C,OAEd3H,EAAQriB,QAEJggF,GAAU,EAAD,gCACT5Y,UACIA,EAAMp9C,OAEdR,EAAOw2D,WAIrB,IAAKD,GAAa3Y,EAAO,CACvB,MAAM6Y,EAAW7Y,EAAMp9C,MACvB,GAAIi2D,GAAqC,mBAAlBA,EAASh+D,KAC9B,OAAO,IAAI1b,SAAW,CAAC8b,EAASmH,KAC9B,EAAWvH,MACP,KACEI,EAAQ+b,MAET4hD,IACCx2D,EAAOw2D,SAKnB,OAAO5hD,EAIT2H,MAAMk4C,EAAkCr/E,EAAcwqB,GACpD,IAAKzpB,KAAK2/E,SACR,MAAM,IAAIlgF,MAAM,+BAElB,QAAYD,IAARiqB,EAAmB,CACrB,MAAMy1D,EAAY,EAAA1rE,MAElB,OADAxT,KAAKw3E,MAAM0H,GACJ,IAAID,EAAMX,EAAUr/E,EAAMigF,GAAWh6E,GAAKlF,KAAKugF,QAAQr7E,KACzD,CACL,MAAMk6E,EAAoB31D,EAAIosD,aAC9B,OAAO,IAAIoJ,EAAMX,EAAUr/E,EAAM,GAASiG,GAAK,EAAD,gCAAC,OAAAlF,KAAKqqB,IAAInlB,OAAIk6E,EAAO31D,IAKzDY,IAAIo9C,G,yCAChB,MAAM8X,QAAwB9X,EAAM4X,aAChCr/E,KAAKggF,cAAcrgF,OAASK,KAAK6/E,mBACnC7/E,KAAKggF,cAAcngF,KAAK,IAAIy/E,EAAY7X,EAAM6W,SAAU7W,EAAMxoE,KAAMwoE,EAAMyX,UAAWK,IACrFv/E,KAAKw3E,MAAM+H,OAIPgB,QAAQ9Y,GACd,MAAM8X,EAAkB,EAAA/rE,MACpBxT,KAAKggF,cAAcrgF,OAASK,KAAK6/E,mBACnC7/E,KAAKggF,cAAcngF,KAAK,IAAIy/E,EAAY7X,EAAM6W,SAAU7W,EAAMxoE,KAAMwoE,EAAMyX,UAAWK,IACrFv/E,KAAKw3E,MAAM+H,IAIPY,YAAY1Y,GAClB,EAAA50B,OAAOE,QACH,YAAY00B,EAAM6W,WAClB,IAAI7W,EAAM8X,QAAU9X,EAAMyX,WAAWsB,QAAQ,kBAAkB/Y,EAAMxoE,YAAYwoE,EAAM8X,QAAQiB,QAAQ,MAGrGhJ,MAAMiJ,GACZ,GAAIzgF,KAAKggF,cAAcrgF,OAASK,KAAK4/E,eAAiB5/E,KAAK8/E,iBACvDW,EAAczgF,KAAKigF,YAAcjgF,KAAK+/E,6BAA8B,CAGtE,IAAK,MAAMW,EAAkB1gF,KAAK4/E,cAAe5/E,KAAK4/E,cAAgBc,EAAkB1gF,KAAK8/E,iBACxF9/E,KAAK4/E,cAAgB5/E,KAAKggF,cAAcrgF,OACxCK,KAAK4/E,gBACR5/E,KAAKmgF,YAAYngF,KAAKggF,cAAchgF,KAAK4/E,gBAG3C5/E,KAAKigF,WAAa,EAAAzsE,OAIlBmtE,cACF,OAAO3gF,KAAK2/E,WAiBH,EAAAnsE,IAA8B,oBAAhBtJ,aAA+BA,YAAYsJ,IAAO,IAAMtJ,YAAYsJ,MAAQE,KAAKF,K,4FC3b5G,gBACA,UAEA,UAGA,IAAOu7B,EADP,QACgBC,YAAYC,aAAaC,IACzC,gBAEA,cAEEnvC,eAEA+O,KAAKwc,EAAiB+uD,EAAsCuG,GAC1D,IAAKA,EAEH,IAEE,YADA5gF,KAAK6gF,mBAAmBv1D,EAAK+uD,GAE7B,MAAOn1E,GACP,QAAoB1F,IAAhBohF,EACF,MAAM17E,EAKZlF,KAAK8gF,kBAAkBx1D,EAAK+uD,GAGtBwG,mBAAmBv1D,EAAiB+uD,GAC1C,MAAM0G,EAAa,EAAAvgD,KAAK4D,WAAW74B,OAAO+f,GAE1C,GADkB,EAAAwlB,SAASC,aAAagwC,EAAWx8C,WACnC,EACd,MAAM,IAAI9kC,MAAM,8CAGlBO,KAAKghF,QACDD,EAAW18C,YAAY3/B,KAAIhF,IAAK,CAAEykC,OAAQzkC,EAAEykC,OAAkB5kB,QAAS,EAAAuxB,SAASC,aAAarxC,EAAE6f,aAEnGvf,KAAKihF,OAAS,EAAAvH,MAAMj5E,KAAKsgF,EAAWp8C,MAAQ01C,GAGtCyG,kBAAkBx1D,EAAiB+uD,GACzC,MAAM3qE,EAAK,IAAI,EAAAsf,YAAYyB,WAAWnF,GAChC41D,EAAWnyC,EAAOnsC,iBAAiBu+E,0BAA0BzxE,GAAI0xE,QAEvE,GADkB,EAAAtwC,SAASC,aAAamwC,EAAS38C,aACjC,EACd,MAAM,IAAI9kC,MAAM,8CAElBO,KAAKghF,QAAU,GACf,IAAK,IAAIthF,EAAI,EAAGA,EAAIwhF,EAASG,oBAAqB3hF,IAAK,CACrD,MAAM4hF,EAAUJ,EAAS78C,YAAY3kC,GACrCM,KAAKghF,QAAQnhF,KAAK,CAACskC,OAAQm9C,aAAO,EAAPA,EAASn9C,SAAoB5kB,QAAS,EAAAuxB,SAASC,aAAauwC,EAAQ/hE,aAGjGvf,KAAKihF,OAAS,EAAAvH,MAAMj5E,KAAKygF,EAASv8C,QAAU01C,GAI1C11C,YACF,OAAO3kC,KAAKihF,OAIV9V,aACF,OAAOnrE,KAAKghF,W,0HCrDH,EAAAhrB,aACT,CAAC,UAAW,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,SAC5D,EAAAurB,UAAwC,CAAC,QAAS,QAAS,OAAQ,SAAU,SAAU,SACvF,EAAAC,YAA0C,CAAC,UAAW,Y,0BCgCnE,SAASC,EAAcliE,EAAiBmiE,GACtC,GAAIA,EAASC,SAAS,KAAM,CAE1B,MAAMC,EAAar/E,OAAO83B,SAASqnD,EAAS7kE,UAAU,EAAG6kE,EAAS/hF,OAAS,GAAI,IAC/E,OAAQusB,MAAM01D,IAAeA,GAAcriE,EACtC,GAAmC,IAA/BmiE,EAAS9kE,MAAM,KAAKjd,OAAc,CAE3C,MAAMkiF,EAAOH,EAAS9kE,MAAM,KACtBglE,EAAar/E,OAAO83B,SAASwnD,EAAK,GAAI,IACtCC,EAAWv/E,OAAO83B,SAASwnD,EAAK,GAAI,IAC1C,OAAQ31D,MAAM01D,KAAgB11D,MAAM41D,IAAaF,GAAcriE,GAAWA,GAAWuiE,EAGrF,OAAOv/E,OAAO83B,SAASqnD,EAAU,MAAQniE,E,0EArC7C,2BAAgC1X,EAAkBsjE,EAA0B4W,GAC1E,IAAK,MAAMC,KAAQD,EAAO,CACxB,MAAM79C,EAAS89C,EAAK,GACd79C,EAAS69C,EAAK,GACdC,EAAkBD,EAAK,GACvBzW,EAASyW,EAAK,GACdxW,EAASwW,EAAK,GAEpB,GAAIn6E,EAAKq8B,SAAWA,EAClB,IAAK,MAAMqiC,KAAS4E,EAElB,IAAI5E,EAAMpiC,SAAWA,GAA4B,YAAjBoiC,EAAMpiC,QAAmC,KAAXA,IACxDs9C,EAAclb,EAAMhnD,QAAS0iE,GAC/B,MAAO,CAAC1W,SAAQC,UAO1B,MAAM,IAAIlsE,UAAU,4BAA4BuI,EAAKq8B,wBACjDinC,EAAOzmE,KAAInD,GAAO,GAAGA,EAAI4iC,QAAU,cAAc5iC,EAAIge,YAAWna,KAAK,W,kGC5C3E,gBAKA,IAAiB4pC,EAAYC,EAAZD,EAAA,EAAAA,cAAA,EAAAA,YAAW,IAAc,SAAAE,GACxC,IAAYxL,GAAZ,SAAYA,GACV,6BACA,qBACA,iBACA,uBACA,uBACA,qBACA,uBACA,mBACA,yBACA,yBACA,wBACA,sCACA,wCAbF,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KADe,EAAbuL,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAACC,MAAA,EAAAA,IAAG,KAqB7C,SAAiBF,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYgzC,GAAZ,SAAYA,GAAoB,yBAAa,qBAAW,qBAAxD,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KADU,GAAAhzC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYizC,GAAZ,SAAYA,GACV,6BACA,qBACA,qBACA,mBACA,uBACA,qBACA,qBACA,qBACA,uBACA,mBACA,0BACA,wBACA,wBACA,wBACA,8BACA,gCACA,4BAjBF,CAAYA,EAAA,EAAAA,iBAAA,EAAAA,eAAc,KADc,GAAAjzC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAyB5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYkzC,GAAZ,SAAYA,GAAU,6BAAe,qBAArC,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KADoB,GAAAlzC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAY8sC,GAAZ,SAAYA,GAAe,mBAAU,iCAAiB,qCAAmB,2BAAzE,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KADe,GAAA9sC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAamzC,EAAb,cACE,KAAA/wE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,sBAAsBsN,EAA4BqiB,GAChD,OAAQA,GAAO,IAAI0uD,GAASC,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQlFtN,kCAAkCsN,EAA4BqiB,GAE5D,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI0uD,GAASC,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQlFhP,IAAIqnB,EAAegK,GACjB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI5I,WACpCg8C,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlB6qE,YACE,IAAI/kE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,kBAAkBu+E,GAChBA,EAAQvuD,YAAY,GAOtBhwB,cAAcu+E,EAA8B3iC,GAC1C2iC,EAAQhvD,eAAe,EAAGqsB,EAAW,GAQvC57C,uBAAuBu+E,EAA8B1gF,GACnD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,sBAAsBu+E,EAA8BC,GAClDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,gBAAgBu+E,GAEd,OADaA,EAAQruD,YAIvBlwB,mBAAmBu+E,EAA8B3iC,GAG/C,OAFAyiC,EAAMI,WAAWF,GACjBF,EAAMK,OAAOH,EAAS3iC,GACfyiC,EAAMM,SAASJ,IAtGb,EAAAF,MAAK,EADsB,GAAAnzC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA8G5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa5I,EAAb,cACE,KAAAh1B,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,0BAA0BsN,EAA4BqiB,GACpD,OAAQA,GAAO,IAAI2S,GAAag8C,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQtFtN,sCAAsCsN,EAA4BqiB,GAEhE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI2S,GAAag8C,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAOtFjR,MAAMszB,GACJ,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI0zC,gBACpCN,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KASlBo1B,WAAWm8C,GACT,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9E7+E,sBAAsBu+E,GACpBA,EAAQvuD,YAAY,GAOtBhwB,gBAAgBu+E,EAA8BO,GAC5CP,EAAQhvD,eAAe,EAAGuvD,EAAa,GAOzC9+E,qBAAqBu+E,EAA8BQ,GACjDR,EAAQhvD,eAAe,EAAGwvD,EAAkB,GAO9C/+E,oBAAoBu+E,GAElB,OADaA,EAAQruD,YAIvBlwB,uBACIu+E,EAA8BO,EAC9BC,GAIF,OAHAz8C,EAAU08C,eAAeT,GACzBj8C,EAAU28C,SAASV,EAASO,GAC5Bx8C,EAAU48C,cAAcX,EAASQ,GAC1Bz8C,EAAU68C,aAAaZ,IA9FrB,EAAAj8C,UAAS,EADkB,GAAA4I,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa0zC,EAAb,cACE,KAAAtxE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,+BAA+BsN,EAA4BqiB,GACzD,OAAQA,GAAO,IAAIivD,GAAkBN,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQ3FtN,2CAA2CsN,EAA4BqiB,GAErE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAIivD,GAAkBN,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAM3F8xE,UACE,IAAIhsE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAAkBpX,KAAKsR,GAAI2kB,SAASj2B,KAAKg3B,OAAS5f,GACzC43B,EAAYC,aAAaC,IAAIgzC,mBAAmBmB,QAMlE78C,WACE,IAAIpvB,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI+kB,UAAUr2B,KAAKg3B,OAAS5f,GAAUpX,KAAKsR,GAAIwkB,WAAW,EAAG,GASpF2Q,SAASo8C,GACP,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9E7+E,2BAA2Bu+E,GACzBA,EAAQvuD,YAAY,GAOtBhwB,kBAAkBu+E,EAA8Ba,GAC9Cb,EAAQzvD,aAAa,EAAGswD,EAASp0C,EAAYC,aAAaC,IAAIgzC,mBAAmBmB,SAOnFr/E,mBAAmBu+E,EAA8B/7C,GAC/C+7C,EAAQnvD,cAAc,EAAGoT,EAAU+7C,EAAQzsD,WAAW,EAAG,IAO3D9xB,mBAAmBu+E,EAA8Be,GAC/Cf,EAAQhvD,eAAe,EAAG+vD,EAAgB,GAO5Ct/E,yBAAyBu+E,GAEvB,OADaA,EAAQruD,YAIvBlwB,4BACIu+E,EAA8Ba,EAC9B58C,EAA4B88C,GAK9B,OAJAV,EAAeW,oBAAoBhB,GACnCK,EAAeY,WAAWjB,EAASa,GACnCR,EAAea,YAAYlB,EAAS/7C,GACpCo8C,EAAec,YAAYnB,EAASe,GAC7BV,EAAee,kBAAkBpB,IA7G/B,EAAAK,eAAc,EADa,GAAA1zC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAqH5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAagtC,EAAb,cACE,KAAA5qE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,mCAAmCsN,EAA4BqiB,GAC7D,OAAQA,GAAO,IAAIuoD,GAAsBoG,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQ/FtN,+CAA+CsN,EAA4BqiB,GAGzE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAIuoD,GAAsBoG,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAM/Fy1B,WACE,IAAI3vB,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAAkBpX,KAAKsR,GAAIgkB,UAAUt1B,KAAKg3B,OAAS5f,GAC1C43B,EAAYC,aAAaC,IAAIizC,eAAeyB,UAO9D58C,MAAMrT,GACJ,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAImzC,OACpCC,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAMlBtN,+BAA+Bu+E,GAC7BA,EAAQvuD,YAAY,GAOtBhwB,mBAAmBu+E,EAA8Bx7C,GAC/Cw7C,EAAQpvD,cAAc,EAAG4T,EAAUiI,EAAYC,aAAaC,IAAIizC,eAAeyB,WAOjF5/E,gBAAgBu+E,EAA8BsB,GAC5CtB,EAAQhvD,eAAe,EAAGswD,EAAa,GAOzC7/E,6BAA6Bu+E,GAE3B,OADaA,EAAQruD,YAIvBlwB,gCACIu+E,EAA8Bx7C,EAC9B88C,GAIF,OAHA3H,EAAmB4H,wBAAwBvB,GAC3CrG,EAAmB6H,YAAYxB,EAASx7C,GACxCm1C,EAAmB8H,SAASzB,EAASsB,GAC9B3H,EAAmB+H,sBAAsB1B,IA7FvC,EAAArG,mBAAkB,EADS,GAAAhtC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAqG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAag1C,EAAb,cACE,KAAA5yE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,wBAAwBsN,EAA4BqiB,GAClD,OAAQA,GAAO,IAAIuwD,GAAW5B,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQpFtN,oCAAoCsN,EAA4BqiB,GAE9D,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAIuwD,GAAW5B,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAMpF6yE,UACE,IAAI/sE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAAkBpX,KAAKsR,GAAIgkB,UAAUt1B,KAAKg3B,OAAS5f,GAC1C43B,EAAYC,aAAaC,IAAIizC,eAAeyB,UAO9D7H,UAAUpoD,GACR,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIk1C,UACpC9B,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAMlBtN,oBAAoBu+E,GAClBA,EAAQvuD,YAAY,GAOtBhwB,kBAAkBu+E,EAA8B4B,GAC9C5B,EAAQpvD,cAAc,EAAGgxD,EAASn1C,EAAYC,aAAaC,IAAIizC,eAAeyB,WAOhF5/E,oBAAoBu+E,EAA8B8B,GAChD9B,EAAQhvD,eAAe,EAAG8wD,EAAiB,GAO7CrgF,kBAAkBu+E,GAEhB,OADaA,EAAQruD,YAIvBlwB,qBACIu+E,EAA8B4B,EAC9BE,GAIF,OAHAH,EAAQI,aAAa/B,GACrB2B,EAAQK,WAAWhC,EAAS4B,GAC5BD,EAAQM,aAAajC,EAAS8B,GACvBH,EAAQO,WAAWlC,IA5FjB,EAAA2B,QAAO,EADoB,GAAAh1C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAoG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAaw1C,EAAb,cACE,KAAApzE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,6BAA6BsN,EAA4BqiB,GACvD,OAAQA,GAAO,IAAI+wD,GAAgBpC,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQzFtN,yCAAyCsN,EAA4BqiB,GAEnE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI+wD,GAAgBpC,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAOzFy1B,SAASpT,GACP,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIk1C,UACpC9B,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAMlBtN,yBAAyBu+E,GACvBA,EAAQvuD,YAAY,GAOtBhwB,mBAAmBu+E,EAA8BoC,GAC/CpC,EAAQhvD,eAAe,EAAGoxD,EAAgB,GAO5C3gF,uBAAuBu+E,GAErB,OADaA,EAAQruD,YAIvBlwB,0BAA0Bu+E,EAA8BoC,GAGtD,OAFAD,EAAaE,kBAAkBrC,GAC/BmC,EAAaX,YAAYxB,EAASoC,GAC3BD,EAAaG,gBAAgBtC,IAxE3B,EAAAmC,aAAY,EADe,GAAAx1C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAgF5B,SAAiBA,IAAY,SAAAC,IAAa,EAAAC,MAAA,EAAAA,IAAG,KAC9B41C,QAAb,oBACE,KAAAxzE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAMT68E,YACE,OAAO78E,KAAKsR,GAAI8kB,WAAWp2B,KAAKg3B,QAMlC+tD,cACE,OAAO/kF,KAAKsR,GAAIgkB,UAAUt1B,KAAKg3B,OAAS,GAM1CguD,cACE,OAAOhlF,KAAKsR,GAAIgkB,UAAUt1B,KAAKg3B,OAAS,GAU1ChzB,qBACIu+E,EAA8B0C,EAAoBC,EAClDC,GAKF,OAJA5C,EAAQ5wD,KAAK,EAAG,IAChB4wD,EAAQnwD,WAAW+yD,GACnB5C,EAAQnwD,WAAW8yD,GACnB3C,EAAQnwD,WAAW6yD,GACZ1C,EAAQnrE,WAnDQ,GAAA63B,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0D5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAak2C,EAAb,cACE,KAAA9zE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,yBAAyBsN,EAA4BqiB,GACnD,OAAQA,GAAO,IAAIyxD,GAAY9C,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQrFtN,qCAAqCsN,EAA4BqiB,GAE/D,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAIyxD,GAAY9C,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAMrFurE,YACE,IAAIzlE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI8kB,WAAWp2B,KAAKg3B,OAAS5f,GAAU,EAQ9DiuE,WAAW17D,EAAegK,GACxB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI41C,SACpCxC,OAAOtiF,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,GAARuS,EAAY3pB,KAAKsR,IACvE,KAMlBg0E,mBACE,IAAIluE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAQhEmuE,YAAY57D,EAAegK,GACzB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI41C,SACpCxC,OAAOtiF,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,GAARuS,EAAY3pB,KAAKsR,IACvE,KAMlBk0E,oBACE,IAAIpuE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,qBAAqBu+E,GACnBA,EAAQvuD,YAAY,GAOtBhwB,oBAAoBu+E,EAA8B1F,GAChD0F,EAAQpvD,cAAc,EAAG0pD,EAAW,GAOtC74E,qBAAqBu+E,EAA8BkD,GACjDlD,EAAQhvD,eAAe,EAAGkyD,EAAkB,GAO9CzhF,6BAA6Bu+E,EAA8BC,GACzDD,EAAQhtD,YAAY,GAAIitD,EAAU,GAOpCx+E,sBAAsBu+E,EAA8BmD,GAClDnD,EAAQhvD,eAAe,EAAGmyD,EAAmB,GAO/C1hF,8BAA8Bu+E,EAA8BC,GAC1DD,EAAQhtD,YAAY,GAAIitD,EAAU,GAOpCx+E,mBAAmBu+E,GAEjB,OADaA,EAAQruD,YAIvBlwB,sBACIu+E,EAA8B1F,EAAmB4I,EACjDC,GAKF,OAJAN,EAASO,cAAcpD,GACvB6C,EAASQ,aAAarD,EAAS1F,GAC/BuI,EAASS,cAActD,EAASkD,GAChCL,EAASU,eAAevD,EAASmD,GAC1BN,EAASW,YAAYxD,IAjJnB,EAAA6C,SAAQ,EADmB,GAAAl2C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAyJ5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa+qC,EAAb,cACE,KAAA3oE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,qBAAqBsN,EAA4BqiB,GAC/C,OAAQA,GAAO,IAAIsmD,GAAQqI,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQjFtN,iCAAiCsN,EAA4BqiB,GAE3D,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAIsmD,GAAQqI,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GASjFrS,KAAK4jF,GACH,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAS9ElhD,UAAUkhD,GACR,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAS9E1+C,OAAO0+C,GACL,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9EmD,eACE,IAAI5uE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIgkB,UAAUt1B,KAAKg3B,OAAS5f,GAAU,EAM7DuS,QACE,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI8kB,WAAWp2B,KAAKg3B,OAAS5f,GAAU,EAS9D8sB,OAAO2+C,GACL,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9EjhF,OACE,IAAIwV,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAAkBpX,KAAKsR,GAAIgkB,UAAUt1B,KAAKg3B,OAAS5f,GAC1C43B,EAAYC,aAAaC,IAAIkzC,SAAS6D,UASxDC,sBAAsBrD,GACpB,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAU9ExhC,OAAO13B,EAAek5D,GACpB,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,EAAWk5D,GAAoB,KAM7GlH,eACE,IAAIvkE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAUhEmsD,QAAQ55C,EAAek5D,GACrB,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,EAAWk5D,GAAoB,KAM7GvG,gBACE,IAAIllE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAQhEkI,WAAWqK,EAAegK,GAExB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIC,WACpCmzC,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlBmrE,mBACE,IAAIrlE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAOhE+uE,eAAex8D,GACb,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIgkB,UAAUt1B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAa,EAM5Fy8D,uBACE,IAAIhvE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEivE,sBACE,IAAIjvE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EACH,IAAIjW,WACAnB,KAAKsR,GAAImgB,QAAQptB,OAAQrE,KAAKsR,GAAImgB,QAAQntB,WAAatE,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GACvFpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,IACxC,KAUNkvE,eAAe38D,EAAek5D,GAC5B,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,EAAWk5D,GAAoB,KAM7G0D,uBACE,IAAInvE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,iBAAiBu+E,GACfA,EAAQvuD,YAAY,IAOtBhwB,eAAeu+E,EAA8BiE,GAC3CjE,EAAQhvD,eAAe,EAAGizD,EAAY,GAOxCxiF,oBAAoBu+E,EAA8BkE,GAChDlE,EAAQhvD,eAAe,EAAGkzD,EAAiB,GAO7CziF,iBAAiBu+E,EAA8BmE,GAC7CnE,EAAQhvD,eAAe,EAAGmzD,EAAc,GAO1C1iF,uBAAuBu+E,EAA8ByD,GACnDzD,EAAQpvD,cAAc,EAAG6yD,EAAc,GAOzChiF,gBAAgBu+E,EAA8B54D,GAC5C44D,EAAQpvD,cAAc,EAAGxJ,EAAO,GAOlC3lB,iBAAiBu+E,EAA8BoE,GAC7CpE,EAAQhvD,eAAe,EAAGozD,EAAc,GAO1C3iF,eAAeu+E,EAA8B3gF,GAC3C2gF,EAAQpvD,cAAc,EAAGvxB,EAAMotC,EAAYC,aAAaC,IAAIkzC,SAAS6D,WAOvEjiF,gCAAgCu+E,EAA8BqE,GAC5DrE,EAAQhvD,eAAe,EAAGqzD,EAA6B,GAOzD5iF,iBAAiBu+E,EAA8BsE,GAC7CtE,EAAQhvD,eAAe,EAAGszD,EAAc,GAQ1C7iF,0BAA0Bu+E,EAA8B1gF,GACtD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,yBAAyBu+E,EAA8BC,GACrDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,kBAAkBu+E,EAA8BuE,GAC9CvE,EAAQhvD,eAAe,EAAGuzD,EAAe,GAQ3C9iF,2BAA2Bu+E,EAA8B1gF,GACvD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,0BAA0Bu+E,EAA8BC,GACtDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,qBAAqBu+E,EAA8BwE,GACjDxE,EAAQhvD,eAAe,GAAIwzD,EAAkB,GAQ/C/iF,8BAA8Bu+E,EAA8B1gF,GAC1D0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,6BAA6Bu+E,EAA8BC,GACzDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,yBAAyBu+E,EAA8ByE,GACrDzE,EAAQhvD,eAAe,GAAIyzD,EAAsB,GAQnDhjF,kCAAkCu+E,EAA8B1gF,GAC9D0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ7vD,SAAS7wB,EAAKnC,IAExB,OAAO6iF,EAAQ5sD,YAOjB3xB,iCAAiCu+E,EAA8BC,GAC7DD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,yBAAyBu+E,EAA8B0E,GACrD1E,EAAQhvD,eAAe,GAAI0zD,EAAsB,GAQnDjjF,kCAAkCu+E,EAA8B1gF,GAC9D0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,iCAAiCu+E,EAA8BC,GAC7DD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,eAAeu+E,GAEb,OADaA,EAAQruD,YAIvBlwB,kBACIu+E,EAA8BiE,EAAgCC,EAC9DC,EAAkCV,EAAsBr8D,EAAeg9D,EACvE/kF,EAA6CglF,EAC7CC,EAAkCC,EAAmCC,EACrEC,EAA0CC,GAe5C,OAdAhN,EAAKiN,UAAU3E,GACftI,EAAKkN,QAAQ5E,EAASiE,GACtBvM,EAAKmN,aAAa7E,EAASkE,GAC3BxM,EAAKoN,UAAU9E,EAASmE,GACxBzM,EAAKqN,gBAAgB/E,EAASyD,GAC9B/L,EAAKsN,SAAShF,EAAS54D,GACvBswD,EAAKuN,UAAUjF,EAASoE,GACxB1M,EAAKwN,QAAQlF,EAAS3gF,GACtBq4E,EAAKyN,yBAAyBnF,EAASqE,GACvC3M,EAAK0N,UAAUpF,EAASsE,GACxB5M,EAAK2N,WAAWrF,EAASuE,GACzB7M,EAAK4N,cAActF,EAASwE,GAC5B9M,EAAK6N,kBAAkBvF,EAASyE,GAChC/M,EAAK8N,kBAAkBxF,EAAS0E,GACzBhN,EAAK+N,QAAQzF,IArdX,EAAAtI,KAAI,EADuB,GAAA/qC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6d5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa+4C,EAAb,cACE,KAAA32E,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,0BAA0BsN,EAA4BqiB,GACpD,OAAQA,GAAO,IAAIs0D,GAAa3F,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQtFtN,sCAAsCsN,EAA4BqiB,GAEhE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAIs0D,GAAa3F,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAStFrS,KAAK4jF,GACH,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAS9ElhD,UAAUkhD,GACR,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAO9EjhF,KAAK+xB,GACH,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIk1C,UACpC9B,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAMlBtN,sBAAsBu+E,GACpBA,EAAQvuD,YAAY,GAOtBhwB,eAAeu+E,EAA8BiE,GAC3CjE,EAAQhvD,eAAe,EAAGizD,EAAY,GAOxCxiF,oBAAoBu+E,EAA8BkE,GAChDlE,EAAQhvD,eAAe,EAAGkzD,EAAiB,GAO7CziF,eAAeu+E,EAA8B2F,GAC3C3F,EAAQhvD,eAAe,EAAG20D,EAAY,GAOxClkF,oBAAoBu+E,GAElB,OADaA,EAAQruD,YAIvBlwB,uBACIu+E,EAA8BiE,EAAgCC,EAC9DyB,GAKF,OAJAD,EAAUE,eAAe5F,GACzB0F,EAAUd,QAAQ5E,EAASiE,GAC3ByB,EAAUb,aAAa7E,EAASkE,GAChCwB,EAAUR,QAAQlF,EAAS2F,GACpBD,EAAUG,aAAa7F,IAlHrB,EAAA0F,UAAS,EADkB,GAAA/4C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0H5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAak1C,EAAb,cACE,KAAA9yE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,yBAAyBsN,EAA4BqiB,GACnD,OAAQA,GAAO,IAAIywD,GAAY9B,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQrFtN,qCAAqCsN,EAA4BqiB,GAE/D,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAIywD,GAAY9B,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GASrFo1B,WAAWm8C,GACT,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9E9G,YACE,IAAI3kE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAAkBpX,KAAKsR,GAAI4kB,UAAUl2B,KAAKg3B,OAAS5f,GAC1C43B,EAAYC,aAAaC,IAAI8sC,cAAcqM,KAO7DhoF,MAAmCszB,GACjC,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI4lB,QAAQvD,EAAK3zB,KAAKg3B,OAAS5f,GAAU,KAMhEpT,qBAAqBu+E,GACnBA,EAAQvuD,YAAY,GAOtBhwB,qBAAqBu+E,EAA8BQ,GACjDR,EAAQhvD,eAAe,EAAGwvD,EAAkB,GAO9C/+E,oBAAoBu+E,EAA8BxG,GAChDwG,EAAQzvD,aAAa,EAAGipD,EAAW/sC,EAAYC,aAAaC,IAAI8sC,cAAcqM,MAOhFrkF,gBAAgBu+E,EAA8BO,GAC5CP,EAAQhvD,eAAe,EAAGuvD,EAAa,GAOzC9+E,mBAAmBu+E,GAEjB,OADaA,EAAQruD,YAIvBlwB,sBACIu+E,EAA8BQ,EAC9BhH,EAAuD+G,GAKzD,OAJAsB,EAASkE,cAAc/F,GACvB6B,EAASlB,cAAcX,EAASQ,GAChCqB,EAASI,aAAajC,EAASxG,GAC/BqI,EAASnB,SAASV,EAASO,GACpBsB,EAASmE,YAAYhG,IA9GnB,EAAA6B,SAAQ,EADmB,GAAAl1C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsH5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAas5C,EAAb,cACE,KAAAl3E,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,8BAA8BsN,EAA4BqiB,GACxD,OAAQA,GAAO,IAAI60D,GAAiBlG,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQ1FtN,0CAA0CsN,EAA4BqiB,GAEpE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI60D,GAAiBlG,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAS1F6yB,OAAO0+C,GACL,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9EtjE,UACE,IAAInI,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI+kB,UAAUr2B,KAAKg3B,OAAS5f,GAAUpX,KAAKsR,GAAIwkB,WAAW,EAAG,GAMpF9xB,0BAA0Bu+E,GACxBA,EAAQvuD,YAAY,GAOtBhwB,iBAAiBu+E,EAA8BmE,GAC7CnE,EAAQhvD,eAAe,EAAGmzD,EAAc,GAO1C1iF,kBAAkBu+E,EAA8BhjE,GAC9CgjE,EAAQnvD,cAAc,EAAG7T,EAASgjE,EAAQzsD,WAAW,EAAG,IAO1D9xB,wBAAwBu+E,GAEtB,OADaA,EAAQruD,YAIvBlwB,2BACIu+E,EAA8BmE,EAAkCnnE,GAIlE,OAHAipE,EAAcC,mBAAmBlG,GACjCiG,EAAcnB,UAAU9E,EAASmE,GACjC8B,EAAcE,WAAWnG,EAAShjE,GAC3BipE,EAAcG,iBAAiBpG,IA1F7B,EAAAiG,cAAa,EADc,GAAAt5C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAkG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAa1tC,EAAb,cACE,KAAA8P,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,uBAAuBsN,EAA4BqiB,GACjD,OAAQA,GAAO,IAAInyB,GAAU8gF,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQnFtN,mCAAmCsN,EAA4BqiB,GAE7D,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAInyB,GAAU8gF,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GASnFrS,KAAK4jF,GACH,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAS9ElhD,UAAUkhD,GACR,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAO9E/gF,KAAK6nB,GACH,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI+kB,UAAUr2B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAC7D3pB,KAAKsR,GAAIwkB,WAAW,EAAG,GAMzC8yD,aACE,IAAIxxE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEuuB,WACE,IAAIvuB,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAAkBpX,KAAKsR,GAAIgkB,UAAUt1B,KAAKg3B,OAAS5f,GAC1C43B,EAAYC,aAAaC,IAAIizC,eAAeyB,UAO9D/9C,QAAQlc,GACN,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI4kB,UAAUl2B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAUuS,GAAS,EAMxFk/D,gBACE,IAAIzxE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhE0xE,eACE,IAAI1xE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EACH,IAAIrW,WACAf,KAAKsR,GAAImgB,QAAQptB,OAAQrE,KAAKsR,GAAImgB,QAAQntB,WAAatE,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GACvFpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,IACxC,KAUNkuB,WAAW3b,EAAek5D,GACxB,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,EAAWk5D,GAAoB,KAM7GkG,mBACE,IAAI3xE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,mBAAmBu+E,GACjBA,EAAQvuD,YAAY,GAOtBhwB,eAAeu+E,EAA8BiE,GAC3CjE,EAAQhvD,eAAe,EAAGizD,EAAY,GAOxCxiF,oBAAoBu+E,EAA8BkE,GAChDlE,EAAQhvD,eAAe,EAAGkzD,EAAiB,GAO7CziF,eAAeu+E,EAA8ByG,GAC3CzG,EAAQhvD,eAAe,EAAGy1D,EAAY,GAQxChlF,wBAAwBu+E,EAA8B1gF,GACpD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ5vD,SAAS9wB,EAAKnC,IAExB,OAAO6iF,EAAQ5sD,YAOjB3xB,uBAAuBu+E,EAA8BC,GACnDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,mBAAmBu+E,EAA8B58C,GAC/C48C,EAAQpvD,cAAc,EAAGwS,EAAUqJ,EAAYC,aAAaC,IAAIizC,eAAeyB,WAOjF5/E,kBAAkBu+E,EAA8B0G,GAC9C1G,EAAQhvD,eAAe,EAAG01D,EAAe,GAQ3CjlF,2BAA2Bu+E,EAA8B1gF,GACvD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/vD,QAAQ3wB,EAAKnC,IAEvB,OAAO6iF,EAAQ5sD,YAOjB3xB,0BAA0Bu+E,EAA8BC,GACtDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,qBAAqBu+E,EAA8B2G,GACjD3G,EAAQhvD,eAAe,EAAG21D,EAAkB,GAQ9CllF,8BAA8Bu+E,EAA8B1gF,GAC1D0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,6BAA6Bu+E,EAA8BC,GACzDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,iBAAiBu+E,GAEf,OADaA,EAAQruD,YAIvBlwB,oBACIu+E,EAA8BiE,EAAgCC,EAC9DuC,EAAgCrjD,EAChCsjD,EAAmCC,GAQrC,OAPA1nF,EAAO2nF,YAAY5G,GACnB/gF,EAAO2lF,QAAQ5E,EAASiE,GACxBhlF,EAAO4lF,aAAa7E,EAASkE,GAC7BjlF,EAAO4nF,QAAQ7G,EAASyG,GACxBxnF,EAAO6nF,YAAY9G,EAAS58C,GAC5BnkC,EAAO8nF,WAAW/G,EAAS0G,GAC3BznF,EAAO+nF,cAAchH,EAAS2G,GACvB1nF,EAAOgoF,UAAUjH,IA9Qf,EAAA/gF,OAAM,EADqB,GAAA0tC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsR5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAau6C,EAAb,cACE,KAAAn4E,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,6BAA6BsN,EAA4BqiB,GACvD,OAAQA,GAAO,IAAI81D,GAAgBnH,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQzFtN,yCAAyCsN,EAA4BqiB,GAEnE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI81D,GAAgBnH,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAOzFivB,OAAO5M,GACL,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI1tC,QACpC8gF,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAOlBo4E,QAAQ/1D,GACN,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI1tC,QACpC8gF,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAOlBxP,KAAK6nB,GACH,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI+kB,UAAUr2B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAC7D3pB,KAAKsR,GAAIwkB,WAAW,EAAG,GAMzC8yD,aACE,IAAIxxE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,yBAAyBu+E,GACvBA,EAAQvuD,YAAY,GAOtBhwB,iBAAiBu+E,EAA8BoH,GAC7CpH,EAAQhvD,eAAe,EAAGo2D,EAAc,GAO1C3lF,kBAAkBu+E,EAA8BqH,GAC9CrH,EAAQhvD,eAAe,EAAGq2D,EAAe,GAO3C5lF,eAAeu+E,EAA8ByG,GAC3CzG,EAAQhvD,eAAe,EAAGy1D,EAAY,GAQxChlF,wBAAwBu+E,EAA8B1gF,GACpD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ5vD,SAAS9wB,EAAKnC,IAExB,OAAO6iF,EAAQ5sD,YAOjB3xB,uBAAuBu+E,EAA8BC,GACnDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,uBAAuBu+E,GAErB,OADaA,EAAQruD,YAIvBlwB,0BACIu+E,EAA8BoH,EAAkCC,EAChEZ,GAKF,OAJAS,EAAaI,kBAAkBtH,GAC/BkH,EAAaK,UAAUvH,EAASoH,GAChCF,EAAaM,WAAWxH,EAASqH,GACjCH,EAAaL,QAAQ7G,EAASyG,GACvBS,EAAaO,gBAAgBzH,IA9I3B,EAAAkH,aAAY,EADe,GAAAv6C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsJ5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAaC,EAAb,cACE,KAAA79B,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,0BAA0BsN,EAA4BqiB,GACpD,OAAQA,GAAO,IAAIwb,GAAamzC,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQtFtN,sCAAsCsN,EAA4BqiB,GAEhE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAIwb,GAAamzC,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAStFrS,KAAK4jF,GACH,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAS9ElhD,UAAUkhD,GACR,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9EjhF,OACE,IAAIwV,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAAkBpX,KAAKsR,GAAIgkB,UAAUt1B,KAAKg3B,OAAS5f,GAC1C43B,EAAYC,aAAaC,IAAIxL,cAAckgD,UAM7D98E,IACE,IAAIsQ,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIilB,YAAYv2B,KAAKg3B,OAAS5f,GAAU,EAM/D1X,IACE,IAAI0X,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI+kB,UAAUr2B,KAAKg3B,OAAS5f,GAAUpX,KAAKsR,GAAIwkB,WAAW,EAAG,GASpFpvB,EAAEm8E,GACA,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAO9Ej9E,EAAE+tB,GACA,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI1tC,QACpC8gF,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAOlBjK,EAAEssB,GACA,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIwqC,OACpC4I,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAOlB+vB,OAAO1X,GACL,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIilB,YAAYv2B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAa,EAM9FsgE,eACE,IAAI7yE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEq6B,cACE,IAAIr6B,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EACH,IAAItW,aACAd,KAAKsR,GAAImgB,QAAQptB,OAAQrE,KAAKsR,GAAImgB,QAAQntB,WAAatE,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GACvFpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,IACxC,KAONkqB,KAAK3X,GACH,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI+kB,UAAUr2B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAC7D3pB,KAAKsR,GAAIwkB,WAAW,EAAG,GAMzC4b,aACE,IAAIt6B,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAUhEmqB,QAAQ5X,EAAek5D,GACrB,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,EAAWk5D,GAAoB,KAM7GlxC,gBACE,IAAIv6B,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAQhEoqB,QAAQ7X,EAAegK,GACrB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI1tC,QACpC8gF,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlBsgC,gBACE,IAAIx6B,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAQhEqqB,OAAO9X,EAAegK,GACpB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIwqC,OACpC4I,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlB44E,eACE,IAAI9yE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,sBAAsBu+E,GACpBA,EAAQvuD,YAAY,IAOtBhwB,eAAeu+E,EAA8BiE,GAC3CjE,EAAQhvD,eAAe,EAAGizD,EAAY,GAOxCxiF,oBAAoBu+E,EAA8BkE,GAChDlE,EAAQhvD,eAAe,EAAGkzD,EAAiB,GAO7CziF,eAAeu+E,EAA8B3gF,GAC3C2gF,EAAQpvD,cAAc,EAAGvxB,EAAMotC,EAAYC,aAAaC,IAAIxL,cAAckgD,WAO5E5/E,YAAYu+E,EAA8Bz7E,GACxCy7E,EAAQlvD,gBAAgB,EAAGvsB,EAAG,GAOhC9C,YAAYu+E,EAA8B7iF,GACxC6iF,EAAQnvD,cAAc,EAAG1zB,EAAG6iF,EAAQzsD,WAAW,EAAG,IAOpD9xB,YAAYu+E,EAA8B4H,GACxC5H,EAAQhvD,eAAe,EAAG42D,EAAS,GAOrCnmF,YAAYu+E,EAA8B6H,GACxC7H,EAAQhvD,eAAe,EAAG62D,EAAS,GAOrCpmF,YAAYu+E,EAA8B8H,GACxC9H,EAAQhvD,eAAe,EAAG82D,EAAS,GAOrCrmF,iBAAiBu+E,EAA8B+H,GAC7C/H,EAAQhvD,eAAe,EAAG+2D,EAAc,GAQ1CtmF,0BAA0Bu+E,EAA8B1gF,GACtD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ3vD,WAAW/wB,EAAKnC,IAE1B,OAAO6iF,EAAQ5sD,YAOjB3xB,yBAAyBu+E,EAA8BC,GACrDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,eAAeu+E,EAA8BgI,GAC3ChI,EAAQhvD,eAAe,EAAGg3D,EAAY,GAQxCvmF,wBAAwBu+E,EAA8B1gF,GACpD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ5vD,SAAS9wB,EAAKnC,IAExB,OAAO6iF,EAAQ5sD,YAOjB3xB,uBAAuBu+E,EAA8BC,GACnDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,kBAAkBu+E,EAA8BiI,GAC9CjI,EAAQhvD,eAAe,GAAIi3D,EAAe,GAQ5CxmF,2BAA2Bu+E,EAA8B1gF,GACvD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,0BAA0Bu+E,EAA8BC,GACtDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,kBAAkBu+E,EAA8BkI,GAC9ClI,EAAQhvD,eAAe,GAAIk3D,EAAe,GAQ5CzmF,2BAA2Bu+E,EAA8B1gF,GACvD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,0BAA0Bu+E,EAA8BC,GACtDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,iBAAiBu+E,EAA8BmI,GAC7CnI,EAAQhvD,eAAe,GAAIm3D,EAAc,GAQ3C1mF,0BAA0Bu+E,EAA8B1gF,GACtD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,yBAAyBu+E,EAA8BC,GACrDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,oBAAoBu+E,GAElB,OADaA,EAAQruD,YAIvBlwB,uBACIu+E,EAA8BiE,EAAgCC,EAC9D7kF,EAAkDkF,EAAWpH,EAAqByqF,EAClFC,EAA6BC,EAA6BC,EAC1DC,EAAgCC,EAAmCC,EACnEC,GAeF,OAdAv7C,EAAUw7C,eAAepI,GACzBpzC,EAAUg4C,QAAQ5E,EAASiE,GAC3Br3C,EAAUi4C,aAAa7E,EAASkE,GAChCt3C,EAAUs4C,QAAQlF,EAAS3gF,GAC3ButC,EAAUy7C,KAAKrI,EAASz7E,GACxBqoC,EAAU07C,KAAKtI,EAAS7iF,GACxByvC,EAAU27C,KAAKvI,EAAS4H,GACxBh7C,EAAU47C,KAAKxI,EAAS6H,GACxBj7C,EAAU67C,KAAKzI,EAAS8H,GACxBl7C,EAAU87C,UAAU1I,EAAS+H,GAC7Bn7C,EAAU+7C,QAAQ3I,EAASgI,GAC3Bp7C,EAAUg8C,WAAW5I,EAASiI,GAC9Br7C,EAAUi8C,WAAW7I,EAASkI,GAC9Bt7C,EAAUk8C,UAAU9I,EAASmI,GACtBv7C,EAAUm8C,aAAa/I,IAldrB,EAAApzC,UAAS,EADkB,GAAAD,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0d5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAawqC,EAAb,cACE,KAAApoE,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,sBAAsBsN,EAA4BqiB,GAChD,OAAQA,GAAO,IAAI+lD,GAAS4I,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQlFtN,kCAAkCsN,EAA4BqiB,GAE5D,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI+lD,GAAS4I,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQlF05D,aAAarhD,EAAegK,GAC1B,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI1tC,QACpC8gF,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlB8qE,qBACE,IAAIhlE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAQhE0kE,SAASnyD,EAAegK,GACtB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI+4C,WACpC3F,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlBuqE,iBACE,IAAIzkE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAQhEqkC,MAAM9xB,EAAegK,GACnB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAI+qC,MACpCqI,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlBkrE,cACE,IAAIplE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEm0E,eACE,IAAIn0E,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI8kB,WAAWp2B,KAAKg3B,OAAS5f,GAAU,EAQ9Do0E,UAAU7hE,EAAegK,GACvB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIk2C,UACpC9C,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlBm6E,kBACE,IAAIr0E,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAUhEiqC,OAAO13B,EAAek5D,GACpB,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,EAAWk5D,GAAoB,KAM7GlH,eACE,IAAIvkE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAUhEmsD,QAAQ55C,EAAek5D,GACrB,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,EAAWk5D,GAAoB,KAM7GvG,gBACE,IAAIllE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAQhEs0E,mBAAmB/hE,EAAegK,GAEhC,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIu6C,cACpCnH,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlBq6E,2BACE,IAAIv0E,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,kBAAkBu+E,GAChBA,EAAQvuD,YAAY,GAOtBhwB,uBAAuBu+E,EAA8BqJ,GACnDrJ,EAAQhvD,eAAe,EAAGq4D,EAAoB,GAQhD5nF,gCAAgCu+E,EAA8B1gF,GAC5D0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,+BAA+Bu+E,EAA8BC,GAC3DD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,mBAAmBu+E,EAA8BsJ,GAC/CtJ,EAAQhvD,eAAe,EAAGs4D,EAAgB,GAQ5C7nF,4BAA4Bu+E,EAA8B1gF,GACxD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,2BAA2Bu+E,EAA8BC,GACvDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,gBAAgBu+E,EAA8BuJ,GAC5CvJ,EAAQhvD,eAAe,EAAGu4D,EAAa,GAQzC9nF,yBAAyBu+E,EAA8B1gF,GACrD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,wBAAwBu+E,EAA8BC,GACpDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,uBAAuBu+E,EAA8BgJ,GACnDhJ,EAAQpvD,cAAc,EAAGo4D,EAAc,GAOzCvnF,oBAAoBu+E,EAA8BwJ,GAChDxJ,EAAQhvD,eAAe,EAAGw4D,EAAiB,GAQ7C/nF,6BAA6Bu+E,EAA8B1gF,GACzD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,4BAA4Bu+E,EAA8BC,GACxDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,iBAAiBu+E,EAA8BsE,GAC7CtE,EAAQhvD,eAAe,EAAGszD,EAAc,GAQ1C7iF,0BAA0Bu+E,EAA8B1gF,GACtD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,yBAAyBu+E,EAA8BC,GACrDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,kBAAkBu+E,EAA8BuE,GAC9CvE,EAAQhvD,eAAe,EAAGuzD,EAAe,GAQ3C9iF,2BAA2Bu+E,EAA8B1gF,GACvD0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,0BAA0Bu+E,EAA8BC,GACtDD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,6BAA6Bu+E,EAA8ByJ,GACzDzJ,EAAQhvD,eAAe,EAAGy4D,EAA0B,GAQtDhoF,sCAAsCu+E,EAA8B1gF,GAElE0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,qCAAqCu+E,EAA8BC,GACjED,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,gBAAgBu+E,GAEd,OADaA,EAAQruD,YAIvBlwB,mBACIu+E,EAA8BqJ,EAAwCC,EACtEC,EAAiCP,EAAsBQ,EACvDlF,EAAkCC,EAClCkF,GAUF,OATAtS,EAAMuS,WAAW1J,GACjB7I,EAAMwS,gBAAgB3J,EAASqJ,GAC/BlS,EAAMyS,YAAY5J,EAASsJ,GAC3BnS,EAAM0S,SAAS7J,EAASuJ,GACxBpS,EAAM2S,gBAAgB9J,EAASgJ,GAC/B7R,EAAM4S,aAAa/J,EAASwJ,GAC5BrS,EAAMiO,UAAUpF,EAASsE,GACzBnN,EAAMkO,WAAWrF,EAASuE,GAC1BpN,EAAM6S,sBAAsBhK,EAASyJ,GAC9BtS,EAAM8S,SAASjK,IAzab,EAAA7I,MAAK,EADsB,GAAAxqC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAib5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAau9C,EAAb,cACE,KAAAn7E,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,sBAAsBsN,EAA4BqiB,GAChD,OAAQA,GAAO,IAAI84D,GAASnK,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQlFtN,kCAAkCsN,EAA4BqiB,GAE5D,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI84D,GAASnK,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAMlFizB,YACE,IAAIntB,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI+kB,UAAUr2B,KAAKg3B,OAAS5f,GAAUpX,KAAKsR,GAAIwkB,WAAW,EAAG,GAQpFuO,YAAY1a,EAAegK,GAEzB,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIs5C,eACpClG,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlB+vE,oBACE,IAAIjqE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAShEotB,aAAaq+C,GACX,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAS9Ep+C,gBAAgBo+C,GACd,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAS9E1+C,OAAO0+C,GACL,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9En+C,eACE,IAAIttB,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI+kB,UAAUr2B,KAAKg3B,OAAS5f,GAAUpX,KAAKsR,GAAIwkB,WAAW,EAAG,GASpF6L,UAAUkhD,GACR,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAO9El+C,MAAMhR,GACJ,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIwqC,OACpC4I,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KASlBo7E,eAAe7J,GACb,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,IAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAM9E7+E,kBAAkBu+E,GAChBA,EAAQvuD,YAAY,GAOtBhwB,oBAAoBu+E,EAA8Bh+C,GAChDg+C,EAAQnvD,cAAc,EAAGmR,EAAWg+C,EAAQzsD,WAAW,EAAG,IAO5D9xB,sBAAsBu+E,EAA8BoK,GAClDpK,EAAQhvD,eAAe,EAAGo5D,EAAmB,GAQ/C3oF,+BAA+Bu+E,EAA8B1gF,GAC3D0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,8BAA8Bu+E,EAA8BC,GAC1DD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,uBAAuBu+E,EAA8BqK,GACnDrK,EAAQhvD,eAAe,EAAGq5D,EAAoB,GAOhD5oF,0BAA0Bu+E,EAA8BsK,GACtDtK,EAAQhvD,eAAe,EAAGs5D,EAAuB,GAOnD7oF,iBAAiBu+E,EAA8BmE,GAC7CnE,EAAQhvD,eAAe,EAAGmzD,EAAc,GAO1C1iF,uBAAuBu+E,EAA8B79C,GACnD69C,EAAQnvD,cAAc,EAAGsR,EAAc69C,EAAQzsD,WAAW,EAAG,IAO/D9xB,oBAAoBu+E,EAA8BkE,GAChDlE,EAAQhvD,eAAe,EAAGkzD,EAAiB,GAO7CziF,gBAAgBu+E,EAA8BuK,GAC5CvK,EAAQhvD,eAAe,EAAGu5D,EAAa,GAOzC9oF,yBAAyBu+E,EAA8BwK,GACrDxK,EAAQhvD,eAAe,EAAGw5D,EAAsB,GAOlD/oF,gBAAgBu+E,GAEd,OADaA,EAAQruD,YAIvBlwB,mBACIu+E,EAA8Bh+C,EAA6BooD,EAC3DC,EAAwCC,EACxCnG,EAAkChiD,EAAgC+hD,EAClEqG,EAAiCC,GAWnC,OAVAN,EAAMO,WAAWzK,GACjBkK,EAAMQ,aAAa1K,EAASh+C,GAC5BkoD,EAAMS,eAAe3K,EAASoK,GAC9BF,EAAMU,gBAAgB5K,EAASqK,GAC/BH,EAAMW,mBAAmB7K,EAASsK,GAClCJ,EAAMpF,UAAU9E,EAASmE,GACzB+F,EAAMY,gBAAgB9K,EAAS79C,GAC/B+nD,EAAMrF,aAAa7E,EAASkE,GAC5BgG,EAAMa,SAAS/K,EAASuK,GACxBL,EAAMc,kBAAkBhL,EAASwK,GAC1BN,EAAMe,SAASjL,IArQb,EAAAkK,MAAK,EADsB,GAAAv9C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6Q5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAau+C,EAAb,cACE,KAAAn8E,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,kCAAkCsN,EAA4BqiB,GAC5D,OAAQA,GAAO,IAAI85D,GAAqBnL,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQ9FtN,8CAA8CsN,EAA4BqiB,GAGxE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI85D,GAAqBnL,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAO9Fo8E,YAAY/jE,GACV,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI8kB,WAAWp2B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAa,EAM7FgkE,oBACE,IAAIv2E,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEw2E,mBACE,IAAIx2E,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EACH,IAAI/V,YACArB,KAAKsR,GAAImgB,QAAQptB,OAAQrE,KAAKsR,GAAImgB,QAAQntB,WAAatE,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GACvFpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,IACxC,KAONy2E,gBAAgBlkE,GACd,IAAIvS,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIglB,WAAWt2B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAC9D3pB,KAAKsR,GAAIwkB,WAAW,EAAG,GAMzCg4D,wBACE,IAAI12E,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,8BAA8Bu+E,GAC5BA,EAAQvuD,YAAY,GAOtBhwB,sBAAsBu+E,EAA8BwL,GAClDxL,EAAQhvD,eAAe,EAAGw6D,EAAmB,GAQ/C/pF,+BAA+Bu+E,EAA8B1gF,GAC3D0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ7vD,SAAS7wB,EAAKnC,IAExB,OAAO6iF,EAAQ5sD,YAOjB3xB,8BAA8Bu+E,EAA8BC,GAC1DD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,0BAA0Bu+E,EAA8ByL,GACtDzL,EAAQhvD,eAAe,EAAGy6D,EAAuB,GAQnDhqF,mCAAmCu+E,EAA8B1gF,GAC/D0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ5vD,SAAS9wB,EAAKnC,IAExB,OAAO6iF,EAAQ5sD,YAOjB3xB,kCAAkCu+E,EAA8BC,GAC9DD,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,4BAA4Bu+E,GAE1B,OADaA,EAAQruD,YAIvBlwB,+BACIu+E,EAA8BwL,EAC9BC,GAIF,OAHAP,EAAkBQ,uBAAuB1L,GACzCkL,EAAkBS,eAAe3L,EAASwL,GAC1CN,EAAkBU,mBAAmB5L,EAASyL,GACvCP,EAAkBW,qBAAqB7L,IAlKrC,EAAAkL,kBAAiB,EADU,GAAAv+C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0K5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAam/C,EAAb,cACE,KAAA/8E,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,qCAAqCsN,EAA4BqiB,GAC/D,OAAQA,GAAO,IAAI06D,GAAwB/L,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQjGtN,iDAAiDsN,EAA4BqiB,GAG3E,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI06D,GAAwB/L,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GASjGg9E,QAAQzL,GACN,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAO9E0L,aAAa56D,GACX,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIs/C,cACpClM,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAMlBtN,iCAAiCu+E,GAC/BA,EAAQvuD,YAAY,GAOtBhwB,kBAAkBu+E,EAA8BkM,GAC9ClM,EAAQhvD,eAAe,EAAGk7D,EAAe,GAO3CzqF,uBAAuBu+E,EAA8BmM,GACnDnM,EAAQhvD,eAAe,EAAGm7D,EAAoB,GAOhD1qF,+BAA+Bu+E,GAC7B,IAAInrE,EAASmrE,EAAQruD,YAErB,OADAquD,EAAQttD,cAAc7d,EAAQ,GACvBA,EAGTpT,kCACIu+E,EAA8BkM,EAC9BC,GAIF,OAHAL,EAAqBM,0BAA0BpM,GAC/C8L,EAAqBO,WAAWrM,EAASkM,GACzCJ,EAAqBQ,gBAAgBtM,EAASmM,GACvCL,EAAqBS,wBAAwBvM,IAhG3C,EAAA8L,qBAAoB,EADO,GAAAn/C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAwG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAas/C,EAAb,cACE,KAAAl9E,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,6BAA6BsN,EAA4BqiB,GACvD,OAAQA,GAAO,IAAI66D,GAAgBlM,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQzFtN,yCAAyCsN,EAA4BqiB,GAEnE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI66D,GAAgBlM,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAOzFy9E,QAAQp7D,GACN,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIu+C,mBACpCnL,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAQlB09E,sBAAsBrlE,EAAegK,GAEnC,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIm/C,sBACpC/L,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKsR,GAAIgmB,SAASt3B,KAAKg3B,OAAS5f,GAAkB,EAARuS,GAAY3pB,KAAKsR,IAC3F,KAMlB29E,8BACE,IAAI73E,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAIimB,aAAav3B,KAAKg3B,OAAS5f,GAAU,EAMhEpT,yBAAyBu+E,GACvBA,EAAQvuD,YAAY,GAOtBhwB,kBAAkBu+E,EAA8B2M,GAC9C3M,EAAQhvD,eAAe,EAAG27D,EAAe,GAO3ClrF,gCAAgCu+E,EAA8B4M,GAC5D5M,EAAQhvD,eAAe,EAAG47D,EAA6B,GAQzDnrF,yCAAyCu+E,EAA8B1gF,GAErE0gF,EAAQhtD,YAAY,EAAG1zB,EAAKlC,OAAQ,GACpC,IAAK,IAAID,EAAImC,EAAKlC,OAAS,EAAGD,GAAK,EAAGA,IACpC6iF,EAAQ/uD,UAAU3xB,EAAKnC,IAEzB,OAAO6iF,EAAQ5sD,YAOjB3xB,wCAAwCu+E,EAA8BC,GACpED,EAAQhtD,YAAY,EAAGitD,EAAU,GAOnCx+E,uBAAuBu+E,GAErB,OADaA,EAAQruD,YAIvBlwB,0BACIu+E,EAA8B2M,EAC9BC,GAIF,OAHAX,EAAaY,kBAAkB7M,GAC/BiM,EAAaa,WAAW9M,EAAS2M,GACjCV,EAAac,yBAAyB/M,EAAS4M,GACxCX,EAAae,gBAAgBhN,IA9H3B,EAAAiM,aAAY,EADe,GAAAt/C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsI5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,MAAatsC,EAAb,cACE,KAAA0O,GAAkC,KAElC,KAAA0lB,OAAS,EAMTsrD,OAAO5iF,EAAW4R,GAGhB,OAFAtR,KAAKg3B,OAASt3B,EACdM,KAAKsR,GAAKA,EACHtR,KAQTgE,iCAAiCsN,EAA4BqiB,GAC3D,OAAQA,GAAO,IAAI/wB,GAAoB0/E,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAQ7FtN,6CAA6CsN,EAA4BqiB,GAEvE,OADAriB,EAAGyiB,YAAYziB,EAAGogB,WAAa,EAAA1C,YAAYM,qBACnCqE,GAAO,IAAI/wB,GAAoB0/E,OAAOhxE,EAAGgkB,UAAUhkB,EAAGogB,YAAcpgB,EAAGogB,WAAYpgB,GAO7FtN,2BAA2BsN,GACzB,OAAOA,EAAGkmB,iBAAiB,QAS7Bg4D,WAAW3M,GACT,IAAIzrE,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,EAASpX,KAAKsR,GAAI6lB,SAASn3B,KAAKg3B,OAAS5f,EAAQyrE,GAAoB,KAO9EzB,MAAMztD,GACJ,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIu9C,OACpCnK,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAOlBi9E,aAAa56D,GACX,IAAIvc,EAASpX,KAAKsR,GAAIylB,SAAS/2B,KAAKg3B,OAAQ,GAC5C,OAAO5f,GAAUuc,GAAO,IAAIqb,EAAYC,aAAaC,IAAIs/C,cACpClM,OAAOtiF,KAAKsR,GAAI+lB,WAAWr3B,KAAKg3B,OAAS5f,GAASpX,KAAKsR,IAC5D,KAMlBtN,6BAA6Bu+E,GAC3BA,EAAQvuD,YAAY,GAOtBhwB,qBAAqBu+E,EAA8BkN,GACjDlN,EAAQhvD,eAAe,EAAGk8D,EAAkB,GAO9CzrF,gBAAgBu+E,EAA8BmN,GAC5CnN,EAAQhvD,eAAe,EAAGm8D,EAAa,GAOzC1rF,uBAAuBu+E,EAA8BmM,GACnDnM,EAAQhvD,eAAe,EAAGm7D,EAAoB,GAOhD1qF,2BAA2Bu+E,GAEzB,OADaA,EAAQruD,YAQvBlwB,oCAAoCu+E,EAA8BnrE,GAChEmrE,EAAQ7tD,OAAOtd,EAAQ,QAOzBpT,gDAAgDu+E,EAA8BnrE,GAC5EmrE,EAAQ7tD,OAAOtd,EAAQ,QAAQ,GAGjCpT,8BACIu+E,EAA8BkN,EAAsCC,EACpEhB,GAKF,OAJA9rF,EAAiB+sF,sBAAsBpN,GACvC3/E,EAAiBgtF,cAAcrN,EAASkN,GACxC7sF,EAAiBitF,SAAStN,EAASmN,GACnC9sF,EAAiBisF,gBAAgBtM,EAASmM,GACnC9rF,EAAiBktF,oBAAoBvN,IA1InC,EAAA3/E,iBAAgB,EADW,GAAAssC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,M,ibCxoH5B,gBAEA,UAEA,6BACEjvC,YAAoB2tC,GAAA,KAAAA,UAClB1tC,KAAKyD,WAAazD,KAAK0tC,QAAQjqC,WAC/BzD,KAAKmD,YAAcnD,KAAK0tC,QAAQvqC,YAG5B+uC,U,6CAGAvuC,IACFZ,EAAiCgtF,EACjCC,G,yCACF,MAAMC,EAAW,IAAIpvF,IACrB,IAAK,MAAM5B,KAAQ8D,EACjB,GAAIO,OAAOQ,eAAeC,KAAKhB,EAAO9D,GAAO,CAC3C,MAAMixF,EAAOntF,EAAM9D,GACnBgxF,EAAS1uF,IACLtC,EACA,IAAI,SACAixF,EAAKpuF,KAAMouF,EAAKtuF,UAA+BpC,OAAWA,EAC1D0wF,EAAKruF,OAGjB,MAAMsuF,QAAkBnwF,KAAK0tC,QAAQ/pC,IAAIssF,GACnCjsD,EAAoC,GAI1C,OAHAmsD,EAAUp2E,SAAQ,CAACqoC,EAAQnjD,KACzB+kC,EAAO/kC,GAAQ,IAAI,EAAAuC,OAAO4gD,EAAOxgD,KAAMwgD,EAAOvgD,KAAMugD,EAAOtgD,SAEtDkiC,KAET1+B,iBACEtF,KAAK0tC,QAAQpoC,iBAEfC,eACEvF,KAAK0tC,QAAQnoC,kB,oaCtCjB,gBACA,UAEA,UACA,UAEA,UACA,UAiBA,gBACExF,YAAY0tE,EAAyB,IACnCztE,KAAKowF,cAAe,EACpBpwF,KAAK+xC,YAAc07B,EAAO17B,YAC1B/xC,KAAKonE,SAAW,EAAAipB,SAASpgE,OAAOw9C,EAAOrG,UACvCpnE,KAAKizC,QAAU,CAACm0B,SAAUpnE,KAAKonE,SAAUkpB,gBAAiB,GAAIC,eAAgB,IAG5E9sF,iBACF,OAAOzD,KAAKwwF,OAAO7rD,MAAM+1C,gBAEvBv3E,kBACF,OAAOnD,KAAKwwF,OAAO7rD,MAAMk2C,iBAG3Bv1E,iBACEtF,KAAKonE,SAASh9C,QAGhB7kB,eACEvF,KAAKonE,SAAS8Y,OAMVtyC,UAAUh5B,EAAoCtQ,EAAqB3E,G,+CACjEK,KAAKonE,SAASK,MAAM,UAAW,qBAAqB,IAAY,EAAD,gCAEnE,MAAMvoE,QAAgB,EAAAmG,eAAerF,KAAK+xC,aAI1C,GAHA/xC,KAAKw4E,eAAiBt5E,EAAQG,qBAAqBW,KAAKizC,SAExDjzC,KAAKwwF,OAAS,IAAI,EAAA/D,MACC,iBAAR73E,EAAkB,CAC3B,MAAMgsE,EAAchsE,EAAI+sE,SAAS,QACjC,GAAqB,oBAAVv/D,MAAuB,CAEhC,MAAMkJ,QAAY,EAAAijB,UAAU,EAAAhmC,SAAV,CAAoBqM,GACtC5U,KAAKiyC,WAAW3mB,EAAKs1D,OAChB,CAEL,MAAM92E,QAAiBsY,MAAMxN,GACvB0W,QAAYxhB,EAAS0Y,cAC3BxiB,KAAKiyC,WAAW,IAAIlxC,WAAWuqB,GAAMs1D,SAElC,GAAKz8E,YAAYssF,OAAO77E,GAM7B5U,KAAKiyC,WAAWr9B,OANmB,CAEnC,MAAMo8B,EAAM,IAAIjwC,WAAW6T,EAAKtQ,GAAc,EAAG3E,GAAUiV,EAAIrQ,YAC/DvE,KAAKiyC,WAAWjB,YAQdiB,WAAWy+C,EAA4B9P,GAC7C,GAAI5gF,KAAKowF,aACP,MAAM,IAAI3wF,MAAM,uBAGlBO,KAAKonE,SAASK,MAAM,UAAW,sBAAsB,KAEnD,MAAM4S,EACFr6E,KAAKw4E,eAAe+B,eAAiBv6E,KAAKw4E,oBAAsCh5E,EACpFQ,KAAKwwF,OAAO1hF,KAAK4hF,EAAgBrW,EAAkBuG,GAG/C5gF,KAAKw4E,eAAezN,oBACtB/qE,KAAKw4E,eAAezN,mBAAmB/qE,KAAKwwF,OAAO7rD,OAGrD3kC,KAAK2wF,cAAc3wF,KAAKwwF,OAAO7rD,OAG/B3kC,KAAK4wF,eAAiB,IAAI,EAAAC,cAAc7wF,KAAKwwF,OAAO7rD,MAAO3kC,KAAKk4E,KAAMl4E,KAAKonE,aAG7EpnE,KAAKowF,cAAe,EAGhBzsF,IAAI09C,G,yCACR,IAAKrhD,KAAKowF,aACR,MAAM,IAAI3wF,MAAM,+BAGlB,OAAOO,KAAKonE,SAASK,MAAM,UAAW,eAAe,IAAY,EAAD,gCAC9D,MAAMwR,EAAej5E,KAAK8wF,2BAA2BzvC,GAE/C0vC,QAAsB/wF,KAAK4wF,eAAerY,QAAQv4E,KAAKw4E,eAAgBS,GAE7E,OAAOj5E,KAAKgxF,aAAaD,WAIrBD,2BAA2BzvC,GACjC,MAAM4vC,EAAkBjxF,KAAKwwF,OAAO7rD,MAAM+1C,gBAI1C,GAAI34E,MAAMC,QAAQq/C,IAChB,GAAIA,EAAO1hD,SAAWsxF,EAAgBtxF,OACpC,MAAM,IAAIF,MAAM,0CAA0CwxF,EAAgBtxF,kBAAkB0hD,EAAO1hD,cAKlG,CACH,GAAI0hD,EAAOh/C,OAAS4uF,EAAgBtxF,OAClC,MAAM,IAAIF,MAAM,sCAAsCwxF,EAAgBtxF,kBAAkB0hD,EAAOh/C,QAGjG,MAAM6uF,EAAe,IAAInvF,MAAcs/C,EAAOh/C,MAC9C,IAAI8uF,EAAoB,EACxB,IAAK,IAAIzxF,EAAI,EAAGA,EAAIuxF,EAAgBtxF,SAAUD,EAAG,CAC/C,MAAM0iD,EAASf,EAAOn/C,IAAI+uF,EAAgBvxF,IAC1C,IAAK0iD,EACH,MAAM,IAAI3iD,MAAM,8BAA8BR,SAEhDiyF,EAAaC,KAAuB/uC,EAGtCf,EAAS6vC,EAKX,GAAKlxF,KAAKizC,QAAQq9C,iBAA2D,IAAxCtwF,KAAKizC,QAAQq9C,gBAAgB3wF,QAAiBK,KAAKizC,QAAQs9C,gBACrD,IAAvCvwF,KAAKizC,QAAQs9C,eAAe5wF,OAqB9BK,KAAKoxF,wBAAwBpxF,KAAKizC,QAAQs9C,eAAgBlvC,GAAQ,OArBtB,CAC5C,MAAMgwC,EAAoBrxF,KAAKwwF,OAAO7rD,MAAM2zC,kBACtCgZ,EAActxF,KAAKwwF,OAAO7rD,MAAMsmC,YAEhCslB,EAAiB,IAAIxuF,MAAyBsvF,EAAkB1xF,QAEtE,IAAK,IAAID,EAAI,EAAGA,EAAI2xF,EAAkB1xF,SAAUD,EAAG,CACjD,MAAM6xF,EAAaD,EAAYD,EAAkB3xF,IACjD6wF,EAAe7wF,GAAK6xF,EAAW3vF,KAAMolC,MAAMllC,KAI3C9B,KAAKizC,QAAQq9C,gBAAiBzwF,KAAK0xF,EAAW3vF,KAAMklC,YACpD9mC,KAAKizC,QAAQs9C,eAAgB1wF,KAAKwhD,EAAO3hD,GAAGoC,MAG9C9B,KAAKoxF,wBAAwBb,EAAgBlvC,GAAQ,GAWvD,OAFArhD,KAAKwxF,yBAAyBxxF,KAAKizC,QAAQq9C,gBAAkBjvC,GAEtDA,EAGDmwC,yBAAyBlB,EAAoCmB,GACnE,IAAK,IAAI/xF,EAAI,EAAGA,EAAI+xF,EAAY9xF,OAAQD,IAAK,CAC3C,MAAMgyF,EAAepB,EAAgB5wF,GAC/BiyF,EAAaF,EAAY/xF,GAAGkC,KAClC,GAAI8vF,IAAiBC,EACnB,MAAM,IAAIlyF,MAAM,gBAAgBC,mCAAmCgyF,cAAyBC,MAK1FP,wBACJb,EAA0CkB,EAAuBG,GACnE,IAAK,IAAIlyF,EAAI,EAAGA,EAAI+xF,EAAY9xF,OAAQD,IAAK,CAC3C,MAAMmyF,EAAetB,EAAe7wF,GAC9BoyF,EAAaL,EAAY/xF,GAAGoC,KAClC,IAAK9B,KAAK+xF,kBAAkBF,EAAcC,EAAYF,GACpD,MAAM,IAAInyF,MAAM,gBAAgBC,qCAAqCmyF,EAAazsF,KAAK,mBACnF0sF,EAAW1sF,KAAK,UAKlB2sF,kBAAkBF,EAAiCC,EAA+BF,GAExF,GAAIC,EAAalyF,SAAWmyF,EAAWnyF,OACrC,OAAO,EAGT,IAAK,IAAID,EAAI,EAAGA,EAAImyF,EAAalyF,SAAUD,EACzC,GAAImyF,EAAanyF,KAAOoyF,EAAWpyF,MAAQkyF,GAAwC,IAApBC,EAAanyF,IAE1E,OAAO,EAIX,OAAO,EAGDsxF,aAAaD,GACnB,MAAMiB,EAAmBhyF,KAAKwwF,OAAO7rD,MAAMk2C,iBAC3C,GAAIkW,EAAcpxF,SAAWqyF,EAAiBryF,OAC5C,MAAM,IAAIF,MAAM,uEAGlB,MAAMukC,EAAS,IAAInjC,IACnB,IAAK,IAAInB,EAAI,EAAGA,EAAIsyF,EAAiBryF,SAAUD,EAC7CskC,EAAOziC,IAAIywF,EAAiBtyF,GAAIqxF,EAAcrxF,IAGhD,OAAOskC,EAGD2sD,cAAchsD,GACpB,MAAM8W,EAAQ9W,EAAMszC,WACpBj4E,KAAKk4E,KAAO,IAAIn2E,MAAM05C,EAAM97C,QAE5B,IAAK,IAAID,EAAI,EAAGA,EAAI+7C,EAAM97C,OAAQD,IAChCM,KAAKk4E,KAAKx4E,GAAKM,KAAKw4E,eAAe91D,QAAQ+4B,EAAM/7C,GAAIM,KAAKwwF,OAAOrlB,OAAQxmC,M,mfC/O/E,gBACA,aACA,UAIA,IAAOoK,EAFP,QAEgBC,YAAYC,aAAaC,IAEzC,gBAiCA,MAAa1tC,EA+GXzB,YAIoB+B,EAIAF,EAA+BqwF,EACvCC,EAA+C/4D,EAIvCspB,EAAe,EAAA9qB,KAAK1H,UATpB,KAAAnuB,OAIA,KAAAF,OAA+B,KAAAqwF,eACvC,KAAAC,oBAA+C,KAAA/4D,QAIvC,KAAAspB,SAClBziD,KAAKqC,KAAO,EAAA61C,UAAUi6C,wBAAwBrwF,GAC9C,MAAMO,EAAOrC,KAAKqC,KACZ+vF,OAA0B5yF,IAAjByyF,QAAoDzyF,IAAtB0yF,QAA6C1yF,IAAV25B,EAEhF,QAAc35B,IAAV25B,GACEA,EAAMx5B,SAAW0C,EACnB,MAAM,IAAII,WAAW,yCAIzB,GAAa,WAATb,EAAmB,CACrB,UAAcpC,IAAV25B,GAAyBp3B,MAAMC,QAAQm3B,IAAWA,EAAMgnC,OAAMzgE,GAAkB,iBAANA,KAC5E,MAAM,IAAIJ,UAAU,kCAGlB8yF,IACFpyF,KAAKm5B,MAAQ,IAAIp3B,MAAcM,QAE5B,CACL,QAAc7C,IAAV25B,EAAqB,CACvB,MAAMp5B,EAAcsyF,EAAoBzwF,GACxC,KAAMu3B,aAAiBp5B,GACrB,MAAM,IAAIT,UAAU,wBAAwBS,EAAYd,QAI5D,GAAImzF,EAAO,CACT,MAAM9mE,EAAM,IAAInnB,YAAY9B,EA2JpC,SAAgBT,GACd,OAAQA,GACN,IAAK,OACL,IAAK,OACL,IAAK,QACH,OAAO,EACT,IAAK,QACL,IAAK,SACH,OAAO,EACT,IAAK,QACL,IAAK,SACL,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,QACE,MAAM,IAAInC,MAAM,qCAAqCmC,MA3KhB0wF,CAAO1wF,IAC1C5B,KAAKm5B,MAoMb,SAAoB5H,EAAyB3vB,GAC3C,OAAO,IAAKywF,EAAoBzwF,GAAzB,CAAgC2vB,GArMpBghE,CAAWjnE,EAAK1pB,KArJ/BC,WACF,QAAmBrC,IAAfQ,KAAKm5B,MAAqB,CAC5B,MAAMt3B,EAAO7B,KAAKiyF,aAAcjyF,KAAKyiD,QACrC,GAAI5gD,EAAKlC,SAAWK,KAAKqC,KACvB,MAAM,IAAI5C,MAAM,8FAElBO,KAAKm5B,MAAQt3B,EAEf,OAAO7B,KAAKm5B,MAMVmM,iBACF,GAAkB,WAAdtlC,KAAK4B,KACP,MAAM,IAAItC,UAAU,2BAGtB,OAAOU,KAAK6B,KAOVy5D,kBACF,OAAQt7D,KAAK4B,MACX,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,OACH,OAAO5B,KAAK6B,KAEd,QACE,MAAM,IAAIvC,UAAU,+EAOtB8lC,gBACF,OAAQplC,KAAK4B,MACX,IAAK,UACL,IAAK,UACH,OAAO5B,KAAK6B,KAEd,QACE,MAAM,IAAIvC,UAAU,8CAQtB0jD,iBACF,GAAkB,WAAdhjD,KAAK4B,KACP,OAAO5B,KAAK6B,KAEd,MAAM,IAAIvC,UAAU,sCAMtB4C,IAAIwnF,GACF,OAAO1pF,KAAK6B,KAAK,EAAAq2C,UAAUuH,gBAAgBiqC,EAAS1pF,KAAKk2C,UAM3D30C,IAAImoF,EAA4BrpF,GAC9BL,KAAK6B,KAAK,EAAAq2C,UAAUuH,gBAAgBiqC,EAAS1pF,KAAKk2C,UAAY71C,EAM1Do5E,U,yCAIJ,YAHmBj6E,IAAfQ,KAAKm5B,QACPn5B,KAAKm5B,YAAcn5B,KAAKkyF,kBAAmBlyF,KAAKyiD,SAE3CziD,KAAKm5B,SAYV+c,cAIF,OAHKl2C,KAAKwyF,WACRxyF,KAAKwyF,SAAW,EAAAt6C,UAAUkM,eAAepkD,KAAK8B,OAEzC9B,KAAKwyF,SAsDdxuF,iBAAiByuF,GACf,IAAKA,EACH,MAAM,IAAIhzF,MAAM,+CAElB,MAAMmC,EAAO,EAAAmsD,UAAUC,wBAAwBykC,EAAY9sD,UACrD7jC,EAAO,EAAAisD,UAAUwtB,oBAAoBkX,EAAY3wF,MAEjDzB,EAAQ,IAAImB,EAAOM,EAAMF,GAE/B,GAAa,WAATA,EAGF6wF,EAAYntD,WAAYvrB,SAAQ,CAACmgB,EAAKx6B,KACpCW,EAAMwB,KAAKnC,GAAK,EAAA4xC,iBAAiBpX,WAG9B,GACHu4D,EAAY5sD,SAAqD,iBAAnC4sD,EAAY5sD,QAAQthC,YAClDkuF,EAAY5sD,QAAQthC,WAAa,EAAG,CAItC,MAAMmuF,EAAWryF,EAAMwB,KACjB8wF,EACF,IAAIC,SAASH,EAAY5sD,QAAQxhC,OAAQouF,EAAY5sD,QAAQvhC,WAAYmuF,EAAY5sD,QAAQthC,YAC3FsuF,EAAcC,EAAYL,EAAY9sD,UACtChmC,EAAS8yF,EAAY5sD,QAAQthC,WAAasuF,EAEhD,GAAIJ,EAAY5sD,QAAQthC,WAAasuF,GAAgB,EACnD,MAAM,IAAIpzF,MAAM,yBAElB,GAAIizF,EAAS/yF,SAAWA,EACtB,MAAM,IAAIF,MAAM,0BAGlB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC/B,MAAMuG,EAAI8sF,EAAUJ,EAAYF,EAAY9sD,SAAWjmC,EAAImzF,GAC3DH,EAAShzF,GAAKuG,OAEX,CAEL,IAAIo4D,EACJ,OAAQo0B,EAAY9sD,UAClB,KAAK,EAAAnF,KAAK0B,YAAYiE,SAAS+J,MAC7BmuB,EAAQo0B,EAAYrtD,UACpB,MACF,KAAK,EAAA5E,KAAK0B,YAAYiE,SAAS6sD,MAC/B,KAAK,EAAAxyD,KAAK0B,YAAYiE,SAAS8sD,MAC/B,KAAK,EAAAzyD,KAAK0B,YAAYiE,SAAS+sD,OAC/B,KAAK,EAAA1yD,KAAK0B,YAAYiE,SAASgtD,KAC/B,KAAK,EAAA3yD,KAAK0B,YAAYiE,SAASitD,MAC/B,KAAK,EAAA5yD,KAAK0B,YAAYiE,SAASktD,KAC7Bh1B,EAAQo0B,EAAYptD,UACpB,MACF,KAAK,EAAA7E,KAAK0B,YAAYiE,SAASmtD,MAC7Bj1B,EAAQo0B,EAAYltD,UACpB,MACF,KAAK,EAAA/E,KAAK0B,YAAYiE,SAASotD,OAC7Bl1B,EAAQo0B,EAAYhtD,WACpB,MACF,KAAK,EAAAjF,KAAK0B,YAAYiE,SAASqtD,OAC/B,KAAK,EAAAhzD,KAAK0B,YAAYiE,SAASstD,OAC7Bp1B,EAAQo0B,EAAY/sD,WACpB,MACF,QAEE,MAAM,IAAIjmC,MAAM,oBAGpB,GAAI4+D,QACF,MAAM,IAAI5+D,MAAM,oDAGlB,MAAMoC,EAAOxB,EAAMwB,KACnB,GAAIA,EAAKlC,SAAW0+D,EAAM1+D,OACxB,MAAM,IAAIF,MAAM,yBAGlB,IAAK,IAAIC,EAAI,EAAGA,EAAI2+D,EAAM1+D,OAAQD,IAAK,CACrC,MAAMg0F,EAAUr1B,EAAM3+D,GAClB,UAAKk5B,OAAO86D,GACd7xF,EAAKnC,GAAKqxC,EAAa2iD,EAASjB,EAAY9sD,UAE5C9jC,EAAKnC,GAAKg0F,GAKhB,OAAOrzF,EAUT2D,gBAAgBnC,EAA2CC,EAAyBF,GAClF,OAAO,IAAIJ,EAAOM,EAAMF,OAAMpC,OAAWA,EAAWqC,GAGtDmC,qBAAqB2vF,GACnB,IAAKA,EACH,MAAM,IAAIl0F,MAAM,+CAElB,MAAMqC,EAAO,EAAAisD,UAAUsuB,wBAAwBsX,GACzC/xF,EAAO,EAAAmsD,UAAUC,wBAAwB2lC,EAAUhuD,YAEnDtlC,EAAQ,IAAImB,EAAOM,EAAMF,GAE/B,GAAa,WAATA,EAGF,IAAK,IAAIlC,EAAI,EAAGA,EAAIi0F,EAAU5K,mBAAoBrpF,IAChDW,EAAMwB,KAAKnC,GAAKi0F,EAAUruD,WAAW5lC,QAGlC,GACHi0F,EAAU7K,gBAAuD,iBAA9B6K,EAAU9K,iBAAgC8K,EAAU9K,gBAAkB,EAAG,CAI9G,MAAM6J,EAAWryF,EAAMwB,KACjB8wF,EAAa,IAAIC,SACnBe,EAAU7K,eAAgBzkF,OAAQsvF,EAAU7K,eAAgBxkF,WAAYqvF,EAAU9K,iBAChFgK,EAAcC,EAAYa,EAAUhuD,YACpChmC,EAASg0F,EAAU9K,gBAAkBgK,EAE3C,GAAIc,EAAU9K,gBAAkBgK,GAAgB,EAC9C,MAAM,IAAIpzF,MAAM,yBAElB,GAAIizF,EAAS/yF,SAAWA,EACtB,MAAM,IAAIF,MAAM,0BAGlB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC/B,MAAMuG,EAAI8sF,EAAUJ,EAAYgB,EAAUhuD,WAAYjmC,EAAImzF,GAC1DH,EAAShzF,GAAKuG,GAGlB,OAAO5F,GAwBX,SAASyyF,EAAYlxF,GACnB,OAAQA,GACN,KAAK,EAAA4+B,KAAK0B,YAAYiE,SAASitD,MAC/B,KAAK,EAAA5yD,KAAK0B,YAAYiE,SAASgtD,KAC/B,KAAK,EAAA3yD,KAAK0B,YAAYiE,SAASktD,KAC7B,OAAO,EACT,KAAK,EAAA7yD,KAAK0B,YAAYiE,SAAS+sD,OAC/B,KAAK,EAAA1yD,KAAK0B,YAAYiE,SAAS8sD,MAC7B,OAAO,EACT,KAAK,EAAAzyD,KAAK0B,YAAYiE,SAAS+J,MAC/B,KAAK,EAAA1P,KAAK0B,YAAYiE,SAAS6sD,MAC/B,KAAK,EAAAxyD,KAAK0B,YAAYiE,SAASqtD,OAC7B,OAAO,EACT,KAAK,EAAAhzD,KAAK0B,YAAYiE,SAASmtD,MAC/B,KAAK,EAAA9yD,KAAK0B,YAAYiE,SAASotD,OAC/B,KAAK,EAAA/yD,KAAK0B,YAAYiE,SAASstD,OAC7B,OAAO,EACT,QACE,MAAM,IAAIh0F,MAAM,qCAAqC,EAAA+gC,KAAK0B,YAAYiE,SAASvkC,OAQrF,SAASywF,EAAoBzwF,GAC3B,OAAQA,GACN,IAAK,OACL,IAAK,QACH,OAAOb,WACT,IAAK,OACH,OAAOC,UACT,IAAK,QACH,OAAOE,WACT,IAAK,SACH,OAAOD,YACT,IAAK,QACH,OAAOE,WACT,IAAK,SACH,OAAOE,YACT,IAAK,UACH,OAAOP,aACT,IAAK,UACH,OAAOM,aACT,QAEE,MAAM,IAAI3B,MAAM,sBAKtB,SAASsxC,EAAarxC,EAASkC,GAE7B,GAAIA,IAAS,EAAA4+B,KAAK0B,YAAYiE,SAASmtD,OAAS1xF,IAASmtC,EAAOozC,eAAemR,OAC7E,GAAI5zF,EAAEm9B,mBAAmB,aAAen9B,EAAE88B,UAAU,YAClD,MAAM,IAAIl9B,UAAU,8BAEjB,IACHsC,IAAS,EAAA4+B,KAAK0B,YAAYiE,SAASqtD,QAAU5xF,IAASmtC,EAAOozC,eAAeqR,QAC5E5xF,IAAS,EAAA4+B,KAAK0B,YAAYiE,SAASstD,QAAU7xF,IAASmtC,EAAOozC,eAAesR,OAK9E,MAAM,IAAIn0F,UAAU,oBAAoB,EAAAkhC,KAAK0B,YAAYiE,SAASvkC,MAJlE,GAAIlC,EAAEm9B,mBAAmB,aAAen9B,EAAE88B,SAAS,GACjD,MAAM,IAAIl9B,UAAU,2BAMxB,OAAOI,EAAEu7B,WAIX,SAAS83D,EAAUa,EAAgBhyF,EAAuD0C,GACxF,OAAQ1C,GACN,KAAK,EAAA4+B,KAAK0B,YAAYiE,SAASktD,KAC/B,KAAK,EAAA7yD,KAAK0B,YAAYiE,SAASitD,MAC7B,OAAOQ,EAAKC,SAASvvF,GACvB,KAAK,EAAAk8B,KAAK0B,YAAYiE,SAASgtD,KAC7B,OAAOS,EAAKE,QAAQxvF,GACtB,KAAK,EAAAk8B,KAAK0B,YAAYiE,SAAS+sD,OAC7B,OAAOU,EAAKG,UAAUzvF,GAAY,GACpC,KAAK,EAAAk8B,KAAK0B,YAAYiE,SAAS8sD,MAC7B,OAAOW,EAAKI,SAAS1vF,GAAY,GACnC,KAAK,EAAAk8B,KAAK0B,YAAYiE,SAAS+J,MAC7B,OAAO0jD,EAAKK,WAAW3vF,GAAY,GACrC,KAAK,EAAAk8B,KAAK0B,YAAYiE,SAAS6sD,MAC7B,OAAOY,EAAKM,SAAS5vF,GAAY,GACnC,KAAK,EAAAk8B,KAAK0B,YAAYiE,SAASqtD,OAC7B,OAAOI,EAAKO,UAAU7vF,GAAY,GACpC,KAAK,EAAAk8B,KAAK0B,YAAYiE,SAASmtD,MAC7B,OAAOviD,EACH,UAAK3X,SAASw6D,EAAKO,UAAU7vF,GAAY,GAAOsvF,EAAKO,UAAU7vF,EAAa,GAAG,IAAO,GAAQ1C,GACpG,KAAK,EAAA4+B,KAAK0B,YAAYiE,SAASotD,OAC7B,OAAOK,EAAKQ,WAAW9vF,GAAY,GACrC,KAAK,EAAAk8B,KAAK0B,YAAYiE,SAASstD,OAC7B,OAAO1iD,EACH,UAAK3X,SAASw6D,EAAKO,UAAU7vF,GAAY,GAAOsvF,EAAKO,UAAU7vF,EAAa,GAAG,IAAO,GAAO1C,GACnG,QACE,MAAM,IAAInC,MAAM,sCAAsC,EAAA+gC,KAAK0B,YAAYiE,SAASvkC,OAzatF,Y,+YCzCA,gBACA,aACA,UAIA,UAMA,4BAAiCy/C,KAAqBgzC,GACpD,IAAKhzC,GAAUA,EAAO1hD,SAAW00F,EAAmB10F,OAClD,OAAO,EAET,IAAK,IAAID,EAAI,EAAGA,EAAI2hD,EAAO1hD,OAAQD,IACjC,IAAK2hD,EAAO3hD,GAAGoC,MAAQu/C,EAAO3hD,GAAGoC,KAAKnC,SAAW00F,EAAmB30F,GAClE,OAAO,EAGX,OAAO,GAIT,kBAAuB40F,EAAeC,GACpC,IAAKD,EACH,MAAM,IAAI70F,MAAqB,iBAAR80F,EAAmBA,EAAMA,MAIpD,kBAOEvwF,mBACIwwF,EAEAC,GAEF,GAAID,EAAG70F,SAAW80F,EAAG90F,OACnB,OAAO,EAET,IAAK,IAAID,EAAI,EAAGA,EAAI80F,EAAG70F,OAAQD,IAC7B,GAAI80F,EAAG90F,KAAO+0F,EAAG/0F,GACf,OAAO,EAGX,OAAO,IAIX,MAAag1F,EAOX1wF,6BAA6B2wF,EAA0BC,GAYrD,MAAO,CAPqB,IAAjBD,EAAMh1F,OAAgB,CAAC,EAAGg1F,EAAM,IAAMA,EAKrB,IAAjBC,EAAMj1F,OAAgB,CAACi1F,EAAM,GAAI,GAAKA,GAYnD5wF,8BAA8BspD,EAAuBI,EAAeC,GAEpD,IAAVD,GAEFJ,EAAY1tD,OAAO0tD,EAAY3tD,OAAS,EAAG,GAG/B,IAAVguD,GACFL,EAAYx8C,MAUhB9M,uBAAuBqC,EAAqBc,GAC1C,OAAQd,EAAE,KAAOc,EAAE,QAAM3H,EAAY,CAAC6G,EAAE,GAAIc,EAAE,KAhDlD,eAoDA,MAAaswC,EAQXzzC,iBAAiB6wF,EAA0BC,EAA0BC,GAAW,GAC9E,MAAM76B,EAAQ26B,EAAMl1F,OACdw6D,EAAQ26B,EAAMn1F,OACpB,GAAc,IAAVu6D,EACF,OAAO46B,EAET,GAAc,IAAV36B,EACF,OAAO06B,EAET,MAAMG,EAAQt+E,KAAKoE,IAAI+5E,EAAMl1F,OAAQm1F,EAAMn1F,QACrCs1F,EAAQ,IAAIlzF,MAAcizF,GAGhC,GAAID,EAAU,CACZ,GAAI76B,EAAQ,GAAKC,EAAQ,EACvB,OAEF,MAAM+6B,EACFR,EAAWS,gBAAgB,CAACN,EAAM36B,EAAQ,GAAI26B,EAAM36B,EAAQ,IAAK,CAAC46B,EAAM36B,EAAQ,GAAI26B,EAAM36B,EAAQ,KACtG,QAAqB36D,IAAjB01F,EACF,QAEDD,EAAMD,EAAQ,GAAIC,EAAMD,EAAQ,IAAME,EAGzC,IAAK,IAAIx1F,EAAIq1F,EAAW,EAAI,EAAGr1F,GAAKs1F,EAAOt1F,IAAK,CAC9C,MAAM01F,EAAOl7B,EAAQx6D,EAAI,EAAI,EAAIm1F,EAAM36B,EAAQx6D,GACzC21F,EAAOl7B,EAAQz6D,EAAI,EAAI,EAAIo1F,EAAM36B,EAAQz6D,GAE/C,GAAI01F,IAASC,GAAQD,EAAO,GAAKC,EAAO,EACtC,OAEFJ,EAAMD,EAAQt1F,GAAKgX,KAAKoE,IAAIs6E,EAAMC,GAGpC,OAAOJ,EASTjxF,aAAasxF,EAAuCC,GAIlD,MAAMC,EAAkB,IAAIzzF,MAAMwzF,EAAc51F,QAEhD,OADA83C,EAAcg+C,UAAUH,EAAoBC,EAAeC,GACpDA,EAUTxxF,iBAAiBsxF,EAAuCC,EAAkCC,GAIxF,MAAM51C,EAAY01C,EAAmB31F,OAAS41F,EAAc51F,OAC5D,IAAK,IAAID,EAAI,EAAGA,EAAI61F,EAAc51F,OAAQD,IACxC81F,EAAgB91F,GAAK41F,EAAmB11C,EAAYlgD,GAAK61F,EAAc71F,GAY3EsE,YACIqC,EAAWc,EAAWikE,EAA+DsqB,EACrFC,GACF,MAAMroC,EAAc7V,EAAcgW,UAAUpnD,EAAEvE,KAAMqF,EAAErF,MAEtD,GAAIwrD,EAAa,CACf,GAAIooC,IAAYx9C,EAAUmV,SAASC,EAAajnD,EAAEvE,MAEhD,OAGF,MAAMO,EAAO61C,EAAU71C,KAAKirD,GACtBzmD,EAAI6uF,EAAUrvF,EAAI,IAAI,EAAA7E,OAAO8rD,EAAaqoC,GAActvF,EAAEzE,MAGhE,GAA2B,IAAvB0rD,EAAY3tD,OACdkH,EAAEtF,IAAI,GAAI6pE,EAAG/kE,EAAEnE,IAAI,IAAKiF,EAAEjF,IAAI,UAI3B,CACH,MAAM0zF,EAAgB,IAAI7zF,MAAcurD,EAAY3tD,QAC9Ck2F,EAAmB,IAAI9zF,MAAMsE,EAAEvE,KAAKnC,QACpCm2F,EAAmB,IAAI/zF,MAAMoF,EAAErF,KAAKnC,QAC1C,IAYIo2F,EAZAC,EAAsB,EACtBC,EAAsB,EACtBC,GAAY,EACZC,GAAY,EACM,IAAlB9vF,EAAEvE,KAAKnC,SACTq2F,EAAO3vF,EAAEnE,IAAI,IACbg0F,GAAY,GAEQ,IAAlB/uF,EAAErF,KAAKnC,SACTs2F,EAAO9uF,EAAEjF,IAAI,IACbi0F,GAAY,GAGd,IAAK,IAAIz2F,EAAI,EAAGA,EAAI2C,EAAM3C,IAAK,CAE7Bq2F,EAAOr2F,EACP,IAAK,IAAI2L,EAAIiiD,EAAY3tD,OAAS,EAAG0L,GAAK,EAAGA,IAC3CuqF,EAAcvqF,GAAK0qF,EAAOzoC,EAAYjiD,GACtC0qF,EAAOr/E,KAAK2V,MAAM0pE,EAAOzoC,EAAYjiD,IAGlC6qF,IAEHz+C,EAAcg+C,UAAUG,EAAevvF,EAAEvE,KAAM+zF,GAC/CG,EAAO3vF,EAAEnE,IAAI2zF,IAEVM,IACH1+C,EAAcg+C,UAAUG,EAAezuF,EAAErF,KAAMg0F,GAC/CG,EAAO9uF,EAAEjF,IAAI4zF,IAGfjvF,EAAEtF,IAAIq0F,EAAexqB,EAAG4qB,EAAMC,KAIlC,OAAOpvF,GAWX7C,wBAAwBgjC,EAA0BovD,GAEhD,MAAM77B,EAAYvzB,EAAMrnC,OAClB02F,EAAYD,EAAWz2F,OAC7B,GAAI46D,EAAY87B,EACd,OAAO,EAET,IAAK,IAAI32F,EAAI,EAAGA,GAAK66D,EAAW76D,IAC9B,GAA6B,IAAzBsnC,EAAMuzB,EAAY76D,IAAYsnC,EAAMuzB,EAAY76D,KAAO02F,EAAWC,EAAY32F,GAChF,OAAO,EAGX,OAAO,EAUTsE,wBAAwBqqD,EAA+Bf,GACrD,MAAMhW,EAAS+W,EAAW1uD,OACpBmC,EAAiB,GACvB,IAAK,IAAIpC,EAAI,EAAGA,EAAI43C,EAAQ53C,IAAK,CAC/B,MAAM4C,EAAMg1C,EAAS,EAAI53C,EACnB2G,EAAIgoD,EAAW/rD,IAAQ,GACnBgrD,EAAYA,EAAY3tD,OAAS,EAAID,IAAM,GAC7C,GAAW,IAAN2G,GACXvE,EAAK8L,QAAQtL,GAGjB,OAAOR,GA7LX,kBAmMA,2BACIgR,EAAoC2iC,EAAoC6gD,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAe9gD,EAAO91C,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI62F,EAAc,GAAKA,GAAexjF,EAAOnT,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI82F,EAAcC,EAAY/gD,EAAO91C,OACnC,MAAM,IAAIF,MAAM,kDAElB,GAAI62F,EAAcE,EAAY1jF,EAAOnT,OACnC,MAAM,IAAIF,MAAM,4CAGlB,IAAK,IAAI2X,EAAS,EAAGA,EAASo/E,EAAWp/E,IACvCtE,EAAOwjF,EAAcl/E,GAAUq+B,EAAO8gD,EAAcn/E,IAIxD,iBAIEpT,4BACIyyF,EAA8BC,EAAoBC,EAA+BC,EACjFC,GACF,GAAyB,IAArBJ,EAAU92F,QAAsC,IAAtBg3F,EAAWh3F,OACvC,MAAM,IAAIF,MAAM,8BAGlB,IAAIgL,EACA4C,EACArB,EAEA0qF,GACFjsF,EAAIgsF,EAAU,GACdppF,EAAIopF,EAAU,KAEdhsF,EAAIgsF,EAAU,GACdppF,EAAIopF,EAAU,IAGhB,IAAIK,GAAQ,EAUZ,GARIF,GACF5qF,EAAI2qF,EAAW,GACfG,EAAO,IAEP9qF,EAAI2qF,EAAW,GACfG,EAAO,GAGLH,EAAWG,KAAUzpF,EACvB,MAAM,IAAI5N,MAAM,sBAGlB,GAAIgL,GAAK,GAAKuB,GAAK,GAAKqB,GAAK,EAC3B,MAAM,IAAI5N,MAAM,2BAGlB,GAAIo3F,IAAcp/C,EAAcs/C,iBAAiBF,EAAW,CAACpsF,EAAGuB,IAC9D,MAAM,IAAIvM,MAAM,0CAGlB,MAAO,CAACgL,EAAGuB,EAAGqB,KAIlB,MAAa0gD,EACX/pD,+BAA+BgzF,GAE7B,OAAQA,GACN,KAAK,EAAAx2D,KAAK0B,YAAYiE,SAASgtD,KAC7B,MAAO,OACT,KAAK,EAAA3yD,KAAK0B,YAAYiE,SAASitD,MAC7B,MAAO,QACT,KAAK,EAAA5yD,KAAK0B,YAAYiE,SAASktD,KAC7B,MAAO,OACT,KAAK,EAAA7yD,KAAK0B,YAAYiE,SAAS8sD,MAC7B,MAAO,QACT,KAAK,EAAAzyD,KAAK0B,YAAYiE,SAAS+sD,OAC7B,MAAO,SACT,KAAK,EAAA1yD,KAAK0B,YAAYiE,SAAS6sD,MAC7B,MAAO,QACT,KAAK,EAAAxyD,KAAK0B,YAAYiE,SAASqtD,OAC7B,MAAO,SACT,KAAK,EAAAhzD,KAAK0B,YAAYiE,SAAS+J,MAC7B,MAAO,UACT,KAAK,EAAA1P,KAAK0B,YAAYiE,SAASotD,OAC7B,MAAO,UACT,KAAK,EAAA/yD,KAAK0B,YAAYiE,SAASiK,OAC7B,MAAO,SAIT,KAAK,EAAA5P,KAAK0B,YAAYiE,SAASmtD,MAC7B,MAAO,QACT,KAAK,EAAA9yD,KAAK0B,YAAYiE,SAASstD,OAC7B,MAAO,SAET,QACE,MAAM,IAAIh0F,MAAM,0BAA0B,EAAA+gC,KAAK0B,YAAYiE,SAAS6wD,OAI1EhzF,kCAAkCpC,GAChC,OAAQA,GACN,IAAK,OACH,OAAO,EAAA4+B,KAAK0B,YAAYiE,SAASgtD,KACnC,IAAK,QACH,OAAO,EAAA3yD,KAAK0B,YAAYiE,SAASitD,MACnC,IAAK,OACH,OAAO,EAAA5yD,KAAK0B,YAAYiE,SAASktD,KACnC,IAAK,QACH,OAAO,EAAA7yD,KAAK0B,YAAYiE,SAAS8sD,MACnC,IAAK,SACH,OAAO,EAAAzyD,KAAK0B,YAAYiE,SAAS+sD,OACnC,IAAK,QACH,OAAO,EAAA1yD,KAAK0B,YAAYiE,SAAS6sD,MACnC,IAAK,SACH,OAAO,EAAAxyD,KAAK0B,YAAYiE,SAASqtD,OACnC,IAAK,UACH,OAAO,EAAAhzD,KAAK0B,YAAYiE,SAAS+J,MACnC,IAAK,UACH,OAAO,EAAA1P,KAAK0B,YAAYiE,SAASotD,OACnC,IAAK,SACH,OAAO,EAAA/yD,KAAK0B,YAAYiE,SAASiK,OACnC,IAAK,QACH,OAAO,EAAA5P,KAAK0B,YAAYiE,SAASmtD,MACnC,IAAK,SACH,OAAO,EAAA9yD,KAAK0B,YAAYiE,SAASstD,OAEnC,QACE,MAAM,IAAIh0F,MAAM,0BAA0BmC,MAIhDoC,2BAA2BlC,GAEzB,OAAOA,EAAK4C,KAAIuC,GAAK,UAAK2xB,OAAO3xB,GAAKA,EAAEg0B,WAAah0B,IAGvDjD,gCAAgC+3E,GAC9B,MAAO,CACLj1C,WAAYinB,EAAUC,wBAAwB+tB,EAAUh1C,UACxDC,MAAO,CAACllC,KAAMisD,EAAUwtB,oBAAoBQ,EAAU/0C,MAAO1kC,IAAKoC,KAAIuC,GAAKA,EAAEu/B,cAIjFxiC,+BAA+Bo+C,GAC7B,MAAMtgD,EAAO,GACb,IAAK,IAAIpC,EAAI,EAAGA,EAAI0iD,EAAOwmC,aAAclpF,IACvCoC,EAAKjC,KAAKixC,EAASC,aAAaqR,EAAOtgD,KAAKpC,KAE9C,OAAOoC,EAGTkC,qCAAqC6D,GACnC,MAAMyX,EAAa,GACnB,IAAK,IAAI5f,EAAI,EAAGA,EAAImI,EAAK40E,mBAAoB/8E,IAC3C4f,EAAWzf,KAAKgI,EAAKyX,WAAW5f,IAElC,OAAO4f,GA9FX,cAkGA,MAAawxB,EAIX9sC,oBAAoBiC,EAAiC0yB,GACnD,OAAI,UAAKC,OAAO3yB,GACPA,EAAEg1B,WACAh1B,aAAa,EAAA+oB,YAAYc,KAC3B,UAAK2K,UAAU,CAAC1K,IAAK9pB,EAAE8pB,IAAKC,KAAM/pB,EAAE+pB,KAAM2I,SAAUA,aAAoBsC,WAE1Eh1B,EAETjC,cAAciC,GACZ,OAAO,UAAK2yB,OAAO3yB,IAAMA,aAAa,EAAA+oB,YAAYc,MAbtD,aAiBA,MAAaooB,EACXl0C,YAAYlC,GACV,OAAOo2C,EAAU++C,0BAA0Bn1F,EAAM,EAAGA,EAAKnC,QAI3DqE,yBAAyBlC,EAAyBssD,GAChD,GAAIA,EAAO,GAAKA,EAAOtsD,EAAKnC,OAC1B,MAAM,IAAIF,MAAM,wBAAwB2uD,yCAA4CtsD,EAAKnC,sBAE3F,OAAOu4C,EAAU++C,0BAA0Bn1F,EAAMssD,EAAMtsD,EAAKnC,QAI9DqE,uBAAuBlC,EAAyBssD,GAC9C,GAAIA,EAAO,GAAKA,EAAOtsD,EAAKnC,OAC1B,MAAM,IAAIF,MAAM,wBAAwB2uD,uCAA0CtsD,EAAKnC,sBAEzF,OAAOu4C,EAAU++C,0BAA0Bn1F,EAAM,EAAGssD,GAGtDpqD,iCAAiClC,EAAyBsoB,EAAeC,GACvE,IAAIhoB,EAAO,EACX,IAAK,IAAI3C,EAAI0qB,EAAO1qB,EAAI2qB,EAAK3qB,IAAK,CAGhC,GAAIoC,EAAKpC,IAAM,EACb,MAAM,IAAID,MAEN,sHAEN4C,GAAQP,EAAKpC,GAEf,OAAO2C,EAGT2B,sBAAsBlC,GACpB,MAAMm0C,EAAOn0C,EAAKnC,OAClB,GAAa,IAATs2C,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC,GAEV,MAAMC,EAAU,IAAIn0C,MAAMk0C,GAC1BC,EAAQD,EAAO,GAAK,EACpBC,EAAQD,EAAO,GAAKn0C,EAAKm0C,EAAO,GAChC,IAAK,IAAIv2C,EAAIu2C,EAAO,EAAGv2C,GAAK,IAAKA,EAC/Bw2C,EAAQx2C,GAAKw2C,EAAQx2C,EAAI,GAAKoC,EAAKpC,EAAI,GAEzC,OAAOw2C,EAGTlyC,iBAAiBlC,GAEf,OADaA,EAAK4G,QACNgyC,UAGd12C,uBAAuB0lF,EAA4BxzC,EAA4BkY,QAChE5uD,IAAT4uD,IACFA,EAAOs7B,EAAQ/pF,QAEjB,IAAIyX,EAAS,EACb,IAAK,IAAI1X,EAAI,EAAGA,EAAI0uD,IAAQ1uD,EAC1B0X,GAAU8+B,EAAQx2C,GAAKgqF,EAAQhqF,GAEjC,OAAO0X,EAGTpT,uBAAuBoT,EAAgB8+B,GACrC,MAAMD,EAAOC,EAAQv2C,OACrB,GAAa,IAATs2C,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC7+B,EAAS8+B,EAAQ,IAE3B,MAAMwzC,EAAoB,IAAI3nF,MAAMm0C,EAAQv2C,QAC5C,IAAK,IAAID,EAAI,EAAGA,EAAIgqF,EAAQ/pF,OAAS,IAAKD,EACxCgqF,EAAQhqF,GAAKgX,KAAK2V,MAAMjV,EAAS8+B,EAAQx2C,IACzC0X,GAAUsyE,EAAQhqF,GAAKw2C,EAAQx2C,GAGjC,OADAgqF,EAAQA,EAAQ/pF,OAAS,GAAKyX,EACvBsyE,EAMT1lF,qBAAqBoqD,EAAc6B,GACjC,GAAI7B,GAAQ6B,GAAc7B,GAAQ6B,EAChC,MAAM,IAAIxwD,MAAM,wCAElB,OAAO2uD,EAAO,EAAIA,EAAO6B,EAAa7B,EAGxCpqD,qBAAqB06D,EAAyBzO,GAC5C,OAAOyO,EAAKh6D,KAAI2F,GAAKrK,KAAK61D,cAAcxrD,EAAG4lD,KAW7CjsD,sBAAsB2lB,EAAiB7nB,EAAyBo1F,GAC9D,GAAoB,IAAhBp1F,EAAKnC,QAAiC,IAAjBgqB,EAAMhqB,OAC7B,MAAM,IAAIF,MAAM,oDAElB,QAA0BD,IAAtB03F,EACFA,EAAoBp1F,EAAKnC,YAEzB,GAAIu3F,GAAqB,GAAKA,EAAoBp1F,EAAKnC,OACrD,MAAM,IAAIF,MAAM,kCAIpB,IAAK,IAAI0K,EAAI+sF,EAAoB,EAAG/sF,GAAK,IACvCwf,EAAMxf,OACFwf,EAAMxf,GAAKrI,EAAKqI,OAFwBA,EAK5Cwf,EAAMxf,GAAK,EAgBfnG,6BAA6BmzF,EAAiCC,GAE5D,GAA0B,IAAtBA,EAAWz3F,OAAc,CAC3B,GAA4B,IAAxBw3F,EAAax3F,QAAiD,IAAjCu4C,EAAU71C,KAAK80F,GAC9C,MAAO,GAEP,MAAM,IAAI13F,MAAM,qCAIpB,MAAM43F,EAAQD,EAAWz3F,OACnBqkD,EAAe,IAAIjiD,MAAcs1F,GACvC,IAAIC,GAAoB,EACpBC,EAAgB,EACpB,IAAK,IAAI73F,EAAI,EAAGA,EAAI23F,EAAO33F,IAAK,CAC9B,GAAI03F,EAAW13F,IAAM,EACnB,MAAM,IAAID,MAAM,qDAElB,IAAuB,IAAnB23F,EAAW13F,GAAW,CACxB,IAA0B,IAAtB43F,EACF,MAAM,IAAI73F,MAAM,kDAElB63F,EAAmB53F,MACd,CACL,GAAsB,IAAlB03F,EAAW13F,GAAU,CACvB,GAAIA,GAAKy3F,EAAax3F,OACpB,MAAM,IAAIF,MAAM,gFAElBukD,EAAatkD,GAAKy3F,EAAaz3F,QAE/BskD,EAAatkD,GAAK03F,EAAW13F,GAE/B63F,GAAiBvzC,EAAatkD,IAIlC,MAAM83F,EAAgBt/C,EAAU71C,KAAK80F,GACrC,IAA0B,IAAtBG,EAAyB,CAC3B,GAAIE,EAAgBD,GAAkB,EACpC,MAAM,IAAI93F,MAAM,6EACZ03F,qBAAgCC,MAEtCpzC,EAAaszC,GAAoBE,EAAgBD,OAIjD,GAAIA,IAAkBC,EACpB,MAAM,IAAI/3F,MAAM,2DAGpB,OAAOukD,EASThgD,uBAAuBqC,EAAsB0tD,GAC3C,OAAIA,EACKA,EAAKrvD,KAAKlB,GAAM6C,EAAE7C,KAElB6C,EAAEqC,QAAQgyC,UASrB12C,gBAAgBlC,EAAyBkwB,GACvC,MAAMikB,EAAOn0C,EAAKnC,OAClB,OAAOmC,EAAK4C,KAAI,CAAClB,EAAG9D,IAAM8D,EAAIwuB,EAAItyB,GAAKsyB,EAAItyB,EAAIu2C,KAQjDjyC,gBAAgByzF,EAA2BC,GACzC,OAAID,EAAO93F,SAAW+3F,EAAO/3F,QAGtB83F,EAAOt3B,OAAM,CAAC38D,EAAG9D,IAAM8D,IAAMk0F,EAAOh4F,KAO7CsE,+BAA+BlC,GAC7B,GAAIA,EAAKnC,OAAS,EAChB,MAAM,IAAIL,UAAU,mDAEtB,IAAI+C,EAAO,EACX,IAAK,MAAM4D,KAAKnE,EAAM,CACpB,IAAKS,OAAOugC,UAAU78B,GACpB,MAAM,IAAI3G,UAAU,kBAAkB2G,uBAExC,GAAIA,EAAI,GAAKA,EAAI,WACf,MAAM,IAAI3G,UAAU,yBAAyB2G,oBAE/C5D,GAAQ4D,EAEV,OAAO5D,EAQT2B,oBAAoBlC,EAAyBssD,GACvCA,EAAO,IACTA,GAAQtsD,EAAKnC,QAEf,MAAMg4F,EAAQ71F,EAAKq8D,QAAO,CAAC9zD,EAAG7C,IAAM6C,EAAI7C,GAAG,GACrCowF,EAAQ91F,EAAK4G,MAAM0lD,GAAM+P,QAAO,CAAC9zD,EAAG7C,IAAM6C,EAAI7C,GAAG,GAGvD,MAFmB,CAACmwF,EAAQC,EAAOA,GAUrC5zF,oBAAoBlC,EAAyB48D,GAC3C,MAAM5J,EAAa,IAAI/yD,MAGvB28D,EAAOxmB,EAAU4mB,cAAcJ,EAAM58D,EAAKnC,QAE1C,IAAK,IAAID,EAAI,EAAGA,EAAIoC,EAAKnC,OAAQD,IAAK,CACpC,MAAMm4F,EAAgBn5B,EAAKp+D,QAAQZ,IAAM,EACzC,GAAIm4F,GAA6B,IAAZ/1F,EAAKpC,GACxB,MAAM,IAAID,MAAM,6CAGG,IAAhBi/D,EAAK/+D,QAAgBmC,EAAKpC,GAAK,GAAOg/D,EAAK/+D,OAAS,IAAMk4F,IAC7D/iC,EAAWj1D,KAAKiC,EAAKpC,IAIzB,OAAOo1D,EAQT9wD,sBAAsBlC,EAAyB48D,GAC7C,MAAM5J,EAAa,IAAI/yD,MAAcD,EAAKnC,OAAS++D,EAAK/+D,QAGxDm1D,EAAWj+C,KAAK,GAGhB,IAAK,IAAInX,EAAI,EAAGA,EAAIg/D,EAAK/+D,OAAQD,IAAK,CACpC,MAAM0uD,EAAOlW,EAAU2d,cAAc6I,EAAKh/D,GAAIoC,EAAKnC,QACnD,GAAIyuD,GAAQ0G,EAAWn1D,OACrB,MAAM,IAAIF,MAAM,mCAElB,GAAyB,IAArBq1D,EAAW1G,GACb,MAAM,IAAI3uD,MAAM,+BAGlBq1D,EAAW1G,GAAQ,EAIrB,IAAI0pC,EAAoB,EACxB,IAAK,IAAIp4F,EAAI,EAAGA,EAAIo1D,EAAWn1D,OAAQD,IACf,IAAlBo1D,EAAWp1D,KACbo1D,EAAWp1D,GAAKoC,EAAKg2F,MAMzB,GAAIA,IAAsBh2F,EAAKnC,OAC7B,MAAM,IAAIF,MAAM,qDAGlB,OAAOq1D,GAxUX,cA6UA,iBAEE9wD,WACI8O,EAAoC2iC,EAAoC6gD,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAe9gD,EAAO91C,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI62F,EAAc,GAAKA,GAAexjF,EAAOnT,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI82F,EAAcC,EAAY/gD,EAAO91C,OACnC,MAAM,IAAIF,MAAM,kDAElB,GAAI62F,EAAcE,EAAY1jF,EAAOnT,OACnC,MAAM,IAAIF,MAAM,4CAGlB,IAAK,IAAI2X,EAAS,EAAGA,EAASo/E,EAAWp/E,IACvCtE,EAAOwjF,EAAcl/E,IAAWV,KAAK6V,IAAIkpB,EAAO8gD,EAAcn/E,GAAS,GAK3EpT,YACI8O,EAAoC2iC,EAAoC6gD,EAAqBC,EAC7FC,EAAmBp4E,GACrB,GAAIm4E,EAAc,GAAKA,GAAe9gD,EAAO91C,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI62F,EAAc,GAAKA,GAAexjF,EAAOnT,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI82F,EAAcC,EAAY/gD,EAAO91C,OACnC,MAAM,IAAIF,MAAM,kDAElB,GAAI62F,EAAcE,EAAY1jF,EAAOnT,OACnC,MAAM,IAAIF,MAAM,4CAGlB,IAAK,IAAI2X,EAAS,EAAGA,EAASo/E,EAAWp/E,IACvCtE,EAAOwjF,EAAcl/E,IAAYgH,EAAQq3B,EAAO8gD,EAAcn/E,GAKlEpT,YACI8O,EAAoC2iC,EAAoC6gD,EAAqBC,EAC7FC,EAAmBrvF,GACrB,GAAIovF,EAAc,GAAKA,GAAe9gD,EAAO91C,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI62F,EAAc,GAAKA,GAAexjF,EAAOnT,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI82F,EAAcC,EAAY/gD,EAAO91C,OACnC,MAAM,IAAIF,MAAM,kDAElB,GAAI62F,EAAcE,EAAY1jF,EAAOnT,OACnC,MAAM,IAAIF,MAAM,4CAGlB,IAAK,IAAI2X,EAAS,EAAGA,EAASo/E,EAAWp/E,IACvCtE,EAAOwjF,EAAcl/E,GAAUV,KAAK6V,IAAIkpB,EAAO8gD,EAAcn/E,GAASjQ,GAK1EnD,WACI8O,EAAoC2iC,EAAoC6gD,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAe9gD,EAAO91C,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI62F,EAAc,GAAKA,GAAexjF,EAAOnT,OAC3C,MAAM,IAAIF,MAAM,6BAElB,GAAI82F,EAAcC,EAAY/gD,EAAO91C,OACnC,MAAM,IAAIF,MAAM,kDAElB,GAAI62F,EAAcE,EAAY1jF,EAAOnT,OACnC,MAAM,IAAIF,MAAM,4CAGlB,IAAK,IAAI2X,EAAS,EAAGA,EAASo/E,EAAWp/E,IACvCtE,EAAOwjF,EAAcl/E,GAAWq+B,EAAO8gD,EAAcn/E,GAAUtE,EAAOwjF,EAAcl/E,KAK1F,MAAaosD,EAOXx/D,kBAAkBlC,EAAyBssD,EAAcxxC,EAAiB0mD,GAExE,GAAqB,IAAjB1mD,EAAMjd,OAAc,CACtB,IAAK2jE,EACH,MAAM,IAAI7jE,MAAM,8EAElB+jE,EAAUu0B,eAAej2F,EAAKssD,GAAOkV,EAAY1mD,GAGnD,MAAMgyC,EAAqB,GACrBC,EAAU,CAAC,GACjB,IAAK,IAAInvD,EAAI,EAAGA,EAAIkd,EAAMjd,SAAUD,EAAG,CAC3B,IAANA,GACFmvD,EAAQhvD,KAAKgvD,EAAQnvD,EAAI,GAAKkd,EAAMld,EAAI,IAE1C,MAAMsnC,EAAQllC,EAAK4G,QACnBs+B,EAAMonB,GAAQxxC,EAAMld,GACpBkvD,EAAO/uD,KAAKmnC,GAEd,MAAO,CAAC4nB,EAAQC,GAGlB7qD,sBAAsBg0F,EAA8B10B,EAAoB1mD,GAEtE,GAAIo7E,EAAuB10B,GAAe,EACxC,MAAM,IAAI7jE,MAAM,4CAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI4jE,IAAc5jE,EAChCkd,EAAM/c,KAAKm4F,EAAuB10B,IAnCxC,cAwCA,MAAa20B,EAUXj0F,kBACIqC,EAAWq4D,EAAgBw5B,EAAmBv7B,EAC9CV,GACF,MAAMn6D,EAAOuE,EAAEvE,KAAK4G,MAAM,GAEN,IAAhBg2D,EAAK/+D,QACPmC,EAAKiY,SAAQ,CAAC9S,EAAGm2E,IAAQ1e,EAAK7+D,KAAKu9E,KAGrC,MAAMtoB,EAAamjC,EAAWE,gBAAgBr2F,EAAM48D,GAAM,GAGpDr8D,EAAO61C,EAAU71C,KAAKyyD,GACtBttD,EAAI,IAAI,EAAAhG,OAAOszD,EAAYzuD,EAAEzE,MAC7Bs0C,EAAUgC,EAAUkM,eAAe0Q,GACnCsjC,EAAelgD,EAAUkM,eAAetiD,GACxCu2F,EAAW,IAAIt2F,MAAMD,EAAKnC,QAChC,IAAK,IAAID,EAAI,EAAGA,EAAI2C,EAAM3C,IAAK,CAC7B,MAAMgqF,EAAUxxC,EAAUsH,gBAAgB9/C,EAAGw2C,GAE7CuB,EAAcg+C,UAAU/L,EAAS5nF,EAAMu2F,GACvC7wF,EAAEjG,IACEmoF,EACAuO,EAAWK,iBACPjyF,EAAE28C,WAAY0b,EAAM58D,EAAM,EAAGo2C,EAAUuH,gBAAgB44C,EAAUD,GAAez7B,EAAKV,IAG/F,OAAIi8B,EACK1wF,EAGA,IAAI,EAAAhG,OACPy2F,EAAWE,gBAAgBr2F,EAAM48D,EAAMw5B,GAAW1wF,EAAE5F,UAAMpC,OAAWA,EAAWgI,EAAE3F,KAAM2F,EAAEi7C,QAelGz+C,wBACI+/B,EAA0B26B,EAAgB58D,EAAgBy2F,EAAoBhtE,EAC9EoxC,EAA4BV,GAC9B,IAAIx9B,EAAM,EACV,GAAI85D,GAAc75B,EAAK/+D,OACrB,OAAOg9D,EAAI54B,EAAMxY,IAEnB,MAAM6iC,EAAOsQ,EAAK65B,GACZC,EAAOpqC,GAAQtsD,EAAKnC,OAAS,EAAIu4C,EAAU71C,KAAKP,EAAK4G,MAAM0lD,EAAO,IACxE,IAAK,IAAI1uD,EAAI,EAAGA,EAAIoC,EAAKssD,GAAO1uD,IAC9B++B,EAAY,IAAN/+B,EAAUu4F,EAAWK,iBAAiBv0D,EAAO26B,EAAM58D,EAAMy2F,EAAa,EAAGhtE,EAAKoxC,EAAKV,GACzEA,EAAIx9B,EAAKw5D,EAAWK,iBAAiBv0D,EAAO26B,EAAM58D,EAAMy2F,EAAa,EAAGhtE,EAAKoxC,EAAKV,IAClG1wC,GAAOitE,EAET,OAAO/5D,EAUTz6B,uBAAuBlC,EAAyB48D,EAAyBC,GACvE,MAAM7J,EAAahzD,EAAK4G,QACxB,IAAK,IAAIhJ,EAAI,EAAGA,EAAIg/D,EAAK/+D,OAAQD,IAE7Bo1D,EAAW4J,EAAKh/D,IADdi/D,EACoB,EAEA,EAG1B,OAAO7J,EAAW9X,QAAO16C,GAAe,IAARA,KA1FpC,eA8FA,MAAa6wD,EAUXnvD,4BACI+3D,EAA2BW,EAA8B7L,EAAuB3a,EAChF0a,EAAqBE,GACvB,IAAKiL,GAAoBlL,EAAYlxD,SAAW+8D,EAAU/8D,OAAS,EACjE,MAAM,IAAIF,MAAM,sFAGlB,GAAIs8D,EAEF,IAAK,IAAIz5D,EAAM,EAAGA,EAAMo6D,EAAU/8D,OAAS,EAAG2C,IACxCA,GAAOuuD,EAAYlxD,OACrBkxD,EAAYhxD,KAAK68D,EAAUp6D,EAAM,IAEjCuuD,EAAYvuD,GAAOo6D,EAAUp6D,EAAM,GAMzC,IAAK,IAAIA,EAAM,EAAGA,EAAMuuD,EAAYlxD,OAAQ2C,IAC1C,GAAIA,EAAM4zC,EAAQv2C,QAChB,GAAIu2C,EAAQ5zC,GAAO,EACjB,MAAM,IAAI7C,MAAM,qDAGlBy2C,EAAQr2C,KAAK,GAKjB,IAAK,IAAIyC,EAAM,EAAGA,EAAMuuD,EAAYlxD,OAAQ2C,IAC1C,GAAIA,EAAMsuD,EAAUjxD,QAClB,GAAIixD,EAAUtuD,GAAO,EACnB,MAAM,IAAI7C,MAAM,uDAGlBmxD,EAAU/wD,KAAK,GAKnB,IAAK,IAAIyC,EAAM,EAAGA,EAA2B,EAArBuuD,EAAYlxD,OAAY2C,IAC9C,GAAIA,EAAMwuD,EAAKnxD,QACb,GAAImxD,EAAKxuD,GAAO,EACd,MAAM,IAAI7C,MAAM,iDAGlBqxD,EAAKjxD,KAAK,GAKd,IAAK,IAAIyC,EAAM,EAAGA,EAAMuuD,EAAYlxD,OAAQ2C,IAAO,CACjD,GAAIuuD,EAAYvuD,IAAQ,EACtB,MAAM,IAAI7C,MAAM,2CAGlB,GAAIqxD,EAAKxuD,IAAQuuD,EAAYvuD,IAAQwuD,EAAKxuD,EAAMuuD,EAAYlxD,SAAWkxD,EAAYvuD,GACjF,MAAM,IAAI7C,MAAM,uCAMtBuE,gCACI04D,EAA8BxmB,EAA4B0a,EAC1DC,EAAgCC,EAAgBH,GAClD,GAAKA,EAAL,CAIA,GAAIG,EAAKnxD,SAAW,GAAK+8D,EAAU/8D,OAAS,GAC1C,MAAM,IAAIF,MAAM,gEAGlB,GAAIy2C,EAAQv2C,SAAY+8D,EAAU/8D,OAAS,EACzC,MAAM,IAAIF,MAAM,6DAGlB,GAAIoxD,EAAYlxD,SAAY+8D,EAAU/8D,OAAS,EAC7C,MAAM,IAAIF,MAAM,mEAGlB,IAAK,IAAI6C,EAAM,EAAGA,EAAMo6D,EAAU/8D,OAAS,EAAG2C,IAC5C6wD,EAAaslC,wBACT/7B,EAAUp6D,EAAM,GAAI4zC,EAAQ5zC,GAAMsuD,EAAUtuD,GAAMuuD,EAAYvuD,GAAMwuD,EAAMxuD,EAAKA,EAAMo6D,EAAU/8D,OAAS,EACxGgxD,IAeR3sD,8BACI+3D,EAA2BW,EAA8BxmB,EAAmB0a,EAC5EC,EAAuBC,EAAgBH,GACzC,GAAI+L,EAAU/8D,QAAU,EACtB,MAAM,IAAIF,MAAM,8CAIlB,MAAMq1D,EAAa,CAAC4H,EAAU,GAAIA,EAAU,IAI5C,OAFAvJ,EAAaulC,mBACT38B,EAAkBW,EAAW5H,EAAY5e,EAAS0a,EAAWC,EAAaC,EAAMH,GAC7EmE,EAaT9wD,8BACI04D,EAA8Bi8B,EAA+BziD,EAAmB0a,EAChFC,EAAuBC,EAAgBH,GACzC,GAAI+L,EAAU/8D,QAAU,GAAKg5F,EAAWh5F,QAAU,EAChD,MAAM,IAAIF,MAAM,2DAIlB,MAAMq1D,EAAa,CAAC4H,EAAU,GAAIi8B,EAAW,IAG7C,OADAxlC,EAAaulC,oBAAmB,EAAOh8B,EAAW5H,EAAY5e,EAAS0a,EAAWC,EAAaC,EAAMH,GAC9FmE,EAMD9wD,0BACJ+3D,EAA2BW,EAA8B5H,EAAsB5e,EAC/E0a,EAA8BC,EAAgCC,EAAgBH,GAChF,GAAIoL,EACF,IAAK,IAAIz5D,EAAM,EAAGA,EAAMo6D,EAAU/8D,OAAS,EAAG2C,IAC5CwyD,EAAWj1D,KAAK,QAGlB,IAAK,IAAIyC,EAAM,EAAGA,EAAMo6D,EAAU/8D,OAAS,EAAG2C,IAC5CwyD,EAAWj1D,KAAKszD,EAAaslC,wBACzB/7B,EAAUp6D,EAAM,GAAI4zC,EAAQ5zC,GAAMsuD,EAAUtuD,GAAMuuD,EAAYvuD,GAAMwuD,EAAMxuD,EAAKA,EAAMo6D,EAAU/8D,OAAS,EACxGgxD,IAOF3sD,+BACJ40F,EAAgBviD,EAAgBwiD,EAAkBC,EAAgBhoC,EAAgBioC,EAClFC,EAAsBroC,GACxB,MAAMsoC,EAAUJ,GAAYC,EAAS,GAAK,EAC1C,IAAInoC,GAAuB,WAAZA,EAsBb,OAAOj6C,KAAK2V,OAAQusE,EAAS9nC,EAAKioC,GAAgBjoC,EAAKkoC,GAAgBC,GAAW5iD,EAAU,GArB5F,OAAQsa,GACN,IAAK,QAGH,OAFAG,EAAKioC,GAAgB,EACrBjoC,EAAKkoC,GAAgB,EACdtiF,KAAK2V,OAAQusE,EAASK,GAAW5iD,EAAU,GACpD,IAAK,aACL,IAAK,aACH,GAAiB,IAAbwiD,EACF,MAAM,IAAIp5F,MAAM,uDACX,CACL,MACMy5F,IADoBN,EAASviD,EAAS,GAAKA,EACX,GAAKA,EAASyiD,EAASF,EAI7D,OAHA9nC,EAAKioC,GACY,eAAZpoC,EAA4Bj6C,KAAK2V,OAAO6sE,EAAY,GAAK,GAAKxiF,KAAK2V,MAAM6sE,EAAY,GAC1FpoC,EAAKkoC,GAAgBE,EAAYpoC,EAAKioC,GAC/BriF,KAAK2V,OAAQusE,EAASM,EAAYJ,GAAUziD,EAAU,GAEjE,QACE,MAAM,IAAI52C,MAAM,8BAlM1B,iBA0Ma,EAAA+1D,UAAY,qBACZ,EAAAC,SAAW,qBAExB,4BAAiCpxD,GAC/B,OAAO,IAAIiH,aAAcC,OAAOlH,K,wGC9tCrB,EAAA80F,oBACT,CAACl2F,EAAkCm2F,EAAgBC,EAClDx2F,KACC,GAAsB,iBAAXI,GAAmC,OAAZA,EAAkB,CAClD,GAAIo2F,EAAKr9C,IAAI/4C,GACX,MAAM,IAAIxD,MAAM,iCAEhB45F,EAAK7+D,IAAIv3B,GAIbK,OAAOg2F,QAAQr2F,GAAS8W,SAAQ,EAAElW,EAAKxD,MACrC,MAAMpB,EAAO,EAAWm6F,EAASv1F,EAAMA,EACvC,GAAqB,iBAAVxD,EACT,EAAA84F,oBAAoB94F,EAAkCpB,EAAO,IAAKo6F,EAAMx2F,QACnE,GAAqB,iBAAVxC,GAAuC,iBAAVA,EAC7CwC,EAAQ5D,EAAMoB,EAAMyb,gBACf,IAAqB,kBAAVzb,EAGhB,MAAM,IAAIZ,MAAM,0CAA0CY,GAF1DwC,EAAQ5D,EAAM,EAAU,IAAM,W,ggCCtBxC,gBAEA,YACA,UAEMs6F,EAAU,MAAiB,EAAAz5F,IAAIG,KAAKguC,OAA6B,oBAAbxoC,SAC1D,IAAI+zF,EAQAC,EACAC,EARA10F,GAAe,EACfD,GAAc,EACdE,GAAU,EAOd,MAAM00F,EAA+E,GAC/EC,EAAyD,GACzDC,EAA8D,GAC9DC,EAAuD,GAEvDC,EAAe,KACnB,GAAI/0F,IAAiBD,GAAeE,IAAYu0F,EAC9C,MAAM,IAAI/5F,MAAM,qBAIdu6F,EAAwBC,IAC5B,OAAQA,EAAGp4F,KAAKD,MACd,IAAK,YACHoD,GAAe,EACXi1F,EAAGp4F,KAAKsD,KACVF,GAAU,EACVw0F,EAAkB,GAAGQ,EAAGp4F,KAAKsD,OAE7BJ,GAAc,EACd00F,EAAkB,MAEpB,MACF,IAAK,WACCQ,EAAGp4F,KAAKsD,IACVu0F,EAAiB,GAAGO,EAAGp4F,KAAKsD,KAE5Bu0F,EAAiB,KAEnB,MACF,IAAK,SACCO,EAAGp4F,KAAKsD,IACVw0F,EAAuBhsF,QAAS,GAAGssF,EAAGp4F,KAAKsD,KAE3Cw0F,EAAuBhsF,QAAS,GAAGssF,EAAGp4F,KAAKw2B,KAE7C,MACF,IAAK,UACC4hE,EAAGp4F,KAAKsD,IACVy0F,EAAwBjsF,QAAS,GAAGssF,EAAGp4F,KAAKsD,KAE5Cy0F,EAAwBjsF,QAAS,KAEnC,MACF,IAAK,MACCssF,EAAGp4F,KAAKsD,IACV00F,EAAalsF,QAAS,GAAGssF,EAAGp4F,KAAKsD,KAEjC00F,EAAalsF,QAAS,GAAGssF,EAAGp4F,KAAKw2B,KAEnC,MACF,IAAK,gBACC4hE,EAAGp4F,KAAKsD,IACV20F,EAAsBnsF,QAAS,GAAGssF,EAAGp4F,KAAKsD,KAE1C20F,EAAsBnsF,QAAS,OAOjCusF,EAAgC,oBAAbz0F,SAAyE,QAA7C,EAAQ,OAARA,eAAQ,IAARA,cAAQ,EAARA,SAAUC,qBAAmC,eAAEC,SAAMnG,EAE7F,EAAA8uC,SAAW,IAA0B,OAAD,6BAC/C,GAAsCirD,IAAW,CAC/C,GAAIx0F,EACF,OAEF,GAAIC,EACF,MAAM,IAAIvF,MAAM,4CAElB,GAAIwF,EACF,MAAM,IAAIxF,MAAM,yCAYlB,OATAuF,GAAe,OAGYxF,IAAvB,EAAAM,IAAIG,KAAKk6F,WACPD,GAA4C,IAA/BA,EAAU55F,QAAQ,WACjC,EAAAR,IAAIG,KAAKk6F,UAAYD,EAAU3wF,OAAO,EAAI2wF,EAAqB1wF,YAAY,KAAO,IAI/E,IAAI5C,SAAc,CAAC8b,EAASmH,KACjC2vE,WAAanoF,YAEbmoF,EAAc,YACdA,EAAYznF,UAAYioF,EACxBP,EAAoB,CAAC/2E,EAASmH,GAC9B,MAAM5W,EAA0B,CAACrR,KAAM,YAAaw4F,GAAK,EAAAt6F,IAAIG,MAC7Du5F,EAAYtoF,YAAY+B,MAI1B,OAAO,EAAAonF,sBAAsB,EAAAv6F,IAAIG,SAIxB,EAAAq6F,QAAU,CAAMpsD,EAAoBqsD,IAAwC,OAAD,6BACtF,GAAsChB,IAEpC,OADAQ,IACO,IAAInzF,SAAc,CAAC8b,EAASmH,KACjC6vE,EAAmB,CAACh3E,EAASmH,GAC7B,MAAM5W,EAA0B,CAACrR,KAAM,WAAYw4F,GAAK,CAAClsD,aAAYqsD,iBACrEf,EAAatoF,YAAY+B,MAG3BunF,EAAKF,QAAQpsD,EAAYqsD,MAIhB,EAAAE,cACT,CAAMrZ,EAAmBn+E,IAAoF,OAAD,6BAC9G,OAAsCs2F,KACpCQ,IACO,IAAInzF,SAAqC,CAAC8b,EAASmH,KACxD8vE,EAAuB95F,KAAK,CAAC6iB,EAASmH,IACtC,MAAM5W,EAA0B,CAACrR,KAAM,SAAUw4F,GAAK,CAAChZ,QAAOn+E,YAC9Du2F,EAAatoF,YAAY+B,EAAS,CAACmuE,EAAM/8E,aAGpCm2F,EAAKC,cAAcrZ,EAAOn+E,MAIxB,EAAAy3F,eAAuBC,GAAqC,OAAD,6BACtE,GAAsCpB,IAEpC,OADAQ,IACO,IAAInzF,SAAc,CAAC8b,EAASmH,KACjC+vE,EAAwB/5F,KAAK,CAAC6iB,EAASmH,IACvC,MAAM5W,EAA0B,CAACrR,KAAM,UAAWw4F,GAAKO,GACvDnB,EAAatoF,YAAY+B,MAG3BunF,EAAKE,eAAeC,MAIX,EAAAh3F,IAAM,CACfg3F,EAAmBC,EAAwBv5C,EAA8Bu0C,EACzE3yF,IAAwE,OAAD,6BACzE,OAAsCs2F,KACpCQ,IACO,IAAInzF,SAA8B,CAAC8b,EAASmH,KACjDgwE,EAAah6F,KAAK,CAAC6iB,EAASmH,IAC5B,MAAM5W,EAA0B,CAACrR,KAAM,MAAOw4F,GAAK,CAACO,YAAWC,eAAcv5C,SAAQu0C,gBAAe3yF,YACpGu2F,EAAatoF,YAAY+B,EAASunF,EAAKK,2BAA2Bx5C,QAG7Dm5C,EAAK72F,IAAIg3F,EAAWC,EAAcv5C,EAAQu0C,EAAe3yF,MAIvD,EAAAsC,aAAqBo1F,GAAqC,OAAD,6BACpE,GAAsCpB,IAEpC,OADAQ,IACO,IAAInzF,SAAc,CAAC8b,EAASmH,KACjCiwE,EAAsBj6F,KAAK,CAAC6iB,EAASmH,IACrC,MAAM5W,EAA0B,CAACrR,KAAM,gBAAiBw4F,GAAKO,GAC7DnB,EAAatoF,YAAY+B,MAG3BunF,EAAKj1F,aAAao1F,O,mGClLtB,gBACA,UACA,UAEa,EAAAG,cAAiB73F,IAC5B,MAAMhD,EAAO,EAAA86F,cACb,IAAIC,EAAmB,EACvB,MAAMC,EAAmB,GAEnBC,EAA0Cj4F,GAAW,GAE3D,IACE,QAAkCzD,KAA9ByD,aAAO,EAAPA,EAASk4F,kBACXD,EAAWC,iBAAmB,OACzB,GACiC,iBAA7Bl4F,EAAQk4F,mBAAkC54F,OAAOugC,UAAU7/B,EAAQk4F,mBAC1El4F,EAAQk4F,iBAAmB,GAAKl4F,EAAQk4F,iBAAmB,EAC7D,MAAM,IAAI17F,MAAM,qCAAqCwD,EAAQk4F,oBAG/D,QAAmC37F,KAA/ByD,aAAO,EAAPA,EAASm4F,mBACXF,EAAWE,kBAAoB,OAC1B,GAAyC,iBAA9Bn4F,EAAQm4F,oBAAmC74F,OAAOugC,UAAU7/B,EAAQm4F,mBACpF,MAAM,IAAI37F,MAAM,qCAAqCwD,EAAQm4F,0BAGpC57F,KAAvByD,aAAO,EAAPA,EAASoO,aACX6pF,EAAW7pF,WAAY,GAGzB,IAAIgqF,EAAgB,EAOpB,QANqB77F,KAAjByD,aAAO,EAAPA,EAASu/B,OACX64D,EAAgB,EAAAC,gBAAgBr4F,EAAQu/B,IAAKy4D,IAG/CD,EAAmB/6F,EAAK0kB,qBACpBu2E,EAAWC,iBAAmBD,EAAWE,oBAAsBF,EAAW7pF,UAAYgqF,GACjE,IAArBL,EACF,MAAM,IAAIv7F,MAAM,4BAclB,YAXuBD,KAAnByD,aAAO,EAAPA,EAASs4F,QACX,EAAApC,oBAAoBl2F,EAAQs4F,MAAO,GAAI,IAAIC,SAAoC,CAAC33F,EAAKxD,KACnF,MAAMo7F,EAAgB,EAAAH,gBAAgBz3F,EAAKo3F,GACrCS,EAAkB,EAAAJ,gBAAgBj7F,EAAO46F,GAE/C,GAAqF,IAAjFh7F,EAAK4kB,sBAAsBm2E,EAAkBS,EAAeC,GAC9D,MAAM,IAAIj8F,MAAM,iCAAiCoE,OAASxD,QAKzD,CAAC26F,EAAkBC,GAC1B,MAAO/1F,GAKP,MAJyB,IAArB81F,GACF/6F,EAAK8kB,sBAAsBi2E,GAE7BC,EAAOlhF,QAAQ9Z,EAAKwlB,OACdvgB,K,icC5DV,gBAEA,UAEA,IAAIy2F,EAoBJ,6CAMQ/tD,UAAUwzC,EAAmBn+E,G,yCAC5B04F,UACG,EAAArB,QAAQ,EAAAx6F,IAAIG,KAAKiuC,WAzBT,CAAC9tC,IACnB,OAAQA,GACN,IAAK,UACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,QACE,MAAM,IAAIX,MAAM,8BAA8BW,OAYVw7F,CAAY,EAAA97F,IAAIM,WACpDu7F,GAAU,IAGX37F,KAAK26F,UAAW36F,KAAKyD,WAAYzD,KAAKmD,mBAAqB,EAAAs3F,cAAcrZ,EAAOn+E,MAG7EivC,U,yCACJ,OAAO,EAAAwoD,eAAe16F,KAAK26F,cAGvBh3F,IAAIZ,EAAiCC,EAAqCC,G,yCAE9E,MAAM44F,EAAuB,GACvBjB,EAAyB,GAC/Bt3F,OAAOg2F,QAAQv2F,GAAOgX,SAAQ+hF,IAC5B,MAAM78F,EAAO68F,EAAI,GACX15C,EAAS05C,EAAI,GACbnyE,EAAQ3pB,KAAKyD,WAAWnD,QAAQrB,GACtC,IAAe,IAAX0qB,EACF,MAAM,IAAIlqB,MAAM,kBAAkBR,MAEpC48F,EAAWh8F,KAAKuiD,GAChBw4C,EAAa/6F,KAAK8pB,MAGpB,MAAMisE,EAA0B,GAChCtyF,OAAOg2F,QAAQt2F,GAAS+W,SAAQ+hF,IAC9B,MAAM78F,EAAO68F,EAAI,GAEXnyE,EAAQ3pB,KAAKmD,YAAY7C,QAAQrB,GACvC,IAAe,IAAX0qB,EACF,MAAM,IAAIlqB,MAAM,mBAAmBR,MAErC22F,EAAc/1F,KAAK8pB,MAGrB,MAAM45C,QACI,EAAA5/D,IAAI3D,KAAK26F,UAAWC,EAAciB,EAAWn3F,KAAIkB,GAAK,CAACA,EAAEhE,KAAMgE,EAAE9D,KAAM8D,EAAE/D,QAAQ+zF,EAAe3yF,GAEpG6zB,EAAoC,GAC1C,IAAK,IAAIp3B,EAAI,EAAGA,EAAI6jE,EAAQ5jE,OAAQD,IAClCo3B,EAAO92B,KAAKmD,YAAYyyF,EAAcl2F,KAAO,IAAI,EAAA8B,OAAO+hE,EAAQ7jE,GAAG,GAAI6jE,EAAQ7jE,GAAG,GAAI6jE,EAAQ7jE,GAAG,IAEnG,OAAOo3B,KAGTxxB,kBAIAC,eACO,EAAAA,aAAavF,KAAK26F,c,wGClF3B,gBACA,UACA,UA0Ca,EAAAoB,kBAAqB94F,IAChC,MAAMhD,EAAO,EAAA86F,cACb,IAAIiB,EAAuB,EAC3B,MAAMf,EAAmB,GAEnBgB,EAAkDh5F,GAAW,GAnBxC,CAACA,IACvBA,EAAQs4F,QACXt4F,EAAQs4F,MAAQ,IAEbt4F,EAAQs4F,MAAM7tD,UACjBzqC,EAAQs4F,MAAM7tD,QAAU,IAE1B,MAAMA,EAAUzqC,EAAQs4F,MAAM7tD,QACzBA,EAAQwuD,+BAEXxuD,EAAQwuD,6BAA+B,MAUzCC,CAAqBF,GAErB,SAC0Cz8F,KAApCyD,aAAO,EAAPA,EAASm5F,0BACXH,EAAeG,uBAAyB,OAE1C,MAAMA,EApDuB,CAACA,IAChC,OAAQA,GACN,IAAK,WACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,IAAK,MACH,OAAO,GACT,QACE,MAAM,IAAI38F,MAAM,yCAAyC28F,OAyC5BC,CAAyBJ,EAAeG,6BAEpC58F,KAA/ByD,aAAO,EAAPA,EAASq5F,qBACXL,EAAeK,mBAAoB,QAGH98F,KAA9ByD,aAAO,EAAPA,EAASs5F,oBACXN,EAAeM,kBAAmB,QAGL/8F,KAA3ByD,aAAO,EAAPA,EAASu5F,iBACXP,EAAeO,cAAgB,cAEjC,MAAMA,EAlDe,CAACA,IACxB,OAAQA,GACN,IAAK,aACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,QACE,MAAM,IAAI/8F,MAAM,+BAA+B+8F,OA2C3BC,CAAiBR,EAAeO,eAEtD,IAAIE,EAAkB,EAKtB,QAJuBl9F,KAAnByD,aAAO,EAAPA,EAAS05F,SACXD,EAAkB,EAAApB,gBAAgBr4F,EAAQ05F,MAAO1B,SAGjBz7F,KAA9ByD,aAAO,EAAPA,EAASk4F,kBACXc,EAAed,iBAAmB,OAC7B,GACiC,iBAA7Bl4F,EAAQk4F,mBAAkC54F,OAAOugC,UAAU7/B,EAAQk4F,mBAC1El4F,EAAQk4F,iBAAmB,GAAKl4F,EAAQk4F,iBAAmB,EAC7D,MAAM,IAAI17F,MAAM,qCAAqCwD,EAAQk4F,oBAG/D,QAAmC37F,KAA/ByD,aAAO,EAAPA,EAASm4F,mBACXa,EAAeb,kBAAoB,OAC9B,GAAyC,iBAA9Bn4F,EAAQm4F,oBAAmC74F,OAAOugC,UAAU7/B,EAAQm4F,mBACpF,MAAM,IAAI37F,MAAM,qCAAqCwD,EAAQm4F,qBAW/D,QARiC57F,KAA7ByD,aAAO,EAAPA,EAAS25F,mBACXX,EAAeW,iBAAkB,GAGnCZ,EAAuB/7F,EAAKgjB,yBACxBm5E,IAA0BH,EAAeK,oBAAsBL,EAAeM,iBAAmBC,IAC/FP,EAAeW,gBAAkB,EAAGF,EAAiBT,EAAed,iBACtEc,EAAeb,mBACU,IAAzBY,EACF,MAAM,IAAIv8F,MAAM,gCAclB,YAXuBD,KAAnByD,aAAO,EAAPA,EAASs4F,QACX,EAAApC,oBAAoBl2F,EAAQs4F,MAAO,GAAI,IAAIC,SAAoC,CAAC33F,EAAKxD,KACnF,MAAMo7F,EAAgB,EAAAH,gBAAgBz3F,EAAKo3F,GACrCS,EAAkB,EAAAJ,gBAAgBj7F,EAAO46F,GAE/C,GAA6F,IAAzFh7F,EAAKkjB,0BAA0B64E,EAAsBP,EAAeC,GACtE,MAAM,IAAIj8F,MAAM,qCAAqCoE,OAASxD,QAK7D,CAAC27F,EAAsBf,GAC9B,MAAO/1F,GAKP,MAJ6B,IAAzB82F,GACF/7F,EAAKojB,0BAA0B24E,GAEjCf,EAAOlhF,QAAQ9Z,EAAKwlB,OACdvgB,K,sGCzHV,gBAEa,EAAAo2F,gBAAkB,CAACz5F,EAAco5F,KAC5C,MAAMh7F,EAAO,EAAA86F,cAEP8B,EAAa58F,EAAKipB,gBAAgBrnB,GAAQ,EAC1Ci7F,EAAa78F,EAAKolB,QAAQw3E,GAIhC,OAHA58F,EAAKgpB,aAAapnB,EAAMi7F,EAAYD,GACpC5B,EAAOp7F,KAAKi9F,GAELA,I,gLCRT,eACA,UACA,UACA,UAOa,EAAAxC,QAAU,CAACpsD,EAAoBqsD,KAC1C,MAAMwC,EAAY,EAAAhC,cAAch4E,SAASmrB,EAAYqsD,GACrD,GAAkB,IAAdwC,EACF,MAAM,IAAIt9F,MAAM,8CAA8Cs9F,MASlE,MAAMC,EAAiB,IAAIn8F,IAMd,EAAA45F,cACT,CAACrZ,EAAmBn+E,KAClB,MAAMhD,EAAO,EAAA86F,cACPkC,EAAkBh9F,EAAKolB,QAAQ+7D,EAAM78E,YAC3C,IAAI24F,EAAgB,EAChBlB,EAAuB,EACvBf,EAAmB,GAEvB,IAKE,IAJCe,EAAsBf,GAAU,EAAAc,kBAAkB94F,GAEnDhD,EAAKsM,OAAOhL,IAAI6/E,EAAO6b,GACvBC,EAAgBj9F,EAAKsjB,kBAAkB05E,EAAiB7b,EAAM78E,WAAYy3F,GACpD,IAAlBkB,EACF,MAAM,IAAIz9F,MAAM,0B,QAGlBQ,EAAKwlB,MAAMw3E,GACXh9F,EAAKojB,0BAA0B24E,GAC/Bf,EAAOlhF,QAAQ9Z,EAAKwlB,OAGtB,MAAM0oC,EAAaluD,EAAK0jB,kBAAkBu5E,GACpCC,EAAcl9F,EAAK4jB,mBAAmBq5E,GAEtCz5F,EAAa,GACb25F,EAAwB,GACxBj6F,EAAc,GACdk6F,EAAyB,GAC/B,IAAK,IAAI39F,EAAI,EAAGA,EAAIyuD,EAAYzuD,IAAK,CACnC,MAAMT,EAAOgB,EAAK8jB,iBAAiBm5E,EAAex9F,GAClD,GAAa,IAATT,EACF,MAAM,IAAIQ,MAAM,2BAElB29F,EAAsBv9F,KAAKZ,GAC3BwE,EAAW5D,KAAKI,EAAK+oB,aAAa/pB,IAEpC,IAAK,IAAIS,EAAI,EAAGA,EAAIy9F,EAAaz9F,IAAK,CACpC,MAAMT,EAAOgB,EAAKgkB,kBAAkBi5E,EAAex9F,GACnD,GAAa,IAATT,EACF,MAAM,IAAIQ,MAAM,4BAElB49F,EAAuBx9F,KAAKZ,GAC5BkE,EAAYtD,KAAKI,EAAK+oB,aAAa/pB,IAIrC,OADA+9F,EAAez7F,IAAI27F,EAAe,CAACA,EAAeE,EAAuBC,IAClE,CAACH,EAAez5F,EAAYN,IAG5B,EAAAu3F,eAAkBC,IAC7B,MAAM16F,EAAO,EAAA86F,cACPrtD,EAAUsvD,EAAe96F,IAAIy4F,GACnC,IAAKjtD,EACH,MAAM,IAAIjuC,MAAM,sBAElB,MAAMy9F,EAAgBxvD,EAAQ,GACxB0vD,EAAwB1vD,EAAQ,GAChC2vD,EAAyB3vD,EAAQ,GAEvC0vD,EAAsBrjF,QAAQ9Z,EAAKkkB,UACnCk5E,EAAuBtjF,QAAQ9Z,EAAKkkB,UACpClkB,EAAKwjB,mBAAmBy5E,GACxBF,EAAextD,OAAOmrD,IA2BxB,MAAM2C,EAA8B17F,IAClC,OAAQA,GACN,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,GACT,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,GACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,GAET,QACE,MAAM,IAAInC,MAAM,0BAA0BmC,OAI1C27F,EAA8BvG,IAClC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EAUL,KAAK,EACH,MAAO,QATT,KAAK,GAUL,KAAK,GACH,MAAO,SATT,KAAK,EACH,MAAO,UACT,KAAK,GACH,MAAO,UACT,KAAK,EACH,MAAO,SAMT,QACE,MAAM,IAAIv3F,MAAM,0BAA0Bu3F,OAI1CwG,EAAiC57F,IAGjC,OAAQA,GACN,IAAK,UACH,OAAOd,aACT,IAAK,QAUL,IAAK,OACH,OAAOC,WATT,IAAK,OACH,OAAOC,UACT,IAAK,SACH,OAAOC,YACT,IAAK,QACH,OAAOC,WACT,IAAK,QACH,OAAOC,WAGT,IAAK,UACH,OAAOC,aACT,IAAK,SACH,OAAOC,YACT,IAAK,QACH,OAAOb,cACT,IAAK,SACH,OAAOG,eACT,QACE,MAAM,IAAIlB,MAAM,qBAAqBmC,OAOlC,EAAA+B,IACT,CAACg3F,EAAmBC,EAAwBv5C,EAA8Bu0C,EACzE3yF,KACC,MAAMhD,EAAO,EAAA86F,cACPrtD,EAAUsvD,EAAe96F,IAAIy4F,GACnC,IAAKjtD,EACH,MAAM,IAAIjuC,MAAM,sBAElB,MAAMy9F,EAAgBxvD,EAAQ,GACxB0vD,EAAwB1vD,EAAQ,GAChC2vD,EAAyB3vD,EAAQ,GAEjCygB,EAAaysC,EAAaj7F,OAC1Bw9F,EAAcvH,EAAcj2F,OAElC,IAAIq7F,EAAmB,EACnByC,EAA6B,GAEjC,MAAMC,EAAwB,GACxBC,EAAwB,GAE9B,KACG3C,EAAkByC,GAAoB,EAAA3C,cAAc73F,GAGrD,IAAK,IAAIvD,EAAI,EAAGA,EAAIyuD,EAAYzuD,IAAK,CACnC,MAAMimC,EAAW0b,EAAO3hD,GAAG,GACrBoC,EAAOu/C,EAAO3hD,GAAG,GACjBmC,EAAOw/C,EAAO3hD,GAAG,GAEvB,IAAIo9F,EACAc,EAEJ,GAAI77F,MAAMC,QAAQH,GAAO,CAEvB+7F,EAAiB,EAAI/7F,EAAKlC,OAC1Bm9F,EAAa78F,EAAKolB,QAAQu4E,GAC1BD,EAAY99F,KAAKi9F,GACjB,IAAIphB,EAAYohB,EAAa,EAC7B,IAAK,IAAIp9F,EAAI,EAAGA,EAAImC,EAAKlC,OAAQD,IAAK,CACpC,GAAuB,iBAAZmC,EAAKnC,GACd,MAAM,IAAIJ,UAAU,wBAAwBI,qBAE9CO,EAAKwM,QAAQivE,KAAe,EAAA4f,gBAAgBz5F,EAAKnC,GAAIi+F,SAGvDC,EAAiB/7F,EAAK0C,WACtBu4F,EAAa78F,EAAKolB,QAAQu4E,GAC1BD,EAAY99F,KAAKi9F,GACjB78F,EAAKsM,OAAOhL,IAAI,IAAIR,WAAWc,EAAKwC,OAAQxC,EAAKyC,WAAYs5F,GAAiBd,GAGhF,MAAM7+E,EAAQhe,EAAK4nB,YACbmhE,EAAa/oF,EAAKgoB,WAAW,EAAInmB,EAAKnC,QAC5C,IACE,IAAIk+F,EAAW7U,EAAa,EAC5BlnF,EAAKiY,SAAQ9S,GAAKhH,EAAKqM,OAAOuxF,KAAc52F,IAC5C,MAAMm7C,EAASniD,EAAKokB,iBAChBi5E,EAA2B33D,GAAWm3D,EAAYc,EAAgB5U,EAAYlnF,EAAKnC,QACvF,GAAe,IAAXyiD,EACF,MAAM,IAAI3iD,MAAM,yBAElBi+F,EAAY79F,KAAKuiD,G,QAEjBniD,EAAK8nB,aAAa9J,IAItB,MAAM6/E,EAAiB79F,EAAK4nB,YACtBk2E,EAAoB99F,EAAKgoB,WAAwB,EAAbkmC,GACpC6vC,EAAmB/9F,EAAKgoB,WAAwB,EAAbkmC,GACnC8vC,EAAqBh+F,EAAKgoB,WAAyB,EAAdk1E,GACrCe,EAAoBj+F,EAAKgoB,WAAyB,EAAdk1E,GAE1C,IACE,IAAIgB,EAAmBJ,EAAoB,EACvCK,EAAkBJ,EAAmB,EACrCK,EAAoBJ,EAAqB,EACzCK,EAAmBJ,EAAoB,EAC3C,IAAK,IAAIx+F,EAAI,EAAGA,EAAIyuD,EAAYzuD,IAC9BO,EAAKwM,QAAQ0xF,KAAsBT,EAAYh+F,GAC/CO,EAAKwM,QAAQ2xF,KAAqBhB,EAAsBxC,EAAal7F,IAEvE,IAAK,IAAIA,EAAI,EAAGA,EAAIy9F,EAAaz9F,IAC/BO,EAAKwM,QAAQ4xF,KAAuB,EACpCp+F,EAAKwM,QAAQ6xF,KAAsBjB,EAAuBzH,EAAcl2F,IAI1E,IAAIq9F,EAAY98F,EAAKglB,QACjBi4E,EAAec,EAAkBD,EAAmB5vC,EAAY+vC,EAAmBf,EACnFc,EAAoBjD,GAExB,MAAMh3D,EAA+B,GAErC,GAAkB,IAAd+4D,EACF,IAAK,IAAIr9F,EAAI,EAAGA,EAAIy9F,EAAaz9F,IAAK,CACpC,MAAM0iD,EAASniD,EAAKwM,QAAQwxF,EAAqB,EAAIv+F,GAE/C6+F,EAA2Bt+F,EAAK4nB,YAEhC22E,EAAmBv+F,EAAKgoB,WAAW,IAEzC,IAAIrmB,EAA6Bk7F,EAAa,EAC9C,IAGE,GAFAC,EAAY98F,EAAKskB,kBACb69B,EAAQo8C,EAAkBA,EAAmB,EAAGA,EAAmB,EAAGA,EAAmB,IAC3E,IAAdzB,EACF,MAAM,IAAIt9F,MAAM,yCAAyCs9F,KAE3D,IAAI0B,EAAkBD,EAAmB,EACzC,MAAM74D,EAAW1lC,EAAKwM,QAAQgyF,KAC9B3B,EAAa78F,EAAKwM,QAAQgyF,KAC1B,MAAMzV,EAAa/oF,EAAKwM,QAAQgyF,KAC1B7V,EAAa3oF,EAAKwM,QAAQgyF,KAC1B38F,EAAO,GACb,IAAK,IAAIpC,EAAI,EAAGA,EAAIkpF,EAAYlpF,IAC9BoC,EAAKjC,KAAKI,EAAKwM,QAAQu8E,EAAa,EAAItpF,IAE1CO,EAAKkkB,SAAS6kE,GAEd,MAAM3mF,EAAuB,IAAhBP,EAAKnC,OAAe,EAAImC,EAAKq8D,QAAO,CAAC93D,EAAGc,IAAMd,EAAIc,IAE/D,GADAvF,EAAO27F,EAA2B53D,GACrB,WAAT/jC,EAAmB,CACrB,MAAM0jC,EAAuB,GAC7B,IAAIo2C,EAAYohB,EAAa,EAC7B,IAAK,IAAIp9F,EAAI,EAAGA,EAAI2C,EAAM3C,IAAK,CAC7B,MAAM0X,EAASnX,EAAKwM,QAAQivE,KACtBgjB,EAAiBh/F,IAAM2C,EAAO,OAAI7C,EAAYS,EAAKwM,QAAQivE,GAAatkE,EAC9EkuB,EAAWzlC,KAAKI,EAAK+oB,aAAa5R,EAAQsnF,IAE5C16D,EAAOnkC,KAAK,CAAC+B,EAAME,EAAMwjC,QACpB,CACL,MACMzjC,EAAO,IADiB27F,EAA8B57F,GAC/C,CAA0BS,GACvC,IAAItB,WAAWc,EAAKwC,OAAQxC,EAAKyC,WAAYzC,EAAK0C,YAC7ChD,IAAItB,EAAKsM,OAAOb,SAASoxF,EAAYA,EAAaj7F,EAAK0C,aAC5Dy/B,EAAOnkC,KAAK,CAAC+B,EAAME,EAAMD,K,QAG3B5B,EAAK8nB,aAAaw2E,GACL,WAAT38F,GAAqBk7F,GACvB78F,EAAKwlB,MAAMq3E,GAEb78F,EAAKwkB,kBAAkB29B,IAK7B,GAAkB,IAAd26C,EACF,OAAO/4D,EAEP,MAAM,IAAIvkC,MAAM,yCAAyCs9F,M,QAG3D98F,EAAK8nB,aAAa+1E,I,QAGpBJ,EAAY3jF,QAAQ9Z,EAAKwkB,mBACzBk5E,EAAY5jF,QAAQ9Z,EAAKwlB,OAEzBxlB,EAAK8kB,sBAAsBi2E,GAC3ByC,EAAiB1jF,QAAQ9Z,EAAKwlB,SAOzB,EAAAlgB,aAAgBo1F,IAC3B,MAAM16F,EAAO,EAAA86F,cACPrtD,EAAUsvD,EAAe96F,IAAIy4F,GACnC,IAAKjtD,EACH,MAAM,IAAIjuC,MAAM,sBAElB,MAAMy9F,EAAgBxvD,EAAQ,GAGxBixD,EAAkB1+F,EAAKklB,iBAAiB+3E,GAC9C,GAAwB,IAApByB,EACF,MAAM,IAAIl/F,MAAM,kCAElBQ,EAAKkkB,SAASw6E,IAGH,EAAA9D,2BAA8Br5D,IACzC,MAAMo9D,EAA6B,GACnC,IAAK,MAAMx8C,KAAU5gB,EAAS,CAC5B,MAAM3/B,EAAOugD,EAAO,IACfrgD,MAAMC,QAAQH,IAASA,EAAKwC,QAC/Bu6F,EAAQ/+F,KAAKgC,EAAKwC,QAGtB,OAAOu6F,I,mjCC1ZT,mBAIA,YACMC,EAEgC,EAAQ,MAE9C,IAAI5+F,EACA8E,GAAc,EACdC,GAAe,EACfC,GAAU,EAEd,MAiDM65F,EAAkB,CAACC,EAAkBC,IACrCA,EACKD,EAAU,8BAAgC,yBAE1CA,EAAU,qBAAuB,gBAI/B,EAAA1E,sBAA8BljF,GAA+C,OAAD,6BACvF,GAAIpS,EACF,OAAO6B,QAAQ8b,UAEjB,GAAI1d,EACF,MAAM,IAAIvF,MAAM,yDAElB,GAAIwF,EACF,MAAM,IAAIxF,MAAM,sDAGlBuF,GAAe,EAGf,MAAMi6F,EAAU9nF,EAAM42B,YAChBG,EAAa/2B,EAAM+2B,WACnBF,EAAO72B,EAAM62B,KAEbgxD,EAAa9wD,EAAa,GA3EH,MAC7B,IAEE,MAAiC,oBAAtB9pC,oBAMmB,oBAAnB86F,iBACT,IAAIA,gBAAiBC,MAAMjuF,YAAY,IAAI9M,kBAAkB,IAKxD6G,YAAYm0F,SAAS,IAAIr+F,WAAW,CACzC,EAAG,GAAI,IAAK,IAAK,EAAG,EAAI,EAAI,EAAG,EAAG,EAAG,EAAI,GAAI,EAAK,EAAI,EAAG,EAAG,EAAI,EAAG,EACnE,EAAG,EAAI,EAAK,EAAK,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAI,IAAK,GAAI,EAAG,EAAG,GAAI,OAElE,MAAOmE,GACP,OAAO,IAuD4Bm6F,GAC/BN,EAAU/wD,GApDM,MACtB,IAeE,OAAO/iC,YAAYm0F,SAAS,IAAIr+F,WAAW,CACzC,EAAK,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAK,GAAK,EAAG,GAAI,EACvF,IAAK,GAAI,IAAK,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAI,IAAK,IAAK,EAAG,GAAI,MAEzF,MAAOmE,GACP,OAAO,IA+Beo6F,GAElBC,EAAgD,iBAApBpoF,EAAMgjF,UAAyBhjF,EAAMgjF,eAAY36F,EAC7EggG,EAAeV,GAAgB,EAAOE,GACtCS,EAAuBX,EAAgBC,EAASC,GAChDU,EAA8C,iBAApBvoF,EAAMgjF,UAAyBhjF,EAAMgjF,UAAUsF,QAAwBjgG,EAEvG,IAAImgG,GAAY,EAEhB,MAAMC,EAA8B,GAgEpC,GA7DIX,EAAU,GACZW,EAAM//F,KAAK,IAAI+G,SAAS8b,IACtB1E,YAAW,KACT2hF,GAAY,EACZj9E,MACCu8E,OAKPW,EAAM//F,KAAK,IAAI+G,SAAQ,CAAC8b,EAASmH,KAC/B,MAAMrrB,EAAUwgG,EAAaH,EAAyB,UAChDpxB,EAAiC,CACrCxlE,WAAY,CAAC43F,EAAkBC,KAC7B,GAAuCd,GAAca,EAASle,SAAS,eACnD,oBAAToe,KACT,OAAOC,IAAIC,gBAAgB,IAAIF,KAC3B,CAGE,EAAQ,OAEV,CAACn+F,KAAM,qBAGb,GAAIi+F,IAAaL,EAAc,CAC7B,MAAMpG,EAAiBmG,UAAsBO,EAC7C,OAAOJ,UAAoBtG,EAASqG,EAGtC,OAAOK,EAAkBD,IAI7B,GAAuCb,EACrC,GAAoB,oBAATe,KACTtyB,EAAOt6D,oBAAsB+sF,EAAK96F,K,IAAgB,4BAC7C,CACL,MAAM+6F,EAAmB,yDAAyD3hG,EAAQsd,kBAC1F2xD,EAAOt6D,oBAAsB,IAAI4sF,KAAK,CAACI,GAAmB,CAACv+F,KAAM,oBAIrEpD,EAAQivE,GAAQnrD,MAEZ5jB,IACEsG,GAAe,EACfD,GAAc,EACd9E,EAAOvB,EACPgkB,OAGD09E,IACCp7F,GAAe,EACfC,GAAU,EACV4kB,EAAOu2E,gBAITx5F,QAAQy5F,KAAKT,GAEfD,EACF,MAAM,IAAIlgG,MAAM,2DAA2Dw/F,UAIlE,EAAAlE,YAAc,KACzB,GAAIh2F,GAAe9E,EACjB,OAAOA,EAGT,MAAM,IAAIR,MAAM,wCAGL,EAAAyyC,QAAU,K,OACjBntC,GAAgBC,GAAiBC,IACnCD,GAAe,EAEwB,QAAtC,EAAA/E,EAA+BmpB,eAAO,SAAEk3E,sBACzCrgG,OAAOT,EAEPwF,GAAe,EACfD,GAAc,EACdE,GAAU,K,mEC1LC,SAASs7F,IACtB,OAAO,IAAO,impEAA8xrE,cAAU/gG,OAAWA,K,qBCCn0rEd,EAAOD,QAAU,SAAU4/E,EAASmiB,EAAmBC,EAAeC,GACpE,IAAIC,EAAc9hG,MAAQ0I,OAE1B,IACE,IACE,IAAIq5F,EAEJ,IAEEA,EAAO,IAAID,EAAYZ,KAAK,CAAC1hB,IAC7B,MAAOn5E,IAGP07F,EAAO,IADWD,EAAYE,aAAeF,EAAYG,mBAAqBH,EAAYI,gBAAkBJ,EAAYK,gBAEnHC,OAAO5iB,GACZuiB,EAAOA,EAAKM,UAGd,IAAIlB,EAAMW,EAAYX,KAAOW,EAAYQ,UACrCC,EAAYpB,EAAIC,gBAAgBW,GAChCtxF,EAAS,IAAIqxF,EAAYH,GAAmBY,EAAWX,GAE3D,OADAT,EAAIqB,gBAAgBD,GACb9xF,EACP,MAAOpK,GACP,OAAO,IAAIy7F,EAAYH,GAAmB,+BAA+B75C,OAAO26C,mBAAmBjjB,IAAWoiB,IAEhH,MAAOv7F,GACP,IAAKw7F,EACH,MAAMjhG,MAAM,kCAGd,OAAO,IAAIkhG,EAAYH,GAAmBE,EAAKD,M,oICnC/Cc,yBAA2B,GAG/B,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqBjiG,IAAjBkiG,EACH,OAAOA,EAAajjG,QAGrB,IAAIC,EAAS6iG,yBAAyBE,GAAY,CAGjDhjG,QAAS,IAOV,OAHAkjG,oBAAoBF,GAAU19F,KAAKrF,EAAOD,QAASC,EAAQA,EAAOD,QAAS+iG,qBAGpE9iG,EAAOD,QCpBf+iG,oBAAoBv7F,EAAKvH,IACxB,IAAIkjG,EAASljG,GAAUA,EAAOg5B,WAC7B,IAAOh5B,EAAiB,QACxB,IAAM,EAEP,OADA8iG,oBAAoBv6F,EAAE26F,EAAQ,CAAEv7F,EAAGu7F,IAC5BA,GCLRJ,oBAAoBv6F,EAAI,CAACxI,EAASojG,KACjC,IAAI,IAAIh+F,KAAOg+F,EACXL,oBAAoBh7F,EAAEq7F,EAAYh+F,KAAS29F,oBAAoBh7F,EAAE/H,EAASoF,IAC5EP,OAAOw1B,eAAer6B,EAASoF,EAAK,CAAEi+F,YAAY,EAAM5/F,IAAK2/F,EAAWh+F,MCJ3E29F,oBAAoBn6F,EAAI,WACvB,GAA0B,iBAAf06F,WAAyB,OAAOA,WAC3C,IACC,OAAO/hG,MAAQ,IAAIgiG,SAAS,cAAb,GACd,MAAO98F,GACR,GAAsB,iBAAXqC,OAAqB,OAAOA,QALjB,GCAxBi6F,oBAAoBh7F,EAAI,CAACmtB,EAAKyX,IAAU9nC,OAAOsnB,UAAU9mB,eAAeC,KAAK4vB,EAAKyX,GCClFo2D,oBAAoBr7F,EAAK1H,IACH,oBAAXwjG,QAA0BA,OAAOC,aAC1C5+F,OAAOw1B,eAAer6B,EAASwjG,OAAOC,YAAa,CAAE7hG,MAAO,WAE7DiD,OAAOw1B,eAAer6B,EAAS,aAAc,CAAE4B,OAAO,KCFvD,IAAI8hG,oBAAsBX,oBAAoB,M","file":"ort.es6.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nconst backends = {};\r\nconst backendsSortedByPriority = [];\r\n/**\r\n * Register a backend.\r\n *\r\n * @param name - the name as a key to lookup as an execution provider.\r\n * @param backend - the backend object.\r\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\r\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\r\n *\r\n * @internal\r\n */\r\nexport const registerBackend = (name, backend, priority) => {\r\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\r\n        const currentBackend = backends[name];\r\n        if (currentBackend === undefined) {\r\n            backends[name] = { backend, priority };\r\n        }\r\n        else if (currentBackend.backend === backend) {\r\n            return;\r\n        }\r\n        else {\r\n            throw new Error(`backend \"${name}\" is already registered`);\r\n        }\r\n        if (priority >= 0) {\r\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\r\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\r\n                    backendsSortedByPriority.splice(i, 0, name);\r\n                    return;\r\n                }\r\n            }\r\n            backendsSortedByPriority.push(name);\r\n        }\r\n        return;\r\n    }\r\n    throw new TypeError('not a valid backend');\r\n};\r\n/**\r\n * Resolve backend by specified hints.\r\n *\r\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\r\n * @returns a promise that resolves to the backend.\r\n *\r\n * @internal\r\n */\r\nexport const resolveBackend = async (backendHints) => {\r\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\r\n    const errors = [];\r\n    for (const backendName of backendNames) {\r\n        const backendInfo = backends[backendName];\r\n        if (backendInfo) {\r\n            if (backendInfo.initialized) {\r\n                return backendInfo.backend;\r\n            }\r\n            else if (backendInfo.initializing) {\r\n                throw new Error(`backend \"${backendName}\" is being initialized; cannot initialize multiple times.`);\r\n            }\r\n            else if (backendInfo.aborted) {\r\n                continue; // current backend is unavailable; try next\r\n            }\r\n            try {\r\n                backendInfo.initializing = true;\r\n                await backendInfo.backend.init();\r\n                backendInfo.initialized = true;\r\n                return backendInfo.backend;\r\n            }\r\n            catch (e) {\r\n                errors.push({ name: backendName, err: e });\r\n                backendInfo.aborted = true;\r\n            }\r\n            finally {\r\n                backendInfo.initializing = false;\r\n            }\r\n        }\r\n    }\r\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\r\n};\r\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { EnvImpl } from './env-impl';\r\n/**\r\n * Represent a set of flags as a global singleton.\r\n */\r\nexport const env = new EnvImpl();\r\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport class EnvImpl {\r\n    constructor() {\r\n        this.wasm = {};\r\n        this.webgl = {};\r\n        this.logLevelInternal = 'warning';\r\n    }\r\n    // TODO standadize the getter and setter convention in env for other fields.\r\n    set logLevel(value) {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\r\n            throw new Error(`Unsupported logging level: ${value}`);\r\n        }\r\n        this.logLevelInternal = value;\r\n    }\r\n    get logLevel() {\r\n        return this.logLevelInternal;\r\n    }\r\n}\r\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\r\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\r\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\r\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\r\n    ['float32', Float32Array],\r\n    ['uint8', Uint8Array],\r\n    ['int8', Int8Array],\r\n    ['uint16', Uint16Array],\r\n    ['int16', Int16Array],\r\n    ['int32', Int32Array],\r\n    ['bool', Uint8Array],\r\n    ['float64', Float64Array],\r\n    ['uint32', Uint32Array],\r\n]);\r\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\r\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\r\n    [Float32Array, 'float32'],\r\n    [Uint8Array, 'uint8'],\r\n    [Int8Array, 'int8'],\r\n    [Uint16Array, 'uint16'],\r\n    [Int16Array, 'int16'],\r\n    [Int32Array, 'int32'],\r\n    [Float64Array, 'float64'],\r\n    [Uint32Array, 'uint32'],\r\n]);\r\nif (isBigInt64ArrayAvailable) {\r\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\r\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\r\n}\r\nif (isBigUint64ArrayAvailable) {\r\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\r\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\r\n}\r\n/**\r\n * calculate size from dims.\r\n *\r\n * @param dims the dims array. May be an illegal input.\r\n */\r\nconst calculateSize = (dims) => {\r\n    let size = 1;\r\n    for (let i = 0; i < dims.length; i++) {\r\n        const dim = dims[i];\r\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\r\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\r\n        }\r\n        if (dim < 0) {\r\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\r\n        }\r\n        size *= dim;\r\n    }\r\n    return size;\r\n};\r\nexport class Tensor {\r\n    constructor(arg0, arg1, arg2) {\r\n        let type;\r\n        let data;\r\n        let dims;\r\n        // check whether arg0 is type or data\r\n        if (typeof arg0 === 'string') {\r\n            //\r\n            // Override: constructor(type, data, ...)\r\n            //\r\n            type = arg0;\r\n            dims = arg2;\r\n            if (arg0 === 'string') {\r\n                // string tensor\r\n                if (!Array.isArray(arg1)) {\r\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\r\n                }\r\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\r\n                // error will be populated at inference\r\n                data = arg1;\r\n            }\r\n            else {\r\n                // numeric tensor\r\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\r\n                if (typedArrayConstructor === undefined) {\r\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\r\n                }\r\n                if (Array.isArray(arg1)) {\r\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\r\n                    // incorrect results.\r\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    data = typedArrayConstructor.from(arg1);\r\n                }\r\n                else if (arg1 instanceof typedArrayConstructor) {\r\n                    data = arg1;\r\n                }\r\n                else {\r\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //\r\n            // Override: constructor(data, ...)\r\n            //\r\n            dims = arg1;\r\n            if (Array.isArray(arg0)) {\r\n                // only boolean[] and string[] is supported\r\n                if (arg0.length === 0) {\r\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\r\n                }\r\n                const firstElementType = typeof arg0[0];\r\n                if (firstElementType === 'string') {\r\n                    type = 'string';\r\n                    data = arg0;\r\n                }\r\n                else if (firstElementType === 'boolean') {\r\n                    type = 'bool';\r\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\r\n                    // wrong type. We use 'as any' to make it happy.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    data = Uint8Array.from(arg0);\r\n                }\r\n                else {\r\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\r\n                }\r\n            }\r\n            else {\r\n                // get tensor type from TypedArray\r\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\r\n                if (mappedType === undefined) {\r\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\r\n                }\r\n                type = mappedType;\r\n                data = arg0;\r\n            }\r\n        }\r\n        // type and data is processed, now processing dims\r\n        if (dims === undefined) {\r\n            // assume 1-D tensor if dims omitted\r\n            dims = [data.length];\r\n        }\r\n        else if (!Array.isArray(dims)) {\r\n            throw new TypeError('A tensor\\'s dims must be a number array');\r\n        }\r\n        // perform check\r\n        const size = calculateSize(dims);\r\n        if (size !== data.length) {\r\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\r\n        }\r\n        this.dims = dims;\r\n        this.type = type;\r\n        this.data = data;\r\n        this.size = size;\r\n    }\r\n    //#endregion\r\n    //#region tensor utilities\r\n    reshape(dims) {\r\n        return new Tensor(this.type, this.data, dims);\r\n    }\r\n}\r\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Tensor as TensorImpl } from './tensor-impl';\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const Tensor = TensorImpl;\r\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { resolveBackend } from './backend-impl';\r\nimport { Tensor } from './tensor';\r\nexport class InferenceSession {\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    async run(feeds, arg1, arg2) {\r\n        const fetches = {};\r\n        let options = {};\r\n        // check inputs\r\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\r\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\r\n        }\r\n        let isFetchesEmpty = true;\r\n        // determine which override is being used\r\n        if (typeof arg1 === 'object') {\r\n            if (arg1 === null) {\r\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\r\n            }\r\n            if (arg1 instanceof Tensor) {\r\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\r\n            }\r\n            if (Array.isArray(arg1)) {\r\n                if (arg1.length === 0) {\r\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\r\n                }\r\n                isFetchesEmpty = false;\r\n                // output names\r\n                for (const name of arg1) {\r\n                    if (typeof name !== 'string') {\r\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\r\n                    }\r\n                    if (this.outputNames.indexOf(name) === -1) {\r\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\r\n                    }\r\n                    fetches[name] = null;\r\n                }\r\n                if (typeof arg2 === 'object' && arg2 !== null) {\r\n                    options = arg2;\r\n                }\r\n                else if (typeof arg2 !== 'undefined') {\r\n                    throw new TypeError('\\'options\\' must be an object.');\r\n                }\r\n            }\r\n            else {\r\n                // decide whether arg1 is fetches or options\r\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\r\n                let isFetches = false;\r\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\r\n                for (const name of this.outputNames) {\r\n                    if (arg1Keys.indexOf(name) !== -1) {\r\n                        const v = arg1[name];\r\n                        if (v === null || v instanceof Tensor) {\r\n                            isFetches = true;\r\n                            isFetchesEmpty = false;\r\n                            fetches[name] = v;\r\n                        }\r\n                    }\r\n                }\r\n                if (isFetches) {\r\n                    if (typeof arg2 === 'object' && arg2 !== null) {\r\n                        options = arg2;\r\n                    }\r\n                    else if (typeof arg2 !== 'undefined') {\r\n                        throw new TypeError('\\'options\\' must be an object.');\r\n                    }\r\n                }\r\n                else {\r\n                    options = arg1;\r\n                }\r\n            }\r\n        }\r\n        else if (typeof arg1 !== 'undefined') {\r\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\r\n        }\r\n        // check if all inputs are in feed\r\n        for (const name of this.inputNames) {\r\n            if (typeof feeds[name] === 'undefined') {\r\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\r\n            }\r\n        }\r\n        // if no fetches is specified, we use the full output names list\r\n        if (isFetchesEmpty) {\r\n            for (const name of this.outputNames) {\r\n                fetches[name] = null;\r\n            }\r\n        }\r\n        // feeds, fetches and options are prepared\r\n        const results = await this.handler.run(feeds, fetches, options);\r\n        const returnValue = {};\r\n        for (const key in results) {\r\n            if (Object.hasOwnProperty.call(results, key)) {\r\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\r\n            }\r\n        }\r\n        return returnValue;\r\n    }\r\n    static async create(arg0, arg1, arg2, arg3) {\r\n        // either load from a file or buffer\r\n        let filePathOrUint8Array;\r\n        let options = {};\r\n        if (typeof arg0 === 'string') {\r\n            filePathOrUint8Array = arg0;\r\n            if (typeof arg1 === 'object' && arg1 !== null) {\r\n                options = arg1;\r\n            }\r\n            else if (typeof arg1 !== 'undefined') {\r\n                throw new TypeError('\\'options\\' must be an object.');\r\n            }\r\n        }\r\n        else if (arg0 instanceof Uint8Array) {\r\n            filePathOrUint8Array = arg0;\r\n            if (typeof arg1 === 'object' && arg1 !== null) {\r\n                options = arg1;\r\n            }\r\n            else if (typeof arg1 !== 'undefined') {\r\n                throw new TypeError('\\'options\\' must be an object.');\r\n            }\r\n        }\r\n        else if (arg0 instanceof ArrayBuffer ||\r\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\r\n            const buffer = arg0;\r\n            let byteOffset = 0;\r\n            let byteLength = arg0.byteLength;\r\n            if (typeof arg1 === 'object' && arg1 !== null) {\r\n                options = arg1;\r\n            }\r\n            else if (typeof arg1 === 'number') {\r\n                byteOffset = arg1;\r\n                if (!Number.isSafeInteger(byteOffset)) {\r\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\r\n                }\r\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\r\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\r\n                }\r\n                byteLength = arg0.byteLength - byteOffset;\r\n                if (typeof arg2 === 'number') {\r\n                    byteLength = arg2;\r\n                    if (!Number.isSafeInteger(byteLength)) {\r\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\r\n                    }\r\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\r\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\r\n                    }\r\n                    if (typeof arg3 === 'object' && arg3 !== null) {\r\n                        options = arg3;\r\n                    }\r\n                    else if (typeof arg3 !== 'undefined') {\r\n                        throw new TypeError('\\'options\\' must be an object.');\r\n                    }\r\n                }\r\n                else if (typeof arg2 !== 'undefined') {\r\n                    throw new TypeError('\\'byteLength\\' must be a number.');\r\n                }\r\n            }\r\n            else if (typeof arg1 !== 'undefined') {\r\n                throw new TypeError('\\'options\\' must be an object.');\r\n            }\r\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\r\n        }\r\n        else {\r\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\r\n        }\r\n        // get backend hints\r\n        const eps = options.executionProviders || [];\r\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\r\n        const backend = await resolveBackend(backendHints);\r\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\r\n        return new InferenceSession(handler);\r\n    }\r\n    startProfiling() {\r\n        this.handler.startProfiling();\r\n    }\r\n    endProfiling() {\r\n        this.handler.endProfiling();\r\n    }\r\n    get inputNames() {\r\n        return this.handler.inputNames;\r\n    }\r\n    get outputNames() {\r\n        return this.handler.outputNames;\r\n    }\r\n}\r\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const InferenceSession = InferenceSessionImpl;\r\n//# sourceMappingURL=inference-session.js.map","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function t(){return S.buffer!=Y&&Q(S.buffer),P}function n(){return S.buffer!=Y&&Q(S.buffer),W}function r(){return S.buffer!=Y&&Q(S.buffer),q}function a(){return S.buffer!=Y&&Q(S.buffer),U}function i(){return S.buffer!=Y&&Q(S.buffer),B}var o,u,s;e=e||{},o||(o=void 0!==e?e:{}),o.ready=new Promise((function(e,t){u=e,s=t}));var c,f={};for(c in o)o.hasOwnProperty(c)&&(f[c]=o[c]);var l=\"./this.program\";function p(e,t){throw t}var d,m,b,h,g,_=\"object\"==typeof window,y=\"function\"==typeof importScripts,w=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=o.ENVIRONMENT_IS_PTHREAD||!1,A=\"\";function T(e){return o.locateFile?o.locateFile(e,A):A+e}if(w){var O;A=y?require(\"path\").dirname(A)+\"/\":__dirname+\"/\",d=function(e,t){return h||(h=require(\"fs\")),g||(g=require(\"path\")),e=g.normalize(e),h.readFileSync(e,t?null:\"utf8\")},b=function(e){return(e=d(e,!0)).buffer||(e=new Uint8Array(e)),F(e.buffer),e},m=function(e,t,n){h||(h=require(\"fs\")),g||(g=require(\"path\")),e=g.normalize(e),h.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(l=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof Gt))throw e})),process.on(\"unhandledRejection\",ce),p=function(e,t){if(re())throw process.exitCode=e,t;process.exit(e)},o.inspect=function(){return\"[Emscripten Module object]\"};try{O=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=O.Worker}else(_||y)&&(y?A=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\"blob:\")?A.substr(0,A.lastIndexOf(\"/\")+1):\"\",w?(d=function(e,t){return h||(h=require(\"fs\")),g||(g=require(\"path\")),e=g.normalize(e),h.readFileSync(e,t?null:\"utf8\")},b=function(e){return(e=d(e,!0)).buffer||(e=new Uint8Array(e)),F(e.buffer),e},m=function(e,t,n){h||(h=require(\"fs\")),g||(g=require(\"path\")),e=g.normalize(e),h.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))}):(d=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},y&&(b=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),m=function(e,t,n){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var k,E,x=o.print||console.log.bind(console),M=o.printErr||console.warn.bind(console);for(c in f)f.hasOwnProperty(c)&&(o[c]=f[c]);f=null,o.thisProgram&&(l=o.thisProgram),o.quit&&(p=o.quit),o.wasmBinary&&(E=o.wasmBinary);var D=o.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&ce(\"no native wasm support detected\");var S,C,R,I=!1;function F(e,t){e||ce(\"Assertion failed: \"+t)}function j(e){var t=new TextDecoder(e);this.decode=function(e){return e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),t.decode.call(t,e)}}var Y,P,W,q,U,B,G=\"undefined\"!=typeof TextDecoder?new j(\"utf8\"):void 0;function H(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&G)return G.decode(e.subarray(t,n));for(r=\"\";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return e?H(n(),e,t):\"\"}function L(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++]=o}else{if(2047>=o){if(n+1>=r)break;t[n++]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++]=224|o>>12}else{if(n+3>=r)break;t[n++]=240|o>>18,t[n++]=128|o>>12&63}t[n++]=128|o>>6&63}t[n++]=128|63&o}}return t[n]=0,n-a}function N(e,t,r){return L(e,n(),t,r)}function V(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function X(e){var n=V(e)+1,r=ht(n);return r&&L(e,t(),r,n),r}function Q(e){Y=e,o.HEAP8=P=new Int8Array(e),o.HEAP16=new Int16Array(e),o.HEAP32=q=new Int32Array(e),o.HEAPU8=W=new Uint8Array(e),o.HEAPU16=new Uint16Array(e),o.HEAPU32=U=new Uint32Array(e),o.HEAPF32=new Float32Array(e),o.HEAPF64=B=new Float64Array(e)}\"undefined\"!=typeof TextDecoder&&new j(\"utf-16le\"),v&&(Y=o.buffer);var J=o.INITIAL_MEMORY||16777216;if(v)S=o.wasmMemory,Y=o.buffer;else if(o.wasmMemory)S=o.wasmMemory;else if(!((S=new WebAssembly.Memory({initial:J/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw M(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),w&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");S&&(Y=S.buffer),J=Y.byteLength,Q(Y);var Z,$=[],K=[],ee=[],te=[],ne=0;function re(){return D||0<ne}function ae(){var e=o.preRun.shift();$.unshift(e)}var ie,oe=0,ue=null,se=null;function ce(e){throw o.onAbort&&o.onAbort(e),F(!v),M(e),I=!0,R=1,e=new WebAssembly.RuntimeError(\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\"),s(e),e}function fe(){return ie.startsWith(\"data:application/octet-stream;base64,\")}function le(){var e=ie;try{if(e==ie&&E)return new Uint8Array(E);if(b)return b(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ce(e)}}o.preloadedImages={},o.preloadedAudios={},ie=\"ort-wasm-threaded.wasm\",fe()||(ie=T(ie));var pe={689380:function(){throw\"Canceled!\"}};function de(e){for(;0<e.length;){var t=e.shift();if(\"function\"==typeof t)t(o);else{var n=t.Nb;\"number\"==typeof n?void 0===t.ib?Z.get(n)():Z.get(n)(t.ib):n(void 0===t.ib?null:t.ib)}}}function me(e,n){if(0>=e||e>t().length||1&e||0>n)return-28;if(0==n)return 0;2147483647<=n&&(n=1/0);var a=Atomics.load(r(),Bt>>2),i=0;if(a==e&&Atomics.compareExchange(r(),Bt>>2,a,0)==a&&(i=1,0>=--n))return 1;if(0<=(e=Atomics.notify(r(),e>>2,n)))return e+i;throw\"Atomics.notify returned an unexpected value \"+e}function be(e){if(v)throw\"Internal Error! cleanupThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cleanupThread!\";var t=ge.cb[e];t&&(r()[e+12>>2]=0,ge.sb(t.worker))}o._emscripten_futex_wake=me;var he,ge={gb:[],fb:[],zb:[],xc:function(){},Rb:function(){for(var e=ht(228),t=0;57>t;++t)a()[e/4+t]=0;r()[e+12>>2]=e,t=e+152,r()[t>>2]=t;var n=ht(512);for(t=0;128>t;++t)a()[n/4+t]=0;Atomics.store(a(),e+100>>2,n),Atomics.store(a(),e+40>>2,e),Dt(e,!y,1),vt(e)},Sb:function(){ge.receiveObjectTransfer=ge.Xb,ge.threadInit=ge.hc,ge.threadCancel=ge.fc,ge.threadExit=ge.Hb,ge.setExitStatus=ge.Zb},cb:{},yb:[],Eb:function(){for(;0<ge.yb.length;)ge.yb.pop()();Ct()},Fb:function(e,t){Atomics.store(a(),e+56>>2,1),Atomics.store(a(),e+60>>2,0),ge.Eb(),Atomics.store(a(),e+4>>2,t),Atomics.store(a(),e+0>>2,1),me(e+0,2147483647),Dt(0,0,0)},Zb:function(e){R=e},Hb:function(e){var t=yt();t&&(ge.Fb(t,e),v&&postMessage({cmd:\"exit\"}))},fc:function(){ge.Fb(yt(),-1),postMessage({cmd:\"cancelDone\"})},Gb:function(){for(var e in ge.cb){var t=ge.cb[e];t&&t.worker&&ge.sb(t.worker)}for(ge.cb={},e=0;e<ge.gb.length;++e){var n=ge.gb[e];n.terminate()}for(ge.gb=[],e=0;e<ge.fb.length;++e)t=(n=ge.fb[e]).bb,ge.xb(t),n.terminate();ge.fb=[]},xb:function(e){if(e){if(e.eb){var t=r()[e.eb+100>>2];r()[e.eb+100>>2]=0,_t(t),_t(e.eb)}e.eb=0,e.wb&&e.hb&&_t(e.hb),e.hb=0,e.worker&&(e.worker.bb=null)}},sb:function(e){ge.Yb((function(){delete ge.cb[e.bb.eb],ge.gb.push(e),ge.fb.splice(ge.fb.indexOf(e),1),ge.xb(e.bb),e.bb=void 0}))},Yb:function(e){r()[Ut>>2]=0;try{e()}finally{r()[Ut>>2]=1}},Xb:function(){},hc:function(){for(var e in ge.zb)ge.zb[e]()},Ub:function(e,t){e.onmessage=function(n){var i=n.data,o=i.cmd;if(e.bb&&(ge.Lb=e.bb.eb),i.targetThread&&i.targetThread!=yt()){var u=ge.cb[i.Dc];u?u.worker.postMessage(n.data,i.transferList):M('Internal error! Worker sent a message \"'+o+'\" to target pthread '+i.targetThread+\", but that thread no longer exists!\")}else if(\"processQueuedMainThreadWork\"===o)Ot();else if(\"spawnThread\"===o)ve(n.data);else if(\"cleanupThread\"===o)be(i.thread);else if(\"killThread\"===o){if(n=i.thread,v)throw\"Internal Error! killThread() can only ever be called from main application thread!\";if(!n)throw\"Internal Error! Null pthread_ptr in killThread!\";r()[n+12>>2]=0,i=ge.cb[n],delete ge.cb[n],i.worker.terminate(),ge.xb(i),ge.fb.splice(ge.fb.indexOf(i.worker),1),i.worker.bb=void 0}else if(\"cancelThread\"===o){if(n=i.thread,v)throw\"Internal Error! cancelThread() can only ever be called from main application thread!\";if(!n)throw\"Internal Error! Null pthread_ptr in cancelThread!\";ge.cb[n].worker.postMessage({cmd:\"cancel\"})}else if(\"loaded\"===o)e.loaded=!0,t&&t(e),e.mb&&(e.mb(),delete e.mb);else if(\"print\"===o)x(\"Thread \"+i.threadId+\": \"+i.text);else if(\"printErr\"===o)M(\"Thread \"+i.threadId+\": \"+i.text);else if(\"alert\"===o)alert(\"Thread \"+i.threadId+\": \"+i.text);else if(\"exit\"===o)e.bb&&Atomics.load(a(),e.bb.eb+64>>2)&&ge.sb(e);else if(\"exitProcess\"===o)try{zt(i.returnCode)}catch(e){if(e instanceof Gt)return;throw e}else\"cancelDone\"===o?ge.sb(e):\"objectTransfer\"!==o&&(\"setimmediate\"===n.data.target?e.postMessage(n.data):M(\"worker sent an unknown command \"+o));ge.Lb=void 0},e.onerror=function(e){M(\"pthread sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message)},w&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})),e.on(\"exit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:o.mainScriptUrlOrBlob||_scriptDir,wasmMemory:S,wasmModule:C})},Ib:function(){var e=T(\"ort-wasm-threaded.worker.js\");ge.gb.push(new Worker(e))},Ob:function(){return 0==ge.gb.length&&(ge.Ib(),ge.Ub(ge.gb[0])),ge.gb.pop()},nc:function(e){for(e=performance.now()+e;performance.now()<e;);}};function _e(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return r()[gt()>>2]=28,-1;e=he()}return r()[t>>2]=e/1e3|0,r()[t+4>>2]=e%1e3*1e6|0,0}function ye(e,t){if(v)return ze(1,1,e,t);ee.unshift({Nb:e,ib:t})}function we(e){this.lb=e-16,this.dc=function(e){r()[this.lb+4>>2]=e},this.ac=function(e){r()[this.lb+8>>2]=e},this.bc=function(){r()[this.lb>>2]=0},this.$b=function(){t()[this.lb+12>>0]=0},this.cc=function(){t()[this.lb+13>>0]=0},this.Pb=function(e,t){this.dc(e),this.ac(t),this.bc(),this.$b(),this.cc()}}function ve(e){if(v)throw\"Internal Error! spawnThread() can only ever be called from main application thread!\";var t=ge.Ob();if(!t)return 6;if(void 0!==t.bb)throw\"Internal error!\";if(!e.rb)throw\"Internal error, no pthread ptr!\";ge.fb.push(t);for(var n=ht(512),i=0;128>i;++i)r()[n+4*i>>2]=0;var o=e.hb+e.jb,u=(i=ge.cb[e.rb]={worker:t,hb:e.hb,jb:e.jb,wb:e.wb,eb:e.rb}).eb>>2;Atomics.store(a(),u+16,e.detached),Atomics.store(a(),u+25,n),Atomics.store(a(),u+10,i.eb),Atomics.store(a(),u+20,e.jb),Atomics.store(a(),u+19,o),Atomics.store(a(),u+26,e.jb),Atomics.store(a(),u+28,o),Atomics.store(a(),u+29,e.detached),n=St()+40,Atomics.store(a(),u+43,n),t.bb=i;var s={cmd:\"run\",start_routine:e.ec,arg:e.ib,threadInfoStruct:e.rb,stackBase:e.hb,stackSize:e.jb};return t.mb=function(){s.time=performance.now(),t.postMessage(s,e.mc)},t.loaded&&(t.mb(),delete t.mb),0}function Ae(e,n,a){if(0>=e||e>t().length||1&e)return-28;if(_){if(Atomics.load(r(),e>>2)!=n)return-6;var i=performance.now();for(a=i+a,Atomics.exchange(r(),Bt>>2,e);;){if((i=performance.now())>a)return Atomics.exchange(r(),Bt>>2,0),-73;if(0==(i=Atomics.exchange(r(),Bt>>2,0)))break;if(Ot(),Atomics.load(r(),e>>2)!=n)return-6;Atomics.exchange(r(),Bt>>2,e)}return 0}if(\"timed-out\"===(e=Atomics.wait(r(),e>>2,n,a)))return-73;if(\"not-equal\"===e)return-6;if(\"ok\"===e)return 0;throw\"Atomics.wait returned an unexpected value \"+e}function Te(){w||y||(k||(k={}),k[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]||(k[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]=1,M(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")))}o.establishStackSpace=function(e,t){Wt(e,t),Yt(e)},o.invokeEntryPoint=function(e,t){return Z.get(e)(t)},he=w?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:v?function(){return performance.now()-o.__performance_now_clock_drift}:function(){return performance.now()};var Oe={},ke=[null,[],[]];function Ee(e,t){var n=ke[e];0===t||10===t?((1===e?x:M)(H(n,0)),n.length=0):n.push(t)}var xe={};function Me(e,t){return v?ze(2,1,e,t):(e=z(e),xe.rc(e,t))}function De(e,t,n){return v?ze(3,1,e,t,n):0}function Se(e,t){if(v)return ze(4,1,e,t)}function Ce(e,t,n){if(v)return ze(5,1,e,t,n)}function Re(e,t,n){return v?ze(6,1,e,t,n):0}function Ie(e,t){if(v)return ze(7,1,e,t)}function Fe(e,t){return v?ze(8,1,e,t):(e=z(e),xe.sc(e,t))}function je(e,t,r,a,i,o){if(v)t=ze(9,1,e,t,r,a,i,o);else if(o<<=12,0!=(16&a)&&0!=e%65536)t=-28;else if(0!=(32&a)){var u=65536*Math.ceil(t/65536);(e=qt(65536,u))?n().fill(0,e,e+u):e=0,e?(Oe[e]={Wb:e,Tb:t,Jb:!0,fd:i,Ac:r,flags:a,offset:o},t=e):t=-48}else t=-52;return t}function Ye(e,t){if(v)e=ze(10,1,e,t);else{var n=Oe[e];0!==t&&n?(t===n.Tb&&(Oe[e]=null,n.Jb&&_t(n.Wb)),e=0):e=-28}return e}function Pe(e,t,n){if(v)return ze(11,1,e,t,n)}function We(e,t,n){return v?ze(12,1,e,t,n):(e=z(e),xe.tc(e,t,n))}function qe(e){if(v)return ze(13,1,e)}function Ue(e,t){if(v)return ze(14,1,e,t)}function Be(e){if(v)return ze(15,1,e)}function Ge(){if(v)return ze(16,1);ce()}var He=[];function ze(e,t){for(var n=arguments.length-2,r=jt(),a=Pt(8*n),o=a>>3,u=0;u<n;u++){var s=arguments[2+u];i()[o+u]=s}return n=kt(e,n,a,t),Yt(r),n}var Le=[],Ne=[0,\"undefined\"!=typeof document?document:0,\"undefined\"!=typeof window?window:0];function Ve(e){return e=2<e?z(e):e,Ne[e]||(\"undefined\"!=typeof document?document.querySelector(e):void 0)}function Xe(e,t,n){var a=Ve(e);if(!a)return-4;if(a.qb&&(r()[a.qb>>2]=t,r()[a.qb+4>>2]=n),!a.Db&&a.pc){if(a.qb){a=r()[a.qb+8>>2],e=e?z(e):\"\";var i=jt(),o=Pt(12),u=0;if(e){u=V(e)+1;var s=ht(u);N(e,s,u),u=s}return r()[o>>2]=u,r()[o+4>>2]=t,r()[o+8>>2]=n,Et(0,a,657457152,0,u,o),Yt(i),1}return-4}return a.Db&&(a=a.Db),e=!1,a.pb&&a.pb.ob&&(e=0===(e=a.pb.ob.getParameter(2978))[0]&&0===e[1]&&e[2]===a.width&&e[3]===a.height),a.width=t,a.height=n,e&&a.pb.ob.viewport(0,0,t,n),0}function Qe(e,t,n){return v?ze(17,1,e,t,n):Xe(e,t,n)}var Je,Ze=[\"default\",\"low-power\",\"high-performance\"],$e={};function Ke(){if(!Je){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:l||\"./this.program\"};for(e in $e)void 0===$e[e]?delete t[e]:t[e]=$e[e];var n=[];for(e in t)n.push(e+\"=\"+t[e]);Je=n}return Je}function et(e,n){if(v)return ze(18,1,e,n);var a=0;return Ke().forEach((function(i,o){var u=n+a;for(o=r()[e+4*o>>2]=u,u=0;u<i.length;++u)t()[o++>>0]=i.charCodeAt(u);t()[o>>0]=0,a+=i.length+1})),0}function tt(e,t){if(v)return ze(19,1,e,t);var n=Ke();r()[e>>2]=n.length;var a=0;return n.forEach((function(e){a+=e.length+1})),r()[t>>2]=a,0}function nt(e){return v?ze(20,1,e):0}function rt(e,n){return v?ze(21,1,e,n):(e=1==e||2==e?2:ce(),t()[n>>0]=e,0)}function at(e,t,n,a){return v?ze(22,1,e,t,n,a):(e=xe.vc(e),t=xe.uc(e,t,n),r()[a>>2]=t,0)}function it(e,t,n,r,a){if(v)return ze(23,1,e,t,n,r,a)}function ot(e,t,a,i){if(v)return ze(24,1,e,t,a,i);for(var o=0,u=0;u<a;u++){for(var s=r()[t+8*u>>2],c=r()[t+(8*u+4)>>2],f=0;f<c;f++)Ee(e,n()[s+f]);o+=c}return r()[i>>2]=o,0}function ut(){function e(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(v)return ze(25,1);if(!ut.Kb){ut.Kb=!0;var t=(new Date).getFullYear(),n=new Date(t,0,1),a=new Date(t,6,1);t=n.getTimezoneOffset();var i=a.getTimezoneOffset(),o=Math.max(t,i);r()[Ft()>>2]=60*o,r()[It()>>2]=Number(t!=i),n=e(n),a=e(a),n=X(n),a=X(a),i<t?(r()[Rt()>>2]=n,r()[Rt()+4>>2]=a):(r()[Rt()>>2]=a,r()[Rt()+4>>2]=n)}}function st(e){return 0==e%4&&(0!=e%100||0==e%400)}function ct(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ft=[31,29,31,30,31,30,31,31,30,31,30,31],lt=[31,28,31,30,31,30,31,31,30,31,30,31];function pt(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(st(e.getFullYear())?ft:lt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function dt(e,n,a,i){function o(e,t,n){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=n[0]+e;return e}function u(e,t){return o(e,t,\"0\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){e=pt(new Date(e.ab+1900,0,1),e.vb);var t=new Date(e.getFullYear()+1,0,4),n=c(new Date(e.getFullYear(),0,4));return t=c(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[i+40>>2];for(var p in i={kc:r()[i>>2],jc:r()[i+4>>2],tb:r()[i+8>>2],nb:r()[i+12>>2],kb:r()[i+16>>2],ab:r()[i+20>>2],ub:r()[i+24>>2],vb:r()[i+28>>2],Ec:r()[i+32>>2],ic:r()[i+36>>2],lc:l?z(l):\"\"},a=z(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),m=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.ub].substring(0,3)},\"%A\":function(e){return d[e.ub]},\"%b\":function(e){return m[e.kb].substring(0,3)},\"%B\":function(e){return m[e.kb]},\"%C\":function(e){return u((e.ab+1900)/100|0,2)},\"%d\":function(e){return u(e.nb,2)},\"%e\":function(e){return o(e.nb,2,\" \")},\"%g\":function(e){return f(e).toString().substring(2)},\"%G\":function(e){return f(e)},\"%H\":function(e){return u(e.tb,2)},\"%I\":function(e){return 0==(e=e.tb)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){return u(e.nb+ct(st(e.ab+1900)?ft:lt,e.kb-1),3)},\"%m\":function(e){return u(e.kb+1,2)},\"%M\":function(e){return u(e.jc,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.tb&&12>e.tb?\"AM\":\"PM\"},\"%S\":function(e){return u(e.kc,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.ub||7},\"%U\":function(e){var t=new Date(e.ab+1900,0,1),n=0===t.getDay()?t:pt(t,7-t.getDay());return 0>s(n,e=new Date(e.ab+1900,e.kb,e.nb))?u(Math.ceil((31-n.getDate()+(ct(st(e.getFullYear())?ft:lt,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\"01\":\"00\"},\"%V\":function(e){var t=new Date(e.ab+1901,0,4),n=c(new Date(e.ab+1900,0,4));t=c(t);var r=pt(new Date(e.ab+1900,0,1),e.vb);return 0>s(r,n)?\"53\":0>=s(t,r)?\"01\":u(Math.ceil((n.getFullYear()<e.ab+1900?e.vb+32-n.getDate():e.vb+1-n.getDate())/7),2)},\"%w\":function(e){return e.ub},\"%W\":function(e){var t=new Date(e.ab,0,1),n=1===t.getDay()?t:pt(t,0===t.getDay()?1:7-t.getDay()+1);return 0>s(n,e=new Date(e.ab+1900,e.kb,e.nb))?u(Math.ceil((31-n.getDate()+(ct(st(e.getFullYear())?ft:lt,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\"01\":\"00\"},\"%y\":function(e){return(e.ab+1900).toString().substring(2)},\"%Y\":function(e){return e.ab+1900},\"%z\":function(e){var t=0<=(e=e.ic);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.lc},\"%%\":function(){return\"%\"}})a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](i)));return p=function(e){var t=Array(V(e)+1);return L(e,t,0,t.length),t}(a),p.length>n?0:(function(e,n){t().set(e,n)}(p,e),p.length-1)}var mt=[null,ye,Me,De,Se,Ce,Re,Ie,Fe,je,Ye,Pe,We,qe,Ue,Be,Ge,Qe,et,tt,nt,rt,at,it,ot,ut],bt={h:function(e,t,n,r){ce(\"Assertion failed: \"+z(e)+\", at: \"+[t?z(t):\"unknown filename\",n,r?z(r):\"unknown function\"])},M:function(e,t){return _e(e,t)},b:function(e){return ht(e+16)+16},d:function(e,t){return ye(e,t)},e:function(e,t){ge.yb.push((function(){Z.get(e)(t)}))},c:function(e,t,n){throw new we(e).Pb(t,n),e},Z:function(e,t,n,i){if(\"undefined\"==typeof SharedArrayBuffer)return M(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;if(!e)return M(\"pthread_create called with a null thread pointer!\"),28;var o=[];if(v&&0===o.length)return Tt(687865856,e,t,n,i);var u=0,s=0;if(t&&-1!=t){var c=r()[t>>2];c+=81920,u=r()[t+8>>2],s=0!==r()[t+12>>2]}else c=2097152;(t=0==u)?u=qt(16,c):F(0<(u-=c));for(var f=ht(228),l=0;57>l;++l)a()[(f>>2)+l]=0;return r()[e>>2]=f,r()[f+12>>2]=f,e=f+152,r()[e>>2]=e,n={hb:u,jb:c,wb:t,detached:s,ec:n,rb:f,ib:i,mc:o},v?(n.oc=\"spawnThread\",postMessage(n,o),0):ve(n)},X:function(e){throw v?ge.Hb(e):(ge.Eb(),zt(e)),\"unwind\"},Y:function(e,t){return function(e,t){if(!e)return M(\"pthread_join attempted on a null thread pointer!\"),71;if(v&&yt()==e)return M(\"PThread \"+e+\" is attempting to join to itself!\"),16;if(!v&&At()==e)return M(\"Main thread \"+e+\" is attempting to join to itself!\"),16;if(r()[e+12>>2]!==e)return M(\"pthread_join attempted on thread \"+e+\", which does not point to a valid thread, or does not exist anymore!\"),71;if(Atomics.load(a(),e+64>>2))return M(\"Attempted to join thread \"+e+\", which was already detached!\"),28;for(Te();;){var n=Atomics.load(a(),e+0>>2);if(1==n)return n=Atomics.load(a(),e+4>>2),t&&(r()[t>>2]=n),Atomics.store(a(),e+64>>2,1),v?postMessage({cmd:\"cleanupThread\",thread:e}):be(e),0;xt(),v||Ot(),Ae(e+0,n,v?100:1)}}(e,t)},L:Me,s:De,S:Se,V:Ce,u:function(){return 42},F:Re,Q:Ie,P:Fe,U:je,T:Ye,q:Pe,K:We,N:qe,v:Ue,O:Be,da:function(e,t){if(e==t)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(v)postMessage({targetThread:e,cmd:\"processThreadQueue\"});else{if(!(e=(e=ge.cb[e])&&e.worker))return;e.postMessage({cmd:\"processThreadQueue\"})}return 1},f:Ge,w:_e,ga:function(e,t){return e-t},A:function(){ce(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(){ce(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},C:function(){ce(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},z:function(){ce(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},ea:function(e,t,a){var o;for(He.length=0,a>>=2;o=n()[t++];)(o=105>o)&&1&a&&a++,He.push(o?i()[a++>>1]:r()[a]),++a;return pe[e].apply(null,He)},G:Te,n:function(){},k:Ae,j:me,W:function(){return 2147483648},i:he,D:function(e,t,r){n().copyWithin(e,t,t+r)},o:function(){return w?require(\"os\").cpus().length:navigator.hardwareConcurrency},aa:function(e,t,n){Le.length=t,n>>=3;for(var r=0;r<t;r++)Le[r]=i()[n+r];return(0>e?pe[-e-1]:mt[e]).apply(null,Le)},E:function(e){var t=n().length;if((e>>>=0)<=t||2147483648<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296),0<(a=Math.max(e,a))%65536&&(a+=65536-a%65536);e:{try{S.grow(Math.min(2147483648,a)-Y.byteLength+65535>>>16),Q(S.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},ba:function(e,t,n){return Ve(e)?Xe(e,t,n):Qe(e,t,n)},x:function(){},$:function(e,t,n){return ne+=1,setTimeout((function(){--ne,function(e){if(!I){try{e()}catch(e){if(e instanceof Gt)return;if(\"unwind\"!==e)throw e&&\"object\"==typeof e&&e.stack&&M(\"exception thrown: \"+[e,e.stack]),e}if(!re())try{v?Mt(R):zt(R)}catch(e){if(!(e instanceof Gt))throw e}}}((function(){Z.get(e)(n)}))}),t)},ca:function(e,t){t>>=2;var n=r()[t+6];return t={alpha:!!r()[t],depth:!!r()[t+1],stencil:!!r()[t+2],antialias:!!r()[t+3],premultipliedAlpha:!!r()[t+4],preserveDrawingBuffer:!!r()[t+5],powerPreference:Ze[n],failIfMajorPerformanceCaveat:!!r()[t+7],Vb:r()[t+8],yc:r()[t+9],Bb:r()[t+10],Mb:r()[t+11],Bc:r()[t+12],Cc:r()[t+13]},!(e=Ve(e))||t.Mb?0:function(e,t){e.Cb||(e.Cb=e.getContext,e.getContext=function(t,n){return\"webgl\"==t==(n=e.Cb(t,n))instanceof WebGLRenderingContext?n:null});var n=e.getContext(\"webgl\",t);return n?function(e,t){var n=ht(8);r()[n+4>>2]=yt();var a={wc:n,attributes:t,version:t.Vb,ob:e};return e.canvas&&(e.canvas.pb=a),(void 0===t.Bb||t.Bb)&&function(e){if(e||(e=void 0),!e.Qb){e.Qb=!0;var t=e.ob;!function(e){var t=e.getExtension(\"ANGLE_instanced_arrays\");t&&(e.vertexAttribDivisor=function(e,n){t.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,r,a){t.drawArraysInstancedANGLE(e,n,r,a)},e.drawElementsInstanced=function(e,n,r,a,i){t.drawElementsInstancedANGLE(e,n,r,a,i)})}(t),function(e){var t=e.getExtension(\"OES_vertex_array_object\");t&&(e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)})}(t),function(e){var t=e.getExtension(\"WEBGL_draw_buffers\");t&&(e.drawBuffers=function(e,n){t.drawBuffersWEBGL(e,n)})}(t),t.qc=t.getExtension(\"EXT_disjoint_timer_query\"),t.zc=t.getExtension(\"WEBGL_multi_draw\"),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes(\"lose_context\")||e.includes(\"debug\")||t.getExtension(e)}))}}(a),n}(n,t):0}(e,t)},I:et,J:tt,m:nt,H:rt,t:at,B:it,p:ot,R:function(e){var t=Date.now();return r()[e>>2]=t/1e3|0,r()[e+4>>2]=t%1e3*1e3|0,0},ha:function e(t,n){return t=new Date(1e3*r()[t>>2]),r()[n>>2]=t.getUTCSeconds(),r()[n+4>>2]=t.getUTCMinutes(),r()[n+8>>2]=t.getUTCHours(),r()[n+12>>2]=t.getUTCDate(),r()[n+16>>2]=t.getUTCMonth(),r()[n+20>>2]=t.getUTCFullYear()-1900,r()[n+24>>2]=t.getUTCDay(),r()[n+36>>2]=0,r()[n+32>>2]=0,t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2]=t,e.Ab||(e.Ab=X(\"GMT\")),r()[n+40>>2]=e.Ab,n},_:function(){ge.Rb()},r:function(e,t){ut(),e=new Date(1e3*r()[e>>2]),r()[t>>2]=e.getSeconds(),r()[t+4>>2]=e.getMinutes(),r()[t+8>>2]=e.getHours(),r()[t+12>>2]=e.getDate(),r()[t+16>>2]=e.getMonth(),r()[t+20>>2]=e.getFullYear()-1900,r()[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1),a=(e.getTime()-n.getTime())/864e5|0;return r()[t+28>>2]=a,r()[t+36>>2]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,a)),r()[t+32>>2]=e,e=r()[Rt()+(e?4:0)>>2],r()[t+40>>2]=e,t},a:S||o.wasmMemory,y:function(e){ut();var t=new Date(r()[e+20>>2]+1900,r()[e+16>>2],r()[e+12>>2],r()[e+8>>2],r()[e+4>>2],r()[e>>2],0),n=r()[e+32>>2],a=t.getTimezoneOffset(),i=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),s=Math.min(u,o);return 0>n?r()[e+32>>2]=Number(o!=u&&s==a):0<n!=(s==a)&&(o=Math.max(u,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-a))),r()[e+24>>2]=t.getDay(),n=(t.getTime()-i.getTime())/864e5|0,r()[e+28>>2]=n,r()[e>>2]=t.getSeconds(),r()[e+4>>2]=t.getMinutes(),r()[e+8>>2]=t.getHours(),r()[e+12>>2]=t.getDate(),r()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},fa:dt,g:function(e,t,n,r){return dt(e,t,n,r)}};!function(){function e(e,t){o.asm=e.exports,Z=o.asm.Ca,K.unshift(o.asm.ia),ge.zb.push(o.asm.Ha),C=t,v||(oe--,o.monitorRunDependencies&&o.monitorRunDependencies(oe),0==oe&&(null!==ue&&(clearInterval(ue),ue=null),se&&(e=se,se=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!E&&(_||y)){if(\"function\"==typeof fetch&&!ie.startsWith(\"file://\"))return fetch(ie,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+ie+\"'\";return e.arrayBuffer()})).catch((function(){return le()}));if(m)return new Promise((function(e,t){m(ie,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return le()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){M(\"failed to asynchronously prepare wasm: \"+e),ce(e)}))}var r={a:bt};if(v||(oe++,o.monitorRunDependencies&&o.monitorRunDependencies(oe)),o.instantiateWasm)try{return o.instantiateWasm(r,e)}catch(e){return M(\"Module.instantiateWasm callback failed with error: \"+e),!1}(E||\"function\"!=typeof WebAssembly.instantiateStreaming||fe()||ie.startsWith(\"file://\")||\"function\"!=typeof fetch?n(t):fetch(ie,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return M(\"wasm streaming compile failed: \"+e),M(\"falling back to ArrayBuffer instantiation\"),n(t)}))}))).catch(s)}(),o.___wasm_call_ctors=function(){return(o.___wasm_call_ctors=o.asm.ia).apply(null,arguments)},o._OrtInit=function(){return(o._OrtInit=o.asm.ja).apply(null,arguments)},o._OrtCreateSessionOptions=function(){return(o._OrtCreateSessionOptions=o.asm.ka).apply(null,arguments)},o._OrtAddSessionConfigEntry=function(){return(o._OrtAddSessionConfigEntry=o.asm.la).apply(null,arguments)},o._OrtReleaseSessionOptions=function(){return(o._OrtReleaseSessionOptions=o.asm.ma).apply(null,arguments)},o._OrtCreateSession=function(){return(o._OrtCreateSession=o.asm.na).apply(null,arguments)},o._OrtReleaseSession=function(){return(o._OrtReleaseSession=o.asm.oa).apply(null,arguments)},o._OrtGetInputCount=function(){return(o._OrtGetInputCount=o.asm.pa).apply(null,arguments)},o._OrtGetOutputCount=function(){return(o._OrtGetOutputCount=o.asm.qa).apply(null,arguments)},o._OrtGetInputName=function(){return(o._OrtGetInputName=o.asm.ra).apply(null,arguments)},o._OrtGetOutputName=function(){return(o._OrtGetOutputName=o.asm.sa).apply(null,arguments)},o._OrtFree=function(){return(o._OrtFree=o.asm.ta).apply(null,arguments)},o._OrtCreateTensor=function(){return(o._OrtCreateTensor=o.asm.ua).apply(null,arguments)},o._OrtGetTensorData=function(){return(o._OrtGetTensorData=o.asm.va).apply(null,arguments)},o._OrtReleaseTensor=function(){return(o._OrtReleaseTensor=o.asm.wa).apply(null,arguments)},o._OrtCreateRunOptions=function(){return(o._OrtCreateRunOptions=o.asm.xa).apply(null,arguments)},o._OrtAddRunConfigEntry=function(){return(o._OrtAddRunConfigEntry=o.asm.ya).apply(null,arguments)},o._OrtReleaseRunOptions=function(){return(o._OrtReleaseRunOptions=o.asm.za).apply(null,arguments)},o._OrtRun=function(){return(o._OrtRun=o.asm.Aa).apply(null,arguments)},o._OrtEndProfiling=function(){return(o._OrtEndProfiling=o.asm.Ba).apply(null,arguments)};var ht=o._malloc=function(){return(ht=o._malloc=o.asm.Da).apply(null,arguments)},gt=o.___errno_location=function(){return(gt=o.___errno_location=o.asm.Ea).apply(null,arguments)},_t=o._free=function(){return(_t=o._free=o.asm.Fa).apply(null,arguments)},yt=o._pthread_self=function(){return(yt=o._pthread_self=o.asm.Ga).apply(null,arguments)};o._emscripten_tls_init=function(){return(o._emscripten_tls_init=o.asm.Ha).apply(null,arguments)},o._emscripten_current_thread_process_queued_calls=function(){return(o._emscripten_current_thread_process_queued_calls=o.asm.Ia).apply(null,arguments)};var wt,vt=o._emscripten_register_main_browser_thread_id=function(){return(vt=o._emscripten_register_main_browser_thread_id=o.asm.Ja).apply(null,arguments)},At=o._emscripten_main_browser_thread_id=function(){return(At=o._emscripten_main_browser_thread_id=o.asm.Ka).apply(null,arguments)},Tt=o._emscripten_sync_run_in_main_thread_4=function(){return(Tt=o._emscripten_sync_run_in_main_thread_4=o.asm.La).apply(null,arguments)},Ot=o._emscripten_main_thread_process_queued_calls=function(){return(Ot=o._emscripten_main_thread_process_queued_calls=o.asm.Ma).apply(null,arguments)},kt=o._emscripten_run_in_main_runtime_thread_js=function(){return(kt=o._emscripten_run_in_main_runtime_thread_js=o.asm.Na).apply(null,arguments)},Et=o.__emscripten_call_on_thread=function(){return(Et=o.__emscripten_call_on_thread=o.asm.Oa).apply(null,arguments)},xt=o._pthread_testcancel=function(){return(xt=o._pthread_testcancel=o.asm.Pa).apply(null,arguments)},Mt=o._pthread_exit=function(){return(Mt=o._pthread_exit=o.asm.Qa).apply(null,arguments)},Dt=o.__emscripten_thread_init=function(){return(Dt=o.__emscripten_thread_init=o.asm.Ra).apply(null,arguments)},St=o._emscripten_get_global_libc=function(){return(St=o._emscripten_get_global_libc=o.asm.Sa).apply(null,arguments)},Ct=o.___pthread_tsd_run_dtors=function(){return(Ct=o.___pthread_tsd_run_dtors=o.asm.Ta).apply(null,arguments)},Rt=o.__get_tzname=function(){return(Rt=o.__get_tzname=o.asm.Ua).apply(null,arguments)},It=o.__get_daylight=function(){return(It=o.__get_daylight=o.asm.Va).apply(null,arguments)},Ft=o.__get_timezone=function(){return(Ft=o.__get_timezone=o.asm.Wa).apply(null,arguments)},jt=o.stackSave=function(){return(jt=o.stackSave=o.asm.Xa).apply(null,arguments)},Yt=o.stackRestore=function(){return(Yt=o.stackRestore=o.asm.Ya).apply(null,arguments)},Pt=o.stackAlloc=function(){return(Pt=o.stackAlloc=o.asm.Za).apply(null,arguments)},Wt=o._emscripten_stack_set_limits=function(){return(Wt=o._emscripten_stack_set_limits=o.asm._a).apply(null,arguments)},qt=o._memalign=function(){return(qt=o._memalign=o.asm.$a).apply(null,arguments)},Ut=o.__emscripten_allow_main_runtime_queued_calls=688928,Bt=o.__emscripten_main_thread_futex=694164;function Gt(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function Ht(){function e(){if(!wt&&(wt=!0,o.calledRun=!0,!I)&&(v||de(K),u(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!v)){if(o.postRun)for(\"function\"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;){var e=o.postRun.shift();te.unshift(e)}de(te)}}if(!(0<oe))if(v)u(o),v||de(K),postMessage({cmd:\"loaded\"});else{if(!v){if(o.preRun)for(\"function\"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)ae();de($)}0<oe||(o.setStatus?(o.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){o.setStatus(\"\")}),1),e()}),1)):e())}}function zt(e){if(R=e,v)throw postMessage({cmd:\"exitProcess\",returnCode:e}),new Gt(e);re()||(ge.Gb(),v||(de(ee),\"undefined\"!=typeof _fflush&&_fflush(0),ke[1].length&&Ee(1,10),ke[2].length&&Ee(2,10))),R=e,re()||(ge.Gb(),o.onExit&&o.onExit(e),I=!0),p(e,new Gt(e))}if(o.UTF8ToString=z,o.stringToUTF8=N,o.lengthBytesUTF8=V,o.keepRuntimeAlive=re,o.PThread=ge,o.stackSave=jt,o.stackRestore=Yt,o.stackAlloc=Pt,o.PThread=ge,o.wasmMemory=S,o.ExitStatus=Gt,se=function e(){wt||Ht(),wt||(se=e)},o.run=Ht,o.preInit)for(\"function\"==typeof o.preInit&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return v&&(D=!1,ge.Sb()),Ht(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,g;c.ready=new Promise(function(a,b){aa=a;g=b});var r={},t;for(t in c)c.hasOwnProperty(t)&&(r[t]=c[t]);var v=\"./this.program\",ba=\"object\"===typeof window,w=\"function\"===typeof importScripts,ca=\"object\"===typeof process&&\"object\"===typeof process.versions&&\"string\"===typeof process.versions.node,x=\"\",y,z,B,C,D;\r\nif(ca)x=w?require(\"path\").dirname(x)+\"/\":__dirname+\"/\",y=function(a,b){C||(C=require(\"fs\"));D||(D=require(\"path\"));a=D.normalize(a);return C.readFileSync(a,b?null:\"utf8\")},B=function(a){a=y(a,!0);a.buffer||(a=new Uint8Array(a));a.buffer||E(\"Assertion failed: undefined\");return a},z=function(a,b,e){C||(C=require(\"fs\"));D||(D=require(\"path\"));a=D.normalize(a);C.readFile(a,function(f,h){f?e(f):b(h.buffer)})},1<process.argv.length&&(v=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",\r\nfunction(a){throw a;}),process.on(\"unhandledRejection\",E),c.inspect=function(){return\"[Emscripten Module object]\"};else if(ba||w)w?x=self.location.href:\"undefined\"!==typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf(\"blob:\")?x=x.substr(0,x.lastIndexOf(\"/\")+1):x=\"\",y=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},w&&(B=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";\r\nb.send(null);return new Uint8Array(b.response)}),z=function(a,b,e){var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=function(){200==f.status||0==f.status&&f.response?b(f.response):e()};f.onerror=e;f.send(null)};var da=c.print||console.log.bind(console),F=c.printErr||console.warn.bind(console);for(t in r)r.hasOwnProperty(t)&&(c[t]=r[t]);r=null;c.thisProgram&&(v=c.thisProgram);var H;c.wasmBinary&&(H=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!1;\r\n\"object\"!==typeof WebAssembly&&E(\"no native wasm support detected\");var I,ea=!1,fa=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ha(a,b,e){var f=b+e;for(e=b;a[e]&&!(e>=f);)++e;if(16<e-b&&a.subarray&&fa)return fa.decode(a.subarray(b,e));for(f=\"\";b<e;){var h=a[b++];if(h&128){var k=a[b++]&63;if(192==(h&224))f+=String.fromCharCode((h&31)<<6|k);else{var l=a[b++]&63;h=224==(h&240)?(h&15)<<12|k<<6|l:(h&7)<<18|k<<12|l<<6|a[b++]&63;65536>h?f+=String.fromCharCode(h):(h-=65536,f+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else f+=String.fromCharCode(h)}return f}function J(a,b){return a?ha(K,a,b):\"\"}\r\nfunction L(a,b,e,f){if(!(0<f))return 0;var h=e;f=e+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var q=a.charCodeAt(++k);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;b[e++]=l}else{if(2047>=l){if(e+1>=f)break;b[e++]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;b[e++]=224|l>>12}else{if(e+3>=f)break;b[e++]=240|l>>18;b[e++]=128|l>>12&63}b[e++]=128|l>>6&63}b[e++]=128|l&63}}b[e]=0;return e-h}\r\nfunction ia(a){for(var b=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);55296<=f&&57343>=f&&(f=65536+((f&1023)<<10)|a.charCodeAt(++e)&1023);127>=f?++b:b=2047>=f?b+2:65535>=f?b+3:b+4}return b}function ja(a){var b=ia(a)+1,e=ka(b);e&&L(a,M,e,b);return e}var la,M,K,N;\r\nfunction ma(){var a=I.buffer;la=a;c.HEAP8=M=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=N=new Int32Array(a);c.HEAPU8=K=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=new Float64Array(a)}var na,oa=[],pa=[],qa=[],ra=[];function sa(){var a=c.preRun.shift();oa.unshift(a)}var O=0,ta=null,P=null;c.preloadedImages={};c.preloadedAudios={};\r\nfunction E(a){if(c.onAbort)c.onAbort(a);F(a);ea=!0;a=new WebAssembly.RuntimeError(\"abort(\"+a+\"). Build with -s ASSERTIONS=1 for more info.\");g(a);throw a;}function ua(){return Q.startsWith(\"data:application/octet-stream;base64,\")}var Q;Q=\"ort-wasm.wasm\";if(!ua()){var va=Q;Q=c.locateFile?c.locateFile(va,x):x+va}function wa(){var a=Q;try{if(a==Q&&H)return new Uint8Array(H);if(B)return B(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){E(b)}}\r\nfunction xa(){if(!H&&(ba||w)){if(\"function\"===typeof fetch&&!Q.startsWith(\"file://\"))return fetch(Q,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+Q+\"'\";return a.arrayBuffer()}).catch(function(){return wa()});if(z)return new Promise(function(a,b){z(Q,function(e){a(new Uint8Array(e))},b)})}return Promise.resolve().then(function(){return wa()})}\r\nfunction ya(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(c);else{var e=b.Ea;\"number\"===typeof e?void 0===b.xa?na.get(e)():na.get(e)(b.xa):e(void 0===b.xa?null:b.xa)}}}function za(a){this.ya=a-16;this.Na=function(b){N[this.ya+4>>2]=b};this.Ka=function(b){N[this.ya+8>>2]=b};this.La=function(){N[this.ya>>2]=0};this.Ja=function(){M[this.ya+12>>0]=0};this.Ma=function(){M[this.ya+13>>0]=0};this.Ga=function(b,e){this.Na(b);this.Ka(e);this.La();this.Ja();this.Ma()}}\r\nvar Aa=0,Ba={},Ca=[null,[],[]],R={},S;S=ca?function(){var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:function(){return performance.now()};var Da={};function Ea(){if(!Fa){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:v||\"./this.program\"},b;for(b in Da)void 0===Da[b]?delete a[b]:a[b]=Da[b];var e=[];for(b in a)e.push(b+\"=\"+a[b]);Fa=e}return Fa}var Fa;\r\nfunction T(a,b){a=new Date(1E3*N[a>>2]);N[b>>2]=a.getUTCSeconds();N[b+4>>2]=a.getUTCMinutes();N[b+8>>2]=a.getUTCHours();N[b+12>>2]=a.getUTCDate();N[b+16>>2]=a.getUTCMonth();N[b+20>>2]=a.getUTCFullYear()-1900;N[b+24>>2]=a.getUTCDay();N[b+36>>2]=0;N[b+32>>2]=0;N[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;T.Da||(T.Da=ja(\"GMT\"));N[b+40>>2]=T.Da;return b}\r\nfunction Ga(){function a(l){return(l=l.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?l[1]:\"GMT\"}if(!Ka){Ka=!0;var b=(new Date).getFullYear(),e=new Date(b,0,1),f=new Date(b,6,1);b=e.getTimezoneOffset();var h=f.getTimezoneOffset(),k=Math.max(b,h);N[La()>>2]=60*k;N[Ma()>>2]=Number(b!=h);e=a(e);f=a(f);e=ja(e);f=ja(f);h<b?(N[U()>>2]=e,N[U()+4>>2]=f):(N[U()>>2]=f,N[U()+4>>2]=e)}}var Ka;function V(a){return 0===a%4&&(0!==a%100||0===a%400)}function Na(a,b){for(var e=0,f=0;f<=b;e+=a[f++]);return e}\r\nvar W=[31,29,31,30,31,30,31,31,30,31,30,31],X=[31,28,31,30,31,30,31,31,30,31,30,31];function Y(a,b){for(a=new Date(a.getTime());0<b;){var e=a.getMonth(),f=(V(a.getFullYear())?W:X)[e];if(b>f-a.getDate())b-=f-a.getDate()+1,a.setDate(1),11>e?a.setMonth(e+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\r\nfunction Oa(a,b,e,f){function h(d,m,n){for(d=\"number\"===typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function k(d,m){return h(d,m,\"0\")}function l(d,m){function n(Ha){return 0>Ha?-1:0<Ha?1:0}var A;0===(A=n(d.getFullYear()-m.getFullYear()))&&0===(A=n(d.getMonth()-m.getMonth()))&&(A=n(d.getDate()-m.getDate()));return A}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function G(d){d=Y(new Date(d.va+1900,0,1),d.Ca);var m=new Date(d.getFullYear()+1,0,4),n=q(new Date(d.getFullYear(),0,4));m=q(m);return 0>=l(n,d)?0>=l(m,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var u=N[f+40>>2];f={Qa:N[f>>2],Pa:N[f+4>>2],Aa:N[f+8>>2],za:N[f+12>>2],wa:N[f+16>>2],va:N[f+20>>2],Ba:N[f+24>>2],Ca:N[f+28>>2],Ya:N[f+32>>2],Oa:N[f+\r\n36>>2],Ra:u?J(u):\"\"};e=J(e);u={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var p in u)e=e.replace(new RegExp(p,\"g\"),u[p]);var Ia=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),\r\nJa=\"January February March April May June July August September October November December\".split(\" \");u={\"%a\":function(d){return Ia[d.Ba].substring(0,3)},\"%A\":function(d){return Ia[d.Ba]},\"%b\":function(d){return Ja[d.wa].substring(0,3)},\"%B\":function(d){return Ja[d.wa]},\"%C\":function(d){return k((d.va+1900)/100|0,2)},\"%d\":function(d){return k(d.za,2)},\"%e\":function(d){return h(d.za,2,\" \")},\"%g\":function(d){return G(d).toString().substring(2)},\"%G\":function(d){return G(d)},\"%H\":function(d){return k(d.Aa,\r\n2)},\"%I\":function(d){d=d.Aa;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":function(d){return k(d.za+Na(V(d.va+1900)?W:X,d.wa-1),3)},\"%m\":function(d){return k(d.wa+1,2)},\"%M\":function(d){return k(d.Pa,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.Aa&&12>d.Aa?\"AM\":\"PM\"},\"%S\":function(d){return k(d.Qa,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.Ba||7},\"%U\":function(d){var m=new Date(d.va+1900,0,1),n=0===m.getDay()?m:Y(m,7-m.getDay());d=new Date(d.va+1900,d.wa,d.za);return 0>\r\nl(n,d)?k(Math.ceil((31-n.getDate()+(Na(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%V\":function(d){var m=new Date(d.va+1901,0,4),n=q(new Date(d.va+1900,0,4));m=q(m);var A=Y(new Date(d.va+1900,0,1),d.Ca);return 0>l(A,n)?\"53\":0>=l(m,A)?\"01\":k(Math.ceil((n.getFullYear()<d.va+1900?d.Ca+32-n.getDate():d.Ca+1-n.getDate())/7),2)},\"%w\":function(d){return d.Ba},\"%W\":function(d){var m=new Date(d.va,0,1),n=1===m.getDay()?m:Y(m,0===m.getDay()?1:7-m.getDay()+1);d=new Date(d.va+\r\n1900,d.wa,d.za);return 0>l(n,d)?k(Math.ceil((31-n.getDate()+(Na(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%y\":function(d){return(d.va+1900).toString().substring(2)},\"%Y\":function(d){return d.va+1900},\"%z\":function(d){d=d.Oa;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Ra},\"%%\":function(){return\"%\"}};for(p in u)e.includes(p)&&(e=e.replace(new RegExp(p,\"g\"),u[p](f)));p=Pa(e);if(p.length>b)return 0;\r\nM.set(p,a);return p.length-1}function Pa(a){var b=Array(ia(a)+1);L(a,b,0,b.length);return b}\r\nvar Ta={a:function(a){return ka(a+16)+16},c:function(a,b){qa.unshift({Ea:a,xa:b})},d:function(a,b){qa.unshift({Ea:a,xa:b})},b:function(a,b,e){(new za(a)).Ga(b,e);Aa++;throw a;},D:function(a,b){a=J(a);return R.Sa(a,b)},m:function(){return 0},I:function(){},L:function(){},o:function(){return 42},x:function(){return 0},H:function(){},G:function(a,b){a=J(a);return R.Ta(a,b)},K:function(a,b,e,f,h,k){k<<=12;if(0!==(f&16)&&0!==a%65536)b=-28;else if(0!==(f&32)){a=65536*Math.ceil(b/65536);var l=Qa(65536,a);\r\nl?(K.fill(0,l,l+a),a=l):a=0;a?(Ba[a]={Ia:a,Ha:b,Fa:!0,fd:h,Xa:e,flags:f,offset:k},b=a):b=-48}else b=-52;return b},J:function(a,b){var e=Ba[a];0!==b&&e?(b===e.Ha&&(Ba[a]=null,e.Fa&&Ra(e.Ia)),a=0):a=-28;return a},j:function(){},C:function(a,b,e){a=J(a);return R.Ua(a,b,e)},E:function(){},r:function(){},F:function(){},h:function(){E()},p:function(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=S();else return N[Sa()>>2]=28,-1;N[b>>2]=a/1E3|0;N[b+4>>2]=a%1E3*1E6|0;return 0},s:function(a,b){return a-\r\nb},P:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},g:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Q:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},O:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},\r\nM:function(){return 2147483648},v:function(a,b,e){K.copyWithin(a,b,b+e)},i:function(a){var b=K.length;a>>>=0;if(2147483648<a)return!1;for(var e=1;4>=e;e*=2){var f=b*(1+.2/e);f=Math.min(f,a+100663296);f=Math.max(a,f);0<f%65536&&(f+=65536-f%65536);a:{try{I.grow(Math.min(2147483648,f)-la.byteLength+65535>>>16);ma();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},B:function(a){for(var b=S();S()-b<a;);},z:function(a,b){var e=0;Ea().forEach(function(f,h){var k=b+e;h=N[a+4*h>>2]=k;for(k=0;k<f.length;++k)M[h++>>\r\n0]=f.charCodeAt(k);M[h>>0]=0;e+=f.length+1});return 0},A:function(a,b){var e=Ea();N[a>>2]=e.length;var f=0;e.forEach(function(h){f+=h.length+1});N[b>>2]=f;return 0},f:function(){return 0},y:function(a,b){a=1==a||2==a?2:E();M[b>>0]=a;return 0},n:function(a,b,e,f){a=R.Wa(a);b=R.Va(a,b,e);N[f>>2]=b;return 0},u:function(){},q:function(a,b,e,f){for(var h=0,k=0;k<e;k++){for(var l=N[b+8*k>>2],q=N[b+(8*k+4)>>2],G=0;G<q;G++){var u=K[l+G],p=Ca[a];0===u||10===u?((1===a?da:F)(ha(p,0)),p.length=0):p.push(u)}h+=\r\nq}N[f>>2]=h;return 0},w:function(a){var b=Date.now();N[a>>2]=b/1E3|0;N[a+4>>2]=b%1E3*1E3|0;return 0},t:T,l:function(a,b){Ga();a=new Date(1E3*N[a>>2]);N[b>>2]=a.getSeconds();N[b+4>>2]=a.getMinutes();N[b+8>>2]=a.getHours();N[b+12>>2]=a.getDate();N[b+16>>2]=a.getMonth();N[b+20>>2]=a.getFullYear()-1900;N[b+24>>2]=a.getDay();var e=new Date(a.getFullYear(),0,1);N[b+28>>2]=(a.getTime()-e.getTime())/864E5|0;N[b+36>>2]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=\r\ne.getTimezoneOffset();a=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0;N[b+32>>2]=a;a=N[U()+(a?4:0)>>2];N[b+40>>2]=a;return b},k:function(a){Ga();var b=new Date(N[a+20>>2]+1900,N[a+16>>2],N[a+12>>2],N[a+8>>2],N[a+4>>2],N[a>>2],0),e=N[a+32>>2],f=b.getTimezoneOffset(),h=new Date(b.getFullYear(),0,1),k=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),l=h.getTimezoneOffset(),q=Math.min(l,k);0>e?N[a+32>>2]=Number(k!=l&&q==f):0<e!=(q==f)&&(k=Math.max(l,k),b.setTime(b.getTime()+6E4*((0<e?q:k)-f)));N[a+\r\n24>>2]=b.getDay();N[a+28>>2]=(b.getTime()-h.getTime())/864E5|0;N[a>>2]=b.getSeconds();N[a+4>>2]=b.getMinutes();N[a+8>>2]=b.getHours();N[a+12>>2]=b.getDate();N[a+16>>2]=b.getMonth();return b.getTime()/1E3|0},N:Oa,e:function(a,b,e,f){return Oa(a,b,e,f)}};\r\n(function(){function a(h){c.asm=h.exports;I=c.asm.R;ma();na=c.asm.ua;pa.unshift(c.asm.S);O--;c.monitorRunDependencies&&c.monitorRunDependencies(O);0==O&&(null!==ta&&(clearInterval(ta),ta=null),P&&(h=P,P=null,h()))}function b(h){a(h.instance)}function e(h){return xa().then(function(k){return WebAssembly.instantiate(k,f)}).then(h,function(k){F(\"failed to asynchronously prepare wasm: \"+k);E(k)})}var f={a:Ta};O++;c.monitorRunDependencies&&c.monitorRunDependencies(O);if(c.instantiateWasm)try{return c.instantiateWasm(f,\r\na)}catch(h){return F(\"Module.instantiateWasm callback failed with error: \"+h),!1}(function(){return H||\"function\"!==typeof WebAssembly.instantiateStreaming||ua()||Q.startsWith(\"file://\")||\"function\"!==typeof fetch?e(b):fetch(Q,{credentials:\"same-origin\"}).then(function(h){return WebAssembly.instantiateStreaming(h,f).then(b,function(k){F(\"wasm streaming compile failed: \"+k);F(\"falling back to ArrayBuffer instantiation\");return e(b)})})})().catch(g);return{}})();\r\nc.___wasm_call_ctors=function(){return(c.___wasm_call_ctors=c.asm.S).apply(null,arguments)};c._OrtInit=function(){return(c._OrtInit=c.asm.T).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.U).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.V).apply(null,arguments)};c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.W).apply(null,arguments)};\r\nc._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.X).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Y).apply(null,arguments)};c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Z).apply(null,arguments)};c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm._).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.$).apply(null,arguments)};\r\nc._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.aa).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm.ba).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.ca).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.da).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.ea).apply(null,arguments)};\r\nc._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.fa).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.ga).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.ha).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.ia).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.ja).apply(null,arguments)};\r\nvar ka=c._malloc=function(){return(ka=c._malloc=c.asm.ka).apply(null,arguments)},Sa=c.___errno_location=function(){return(Sa=c.___errno_location=c.asm.la).apply(null,arguments)},Ra=c._free=function(){return(Ra=c._free=c.asm.ma).apply(null,arguments)},U=c.__get_tzname=function(){return(U=c.__get_tzname=c.asm.na).apply(null,arguments)},Ma=c.__get_daylight=function(){return(Ma=c.__get_daylight=c.asm.oa).apply(null,arguments)},La=c.__get_timezone=function(){return(La=c.__get_timezone=c.asm.pa).apply(null,\r\narguments)},Ua=c.stackSave=function(){return(Ua=c.stackSave=c.asm.qa).apply(null,arguments)},Va=c.stackRestore=function(){return(Va=c.stackRestore=c.asm.ra).apply(null,arguments)},Wa=c.stackAlloc=function(){return(Wa=c.stackAlloc=c.asm.sa).apply(null,arguments)},Qa=c._memalign=function(){return(Qa=c._memalign=c.asm.ta).apply(null,arguments)};c.UTF8ToString=J;c.stringToUTF8=function(a,b,e){return L(a,K,b,e)};c.lengthBytesUTF8=ia;c.stackSave=Ua;c.stackRestore=Va;c.stackAlloc=Wa;var Z;\r\nP=function Xa(){Z||Ya();Z||(P=Xa)};\r\nfunction Ya(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!ea)){ya(pa);aa(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();ra.unshift(b)}ya(ra)}}if(!(0<O)){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)sa();ya(oa);0<O||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){c.setStatus(\"\")},1);a()},1)):a())}}c.run=Ya;\r\nif(c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();Ya();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable import/no-internal-modules */\r\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {Session} from './onnxjs/session';\r\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\r\n\r\nclass OnnxjsBackend implements Backend {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  async init(): Promise<void> {}\r\n\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\r\n    // onnxruntime-common).\r\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\r\n    //       Currently we allow this to happen to make test runner work.\r\n    const session = new Session(options as unknown as Session.Config);\r\n\r\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\r\n    if (typeof pathOrBuffer === 'string') {\r\n      await session.loadModel(pathOrBuffer);\r\n    } else {\r\n      await session.loadModel(pathOrBuffer);\r\n    }\r\n\r\n    return new OnnxjsSessionHandler(session);\r\n  }\r\n}\r\n\r\nexport const onnxjsBackend = new OnnxjsBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {cpus} from 'os';\r\nimport {promisify} from 'util';\r\nimport {initWasm} from './wasm/proxy-wrapper';\r\n\r\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\r\n\r\n/**\r\n * This function initializes all flags for WebAssembly.\r\n *\r\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\r\n * being created, to override default value.\r\n */\r\nexport const initializeFlags = (): void => {\r\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\r\n    env.wasm.initTimeout = 0;\r\n  }\r\n\r\n  if (typeof env.wasm.simd !== 'boolean') {\r\n    env.wasm.simd = true;\r\n  }\r\n\r\n  if (typeof env.wasm.proxy !== 'boolean') {\r\n    env.wasm.proxy = false;\r\n  }\r\n\r\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\r\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\r\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\r\n  }\r\n};\r\n\r\nclass OnnxruntimeWebAssemblyBackend implements Backend {\r\n  async init(): Promise<void> {\r\n    // populate wasm flags\r\n    initializeFlags();\r\n\r\n    // init wasm\r\n    await initWasm();\r\n  }\r\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    let buffer: Uint8Array;\r\n    if (typeof pathOrBuffer === 'string') {\r\n      if (typeof fetch === 'undefined') {\r\n        // node\r\n        buffer = await promisify(readFile)(pathOrBuffer);\r\n      } else {\r\n        // browser\r\n        const response = await fetch(pathOrBuffer);\r\n        const arrayBuffer = await response.arrayBuffer();\r\n        buffer = new Uint8Array(arrayBuffer);\r\n      }\r\n    } else {\r\n      buffer = pathOrBuffer;\r\n    }\r\n\r\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\r\n    await handler.loadModel(buffer, options);\r\n    return Promise.resolve(handler);\r\n  }\r\n}\r\n\r\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\r\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\r\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\r\n// So we import code inside the if-clause to allow terser remove the code safely.\r\n\r\nexport * from 'onnxruntime-common';\r\nimport {registerBackend} from 'onnxruntime-common';\r\n\r\nif (!BUILD_DEFS.DISABLE_WEBGL) {\r\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\r\n  registerBackend('webgl', onnxjsBackend, -1);\r\n}\r\nif (!BUILD_DEFS.DISABLE_WASM) {\r\n  const wasmBackend = require('./backend-wasm').wasmBackend;\r\n  registerBackend('wasm', wasmBackend, 0);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nclass AttributeWithCacheKeyImpl {\r\n  constructor(attribute: Record<string, unknown>) {\r\n    Object.assign(this, attribute);\r\n  }\r\n\r\n  private _cacheKey: string;\r\n  public get cacheKey(): string {\r\n    if (!this._cacheKey) {\r\n      this._cacheKey =\r\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\r\n    }\r\n    return this._cacheKey;\r\n  }\r\n}\r\n\r\nexport interface AttributeWithCacheKey {\r\n  readonly cacheKey: string;\r\n}\r\n\r\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\r\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {Tensor} from './tensor';\r\nimport {decodeUtf8String, LongUtil} from './util';\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        if (attr instanceof onnx.AttributeProto) {\r\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        } else if (attr instanceof ortFbs.Attribute) {\r\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        }\r\n      }\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\r\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\r\n    switch (type) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\r\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\r\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\r\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const tensorProtos = value as onnx.ITensorProto[];\r\n        return tensorProtos.map(value => Tensor.fromProto(value));\r\n      } else if (attr instanceof ortFbs.Attribute) {\r\n        const tensorProtos = value as ortFbs.Tensor[];\r\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\r\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\r\n      // string attributes are returned as string, so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8String = value as Uint8Array;\r\n        return decodeUtf8String(utf8String);\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\r\n      // format strings attributes are returned as string[], so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8Strings = value as Uint8Array[];\r\n        return utf8Strings.map(decodeUtf8String);\r\n      }\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\r\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\r\n  }\r\n\r\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\r\n    switch (attr.type()) {\r\n      case ortFbs.AttributeType.FLOAT:\r\n        return attr.f();\r\n      case ortFbs.AttributeType.INT:\r\n        return attr.i();\r\n      case ortFbs.AttributeType.STRING:\r\n        return attr.s();\r\n      case ortFbs.AttributeType.TENSOR:\r\n        return attr.t();\r\n      case ortFbs.AttributeType.GRAPH:\r\n        return attr.g();\r\n      case ortFbs.AttributeType.FLOATS:\r\n        return attr.floatsArray();\r\n      case ortFbs.AttributeType.INTS: {\r\n        const ints = [];\r\n        for (let i = 0; i < attr.intsLength(); i++) {\r\n          ints.push(attr.ints(i)!);\r\n        }\r\n        return ints;\r\n      }\r\n      case ortFbs.AttributeType.STRINGS: {\r\n        const strings = [];\r\n        for (let i = 0; i < attr.stringsLength(); i++) {\r\n          strings.push(attr.strings(i));\r\n        }\r\n        return strings;\r\n      }\r\n      case ortFbs.AttributeType.TENSORS: {\r\n        const tensors = [];\r\n        for (let i = 0; i < attr.tensorsLength(); i++) {\r\n          tensors.push(attr.tensors(i)!);\r\n        }\r\n        return tensors;\r\n      }\r\n      // case ortFbs.AttributeType.GRAPHS:\r\n      // TODO: Subgraph not supported yet.\r\n      // const graphs = [];\r\n      // for (let i = 0; i < attr.graphsLength(); i++) {\r\n      //   graphs.push(attr.graphs(i)!);\r\n      // }\r\n      // return graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGLBackend} from './backends/backend-webgl';\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\nexport const backend: {[name: string]: Backend} = {\r\n  webgl: new WebGLBackend(),\r\n};\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\r\n  if (!hint) {\r\n    return resolveBackend(['webgl']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    const backend = backendObj[backendHint];\r\n    let init = backend.initialize();\r\n    if (typeof init === 'object' && 'then' in init) {\r\n      init = await init;\r\n    }\r\n    if (init) {\r\n      backendsCache.set(backendHint, backend);\r\n      return backend;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend {\r\n  glContext: WebGLContext;\r\n\r\n  get contextId(): 'webgl'|'webgl2'|undefined {\r\n    return env.webgl.contextId;\r\n  }\r\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\r\n    env.webgl.contextId = value;\r\n  }\r\n\r\n  get matmulMaxBatchSize(): number|undefined {\r\n    return env.webgl.matmulMaxBatchSize;\r\n  }\r\n  set matmulMaxBatchSize(value: number|undefined) {\r\n    env.webgl.matmulMaxBatchSize = value;\r\n  }\r\n\r\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\r\n    return env.webgl.textureCacheMode;\r\n  }\r\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\r\n    env.webgl.textureCacheMode = value;\r\n  }\r\n\r\n  get pack(): boolean|undefined {\r\n    return env.webgl.pack;\r\n  }\r\n  set pack(value: boolean|undefined) {\r\n    env.webgl.pack = value;\r\n  }\r\n\r\n  get async(): boolean|undefined {\r\n    return env.webgl.async;\r\n  }\r\n  set async(value: boolean|undefined) {\r\n    env.webgl.async = value;\r\n  }\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      if (typeof this.pack !== 'boolean') {\r\n        this.pack = false;\r\n      }\r\n      if (typeof this.async !== 'boolean') {\r\n        this.async = false;\r\n      }\r\n\r\n      Logger.setWithEnv(env);\r\n\r\n      Logger.verbose(\r\n          'WebGLBackend',\r\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\r\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\r\n              this.async}.`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\nimport {squeezeShape} from './texture-layout-strategy';\r\nimport {TextureLayout} from './types';\r\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.offsetToCoords(),\r\n      ...this.coordsToOffset(),\r\n      ...this.toVec(),\r\n      ...this.valueFrom(),\r\n      // TODO return these only when packing is enabled.\r\n      ...this.getCommonUtilFuncs(),\r\n      ...this.getInputsSamplingSnippets(),\r\n      ...this.getOutputSamplingSnippet()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'offsetToCoords';\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'coordsToOffset';\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates code for output sampler.\r\n   */\r\n\r\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    if (outputLayout.isPacked) {\r\n      return this.getPackedOutputSamplingSnippet(outputLayout);\r\n    } else {\r\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates code for packed output sampler.\r\n   */\r\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRGBASource = `\r\n      void setOutput(vec4 val) {\r\n        ${glsl.output} = val;\r\n      }\r\n    `;\r\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\r\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates code for unpacked output sampler.\r\n   */\r\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] =\r\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 4:\r\n        result[funcName] = this.getOutputUnpacked4DCoords(\r\n            outShape as [number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 5:\r\n        result[funcName] = this.getOutputUnpacked5DCoords(\r\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 6:\r\n        result[funcName] = this.getOutputUnpacked6DCoords(\r\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRSource = `\r\n        void setOutput(float val) {\r\n          ${glsl.output} = vec4(val, 0, 0, 0);\r\n        }\r\n    `;\r\n    const floatTextureSetRFuncName = 'floatTextureSetR';\r\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Scalar output coordinates.\r\n   */\r\n  protected getOutputScalarCoords(): GlslLibRoutine {\r\n    return new GlslLibRoutine(`\r\n      int getOutputCoords() {\r\n        return 0;\r\n      }\r\n    `);\r\n  }\r\n\r\n  /**\r\n   * 1D packed output coordinates.\r\n   */\r\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = texShape;\r\n    let source = '';\r\n    if (packedTexShape[0] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    if (packedTexShape[1] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 2D packed output coordinates.\r\n   */\r\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\r\n      source = `\r\n        ivec2 getOutputCoords() {\r\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    const packedTexShape = texShape;\r\n    // texels needed to accommodate a logical row\r\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\r\n\r\n    /**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */\r\n    source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 3D packed output coordinates.\r\n   */\r\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\r\n    const source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          int b = index / ${texelsInBatch};\r\n          index -= b * ${texelsInBatch};\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec3(b, r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * ND packed output coordinates.\r\n   */\r\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n\r\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\r\n    let texelsInBatchN = texelsInBatch;\r\n    let batches = '';\r\n    let coords = 'b, r, c';\r\n\r\n    for (let b = 2; b < shape.length - 1; b++) {\r\n      texelsInBatchN *= shape[shape.length - b - 1];\r\n      batches = `\r\n      int b${b} = index / ${texelsInBatchN};\r\n      index -= b${b} * ${texelsInBatchN};\r\n    ` + batches;\r\n      coords = `b${b}, ` + coords;\r\n    }\r\n    const source = `\r\n      ivec${shape.length} getOutputCoords() {\r\n        ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n        ${batches}\r\n\r\n        int b = index / ${texelsInBatch};\r\n        index -= b * ${texelsInBatch};\r\n\r\n        // reverse r and c order for packed texture\r\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n        int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n        return ivec${shape.length}(${coords});\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D output coordinates.\r\n   */\r\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D output coordinates.\r\n   */\r\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          int r = index / ${shape[1]};\r\n          int c = index - r * ${shape[1]};\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D output coordinates.\r\n   */\r\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec3(r, c, d);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D output coordinates.\r\n   */\r\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec4 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec4(r, c, d, d2);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D output coordinates.\r\n   */\r\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec5 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec5(r, c, d, d2, d3);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D output coordinates.\r\n   */\r\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\r\n    number, number\r\n  ]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n     ivec6 getOutputCoords() {\r\n         ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                               vec2(${texShape[0]}, ${texShape[1]}));\r\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n         ${coordsFromIndexSnippet}\r\n         return ivec6(r, c, d, d2, d3, d4);\r\n       }\r\n     `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Generates code for common UV coords computation utility functions.\r\n   */\r\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    let funcName = 'uvFromFlat';\r\n    result[funcName] = new GlslLibRoutine(`\r\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\r\n      int texC = index / texNumR;\r\n      int texR = index - texC * texNumR;\r\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\r\n      //       v.\r\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\r\n    }\r\n    `);\r\n    funcName = 'packedUVfrom1D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\r\n        int texelIndex = index / 2;\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom2D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\r\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom3D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\r\n          int texelsInBatch, int texelsInLogicalRow, int b,\r\n          int row, int col) {\r\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = index / texNumC;\r\n        int texC = index - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'sampleTexture';\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    result[funcName] = new GlslLibRoutine(`\r\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\r\n            return ${glsl.texture2D}(textureSampler, uv).r;\r\n        }`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for inputs\r\n   */\r\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\r\n      const inputLayout = this.context.inputTextureLayouts[i];\r\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\r\n      if (inputLayout.isPacked) {\r\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      } else {\r\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      }\r\n\r\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\r\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\r\n        if (inputLayout.isPacked) {\r\n          result[outCoordFuncName] =\r\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        } else {\r\n          result[outCoordFuncName] =\r\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for output coordinates of samplers\r\n   */\r\n  protected getPackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texName = name;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\r\n\r\n    const inRank = inShape.length;\r\n    const outRank = outShape.length;\r\n\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n\r\n    let output = 'return outputValue;';\r\n    const inSize = ShapeUtil.size(inShape);\r\n    const isInputScalar = inSize === 1;\r\n    const outSize = ShapeUtil.size(outShape);\r\n    const isOutputScalar = outSize === 1;\r\n\r\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\r\n      output = `\r\n        return vec4(outputValue.xy, outputValue.xy);\r\n      `;\r\n    } else if (isInputScalar && !isOutputScalar) {\r\n      if (outRank === 1) {\r\n        output = `\r\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\r\n        `;\r\n      } else {\r\n        output = `\r\n          return vec4(outputValue.x);\r\n        `;\r\n      }\r\n    } else if (broadcastDims.length) {\r\n      const rows = inRank - 2;\r\n      const cols = inRank - 1;\r\n\r\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.x);';\r\n      } else if (broadcastDims.indexOf(rows) > -1) {\r\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\r\n            'outputValue.x, outputValue.y);';\r\n      } else if (broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\r\n      }\r\n    }\r\n\r\n    const swapLastDimsSnippet = `\r\n        int lastDim = coords.${fields[outRank - 1]};\r\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\r\n        coords.${fields[outRank - 2]} = lastDim;\r\n      `;\r\n    const source = `\r\n      vec4 ${funcName}() {\r\n        ${type} coords = getOutputCoords();\r\n        ${swapLastDimsSnippet}\r\n        ${coordsSnippet}\r\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        ${output}\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked output coordinates of samplers\r\n   */\r\n  protected getUnpackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const inTexShape = [inputLayout.width, inputLayout.height];\r\n    const inRank = inputLayout.unpackedShape.length;\r\n    const outRank = outputLayout.unpackedShape.length;\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\r\n\r\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, TexCoords);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n    const source = `\r\n        float ${funcName}() {\r\n          ${type} coords = getOutputCoords();\r\n          ${coordsSnippet}\r\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for packed operations.\r\n   */\r\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    switch (inputLayout.unpackedShape.length) {\r\n      case 0:\r\n        return this.getPackedSamplerScalar(funcName, name);\r\n      case 1:\r\n        return this.getPackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getPackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getPackedSampler3D(funcName, name, inputLayout);\r\n      default:\r\n        return this.getPackedSamplerND(funcName, name, inputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked operations.\r\n   */\r\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    switch (shape.length) {\r\n      case 0:\r\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\r\n      case 1:\r\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\r\n      case 4:\r\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\r\n      case 5:\r\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\r\n      case 6:\r\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\r\n      default:\r\n        // TODO support more dimensionalities\r\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Packed scalar snippet.\r\n   */\r\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const source = `\r\n          vec4 ${funcName}() {\r\n            return ${glsl.texture2D}(${name}, halfCR);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Packed 1D snippet.\r\n   */\r\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[1], texShape[0]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int index) {\r\n      vec2 uv = packedUVfrom1D(\r\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 2D snippet.\r\n   */\r\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const texNumR = texShape[0];\r\n    const texNumC = texShape[1];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\r\n        return ${glsl.texture2D}(${name}, uv);\r\n      }`;\r\n\r\n      return new GlslLibRoutine(packedSampler);\r\n    }\r\n    const packedTexShape = texShape;\r\n    const valuesPerRow = Math.ceil(shape[1] / 2);\r\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 3D snippet.\r\n   */\r\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    if (shape[0] === 1) {\r\n      const squeezedShape = shape.slice(1);\r\n      const keptDims = [1, 2];\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['b', 'row', 'col'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\r\n      const packedSampler = `${samplerRoutine.routineBody}\r\n      vec4 ${funcName}(int b, int row, int col) {\r\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n      } `;\r\n      const source = packedSampler;\r\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\r\n    }\r\n    const texNumR = packedTexShape[0];\r\n    const texNumC = packedTexShape[1];\r\n\r\n    const valuesPerRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\r\n      vec2 uv = packedUVfrom3D(\r\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);}`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\r\n  }\r\n  /*\r\n   * Packed ND snippet.\r\n   */\r\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const rank = shape.length;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texNumR = packedTexShape[1];\r\n    const texNumC = packedTexShape[0];\r\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\r\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\r\n    let params = 'int b, int row, int col';\r\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\r\n    for (let b = 2; b < rank - 1; b++) {\r\n      params = `int b${b}, ` + params;\r\n      texelsInBatch *= shape[rank - b - 1];\r\n      index = `b${b} * ${texelsInBatch} + ` + index;\r\n    }\r\n    const packedSampler = `vec4 ${funcName}(${params}) {\r\n      int index = ${index};\r\n      int texR = index / ${texNumC};\r\n      int texC = index - texR * ${texNumC};\r\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked scalar snippet.\r\n   */\r\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\r\n    if (texNumR === 1 && texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, halfCR);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}() {\r\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D snippet.\r\n   */\r\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const tNumR = inputLayout.width;\r\n    const tNumC = inputLayout.height;\r\n\r\n    if (tNumC === 1 && tNumR === 1) {\r\n      const source = `\r\n        float ${funcName}(int index) {\r\n          return sampleTexture(${name}, halfCR);\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    if (tNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    if (tNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    const source = `\r\n        float ${funcName}(int index) {\r\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n\r\n    // TODO: modify row/col order for other dimensions.\r\n    const texShape = [inputLayout.height, inputLayout.width];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const texNumR = texShape[1];\r\n      const texNumC = texShape[0];\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const params = ['col', 'row'];\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const texNumR = texShape[1];\r\n    const texNumC = texShape[0];\r\n    if (texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    if (texNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}(int row, int col) {\r\n          int index = col * ${shape[1]} + row;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride0 = shape[1] * shape[2];\r\n    const stride1 = shape[2];\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['batch', 'col', 'row'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\r\n      // TODO: revisit the logic here to make it simpler\r\n      const revDims = keptDims.reverse();\r\n      const source = `\r\n          ${routine.routineBody}\r\n          float ${funcName}(int batch, int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, revDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, routine.dependencies);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int depth, int row, int col) {\r\n            // Explicitly use integer operations as dot() only works on floats.\r\n            int index = depth * ${stride0} + col * ${stride1} + row;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride2 = shape[3];\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    //\r\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\r\n    //\r\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    // if (newShape.length < shape.length) {\r\n    //   const newInputShape = squeezeInputShape(shape, newShape);\r\n    //   const params = ['row', 'col', 'depth', 'depth2'];\r\n    //   // Deep copy of input texture layout.\r\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n    //   newInputLayout.unpackedShape = newInputShape;\r\n    //   const source = `\r\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\r\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n    //       }\r\n    //     `;\r\n    //   return new GlslLibRoutine(\r\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    // }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2) {\r\n          int index = row * ${stride0} + col * ${stride1} +\r\n              depth2 * ${stride2} + depth;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D snippet.\r\n   */\r\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride3 = shape[4];\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n          depth3 * ${stride3} + depth2;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D snippet.\r\n   */\r\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride4 = shape[5];\r\n    const stride3 = shape[4] * stride4;\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n            float ${funcName}(int row, int col, int depth,\r\n              int depth2, int depth3, int depth4) {\r\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n            }\r\n          `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int row, int col, int depth,\r\n            int depth2, int depth3, int depth4) {\r\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine} {\r\n    const output = this.context.outputTextureLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const layout = this.context.inputTextureLayouts[i];\r\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n\r\n  /**\r\n   * Produces a packed value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}_Pack`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        vec4 ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset_${varName}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          return ${glsl.texture2D}(${varName}, coords);\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ProgramInfo, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: readonly number[];\r\n  outputShape: readonly number[];\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(\r\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\r\n      public outputTextureLayout: TextureLayout) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(\r\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\r\n      outputTextureLayout: TextureLayout) {\r\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = '';\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + '\\n';\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n    const vec2 halfCR = vec2(0.5, 0.5);\r\n\r\n    // Custom vector types to handle higher dimenalities.\r\n    struct ivec5\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n    };\r\n\r\n    struct ivec6\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n      int v;\r\n    };\r\n\r\n    int imod(int x, int y) {\r\n      return x - y * (x / y);\r\n    }\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {createPackProgramInfoLoader} from './ops/pack';\r\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\r\n\r\nimport {encodeAsUint8} from './ops/uint8-encode';\r\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\r\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\r\n\r\nconst getProgramInfoUniqueKey =\r\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\r\n      const inputs =\r\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\r\n              .join('_');\r\n      let key = programInfo.name;\r\n      if (programInfo.cacheHint) {\r\n        key += '[' + programInfo.cacheHint + ']';\r\n      }\r\n      key += ':' + inputs;\r\n      return key;\r\n    };\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  /**\r\n   * @returns [width, height]\r\n   */\r\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\r\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\r\n  }\r\n\r\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\r\n    if (inputs.length < program.inputNames.length) {\r\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\r\n    }\r\n    if (program.inputNames.length !== program.inputTypes.length) {\r\n      throw new Error('input names size does not match input types');\r\n    }\r\n\r\n    // create texture info for input\r\n    const inputTextureDatas: TextureData[] = [];\r\n    for (let i = 0; i < program.inputNames.length; ++i) {\r\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\r\n    }\r\n\r\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\r\n    let artifact = this.session.programManager.getArtifact(key);\r\n    const programInfo = artifact ?\r\n        artifact.programInfo :\r\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\r\n                                                                    (program as ProgramInfo));\r\n\r\n    // create texture info for output\r\n    const outputTextureLayout = createTextureLayoutFromTextureType(\r\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\r\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\r\n\r\n    if (!artifact) {\r\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\r\n      this.session.programManager.setArtifact(key, artifact);\r\n    }\r\n\r\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\r\n    return outputTextureData;\r\n  }\r\n\r\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\r\n    const outputTextureData = this.executeProgram(program, inputs);\r\n    return outputTextureData.tensor;\r\n  }\r\n\r\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    // input should match\r\n    for (let i = 0; i < inputs.length; ++i) {\r\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\r\n        throw new Error(`input[${i}] property packed inconsistent`);\r\n      }\r\n    }\r\n\r\n    // output should match\r\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\r\n      throw new Error('output property packed inconsistent');\r\n    }\r\n\r\n    this.session.programManager.run(artifact, inputs, output);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\r\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\r\n\r\n    if (!td) {\r\n      // check if we have texture data in different type\r\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\r\n      if (td) {\r\n        if (textureType === TextureType.packed) {\r\n          return this.pack(td);\r\n        } else {\r\n          return this.unpack(td);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!td) {\r\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\r\n\r\n      if (textureType === TextureType.packedLastDimension) {\r\n        const group = 1;\r\n        const channels = 4;\r\n        const shape = tensor.dims;\r\n        if (shape.length === 4) {\r\n          // pre-processing for kernel data of Conv.\r\n          //\r\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\r\n          // 1. implement texture based const-folding\r\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\r\n          // 3. run the program before dotProduct.\r\n          //\r\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\r\n          const adjustedLayout =\r\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\r\n          let buffer = tensor.numberData;\r\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\r\n            const numFeatureMaps = shape[0];\r\n            const oldRowSize = shape[1] * shape[2] * shape[3];\r\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n            const newSize = numFeatureMaps * newRowSize;\r\n            buffer = new Float32Array(newSize);\r\n            for (let f = 0; f < numFeatureMaps; ++f) {\r\n              const oldOffset = f * oldRowSize;\r\n              const newOffset = f * newRowSize + f % group * oldRowSize;\r\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n            }\r\n          }\r\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\r\n        }\r\n      }\r\n\r\n      if (textureType === TextureType.packed) {\r\n        const unpackedTextureLayout =\r\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\r\n        const unpackedTextureData = this.createTextureData(\r\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n        td = this.pack(unpackedTextureData);\r\n      } else {\r\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n      }\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureLayout: TextureLayout = {\r\n      channels: inputTD.channels,\r\n      height: inputTD.height,\r\n      width: inputTD.width,\r\n      // handle reshaping into scalar Tensors\r\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n      strides: ShapeUtil.computeStrides(reshapedDims),\r\n      unpackedShape: reshapedDims,\r\n    };\r\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\r\n\r\n    // check if the reshape is 'cheap'\r\n    if (isReshapeCheap(input.dims, reshapedDims)) {\r\n      const newTextureLayout: TextureLayout = {\r\n        channels: inputTD.channels,\r\n        height: inputTD.height,\r\n        width: inputTD.width,\r\n        // handle reshaping into scalar Tensors\r\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n        strides: ShapeUtil.computeStrides(reshapedDims),\r\n        unpackedShape: reshapedDims,\r\n        isPacked: true\r\n      };\r\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n      return newTextureData.tensor;\r\n    }\r\n\r\n    const squeezedInputShape = processDims3D(input.dims);\r\n    const squeezedOutputShape = processDims3D(reshapedDims);\r\n\r\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\r\n    const squeezedOutputTensor = this.run(\r\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\r\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\r\n    return outputTensor;\r\n  }\r\n\r\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\r\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\r\n    return textureData;\r\n  }\r\n\r\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ?\r\n        this.session.getTextureData(tensorId, isPacked) :\r\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td, isPacked);\r\n    } else {\r\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\r\n    }\r\n  }\r\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\r\n    return !!this.getTextureData(tensor.dataId, isPacked);\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (textureData.isPacked) {\r\n      return this.readTexture(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\r\n    if (textureData.isPacked) {\r\n      return this.readTextureAsync(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  pack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n\r\n  unpack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {cast, parseCastAttributes} from './ops/cast';\r\nimport {concat, parseConcatAttributes} from './ops/concat';\r\nimport {conv, parseConvAttributes} from './ops/conv';\r\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\r\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\r\nimport {gather, parseGatherAttributes} from './ops/gather';\r\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\r\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\r\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\r\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\r\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\r\nimport {averagePool, parseAveragePoolAttributes} from './ops/pool';\r\nimport {globalAveragePool, parseGlobalAveragePoolAttributes} from './ops/pool';\r\nimport {maxPool, parseMaxPoolAttributes} from './ops/pool';\r\nimport {globalMaxPool} from './ops/pool';\r\nimport {reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\r\nimport {parseReduceAttributes} from './ops/reduce';\r\nimport {reshape} from './ops/reshape';\r\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\r\nimport {shape} from './ops/shape';\r\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\r\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\r\nimport {parseSplitAttributes, split} from './ops/split';\r\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\r\nimport {sum} from './ops/sum';\r\nimport {tile} from './ops/tile';\r\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\r\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\r\n  ['Abs', '', '6+', unaryOps.abs],\r\n  ['Acos', '', '7+', unaryOps.acos],\r\n  ['Add', '', '7+', binaryOps.add],\r\n  ['And', '', '7+', binaryOps.and],\r\n  ['Asin', '', '7+', unaryOps.asin],\r\n  ['Atan', '', '7+', unaryOps.atan],\r\n  // TODO: support new attributes for AveragePool-10\r\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\r\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\r\n  ['Cast', '', '6+', cast, parseCastAttributes],\r\n  ['Ceil', '', '6+', unaryOps.ceil],\r\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\r\n  ['Clip', '', '11+', unaryOps.clipV11],\r\n  ['Concat', '', '4+', concat, parseConcatAttributes],\r\n  ['Conv', '', '1+', conv, parseConvAttributes],\r\n  ['Cos', '', '7+', unaryOps.cos],\r\n  ['Div', '', '7+', binaryOps.div],\r\n  ['Dropout', '', '7+', unaryOps.identity],\r\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\r\n  ['Equal', '', '7+', binaryOps.equal],\r\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\r\n  ['Exp', '', '6+', unaryOps.exp],\r\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\r\n  ['Floor', '', '6+', unaryOps.floor],\r\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\r\n  ['Gather', '', '1+', gather, parseGatherAttributes],\r\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\r\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\r\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\r\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\r\n  ['Greater', '', '7+', binaryOps.greater],\r\n  ['Identity', '', '1+', unaryOps.identity],\r\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\r\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\r\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\r\n  ['Less', '', '7+', binaryOps.less],\r\n  ['Log', '', '6+', unaryOps.log],\r\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\r\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\r\n  ['Mul', '', '7+', binaryOps.mul],\r\n  ['Neg', '', '6+', unaryOps.neg],\r\n  ['Not', '', '1+', unaryOps.not],\r\n  ['Or', '', '7+', binaryOps.or],\r\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\r\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\r\n  ['Pow', '', '7+', binaryOps.pow],\r\n  ['PRelu', '', '7+', binaryOps.pRelu],\r\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\r\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\r\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\r\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\r\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\r\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\r\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\r\n  ['Relu', '', '6+', unaryOps.relu],\r\n  ['Reshape', '', '5+', reshape],\r\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\r\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\r\n  ['Shape', '', '1+', shape],\r\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\r\n  ['Sin', '', '7+', unaryOps.sin],\r\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\r\n  // The \"semantic\" meaning of axis has changed in opset-13.\r\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\r\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data is split.\r\n  // When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2-12', split, parseSplitAttributes],\r\n  ['Sqrt', '', '6+', unaryOps.sqrt],\r\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\r\n  ['Squeeze', '', '13+', squeezeV13],\r\n  ['Sub', '', '7+', binaryOps.sub],\r\n  ['Sum', '', '6+', sum],\r\n  ['Tan', '', '7+', unaryOps.tan],\r\n  ['Tanh', '', '6+', unaryOps.tanh],\r\n  ['Tile', '', '6+', tile],\r\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\r\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\r\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\r\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\r\n  ['Unsqueeze', '', '13+', unsqueezeV13],\r\n  ['Xor', '', '7+', binaryOps.xor],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n  momentum: number;\r\n  spatial: number;\r\n}\r\n\r\nconst batchNormalizationProgramMetadata = {\r\n  name: 'BatchNormalization',\r\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n  inputTypes:\r\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\r\n};\r\n\r\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...batchNormalizationProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\r\n    (node: Graph.Node): BatchNormalizationAttributes => {\r\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\r\n      const momentum = node.attributes.getFloat('momentum', 0.9);\r\n      const spatial = node.attributes.getInt('spatial', 1);\r\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\r\n    };\r\n\r\nconst createBatchNormalizationProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\r\n        ProgramInfo => {\r\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n          const rank = inputs[0].dims.length;\r\n          const [scaleWidth, scaleHeight] =\r\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\r\n          const shaderSource = `\r\n  float process(int[${rank}] indices) {\r\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\r\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\r\n  }`;\r\n          return {\r\n            ...batchNormalizationProgramMetadata,\r\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 5) {\r\n    throw new Error('BatchNormalization requires 5 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n  const mean = inputs[3];\r\n  const var_ = inputs[4];\r\n\r\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n      var_.dims.length !== 1) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n      var_.dims[0] !== X.dims[1]) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = 'add_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = 'div_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = 'mul_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = 'sub_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = 'equal_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(equal(v1, v2));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = 'greater_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = 'less_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = 'and_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = 'or_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = 'xor_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = 'prelu_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nconst createBinaryProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        cacheHint: cacheKey,\r\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\r\n      };\r\n    };\r\n\r\nconst createBinaryProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      let outputShape = inputs[0].dims;\r\n\r\n      const usePackedTexture = handler.session.pack;\r\n\r\n      if (isBroadcast) {\r\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n        if (!calculatedShape) {\r\n          throw new Error('Can\\'t perform binary op on the given tensors');\r\n        }\r\n        outputShape = calculatedShape;\r\n        const outputRank = outputShape.length;\r\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\r\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\r\n\r\n        const glsl = getGlsl(handler.session.backend.glContext.version);\r\n        const shaderSource = usePackedTexture ? `\r\n      ${glslFunc.body}\r\n      void main() {\r\n        vec4 a = getAAtOutCoords();\r\n        vec4 b = getBAtOutCoords();\r\n        vec4 result = ${glslFunc.name}(a, b);\r\n        ${glsl.output} = result;\r\n      }` :\r\n                                                `\r\n      ${glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\r\n      }`;\r\n\r\n        return {\r\n          name: glslFunc.name,\r\n          inputNames: ['A', 'B'],\r\n          inputTypes: [textureType, textureType],\r\n          output: {dims: outputShape, type: outputTensorType, textureType},\r\n          shaderSource,\r\n          hasMain: usePackedTexture\r\n        };\r\n      }\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n    ${glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\r\n\r\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\r\n\r\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\r\n\r\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\r\n\r\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\r\n\r\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\r\n\r\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\r\n\r\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\r\n\r\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\r\n\r\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\r\n\r\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\r\n\r\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ProtoUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const cast: OperatorImplementation<Tensor.DataType> =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\r\n      validateInputs(inputs);\r\n      return [handler.cast(inputs[0], to)];\r\n    };\r\n\r\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\r\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Cast requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\nimport {ConcatAttributes} from './concat';\r\n\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat (packed)',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.packed),\r\n  cacheHint\r\n});\r\n\r\nconst createPackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const coords = getChannels('coords', rank);\r\n      const dtype = getCoordsDataType(rank);\r\n      const unpackChannel = unpackFromChannel();\r\n\r\n      const shapes = inputs.map(i => i.dims);\r\n      const channels = getGlChannels(rank);\r\n      const offsets: number[] = new Array(shapes.length - 1);\r\n\r\n      offsets[0] = shapes[0][axis];\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\r\n      }\r\n\r\n      const channel = channels[axis];\r\n      const lastChannels = channels.slice(-2);\r\n      const allChannels = channels.join();\r\n\r\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\r\n        return getChannel(\r\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\r\n        }`;\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        const shift = offsets[i - 1];\r\n        getValueSnippet += `\r\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\r\n              return getChannel(\r\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\r\n            }`;\r\n      }\r\n      const lastIndex = offsets.length;\r\n      const shift = offsets[offsets.length - 1];\r\n      getValueSnippet += `\r\n            return getChannel(\r\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\r\n\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n      const shaderSource = `\r\n          ${unpackChannel}\r\n          float getValue(${channels.map(x => 'int ' + x)}) {\r\n            ${getValueSnippet}\r\n          }\r\n\r\n          void main() {\r\n            ${dtype} coords = getOutputCoords();\r\n            int lastDim = coords.${channels[rank - 1]};\r\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\r\n            coords.${channels[rank - 2]} = lastDim;\r\n\r\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\r\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.g = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\r\n              result.a = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\r\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.b = getValue(${coords});\r\n            }\r\n            ${glsl.output} = result;\r\n          }\r\n        `;\r\n\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createPackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\r\n  const channelIdx = channels.indexOf(channel);\r\n  const res = channels.map((c, idx) => {\r\n    if (idx === channelIdx) {\r\n      return `${c} - ${shift}`;\r\n    } else {\r\n      return c;\r\n    }\r\n  });\r\n  return res.join();\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\r\n\r\nexport interface ConcatAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const concat: OperatorImplementation<ConcatAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\r\n        const output =\r\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      } else {\r\n        const output =\r\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      }\r\n    };\r\n\r\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n\r\n      const sizeInConcatAxis = new Array<number>(inputs.length);\r\n      let previousSum = 0;\r\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n        previousSum += inputs[i].dims[axis];\r\n        sizeInConcatAxis[i] = previousSum;\r\n      }\r\n\r\n      let getTextureIndexWhereDataResidesMethod = '';\r\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n      if (inputs.length < 5) {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n      } else {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\r\n      }\r\n\r\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\r\n      const shaderSource = `\r\n        ${fetchDataFromCorrectTextureMethod}\r\n        ${getSizeInConcatAxisValueFromIndexMethod}\r\n        ${getTextureIndexWhereDataResidesMethod}\r\n        float process(int indices[${rank}]) {\r\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\r\n\r\n          if(textureIndex != 0) {\r\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\r\n          }\r\n\r\n          return fetchDataFromCorrectTexture(textureIndex, indices);\r\n        }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\r\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\r\n`);\r\n  return `int getTextureWhereDataResides(int index) {\r\n      ${searchAxis.join('')}\r\n    }`;\r\n};\r\n\r\n// TODO: Implement BinarySearch in GLSL\r\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\r\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n\r\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\r\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return _X${i}(indices); }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\r\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\r\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    } else if (i === sizeInConcatAxis.length - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return ${sizeInConcatAxis[i]}; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n\r\n  const inputType = inputs[0].type;\r\n  const inputDimensionality = inputs[0].dims.length;\r\n\r\n  // TODO: Support string concat\r\n  if (inputType === 'string') {\r\n    throw new Error('string tensor is not supported yet');\r\n  }\r\n\r\n  for (const input of inputs) {\r\n    // make sure types of all inputs match\r\n    if (input.type !== inputType) {\r\n      throw new Error('input tensors should be one type');\r\n    }\r\n\r\n    // make sure the dimensionality of all inputs are the same\r\n    if (input.dims.length !== inputDimensionality) {\r\n      throw new Error('input tensors should have the same shape');\r\n    }\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'GroupedConv',\r\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedGroupedConvProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\r\n      const xShape = inputs[0].dims.slice();\r\n      const wShape = inputs[1].dims.slice();\r\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\r\n      Logger.verbose(\r\n          'GroupedConv',\r\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\r\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\r\n      const outputShape =\r\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n    ivec2 xRCCorner = coords.zw * strides - pads;\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n\r\n    float value = 0.0;\r\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\r\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\r\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\r\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\r\n\r\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\r\n          continue;\r\n        }\r\n\r\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\r\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\r\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\r\n            continue;\r\n          }\r\n\r\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\r\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\r\n          value += xVal*wVal;\r\n        }\r\n      }\r\n    }\r\n    ${processBias}\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createUnpackedGroupedConvProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const conv2DPackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n    };\r\n\r\nexport const conv2DPacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n\r\n      // run im2col\r\n      const im2colOutput = inferenceHandler.run(\r\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\r\n          [inputs[0]]);\r\n\r\n      // reshape kernel\r\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\r\n\r\n      // run matmul\r\n      const matmulInputs =\r\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n\r\n      // reshape output\r\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n      return outputReshaped;\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\r\nimport {conv2DPacked} from './conv-pack';\r\nimport {createDotProductProgramInfoLoader} from './dot-product';\r\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createIm2ColProgramInfoLoader} from './im2col';\r\nimport {createMatmulProgramInfoLoader} from './matmul';\r\n\r\n\r\nexport const calculateOutputShape =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\r\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\r\n      const batchSize = inputShape[0];\r\n      const inputSpatialShape = inputShape.slice(2);\r\n      const spatialRank = inputSpatialShape.length;\r\n      const outChannels = kernelShape[0];\r\n      const kernelSpatialShape = kernelShape.slice(2);\r\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n      const outputSpatialShape =\r\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n      return outputShape;\r\n    };\r\n\r\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly dilations: readonly number[];\r\n  readonly group: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly pads: readonly number[];\r\n  readonly strides: readonly number[];\r\n}\r\n\r\nexport const conv: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\r\n      return conv2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst conv2d: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\r\n      const packMode = inferenceHandler.session.pack;\r\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\r\n      if (adjustedAttributes.group > 1) {\r\n        const result = inferenceHandler.run(\r\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\r\n        return [result];\r\n      } else if (isPointwise && packMode) {\r\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\r\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else {\r\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      }\r\n    };\r\n\r\nconst conv2DUnpackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\r\n    };\r\n\r\nconst conv2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const xIm2Col = inferenceHandler.run(\r\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\r\n\r\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\r\n      const output = inferenceHandler.run(\r\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\r\n      return output;\r\n    };\r\n\r\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\r\n  const attributes = node.attributes;\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n  const dilations = attributes.getInts('dilations', [1, 1]);\r\n  const group = attributes.getInt('group', 1);\r\n  const kernelShape = attributes.getInts('kernel_shape', []);\r\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n  const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('Conv input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('Conv input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface DepthToSpaceAttributes {\r\n  mode: 'DCR'|'CRD';\r\n  blocksize: number;\r\n}\r\n\r\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const blocksize = attributes.blocksize;\r\n      const blocksizeSqr = blocksize * blocksize;\r\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\r\n      const firstReshapeShape = attributes.mode === 'DCR' ?\r\n          [\r\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ] :\r\n          [\r\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ];\r\n\r\n      // const transpose = new WebGLTranspose();\r\n      // const attributes = new Attribute(undefined);\r\n      // attributes.set('perm', 'ints', transposePerm);\r\n      // transpose.initialize(attributes);\r\n\r\n      // First reshape\r\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\r\n\r\n      // transpose\r\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\r\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\r\n\r\n      // Second reshape\r\n      const secondReshapeShape = [\r\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\r\n        inputs[0].dims[3] * blocksize\r\n      ];\r\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\r\n      return [result];\r\n    };\r\n\r\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\r\n    (node: Graph.Node): DepthToSpaceAttributes => {\r\n      // processing node attributes\r\n      const blocksize = node.attributes.getInt('blocksize');\r\n      if (blocksize < 1) {\r\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\r\n      }\r\n      const mode = node.attributes.getString('mode', 'DCR');\r\n      if (mode !== 'DCR' && mode !== 'CRD') {\r\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\r\n      }\r\n      return {mode, blocksize};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (inputs.length !== 1) {\r\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\r\n  }\r\n\r\n  // Input has to be a 4-D tensor\r\n  // TODO: Support string depth-to-space.\r\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\r\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {calculateIm2ColDims} from './im2col';\r\n\r\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\r\n  name: 'ConvDotProduct',\r\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.packedLastDimension],\r\n  cacheKey: attributes.activationCacheKey\r\n});\r\n\r\nconst createDotProductProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\r\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\r\n      const [kWidth, kHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\r\n\r\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\r\n      const [im2colWidth, im2colHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\r\n      const rank = outputShape.length;\r\n\r\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\r\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n${activationFunction}\r\nfloat process(int indices[${rank}]) {\r\n  int b[1];\r\n  b[0] = indices[1];\r\n  int im2col[4];\r\n  im2col[0] = indices[0];\r\n  im2col[1] = indices[2];\r\n  im2col[2] = indices[3];\r\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\r\n          im2colStrides[2]};\r\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\r\n  float value = ${initValue};\r\n  for (int i = 0; i < ${sharedDim}; ++i) {\r\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\r\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\r\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n    ++im2colOffset;\r\n    ++kernelOffset;\r\n  }\r\n  ${applyActivation}\r\n  return value;\r\n}`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createDotProductProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\r\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\r\n      return {\r\n        ...metadata,\r\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const flatten: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\r\n      validateInputs(inputs, axis);\r\n\r\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\r\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\r\n    };\r\n\r\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getInt('axis', 1);  // default axis is 1\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Flatten requires 1 input.');\r\n  }\r\n\r\n  const r = inputs[0].dims.length;\r\n  if (r === 0) {\r\n    throw new Error('scalar tensor is not supported.');\r\n  }\r\n\r\n  if (axis < -r || axis > r) {\r\n    throw new Error('Invalid axis');\r\n  }\r\n\r\n  // TODO: Support string type\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('string tensor is not supported.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {GlslValueFunction} from '../glsl-definitions';\r\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\r\n\r\nexport interface InternalActivationAttributes {\r\n  readonly activation: string;\r\n  readonly clipMin?: number;\r\n  readonly clipMax?: number;\r\n  readonly activationCacheKey: string;\r\n}\r\n\r\nexport function getActicationSnippet(attributes: InternalActivationAttributes) {\r\n  let func: GlslValueFunction;\r\n  switch (attributes.activation) {\r\n    case 'Relu':\r\n      func = glslRelu();\r\n      break;\r\n    case 'Sigmoid':\r\n      func = glslSigmoid();\r\n      break;\r\n    case 'Clip':\r\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\r\n      break;\r\n    // TODO: adding other activations that can be fused.\r\n    default:\r\n      return {activationFunction: '', applyActivation: ''};\r\n  }\r\n\r\n  const activationName = func.name;\r\n  const activationFunction = func.body;\r\n  const applyActivation = `value = ${activationName}_(value);`;\r\n  return {activationFunction, applyActivation};\r\n}\r\n\r\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\r\n  const activation = attributes.getString('activation', '');\r\n\r\n  if (activation === 'Clip') {\r\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\r\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\r\n  }\r\n  return {activation, activationCacheKey: activation};\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\ninterface GatherAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const gather: OperatorImplementation<GatherAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes.axis);\r\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\r\n\r\nconst gatherProgramMetadata = {\r\n  name: 'Gather',\r\n  inputNames: ['A', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createGatherProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const indexDataShape = inputs[1].dims.slice();\r\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\r\n      const indexCopyOps: string[] = [];\r\n      for (let i = 0; i < outputShape.length; i++) {\r\n        // outputShape is divided into three parts: A, B, C\r\n        // |0        axis|  axis + indexDataShape.length |          end|\r\n        // |     A       |             B                 |      C      |\r\n        //\r\n        // inputIdx: [A, inputs[1][B], C]\r\n        if (i < axis) {  // A\r\n          outputShape[i] = inputShape[i];\r\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n        } else {\r\n          if (i < axis + indexDataShape.length) {  // B\r\n            outputShape[i] = indexDataShape[i - axis];\r\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n          } else {                                                       // C\r\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n          }\r\n        }\r\n      }\r\n\r\n      const orank = outputShape.length || 1;\r\n      const irank = inputShape.length;\r\n      const iDrank = indexDataShape.length || 1;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createGatherProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\r\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Gather requires 2 inputs.');\r\n  }\r\n  const tensorRank = inputs[0].dims.length;\r\n  if (tensorRank < 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (axis < -tensorRank || axis > tensorRank - 1) {\r\n    throw new Error('Invalid axis.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface GemmAttributes extends AttributeWithCacheKey {\r\n  transA: boolean;\r\n  transB: boolean;\r\n  alpha: number;\r\n  beta: number;\r\n  isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n\r\nexport const gemm: OperatorImplementation<GemmAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\r\n  const transA = node.attributes.getInt('transA', 0) !== 0;\r\n  const transB = node.attributes.getInt('transB', 0) !== 0;\r\n  const alpha = node.attributes.getFloat('alpha', 1.0);\r\n  const beta = node.attributes.getFloat('beta', 1.0);\r\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\r\n};\r\n\r\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, false);\r\n\r\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, true);\r\n\r\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\r\n  const metadata = {\r\n    name: 'Gemm',\r\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                                      [TextureType.unpacked, TextureType.unpacked],\r\n    key: attributes.cacheKey\r\n  };\r\n\r\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\r\n};\r\n\r\nconst createGemmProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\r\n      const aShape = inputs[0].dims.slice();\r\n      const bShape = inputs[1].dims.slice();\r\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n      const outputShape = [M, N];\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use gemm on the given tensors');\r\n      }\r\n      let sharedDim = aShape[aShape.length - 1];\r\n      let line = '';\r\n      if (attributes.transA) {\r\n        sharedDim = aShape[0];\r\n      }\r\n      if (attributes.transA && attributes.transB) {\r\n        line = 'value += _A_T(a) * _B_T(b);';\r\n      } else if (attributes.transA && !attributes.transB) {\r\n        line = 'value += _A_T(a) * _B(b);';\r\n      } else if (!attributes.transA && attributes.transB) {\r\n        line = 'value += _A(a) * _B_T(b);';\r\n      } else if (!attributes.transA && !attributes.transB) {\r\n        line = 'value += _A(a) * _B(b);';\r\n      }\r\n      const rank = outputShape.length;\r\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\r\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\r\n      const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        variables: [\r\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\r\n        ],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\r\n  if (!inputs) {\r\n    throw new Error('Input is missing');\r\n  }\r\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n    throw new Error('Invaid input shape.');\r\n  }\r\n  if (!attributes.isOptionalC && inputs.length !== 3) {\r\n    throw new Error('Gemm requires 3 inputs');\r\n  }\r\n\r\n  // 'C' can be of dimensionality 1 or 2 only\r\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n    throw new Error('Invalid input shape of C');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n\r\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n    throw new Error('Input types are mismatched');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {ConvAttributes} from './conv';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col (packed)',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed],\r\n  cacheHint,\r\n});\r\n\r\nconst createPackedIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n      const rowDim = 2;\r\n      const colDim = 3;\r\n      const rank = outputShape.length;\r\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\r\n      const kernelSize = wshape[2] * wshape[3];\r\n      const unpackChannel = unpackFromChannel();\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      let unrolled = '';\r\n\r\n      for (let row = 0; row <= 1; row++) {\r\n        for (let col = 0; col <= 1; col++) {\r\n          unrolled += `\r\n            blockIndex = rc.x + ${col};\r\n            pos = rc.y + ${row};\r\n\r\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\r\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\r\n                ${attributes.pads[0]};\r\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\r\n\r\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\r\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\r\n                  ${attributes.pads[1]};\r\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\r\n\r\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\r\n\r\n                  ch = int(float(pos)/ ${kernelSize}.);\r\n                    innerDims = vec2(d0, d1);\r\n                    result[${row * 2 + col}] = getChannel(\r\n                      getA(0, ch, int(innerDims.x),\r\n                      int(innerDims.y)), innerDims);\r\n                }\r\n              }\r\n            }\r\n\r\n          `;\r\n        }\r\n      }\r\n\r\n      const shaderSource = `\r\n      ${unpackChannel}\r\n\r\n      void main() {\r\n        ivec2 rc = getOutputCoords();\r\n          vec4 result = vec4(0.0);\r\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n          vec2 innerDims;\r\n          ${unrolled}\r\n          ${glsl.output} = result;\r\n      }\r\n            `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {ConvAttributes} from './conv';\r\n\r\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n  cacheHint,\r\n});\r\n\r\nconst createIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n\r\n      const rank = outputShape.length;\r\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\r\n\r\n      const shaderSource = `\r\n        const int XC = ${xshape[1]};\r\n        const int XH = ${xshape[2]};\r\n        const int XW = ${xshape[3]};\r\n        const int KH = ${attributes.kernelShape[0]};\r\n        const int KW = ${attributes.kernelShape[1]};\r\n        const int dilationH = ${attributes.dilations[0]};\r\n        const int dilationW = ${attributes.dilations[1]};\r\n        const int strideH = ${attributes.strides[0]};\r\n        const int strideW = ${attributes.strides[1]};\r\n        const int padH = ${attributes.pads[0]};\r\n        const int padW = ${attributes.pads[1]};\r\n        const int KHKW = KH*KW;\r\n        const int XCKHKW = XC * KHKW;\r\n        const int outputChannels = 4;\r\n        vec4 process(int indices[${rank}]) {\r\n          int b  = indices[0]; // batch size\r\n          int oh = indices[1] * strideH - padH; //output height\r\n          int ow = indices[2] * strideW - padW; //output width\r\n          int p = indices[3] * outputChannels; //patch\r\n          vec4 value = vec4(0.0);\r\n          for(int i=0; i < outputChannels; ++i) {\r\n            if(p < XCKHKW) {\r\n              int patchC = p / KHKW;\r\n              int patchH = (p - patchC*KHKW) / KW;\r\n              int patchW = (p - patchC*KHKW) - patchH * KW;\r\n              int xh2 = oh + patchH * dilationH;\r\n              int xw2 = ow + patchW * dilationW;\r\n              int x[${xshape.length}];\r\n              x[0] = b;\r\n              x[1] = patchC;\r\n              x[2] = xh2;\r\n              x[3] = xw2;\r\n              if(xh2 >= 0 &&\r\n                  xh2 < XH &&\r\n                  xw2 >= 0 &&\r\n                  xw2 < XW) {\r\n                value[i] = _X(x);\r\n              }\r\n            }\r\n            ++p;\r\n          }\r\n          return value;\r\n        }\r\n        `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n\r\n\r\nexport const calculateIm2ColDims =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\r\n        number[] =>\r\n            [outputShape[0], outputShape[2], outputShape[3],\r\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\r\n  scale: number;\r\n  bias: number[];\r\n}\r\n\r\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output =\r\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\r\n    (node: Graph.Node): ImageScalerAttributes => {\r\n      const scale = node.attributes.getFloat('scale');\r\n      const bias = node.attributes.getFloats('bias');\r\n      return createAttributeWithCacheKey({scale, bias});\r\n    };\r\n\r\nconst imageScalerProgramMetadata = {\r\n  name: 'ImageScaler',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createImageScalerProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\r\n        ProgramInfo => {\r\n          const outputShape = inputs[0].dims.slice();\r\n          const rank = outputShape.length;\r\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\r\n          const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            variables: [\r\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\r\n              {name: 'scale', type: 'float', data: attributes.scale}\r\n            ],\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst createImageScalerProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\r\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\r\n    };\r\n\r\nconst createGetBiasMethod = (numChannels: number): string => {\r\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n  for (let i = 0; i < numChannels; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (channel == ${i}) { return bias[${i}]; }`);\r\n    } else if (i === numChannels - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return bias[${i}]; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (channel == ${i}) { return bias[${i}]; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('ImageScaler requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const instanceNormalization: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\r\n      const output = inferenceHandler.run(\r\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\r\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\r\n      return [output];\r\n    };\r\n\r\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getFloat('epsilon', 1e-5);\r\n\r\nconst meanAndVarianceProgramMetadata = {\r\n  name: 'InstanceNormalization_MeanAndVariance',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\r\n  const xDims = input.dims.slice();\r\n  const channel = xDims[1];\r\n  const channelSize = xDims[2] * xDims[3];\r\n  const outputShape = [xDims[0], channel];\r\n\r\n  const shaderSource = `\r\n      vec4 process(int[2] indices) {\r\n        vec4 v = vec4(0.0);\r\n        int a[4];\r\n        a[0] = indices[0];\r\n        a[1] = indices[1];\r\n        float temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += x;\r\n          }\r\n        }\r\n        float mean = temp / float(${channelSize});\r\n        temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += (x - mean) * (x - mean);\r\n          }\r\n        }\r\n        v.r = mean;\r\n        v.g = temp / float(${channelSize});\r\n\r\n        return v;\r\n      }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\r\n  ...meanAndVarianceProgramMetadata,\r\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\r\n});\r\n\r\nconst computeOutputProgramMetadata = {\r\n  name: 'InstanceNormalization_ComputeOutput',\r\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createComputeOutputProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\r\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\r\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\r\n      const shaderSource = `\r\n      vec4 get_MeanAndVariance(int[2] mv) {\r\n        int offset = indicesToOffset_MeanAndVariance(mv);\r\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\r\n        return ${glsl.texture2D}(MeanAndVariance, coords);\r\n      }\r\n\r\n      float process(int[4] indices) {\r\n        int mv[2];\r\n        mv[0] = indices[0];\r\n        mv[1] = indices[1];\r\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\r\n        float mean = mean_and_variance.r;\r\n        float variance = mean_and_variance.g;\r\n\r\n        int sb[1];\r\n        sb[0] = indices[1];\r\n        float scale = _Scale(sb);\r\n        float b = _B(sb);\r\n\r\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createComputeOutputProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\r\n        ProgramInfoLoader => {\r\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\r\n          return {\r\n            ...metadata,\r\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 3) {\r\n    throw new Error('InstanceNormalization requires 3 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n\r\n  // input should at least have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n    throw new Error('Input shapes are mismatched.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Only support 4-D input shape.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {getBiasForMatmul} from './matmul';\r\n\r\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul (packed)',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\r\n                        [TextureType.packed, TextureType.packed],\r\n  cacheHint\r\n});\r\n\r\nconst createPackedMatmulProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n      const aShape = inputs[0].dims;\r\n      const bShape = inputs[1].dims;\r\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use matmul on the given tensors');\r\n      }\r\n      const sharedDim = aShape[aShape.length - 1];\r\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\r\n      const aRank = aShape.length;\r\n      const bRank = bShape.length;\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const coordsDataType = getCoordsDataType(outputShape.length);\r\n      const outRank = outputShape.length;\r\n      const allGlChannels = getGlChannels();\r\n      const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\r\n\r\n      const getBiasForMatmulSnippet =\r\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\r\n\r\n      const getBcastedSamplerForMatmulSnippet =\r\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\r\n\r\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\r\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\r\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\r\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\r\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\r\n      `;\r\n      const shaderSource = `\r\n            ${getBcastedSamplerForMatmulSnippet}\r\n            ${getBiasForMatmulSnippet}\r\n            ${activationFunction}\r\n            void main() {\r\n              ${getOutputCoordsSnippet}\r\n\r\n              vec4 value = vec4(0);\r\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\r\n                vec4 a = ${getSamplerAInLoopSnippet};\r\n                vec4 b = ${getSamplerBInLoopSnippet};\r\n\r\n                value += (a.rrbb * b.rgrg);\r\n                value += (a.ggaa * b.baba);\r\n              }\r\n              ${processBias}\r\n              ${applyActivation}\r\n              ${glsl.output} = value;\r\n            }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedMatmulProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\r\n      };\r\n    };\r\n\r\nfunction getBcastSamplerForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\r\n  let unpackedACoordsSnippet = [];\r\n  let unpackedBCoordsSnippet = [];\r\n\r\n  const inAShape = inputs[0].dims;\r\n  const inBShape = inputs[1].dims;\r\n\r\n  const inARank = inAShape.length;\r\n  const inBRank = inBShape.length;\r\n\r\n  const outRank = outShape.length;\r\n  const rankADiff = outRank - inARank;\r\n  const rankBDiff = outRank - inBRank;\r\n\r\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\r\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\r\n  unpackedACoordsSnippet.join(', ');\r\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\r\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\r\n  unpackedBCoordsSnippet.join(', ');\r\n\r\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\r\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\r\n\r\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\r\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\r\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\r\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\r\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\r\n\r\n  const getBcastSamplerMatmulSource = `\r\nvec4 getAAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsASnippet}\r\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\r\n  return outputValue;\r\n}\r\n\r\nvec4 getBAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsBSnippet}\r\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\r\n  return outputValue;\r\n}`;\r\n\r\n  return getBcastSamplerMatmulSource;\r\n}\r\n\r\nfunction getA(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += `rc.${allGlChannels[rank - 2]}, ` +\r\n      'i*2';\r\n  return res;\r\n}\r\n\r\nfunction getB(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += 'i*2, ' +\r\n      `rc.${allGlChannels[rank - 1]}`;\r\n  return res;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\nimport {getActicationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      if (inferenceHandler.session.pack) {\r\n        return [inferenceHandler.run(\r\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\r\n      } else {\r\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\r\n      }\r\n    };\r\n\r\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\r\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\r\n\r\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nfunction createMatmulProgramInfo(\r\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\r\n  const aShape = inputs[0].dims;\r\n  const bShape = inputs[1].dims;\r\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n  if (!outputShape) {\r\n    throw new Error('Can\\'t use matmul on the given tensors');\r\n  }\r\n  const coordsDataType = getCoordsDataType(outputShape.length);\r\n  const allGlChannels = getGlChannels();\r\n  const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\r\n\r\n  const hasBias = inputs.length > 2;\r\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n  const getBiasForMatmulSnippet =\r\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\r\n\r\n  const rank = outputShape.length;\r\n  const arank = aShape.length;\r\n  const brank = bShape.length;\r\n  const sharedDim = aShape[aShape.length - 1];\r\n  const shaderSource = `\r\n    ${activationFunction}\r\n    ${getBiasForMatmulSnippet}\r\n    float process(int indices[${rank}]) {\r\n        int a[${arank}];\r\n        int b[${brank}];\r\n        bcastMatmulIndices_A(indices, a);\r\n        bcastMatmulIndices_B(indices, b);\r\n\r\n        float value;\r\n        for (int k=0; k<${sharedDim}; ++k) {\r\n            a[${arank - 1}] = k;\r\n            b[${brank - 2}] = k;\r\n            value += _A(a) * _B(b);\r\n        }\r\n        ${processBias}\r\n        ${applyActivation}\r\n        return value;\r\n    }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createMatmulProgramInfoLoader(\r\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\r\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('MatMul requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n    throw new Error('shared dimension does not match.');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n\r\n  if (inputs[0].type !== inputs[1].type) {\r\n    throw new Error('inputs types should match');\r\n  }\r\n};\r\n\r\nexport function getBiasForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\r\n    isPacked: boolean): string {\r\n  let unpackedCoordsSnippet = '';\r\n  const inRank = inShape.length;\r\n  const outRank = outShape.length;\r\n  const rankDiff = outRank - inRank;\r\n  if (outRank < 2 && inRank > 0) {\r\n    unpackedCoordsSnippet = 'coords';\r\n  } else {\r\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\r\n  }\r\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\r\n  const inSize = ShapeUtil.size(inShape);\r\n  const isInputScalar = inSize === 1;\r\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\r\n  if (isInputScalar) {\r\n    output = 'vec4(outputValue.x)';\r\n  }\r\n  const getBiasForMatmulSource = isPacked ? `\r\nvec4 getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\r\n  return ${output};\r\n}` :\r\n                                            `\r\nfloat getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  return getBias(coords.x);\r\n}`;\r\n\r\n  return getBiasForMatmulSource;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels} from './packing-utils';\r\n\r\nconst packProgramMetadata = {\r\n  name: 'pack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpackedReversed]\r\n};\r\n\r\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const inputShape = input.dims;\r\n\r\n  const inputRank = inputShape.length;\r\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\r\n  const outputRank = input.dims.length;\r\n\r\n  const coordsDataType = getCoordsDataType(outputRank);\r\n  const channels = getChannels('rc', outputRank);\r\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\r\n\r\n  let reversedInputWH;\r\n  if (inputRank === 0) {\r\n    reversedInputWH = [1, 1];\r\n  } else if (inputRank === 1) {\r\n    reversedInputWH = [inputShape[0], 1];\r\n  } else {\r\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\r\n  }\r\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\r\n  const output = getOutput(inputShape, channels);\r\n\r\n  const shaderSource = `\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          if(${outOfBoundsCondition}) {\r\n            ${glsl.output} = vec4(0);\r\n          } else {\r\n            ${setup}\r\n\r\n            ${glsl.output} = vec4(${output});\r\n          }\r\n        }\r\n      `;\r\n  return {\r\n    ...packProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\r\n\r\n/**\r\n * check output coordinate location and return false if it is outside input's width/height boundary\r\n */\r\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\r\n  if (rank === 0) {\r\n    return 'false';\r\n  }\r\n  if (rank === 1) {\r\n    return `rc > ${shape[0]}`;\r\n  }\r\n\r\n  let cond = '';\r\n  for (let i = rank - 2; i < rank; i++) {\r\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\r\n    if (i < rank - 1) {\r\n      cond += '||';\r\n    }\r\n  }\r\n\r\n  return cond;\r\n}\r\n\r\n/**\r\n * code snippet to sample input texture with output coordiantes\r\n */\r\nfunction getOutput(shape: readonly number[], dims: string[]): string {\r\n  const rank = shape.length;\r\n\r\n  if (rank === 0) {\r\n    return 'getA(), 0, 0, 0';\r\n  }\r\n\r\n  if (rank === 1) {\r\n    return `getA(rc),\r\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\r\n            0, 0`;\r\n  }\r\n\r\n  const coord00 = 'r, c';\r\n  const coord01 = 'r, cp1';\r\n  const coord10 = 'rp1, c';\r\n  const coord11 = 'rp1, cp1';\r\n  let D = '';\r\n  if (rank > 2) {\r\n    for (let i = 0; i < rank - 2; ++i) {\r\n      D = D + `${dims[i]},`;\r\n    }\r\n  }\r\n  return `getA(${D}${coord00}),\r\n          rEdge ? 0. : getA(${D}${coord10}),\r\n          cEdge ? 0. : getA(${D}${coord01}),\r\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\r\n}\r\n\r\n/**\r\n * code snippet to setup 4 coordinates and edge conditions\r\n */\r\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\r\n  if (rank === 0 || rank === 1) {\r\n    return '';\r\n  }\r\n  // rank >= 2 for width+height pack.\r\n  else {\r\n    const setup = `\r\n    int r = ${dims[rank - 2]};\r\n    int c = ${dims[rank - 1]};\r\n    int rp1 = ${dims[rank - 2]} + 1;\r\n    int cp1 = ${dims[rank - 1]} + 1;\r\n    bool rEdge = rp1 >= ${cols};\r\n    bool cEdge = cp1 >= ${rows};\r\n    `;\r\n    return setup;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlChannels} from '../utils';\r\n\r\nexport function getVecChannels(name: string, rank: number): string[] {\r\n  return getGlChannels(rank).map(d => `${name}.${d}`);\r\n}\r\n\r\nexport function getChannels(name: string, rank: number): string[] {\r\n  if (rank === 1) {\r\n    return [name];\r\n  }\r\n  return getVecChannels(name, rank);\r\n}\r\n\r\nexport function unpackFromChannel(): string {\r\n  return `\r\n    float getChannel(vec4 frag, int dim) {\r\n      int modCoord = imod(dim, 2);\r\n      return modCoord == 0 ? frag.r : frag.g;\r\n    }\r\n\r\n    float getChannel(vec4 frag, vec2 innerDims) {\r\n      vec2 modCoord = mod(innerDims, 2.);\r\n      return modCoord.x == 0. ?\r\n        (modCoord.y == 0. ? frag.r : frag.g) :\r\n        (modCoord.y == 0. ? frag.b : frag.a);\r\n    }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface PadAttributes extends AttributeWithCacheKey {\r\n  readonly mode: string;\r\n  readonly pads: number[];\r\n  readonly value: number;\r\n}\r\n\r\nconst padProgramMetadata = {\r\n  name: 'Pad',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const padV2: OperatorImplementation<PadAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\r\n      validateInputsV2(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...padProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\r\n  const mode = node.attributes.getString('mode', 'constant');\r\n  const value = node.attributes.getFloat('value', 0.0);\r\n  const pads = node.attributes.getInts('pads');\r\n  return createAttributeWithCacheKey({mode, value, pads});\r\n};\r\n\r\nexport const padV11: OperatorImplementation<string> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\r\n      validateInputsV11(inputs);\r\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\r\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\r\n    };\r\n\r\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\r\n    node.attributes.getString('mode', 'constant');\r\n\r\nconst generatePadAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\r\n        throw new Error('dynamic pad attributes are not allowed');\r\n      }\r\n\r\n      const pads = Array.from(inputs[1].integerData);\r\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\r\n\r\n      return createAttributeWithCacheKey({mode, pads, value});\r\n    };\r\n\r\nconst createPadProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\r\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\r\n      const rank = outputShape.length;\r\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\r\n      const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n      return {\r\n        name: 'Pad',\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputsV2 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pad requires 1 input');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst validateInputsV11 = (inputs: Tensor[]): void => {\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Pad requires 2 or 3 inputs');\r\n  }\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n  const strides = ShapeUtil.computeStrides(input.dims);\r\n\r\n  switch (attributes.mode) {\r\n    case 'constant':\r\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\r\n    case 'reflect':\r\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\r\n    case 'edge':\r\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n};\r\n\r\nconst getPadConstant =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\r\n     value: number): string => {\r\n      const rank = shape.length;\r\n      let block = '';\r\n      for (let i = rank - 1; i >= 0; --i) {\r\n        block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  return constant;\r\n        if (k >= ${shape[i]}) return constant;\r\n        offset += k * ${strides[i]};\r\n        `;\r\n      }\r\n      return `\r\n      float padA(int m[${rank}]) {\r\n        const float constant = float(${value});\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n    };\r\n\r\nconst getPadReflect =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n\r\nconst getPadEdge =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  k = 0;\r\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n        offset += k * ${strides[i]};\r\n      `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly ceilMode: number;\r\n  readonly countIncludePad: boolean;\r\n  readonly kernelShape: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly pads: readonly number[];\r\n}\r\n\r\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n\r\n      // TODO: support attribute 'ceil_mode'\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\r\n    };\r\n\r\nconst createAveragePoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\r\n          const op1 = 'value += _X(x);';\r\n          let op2 = '';\r\n          if (adjustedAttributes.countIncludePad) {\r\n            op2 += `value /= float(${kernelSize});`;\r\n          } else {\r\n            op2 += `value /= float(${kernelSize} - pad);`;\r\n          }\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\r\n          const shaderSource = `\r\n        ${poolingCode}\r\n      `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata = {\r\n        name: 'GlobalAveragePool',\r\n        inputNames: ['X'],\r\n        inputTypes: [TextureType.unpacked],\r\n        cacheHint: `${attributes.countIncludePad}`\r\n      };\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      return createAttributeWithCacheKey(\r\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\r\n    };\r\n\r\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\r\n  readonly storageOrder: number;\r\n  readonly dilations: number[];\r\n}\r\n\r\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\r\n    (node: Graph.Node): MaxPoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n      const storageOrder = node.attributes.getInt('storage_order', 0);\r\n      const dilations = node.attributes.getInts('dilations', []);\r\n\r\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n      if (storageOrder !== 0) {\r\n        throw new Error('column major storage order is not yet supported for MaxPool');\r\n      }\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\r\n    };\r\n\r\nconst createMaxPoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const op1 = `\r\n      value = max(_X(x), value);\r\n    `;\r\n          const op2 = '';\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\r\n          const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst getAdjustedPoolAttributesAndOutputShape =\r\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\r\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\r\n          const inputShape = inputs[0].dims.slice();\r\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\r\n          const kernelShape = attributes.kernelShape.slice();\r\n          const strides = attributes.strides.slice();\r\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\r\n          const pads = attributes.pads.slice();\r\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\r\n\r\n          const outputShape = PoolConvUtil.computePoolOutputShape(\r\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n          const newAttributes = Object.assign({}, attributes);\r\n          if (hasDilations) {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\r\n          } else {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\r\n          }\r\n          return [newAttributes, outputShape];\r\n        };\r\n\r\nconst globalMaxPoolAttributes = {\r\n  autoPad: '',\r\n  ceilMode: 0,\r\n  countIncludePad: false,\r\n  kernelShape: [],\r\n  strides: [],\r\n  pads: [],\r\n  storageOrder: 0,\r\n  dilations: [],\r\n  cacheKey: ''\r\n};\r\n\r\nconst globalMaxPoolMetadata = {\r\n  name: 'GlobalMaxPool',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...globalMaxPoolMetadata,\r\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\r\n      },\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pool ops requires 1 input.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst generatePoolingCode =\r\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\r\n        string => {\r\n          const rank = inputDims.length;\r\n          if (attributes.kernelShape.length <= 2) {\r\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\r\n            const sw = attributes.strides[attributes.strides.length - 1];\r\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\r\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\r\n            const dimW = inputDims[rank - 1];\r\n            let codeW = '';\r\n            let codeH = '';\r\n            let codeHEnd = '';\r\n            if (pwStart + pwEnd !== 0) {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n              pad++;\r\n              continue;\r\n            }\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            ${op1}\r\n          }`;\r\n            }\r\n\r\n            if (attributes.kernelShape.length === 2) {\r\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\r\n              const sh = attributes.strides[attributes.strides.length - 2];\r\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\r\n              const phEnd = attributes.pads[attributes.pads.length - 2];\r\n              const dimH = inputDims[rank - 2];\r\n              if (phStart + phEnd !== 0) {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                pad+= ${kw};\r\n                continue;\r\n              }\r\n          `;\r\n              } else {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n            `;\r\n              }\r\n              codeHEnd = `\r\n          }\r\n        `;\r\n            }\r\n\r\n            const poolingCode = `\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          ${codeH}\r\n          ${codeW}\r\n          ${codeHEnd}\r\n          ${op2}\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          } else {\r\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\r\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\r\n            const stridesRank = kernelStrides.length;\r\n            const padsRank = attributes.pads.length;\r\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n            const copyInputDims = copyArray(inputDims, 'inputDims');\r\n            const copyPads = copyArray(attributes.pads, 'pads');\r\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n            const copyStrides = copyArray(attributes.strides, 'strides');\r\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\r\n            let padCode = '';\r\n            if (hasPads) {\r\n              padCode = `\r\n            if (x[j] >= inputDims[j] || x[j] < 0) {\r\n              pad++;\r\n              isPad = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!isPad) {\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              padCode = `\r\n          }\r\n          ${op1}\r\n        `;\r\n            }\r\n            const poolingCode = `\r\n        ${offsetToIndicesFunction}\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n          int offset[${stridesRank}];\r\n          int pads[${padsRank}];\r\n          int inputDims[${rank}];\r\n          int kernelStrides[${stridesRank}];\r\n          int strides[${stridesRank}];\r\n          ${copyPads}\r\n          ${copyInputDims}\r\n          ${copyStrides}\r\n          ${copyKernelStrides}\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          bool isPad = false;\r\n          for (int i = 0; i < ${kernelSize}; i++) {\r\n            offsetToIndices(i, kernelStrides, offset);\r\n            isPad = false;\r\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n              ${padCode}\r\n          }\r\n          ${op2}\r\n\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          }\r\n        };\r\n\r\nconst copyArray = (array: readonly number[], arrayName: string): string => {\r\n  let block = '';\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n};\r\n\r\nconst offsetToIndices = (rank: number): string => `\r\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n    if (${rank} == 0) {\r\n      return;\r\n    }\r\n    for (int i = 0; i < ${rank} - 1; ++i) {\r\n      indices[i] = offset / strides[i];\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[${rank} - 1] = offset;\r\n  }`;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ReduceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly keepDims: boolean;\r\n}\r\n\r\n// return [init ops, reduce ops, final ops]\r\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\r\n\r\nconst reduce =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\r\n     reduceOp: ReduceOp): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const reduceProgramMetadata = {\r\n        name,\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n      };\r\n\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...reduceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () =>\r\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\r\n  const axes = node.attributes.getInts('axes', []);\r\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\r\n  return createAttributeWithCacheKey({axes, keepDims});\r\n};\r\n\r\nconst createReduceProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\r\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const outputShape: number[] = [];\r\n      const iRank = inputs[0].dims.length || 1;\r\n\r\n      const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\r\n      const ops = reduceOp(inputs, axes);\r\n      let reduceOps = ops[1];\r\n\r\n      for (let k = 0; k < inputs[0].dims.length; k++) {\r\n        // if this axis is reduced\r\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n          if (attributes.keepDims) {\r\n            outputShape.push(1);\r\n          }  // else { remove the axis from outputShape; }\r\n\r\n          // loop over the d-th axis\r\n          reduceOps = `\r\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n            inputIdx[${k}] = j${k};\r\n            ${reduceOps}\r\n          }`;\r\n        } else {\r\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n          outputShape.push(inputs[0].dims[k]);\r\n        }\r\n      }\r\n\r\n      const oRank = outputShape.length || 1;\r\n\r\n      const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n      return {\r\n        ...reduceProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Reduce op requires 1 input.');\r\n  }\r\n\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\r\n    };\r\n\r\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        let size = 1.0;\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            size *= inputs[0].dims[k];\r\n          }\r\n        }\r\n\r\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\r\n    };\r\n\r\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\r\n    };\r\n\r\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\r\n    };\r\n\r\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\r\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\r\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\r\n\r\nconst createPackedReshape3DProgramInfo =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\r\n        ProgramInfo => {\r\n          const inputShape3D = input3D.dims as [number, number, number];\r\n          const squeezedOutputShape = outputShape3D as [number, number, number];\r\n\r\n          let mainLoop = '';\r\n          for (let i = 0; i < 4; i++) {\r\n            let outputCoords = '';\r\n            switch (i) {\r\n              case 0:\r\n                outputCoords = 'outputCoords = rc;';\r\n                break;\r\n              case 1:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\r\n                break;\r\n              case 2:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\r\n                break;\r\n              case 3:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\r\n                break;\r\n              default:\r\n                throw new Error();\r\n            }\r\n\r\n            mainLoop += `\r\n        ${outputCoords}\r\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\r\n          int flattenedIndex = getFlattenedIndex(outputCoords);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\r\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\r\n\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n          }\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n          const shaderSource = `\r\n      ${getReshapedInputCoords(inputShape3D)}\r\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\r\n      ${unpackFromChannel()}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.0);\r\n\r\n        ivec3 outputCoords;\r\n        int rows = ${squeezedOutputShape[2]};\r\n        int cols = ${squeezedOutputShape[1]};\r\n\r\n        ${mainLoop}\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n\r\n          return {\r\n            ...metadata,\r\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\r\n            shaderSource,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nexport const createPackedReshape3DProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\r\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\r\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\r\n    };\r\n\r\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\r\n  if (shape.length === 0) {\r\n    return [1, 1, 1];\r\n  }\r\n  // TODO: squeeze other shapes to 2D case\r\n  let batch = 1;\r\n  for (let i = 0; i < shape.length - 2; ++i) {\r\n    batch *= shape[i];\r\n  }\r\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\n\r\n// For packed reshape, we need to re-arrange texel data for output shape.\r\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\r\n// for the reshaped new tensor, we just need to re-arrange the last h and\r\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\r\n// first convert it to 3D by collapsing other dimension to batch dim, then\r\n// process with the last two dimensions.\r\n// Note: we only need the shape tensor to calculate output shape, so the\r\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\r\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\r\n// the same between input shape and output shape, the packed reshape can be\r\n// treated as no-op.\r\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\r\n  let isCheapReshape = false;\r\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\r\n    isCheapReshape = true;\r\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\r\n  } else {  // 2D +\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\r\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\r\n  }\r\n\r\n  return isCheapReshape;\r\n}\r\n\r\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n  const coords = ['b', 'r', 'c'];\r\n  const index = 'index';\r\n  const coordsFromIndexSnippet = strides\r\n                                     .map((stride, i) => {\r\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\r\n                                       const line2 = i === strides.length - 1 ?\r\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\r\n                                           `index -= ${coords[i]} * ${stride}`;\r\n                                       return `${line1}; ${line2};`;\r\n                                     })\r\n                                     .join('');\r\n\r\n  return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(b, r, c);\r\n    }\r\n  `;\r\n}\r\n\r\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n\r\n  return `\r\n  int getFlattenedIndex(ivec3 coords) {\r\n    // reverse y, z order\r\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\r\n  }\r\n`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n  if (handler.session.pack) {\r\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\r\n  } else {\r\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\r\n\r\nconst resizeProgramMetadata = {\r\n  name: 'Resize',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const resize: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...resizeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\r\n\r\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\r\n\r\nconst createPackedResizeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\r\n\r\n      const isSame =\r\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\r\n      if (isSame) {\r\n        return {\r\n          ...resizeProgramMetadata,\r\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n          hasMain: true,\r\n          shaderSource: `void main() {\r\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\r\n                    ${glsl.output} = v;\r\n                }`\r\n        };\r\n      }\r\n\r\n      const dim = outputShape.length;\r\n      if (dim < 2) {\r\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\r\n      }\r\n\r\n      const outputHeight = outputShape[dim - 2];\r\n      const outputWidth = outputShape[dim - 1];\r\n\r\n      const inputShape = inputs[0].dims;\r\n      if (dim !== inputShape.length) {\r\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\r\n      }\r\n      const inputHeight = inputShape[dim - 2];\r\n      const inputWidth = inputShape[dim - 1];\r\n\r\n      const scalesHeight = scales[dim - 2];\r\n      const scalesWidth = scales[dim - 1];\r\n\r\n      let getSourceFracIndex = '';\r\n\r\n      if (attributes.mode !== 'linear') {\r\n        // TODO: support other modes\r\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\r\n      }\r\n      switch (attributes.coordinateTransformMode) {\r\n        case 'asymmetric':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return vec4(coords) / scaleWHWH;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'align_corners':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\r\n                            ${outputHeight}.0 - 1.0);\r\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\r\n                            ${inputHeight}.0 - 1.0);\r\n                        vec4 new_scale = original / resized;\r\n                        return vec4(coords) * new_scale;\r\n                    }\r\n                `;\r\n          break;\r\n        default:\r\n          // TODO:supporting other coordinateTransformModes\r\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\r\n                                '${attributes.coordinateTransformMode}'`);\r\n      }\r\n\r\n      const coordsDataType = getCoordsDataType(dim);\r\n      const unpackChannel = unpackFromChannel();\r\n      const shaderSource = `\r\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\r\n            const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\r\n            ${unpackChannel}\r\n            ${getSourceFracIndex}\r\n            float getAValue(int x10, int r, int c, int d) {\r\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\r\n            }\r\n            void main() {\r\n                ${coordsDataType} rc = getOutputCoords();\r\n\r\n                int batch = rc[0];\r\n                int depth = rc[1];\r\n\r\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\r\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\r\n\r\n                // calculate the source index in fraction\r\n                vec4 sourceFrac = getSourceFracIndex(coords);\r\n\r\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\r\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\r\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\r\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\r\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\r\n\r\n                bool hasNextRow = rc.w < ${outputHeight - 1};\r\n                bool hasNextCol = rc.z < ${outputWidth - 1};\r\n\r\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\r\n                vec4 topLeft = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\r\n                vec4 topRight = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\r\n                vec4 bottomLeft = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\r\n                vec4 bottomRight = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\r\n\r\n                // calculate the interpolation fraction on u and v direction\r\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\r\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\r\n\r\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\r\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\r\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\r\n\r\n                ${glsl.output} = vec4(newValue);\r\n            }\r\n        `;\r\n      return {\r\n        ...resizeProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n\r\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\r\n  const x = inputs[0];\r\n  const xDims = x.dims;\r\n\r\n  let scales = attributes.scales;\r\n  let outputSizes: number[]|undefined;\r\n  if (scales.length === 0) {\r\n    const scalesTensor = inputs[attributes.scalesInputIdx];\r\n    if (scalesTensor && scalesTensor.size !== 0) {\r\n      if (inputs[attributes.sizesInputIdx]) {\r\n        throw new Error('Only one of scales or sizes must be provided as input.');\r\n      }\r\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\r\n    } else {\r\n      const sizesTensor = inputs[attributes.sizesInputIdx];\r\n      if (!sizesTensor || sizesTensor.size === 0) {\r\n        throw new Error('Either scales or sizes MUST be provided as input.');\r\n      }\r\n\r\n      outputSizes = Array.from(sizesTensor.integerData);\r\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\r\n    }\r\n  } else {\r\n    if (inputs[attributes.sizesInputIdx]) {\r\n      throw new Error('Only one of scales or sizes must be provided as input.');\r\n    }\r\n  }\r\n\r\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\r\n\r\n  return [scales, yDims];\r\n};\r\n\r\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\r\n  const scales = Array.from(scale.floatData);\r\n  scalesValidation(scales, mode, isResize);\r\n  return scales;\r\n};\r\n\r\nconst parseScalesDataFromOutputSize =\r\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\r\n      const length = xDims.length;\r\n      const scales = new Array<number>(length);\r\n\r\n      for (let i = 0, end = length; i < end; i++) {\r\n        if (xDims[i] === 0) {\r\n          if (yDims[i] !== 0) {\r\n            throw new Error('Input dim is zero but required output dim is non-zero.');\r\n          }\r\n          scales[i] = 1;\r\n        } else {\r\n          scales[i] = yDims[i] / xDims[i];\r\n        }\r\n      }\r\n      scalesValidation(scales, mode, isResize);\r\n      return scales;\r\n    };\r\n\r\n// roi data is not used yet. but leave here for future usage.\r\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\r\n//     let roi: number[] = [];\r\n//     if (attributes.needRoiInput) {\r\n//         if (attributes.roiInputIdx <= 0) {\r\n//             throw new Error('Invalid roi input index.');\r\n//         }\r\n//         const roiTensor = inputs[attributes.roiInputIdx];\r\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\r\n//     } else {\r\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\r\n//     }\r\n//     return roi;\r\n// };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Shape requires 1 input.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SliceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly ends: number[];\r\n  readonly starts: number[];\r\n}\r\n\r\nconst sliceProgramMetadata = {\r\n  name: 'Slice',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const slice: OperatorImplementation<SliceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...sliceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\r\n  const starts = node.attributes.getInts('starts');\r\n  const ends = node.attributes.getInts('ends');\r\n  const axes = node.attributes.getInts('axes', []);\r\n  return createAttributeWithCacheKey({starts, ends, axes});\r\n};\r\n\r\nconst createSliceProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\r\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\r\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\r\n      const starts = attributes.starts.map((start, i) => {\r\n        if (start > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\r\n      });\r\n      const ends = attributes.ends.map((end, i) => {\r\n        if (end > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\r\n      });\r\n\r\n      const outputShape = input.dims.slice();\r\n\r\n      const sliceOps: string[] = [];\r\n      for (let i = 0; i < normalizedAxes.length; i++) {\r\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\r\n        if (starts[i] > 0) {\r\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\r\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n      return {\r\n        ...sliceProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Slice requires 1 input.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV10(inputs);\r\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...sliceProgramMetadata,\r\n        cacheHint: attributes.cacheKey,\r\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n      },\r\n      [inputs[0]]);\r\n  return [output];\r\n};\r\n\r\nconst generateSliceAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\r\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\r\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\r\n        throw new Error('dynamic slice attributes are not allowed');\r\n      }\r\n\r\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n        throw new Error('currently non-1 steps is not supported for Slice');\r\n      }\r\n\r\n      const starts = Array.from(inputs[1].integerData);\r\n      const ends = Array.from(inputs[2].integerData);\r\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n      const cacheKey = `${axes};${starts};${ends}`;\r\n      return {starts, ends, axes, cacheKey};\r\n    };\r\n\r\nconst validateInputsV10 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n    throw new Error('Invalid input number.');\r\n  }\r\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nconst softmaxComputeMaxProgramMetadata = {\r\n  name: 'SoftmaxComputeMax',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst softmaxComputeScaleProgramMetadata = {\r\n  name: 'SoftmaxComputeScale',\r\n  inputNames: ['A', 'Max'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst softmaxProgramMetadata = {\r\n  name: 'SoftMax',\r\n  inputNames: ['A', 'Max', 'Norm'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\r\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n\r\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\r\n      return output;\r\n    };\r\n\r\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\r\n\r\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\r\n\r\n// The \"semantic\" meaning of axis has changed in opset-13.\r\n// Please compare: https://github.com/onnx/onnx/blob/master/docs/Operators.md#Softmax\r\n// with https://github.com/onnx/onnx/blob/master/docs/Changelog.md#Softmax-11 for detailed explanations\r\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\r\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\r\n// the innermost dim\r\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const rank = inputShape.length;\r\n\r\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\r\n      const transposedInputShape: number[] = [];\r\n      let perm: number[] = [];\r\n      let transposedInputs: Tensor[] = [];\r\n      let transposeAttribute: TransposeAttributes;\r\n\r\n      if (isTransposeRequired) {\r\n        perm = Array.from({length: rank}).map((_, i) => i);\r\n\r\n        // swap the innermost dim with the dim corresponding to axis\r\n        perm[axis] = rank - 1;\r\n        perm[rank - 1] = axis;\r\n\r\n        perm.map(p => transposedInputShape.push(inputShape[p]));\r\n\r\n        transposeAttribute = createAttributeWithCacheKey({perm});\r\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\r\n      }\r\n\r\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\r\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\r\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\r\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\r\n\r\n      const output = computeSoftmax(\r\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\r\n\r\n      if (isTransposeRequired) {\r\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\r\n        return reversedOutput;\r\n      } else {\r\n        return output;\r\n      }\r\n    };\r\n\r\nconst computeSoftmax =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\r\n     featureCount: number): Tensor[] => {\r\n      const computeMaxProgramInfo =\r\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\r\n      const max = inferenceHandler.run(\r\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\r\n          inputs);\r\n\r\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          [logicalRowCount]);\r\n      const scale = inferenceHandler.run(\r\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\r\n          [inputs[0], max]);\r\n\r\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          computeScaleProgramInfo.output.dims);\r\n      const output = inferenceHandler.run(\r\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\r\n          [inputs[0], max, scale]);\r\n      return [output];\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the maximum value of each of the 'N' rows\r\n */\r\nconst createComputeMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\r\n        ${textureHeight} )));\r\n        for(int i=1; i<${featureCount}; ++i)\r\n        {\r\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight})));\r\n          if(current > max)\r\n          max = current;\r\n        }\r\n\r\n        return max;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeMaxProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the normalization factor for each of the 'N' rows\r\n */\r\nconst createComputScaleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float norm_factor = 0.0;\r\n        float max = _Max(indices);\r\n        for(int i=0; i<${featureCount}; ++i)\r\n        {\r\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight}))) - max);\r\n        }\r\n\r\n        return norm_factor;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeScaleProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createSoftMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = input.dims.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${featureCount};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n      return {\r\n        ...softmaxProgramMetadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Softmax requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SplitAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n  readonly split: number[];\r\n  readonly numOutputs: number;\r\n}\r\n\r\nconst splitProgramMetadata = {\r\n  name: 'Split',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const split: OperatorImplementation<SplitAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\r\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < count; ++i) {\r\n        output.push(inferenceHandler.run(\r\n            {\r\n              ...splitProgramMetadata,\r\n              cacheHint: `${attributes.cacheKey};${i}`,\r\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\r\n            },\r\n            inputs));\r\n      }\r\n\r\n      return output;\r\n    };\r\n\r\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\r\n  const axis = node.attributes.getInt('axis', 0);\r\n  const split = node.attributes.getInts('split', []);\r\n  const numOutputs = node.outputs.length;\r\n  return createAttributeWithCacheKey({axis, split, numOutputs});\r\n};\r\n\r\nconst getProgramCount =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\r\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\r\n      return offsets.length;\r\n    };\r\n\r\nconst createSplitProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\r\n        ProgramInfo => {\r\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\r\n          const offset = offsets[index];\r\n          const outputShape = shapes[index];\r\n          const rank = outputShape.length;\r\n          const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }\r\n    `;\r\n          return {\r\n            ...splitProgramMetadata,\r\n            cacheHint: `${attributes.cacheKey}:${index}`,\r\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Split requires one input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const squeeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Squeeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Squeeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const sumProgramMetadata = {\r\n    name: 'Sum',\r\n    inputNames: inputs.map((v, i) => `X${i}`),\r\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\r\n  return [output];\r\n};\r\n\r\nconst createSumProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const outputShape = inputs[0].dims.slice();\r\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n      const shaderSource = `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n      return {\r\n        ...sumProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length === 0) {\r\n    throw new Error('Sum requires inputs.');\r\n  }\r\n\r\n  const length = inputs[0].dims.length;\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (length !== inputs[i].dims.length) {\r\n      throw new Error('Input shapes are mismatched.');\r\n    }\r\n\r\n    for (let j = 0; j < length; j++) {\r\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n        throw new Error('Input shapes are not matched.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (inputs[0].type !== inputs[i].type) {\r\n      throw new Error('Input types are not matched.');\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {NUMBER_TYPES} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const tileProgramMetadata = {\r\n    name: 'Tile',\r\n    inputNames: ['A'],\r\n    inputTypes: [TextureType.unpacked],\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst createTileProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const outputShape = new Array(inputShape.length);\r\n\r\n      const tileOps: string[] = [];\r\n      for (let i = 0; i < inputShape.length; i++) {\r\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        int inputIdx[${rank}];\r\n        ${tileOps.join('\\n')}\r\n        return _A(inputIdx);\r\n      }\r\n    `;\r\n      return {\r\n        ...tileProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Tile requires 2 input.');\r\n  }\r\n  if (inputs[1].dims.length !== 1) {\r\n    throw new Error('The second input shape must 1 dimension.');\r\n  }\r\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invalid repeat type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface TransposeAttributes extends AttributeWithCacheKey {\r\n  readonly perm: number[];\r\n}\r\n\r\nconst transposeProgramMetadata = {\r\n  name: 'Transpose',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const transpose: OperatorImplementation<TransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...transposeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\r\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\r\n\r\nconst createTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\r\n      const inputShape = input.dims;\r\n      perm = getAdjustedPerm(inputShape, perm);\r\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\r\n      const rank = inputShape.length;\r\n      // A dims=[${inputs[0].dims.toString()}]\r\n      // out Dims=[${unpackedOutputShape.toString()}]\r\n      // based on perm=[${perm.toString()}]\r\n      const shaderSource = `\r\n      ${getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n      return {\r\n        ...transposeProgramMetadata,\r\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\r\n  if (perm && perm.length !== inputShape.length) {\r\n    perm = [...(inputShape.keys())].reverse();\r\n  }\r\n  return perm;\r\n};\r\n\r\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\r\n  perm = getAdjustedPerm(inputShape, perm);\r\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\r\n};\r\n\r\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\r\n  const reverseFunc = [];\r\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n  for (let i = 0; i < rank; ++i) {\r\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n  }\r\n  reverseFunc.push('\\t}');\r\n  return reverseFunc.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Transpose requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('input should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureType} from '../types';\r\n\r\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\r\n  const outputShape = input.shape;\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  /**\r\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n   */\r\n  const shaderSource = `\r\n    const float FLOAT_MAX = 1.70141184e38;\r\n    const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n    bool isNaN(float val) {\r\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n    }\r\n\r\n    highp vec4 encodeAsUint8(highp float v) {\r\n      if (isNaN(v)) {\r\n        return vec4(255, 255, 255, 255);\r\n      }\r\n\r\n      highp float av = abs(v);\r\n\r\n      if(av < FLOAT_MIN) {\r\n        return vec4(0.0, 0.0, 0.0, 0.0);\r\n      } else if(v > FLOAT_MAX) {\r\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n      } else if(v < -FLOAT_MAX) {\r\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n      }\r\n\r\n      highp vec4 c = vec4(0,0,0,0);\r\n\r\n      highp float e = floor(log2(av));\r\n      highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n      c[2] = floor(128.0 * m);\r\n      m -= c[2] / 128.0;\r\n      c[1] = floor(32768.0 * m);\r\n      m -= c[1] / 32768.0;\r\n      c[0] = floor(8388608.0 * m);\r\n\r\n      highp float ebias = e + 127.0;\r\n      c[3] = floor(ebias / 2.0);\r\n      ebias -= c[3] * 2.0;\r\n      c[2] += floor(ebias) * 128.0;\r\n\r\n      c[3] += 128.0 * step(0.0, -v);\r\n\r\n      return c / 255.0;\r\n    }\r\n\r\n    void main() {\r\n      float value = ${glsl.texture2D}(X,TexCoords).r;\r\n      ${glsl.output} = encodeAsUint8(value);\r\n    }`;\r\n  const programInfo = {\r\n    name: 'Uint8Encode',\r\n    inputTypes: [TextureType.unpacked],\r\n    inputNames: ['X'],\r\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\r\n    shaderSource,\r\n    hasMain: true\r\n  };\r\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {Tensor} from '../../../tensor';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslElu(alpha: number): GlslValueFunction {\r\n  const name = 'elu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslClip(min: number, max: number): GlslValueFunction {\r\n  const name = 'clip';\r\n  const body = `\r\n  const float min = float(${min});\r\n  const float max = float(${max});\r\n\r\n  float ${name}_(float a) {\r\n    return clamp(a, min, max);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return clamp(v, min, max);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = 'indentity';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\r\n  const name = 'leakyRelu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a < 0.0 ? a * alpha : a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = 'neg';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = 'not';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}_(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}_(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = 'relu';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = 'sigmoid';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = 'tanh';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return ${name}(a);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return ${name}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\n/////\r\n/////\r\n/////\r\n\r\nconst createElementwiseProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\r\n        ProgramInfo => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n          return {\r\n            ...metadata,\r\n            output: {dims: input.dims, type: input.type, textureType},\r\n            shaderSource: `\r\n     ${glslFunc.body}\r\n     void main() {\r\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n       v = ${glslFunc.name}_(v);\r\n       ${glsl.output} = v;\r\n     }\r\n     `,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nconst createElementwiseProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\r\n        ProgramInfoLoader => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\r\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\r\n        };\r\n\r\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\r\n\r\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\r\n\r\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\r\n\r\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\r\n\r\nexport interface ClipAttributes extends AttributeWithCacheKey {\r\n  readonly min: number;\r\n  readonly max: number;\r\n}\r\n\r\nexport const clip =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(\r\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\r\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\r\n\r\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\r\n  return clip(handler, [inputs[0]], attributes);\r\n};\r\n\r\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\r\n  if (inputs.length >= 3 &&\r\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\r\n    throw new Error('dynamic clip attributes are not allowed');\r\n  }\r\n\r\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\r\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\r\n  return createAttributeWithCacheKey({min, max});\r\n};\r\n\r\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\r\n\r\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\r\n\r\nexport interface EluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const elu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\r\n\r\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\r\n\r\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\r\n\r\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\r\n\r\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const leakyRelu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\r\n\r\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\r\n\r\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\r\n\r\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\r\n\r\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\r\n\r\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\r\n\r\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\r\n\r\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\r\n\r\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\r\n\r\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst unpackProgramMetadata = {\r\n  name: 'unpack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const rank = input.dims.length;\r\n\r\n  const channels = getChannels('rc', rank);\r\n  const innerDims = channels.slice(-2);\r\n  const coordsDataType = getCoordsDataType(rank);\r\n  const unpackChannel = unpackFromChannel();\r\n  const isScalar = (input.dims.length === 0);\r\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\r\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const shaderSource = `\r\n    ${unpackChannel}\r\n    void main() {\r\n      ${coordsDataType} rc = getOutputCoords();\r\n\r\n       // Sample the texture with the coords to get the rgba channel value.\r\n       vec4 packedInput = getA(${sourceCoords});\r\n\r\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\r\n     }\r\n   `;\r\n\r\n  return {\r\n    ...unpackProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\r\n\r\nfunction getSourceCoords(rank: number, dims: string[]): string {\r\n  if (rank === 1) {\r\n    return 'rc';\r\n  }\r\n\r\n  let coords = '';\r\n  for (let i = 0; i < rank; i++) {\r\n    coords += dims[i];\r\n    if (i < rank - 1) {\r\n      coords += ',';\r\n    }\r\n  }\r\n  return coords;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const unsqueeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Unsqueeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Unsqueeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\r\n  readonly opset: number;\r\n  readonly isResize: boolean;\r\n  readonly mode: string;\r\n  readonly scales: number[];\r\n  readonly extrapolationValue: number;\r\n  readonly coordinateTransformMode: string;\r\n  readonly useExtrapolation: boolean;\r\n  readonly needRoiInput: boolean;\r\n  readonly nearestMode: string;\r\n  readonly cubicCoefficientA: number;\r\n  readonly excludeOutside: boolean;\r\n  readonly useNearest2xOptimization: boolean;\r\n  readonly roiInputIdx: number;\r\n  readonly scalesInputIdx: number;\r\n  readonly sizesInputIdx: number;\r\n}\r\n\r\nconst upsampleProgramMetadata = {\r\n  name: 'Upsample',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...upsampleProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\r\n\r\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\r\n\r\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\r\n  const isResize = (opset >= 10);\r\n\r\n  // processing node attributes\r\n  const mode = node.attributes.getString('mode', 'nearest');\r\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\r\n    throw new Error(`unrecognized mode: ${mode}`);\r\n  }\r\n\r\n  let scales: number[] = [];\r\n  if (opset < 9) {\r\n    scales = node.attributes.getFloats('scales');\r\n    scalesValidation(scales, mode, isResize);\r\n  }\r\n\r\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\r\n\r\n  const coordinateTransformMode =\r\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\r\n  if ([\r\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\r\n      ].indexOf(coordinateTransformMode) === -1) {\r\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\r\n  }\r\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\r\n  const useExtrapolation = needRoiInput;\r\n\r\n  const nearestMode =\r\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\r\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\r\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\r\n  }\r\n\r\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\r\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\r\n  if (excludeOutside && mode !== 'cubic') {\r\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\r\n  }\r\n\r\n  const useNearest2xOptimization =\r\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\r\n\r\n  let roiInputIdx = 0;\r\n  let scalesInputIdx = 0;\r\n  let sizesInputIdx = 0;\r\n\r\n  if (opset > 10) {\r\n    roiInputIdx = 1;\r\n    scalesInputIdx = 2;\r\n    sizesInputIdx = 3;\r\n  } else if (opset === 9) {\r\n    scalesInputIdx = 1;\r\n  }\r\n\r\n  return createAttributeWithCacheKey({\r\n    opset,\r\n    isResize,\r\n    mode,\r\n    scales,\r\n    extrapolationValue,\r\n    coordinateTransformMode,\r\n    useExtrapolation,\r\n    needRoiInput,\r\n    nearestMode,\r\n    cubicCoefficientA,\r\n    excludeOutside,\r\n    useNearest2xOptimization,\r\n    roiInputIdx,\r\n    scalesInputIdx,\r\n    sizesInputIdx\r\n  });\r\n};\r\n\r\nconst createUpsampleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [inputWidth, inputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\r\n\r\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\r\n      const [outputWidth, outputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\r\n      const dim = outputShape.length;\r\n\r\n      const outputPitches = new Array<number>(dim);\r\n      const inputPitches = new Array<number>(dim);\r\n      let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n      for (let d = dim - 1; d >= 0; d--) {\r\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n        precalculatedPitches += `\r\n        output_pitches[${d}] = ${outputPitches[d]};\r\n        input_pitches[${d}] = ${inputPitches[d]};\r\n        `;\r\n      }\r\n      const getInputFloatFunction = `\r\n      float getInputFloat(int index) {\r\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\r\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n        return value;\r\n      }\r\n      `;\r\n\r\n      const shaderSource = attributes.mode === 'nearest' ?\r\n          // nearest\r\n          `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[${dim}]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int d, m;\r\n      for (int dim = 0; dim < ${dim}; ++dim) {\r\n        d = output_index / output_pitches[dim];\r\n        m = output_index - d * output_pitches[dim];\r\n        output_index = m;\r\n\r\n        if (scales[dim] != 1 && d > 0) {\r\n          int d2 = d / scales[dim];\r\n          m = d - d2 * scales[dim];\r\n          d = d2;\r\n        }\r\n        input_index += input_pitches[dim] * d;\r\n      }\r\n\r\n      return getInputFloat(input_index);\r\n    }` :\r\n          dim === 4 ?\r\n          // bilinear 4D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[4]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m / output_pitches[1];\r\n      m = m - index_of_dim1 * output_pitches[1];\r\n      index_of_dim2 = m / output_pitches[2];\r\n      m = m - index_of_dim2 * output_pitches[2];\r\n      index_of_dim3 = m;\r\n\r\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n      index_of_input_dim2 = index_of_dim2 / scales[2];\r\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n      index_of_input_dim3 = index_of_dim3 / scales[3];\r\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n      input_index = index_of_dim0 * input_pitches[0] +\r\n            index_of_dim1 * input_pitches[1] +\r\n            index_of_input_dim2 * input_pitches[2] +\r\n            index_of_input_dim3;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim2 = false;\r\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n        // It's the end in dimension 2\r\n        x01 = x00;\r\n        end_of_dim2 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[2]);\r\n      }\r\n\r\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n        // It's the end in dimension 3\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n    }` :\r\n              // bilinear 2D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[2]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m;\r\n\r\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n      index_of_input_dim0 = index_of_dim0 / scales[0];\r\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n      index_of_input_dim1 = index_of_dim1 / scales[1];\r\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim0 = false;\r\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n        // It's the end in dimension 0\r\n        x01 = x00;\r\n        end_of_dim0 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[0]);\r\n      }\r\n\r\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n        // It's the end in dimension 1\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n    }`;\r\n      return {\r\n        ...upsampleProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        variables: [{\r\n          name: 'scales',\r\n          type: 'int',\r\n          arrayLength: attributes.scales.length,\r\n          data: attributes.scales.map(x => Math.ceil(x))\r\n        }]\r\n      };\r\n    };\r\n\r\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\r\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\r\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\r\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\r\n    throw new Error('invalid inputs.');\r\n  }\r\n\r\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input tensor types.');\r\n  }\r\n};\r\n\r\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\r\n  if (!isResize) {\r\n    for (const scale of scales) {\r\n      if (scale < 1) {\r\n        throw new Error('Scale value should be greater than or equal to 1.');\r\n      }\r\n    }\r\n  } else {\r\n    for (const scale of scales) {\r\n      if (scale <= 0) {\r\n        throw new Error('Scale value should be greater than 0.');\r\n      }\r\n    }\r\n  }\r\n  if (mode === 'linear' || mode === 'cubic') {\r\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\r\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\r\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\r\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(\r\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\r\n      public textureLayoutStrategy: TextureLayoutStrategy) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(output);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.glContext.draw();\r\n      });\r\n    }, this.glContext);\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    const width = td.width;\r\n    const height = td.height;\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, width, height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\r\n      void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      const value = variables.find(v => v.name === name)?.data;\r\n      if (type !== 'sampler2D' && !value) {\r\n        throw new Error(`variable '${name}' does not have data defined in program info`);\r\n      }\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1f(location, value as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1i(location, value as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  initializers: Set<Tensor.Id>;\r\n  pack?: boolean;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n    this.pack = backend.pack;\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  addInitializer(tensorId: Tensor.Id): void {\r\n    this.initializers.add(tensorId);\r\n  }\r\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\r\n    if (isPacked) {\r\n      return this.packedTextureDataCache.get(tensorId);\r\n    } else {\r\n      return this.unpackedTextureDataCache.get(tensorId);\r\n    }\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    if (isPacked) {\r\n      this.packedTextureDataCache.set(tensorId, textureData);\r\n    } else {\r\n      this.unpackedTextureDataCache.set(tensorId, textureData);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  /* eslint-disable @typescript-eslint/naming-convention */\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\nimport {assert} from '../../util';\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis?: number;\r\n  isPacked?: boolean;\r\n  reverseWH?: boolean;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n\r\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const wh = this.computeTexture(shape, prefs);\r\n    if (prefs && prefs.isPacked) {\r\n      wh[0] /= 2;\r\n      wh[1] /= 2;\r\n    }\r\n    if (prefs && prefs.reverseWH) {\r\n      return [wh[1], wh[0]];\r\n    }\r\n    return wh;\r\n  }\r\n\r\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const isPacked = prefs && prefs.isPacked;\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return isPacked ? [2, 2] : [1, 1];\r\n    }\r\n    let maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    let logShape = shape.slice(0);\r\n    if (isPacked) {\r\n      maxTextureSize = maxTextureSize * 2;\r\n\r\n      // This logic ensures we accurately count the number of packed texels needed\r\n      // to accommodate the tensor. We can only pack values in the same texel if\r\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\r\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\r\n      // fact that the texels containing the third row are half empty.\r\n      logShape = logShape.map(\r\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\r\n\r\n      // Packed texture height is at least 2 (the channel height of a single\r\n      // texel).\r\n      if (logShape.length === 1) {\r\n        logShape = [2, logShape[0]];\r\n      }\r\n    }\r\n\r\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\r\n    if (logShape.length !== 2) {\r\n      const squeezeResult = squeezeShape(logShape);\r\n      logShape = squeezeResult.newShape;\r\n    }\r\n\r\n    const size = sizeFromShape(logShape);\r\n    if (logShape.length <= 1 && size <= maxTextureSize) {\r\n      return [1, size];\r\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\r\n      return logShape as [number, number];\r\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1], logShape[2]];\r\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\r\n        logShape[3] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\r\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\r\n    } else {\r\n      if (isPacked) {\r\n        // For packed textures size equals the number of channels required to\r\n        // accommodate the texture data. However in order to squarify such that\r\n        // inner dimensions stay even, we rewrite size to equal the number of\r\n        // texels. Then in the return statement we rehydrate the squarified\r\n        // dimensions to channel units.\r\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\r\n      }\r\n      return sizeToSquarishShape(size);\r\n    }\r\n  }\r\n}\r\n\r\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\r\n  const newShape: number[] = [];\r\n  const keptDims: number[] = [];\r\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\r\n  let j = 0;\r\n  for (let i = 0; i < shape.length; ++i) {\r\n    if (axes != null) {\r\n      if (axes[j] === i && shape[i] !== 1) {\r\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n      }\r\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n        newShape.push(shape[i]);\r\n        keptDims.push(i);\r\n      }\r\n      if (axes[j] <= i) {\r\n        j++;\r\n      }\r\n    }\r\n    if (shape[i] !== 1) {\r\n      newShape.push(shape[i]);\r\n      keptDims.push(i);\r\n    }\r\n  }\r\n  return {newShape, keptDims};\r\n}\r\n\r\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\r\n  const rank = shape.length;\r\n\r\n  // Normalize input\r\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\r\n\r\n  // Check for valid range\r\n  assert(\r\n      axis.every(ax => ax >= -rank && ax < rank),\r\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n          `got axis ${axis}`);\r\n\r\n  // Check for only integers\r\n  assert(\r\n      axis.every(isInt),\r\n      () => 'All values in axis param must be integers but ' +\r\n          `got axis ${axis}`);\r\n\r\n  // Handle negative axis.\r\n  return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\nexport function isInt(a: number): boolean {\r\n  return a % 1 === 0;\r\n}\r\nexport function sizeFromShape(shape: number[]): number {\r\n  if (shape.length === 0) {\r\n    // Scalar.\r\n    return 1;\r\n  }\r\n  let size = shape[0];\r\n  for (let i = 1; i < shape.length; i++) {\r\n    size *= shape[i];\r\n  }\r\n  return size;\r\n}\r\nexport function getRowsCols(shape: number[]): [number, number] {\r\n  if (shape.length === 0) {\r\n    throw Error('Cannot get rows and columns of an empty shape array.');\r\n  }\r\n\r\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nexport function sizeToSquarishShape(size: number): [number, number] {\r\n  const width = Math.ceil(Math.sqrt(size));\r\n  return [width, Math.ceil(size / width)];\r\n}\r\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\r\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ShapeUtil} from '../../util';\r\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureLayout, TextureType} from './types';\r\n\r\nexport const createTextureLayoutFromTextureType =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\r\n     textureType: TextureType): TextureLayout => {\r\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\r\n      const isPacked = textureType === TextureType.packed;\r\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\r\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\r\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\r\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\r\n          undefined;\r\n      return createTextureLayoutFromShape(\r\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\r\n    };\r\n\r\nexport const calculateTextureWidthAndHeight =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\r\n        [number, number] => {\r\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\r\n          return [layout.width, layout.height];\r\n        };\r\n\r\n/**\r\n * Create a TextureLayout object from shape.\r\n */\r\nexport const createTextureLayoutFromShape =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\r\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\r\n      const isPacked = !!(prefs && prefs.isPacked);\r\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\r\n      const rank = shape.length;\r\n      let inferredDims = shape.slice(0);\r\n      if (rank === 0) {\r\n        inferredDims = [1];\r\n      }\r\n      if (channels === 1) {\r\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n        unpackedShape = shape;\r\n      } else if (isPacked) {\r\n        if (channels !== 4) {\r\n          throw new Error('a packed texture must be 4-channel');\r\n        }\r\n        unpackedShape = shape;\r\n        if (rank > 0) {\r\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\r\n        }\r\n        if (rank > 1) {\r\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\r\n        }\r\n      } else if (!unpackedShape) {\r\n        throw new Error('Unpacked shape is needed when using channels > 1');\r\n      }\r\n      return {\r\n        width,\r\n        height,\r\n        channels,\r\n        isPacked,\r\n        shape: inferredDims,\r\n        strides: ShapeUtil.computeStrides(inferredDims),\r\n        unpackedShape,\r\n        reversedWH: (prefs && prefs.reverseWH)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\r\n      throw new Error('not implemented');\r\n    }\r\n    const width = layout.width;\r\n    const height = layout.height;\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\r\n    const dataId = td.tensor.dataId;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (this.pendingRead.has(dataId)) {\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\r\n      this.pendingRead.set(dataId, []);\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      // add a fence waiting for the data to be ready\r\n      await this.glContext.createAndWaitForFence();\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      const tensorData = this.toTensorData(dataType, data);\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      this.pendingRead.delete(dataId);\r\n      subscribers?.forEach(resolve => resolve(tensorData));\r\n      return tensorData;\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return data instanceof Int16Array ? data : Int16Array.from(data);\r\n      case 'int32':\r\n        return data instanceof Int32Array ? data : Int32Array.from(data);\r\n      case 'int8':\r\n        return data instanceof Int8Array ? data : Int8Array.from(data);\r\n      case 'uint16':\r\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\r\n      case 'uint32':\r\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\r\n      case 'float32':\r\n        return data instanceof Float32Array ? data : Float32Array.from(data);\r\n      case 'float64':\r\n        return data instanceof Float64Array ? data : Float64Array.from(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../tensor';\r\n\r\n/**\r\n * Layout info is used for mapping n-dimensional array to 2D textures\r\n * The layout is created by the TextureLayoutStrategy based on\r\n * the Tensor's dimensions and strides\r\n */\r\nexport interface TextureLayout {\r\n  width: number;\r\n  height: number;\r\n  /**\r\n   * specify the number of value that encoded in a single pixel\r\n   */\r\n  channels: 1|2|3|4;\r\n  /**\r\n   * whether in packed mode or not\r\n   */\r\n  isPacked?: boolean;\r\n  /**\r\n   * the normalized shape\r\n   */\r\n  shape: readonly number[];\r\n  /**\r\n   * the stride of each dimensions, calculated according to shape\r\n   */\r\n  strides: readonly number[];\r\n  /**\r\n   * the original shape(dims) of the corresponding tensor\r\n   */\r\n  unpackedShape: readonly number[];\r\n\r\n  reversedWH?: boolean;\r\n}\r\nexport interface TextureData extends TextureLayout {\r\n  tensor: Tensor;\r\n  texture: WebGLTexture;\r\n}\r\n\r\nexport enum TextureType {\r\n  unpacked,              // <-- normal unpacked texture\r\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\r\n  packed,                // <-- normal packed texture\r\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\r\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\r\n}\r\n\r\nexport interface TensorInfo {\r\n  id?: Tensor.Id;\r\n  dims: readonly number[];\r\n  type: Tensor.DataType;\r\n  textureType: TextureType;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * A set of metadata of a shader program.\r\n */\r\nexport interface ProgramMetadata {\r\n  /**\r\n   * the name of the program. used for debugging and profiling\r\n   */\r\n  name: string;\r\n  /**\r\n   * texture types for each input\r\n   */\r\n  inputTypes: TextureType[];\r\n  /**\r\n   * names of each input\r\n   */\r\n  inputNames: string[];\r\n  /**\r\n   * an optional string as a cache hint in the artifact cache\r\n   */\r\n  cacheHint?: string;\r\n}\r\n\r\n/**\r\n * A ProgramInfoLoader allows\r\n */\r\nexport interface ProgramInfoLoader extends ProgramMetadata {\r\n  /**\r\n   * a function to get the program info\r\n   */\r\n  get(): ProgramInfo;\r\n}\r\n\r\n/**\r\n * A set of data that represent a shader program\r\n */\r\nexport interface ProgramInfo extends ProgramMetadata {\r\n  /**\r\n   * information of uniform variables\r\n   */\r\n  variables?: ProgramVariable[];\r\n  /**\r\n   * tensor info for output\r\n   */\r\n  output: TensorInfo;\r\n  /**\r\n   * the shader's processing source code\r\n   */\r\n  shaderSource: string;\r\n  /**\r\n   * whether the shader source contains a customized main function implementation\r\n   */\r\n  hasMain?: boolean;\r\n}\r\n\r\nexport interface VariableInfo {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * Information of uniforms that shader uses\r\n */\r\nexport interface UniformInfo {\r\n  type: 'sampler2D'|VariableInfo['type'];\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface UniformLocation extends UniformInfo {\r\n  location: WebGLUniformLocation;\r\n}\r\n\r\n/**\r\n * Artifact is the result of compilation\r\n * It does not contain input of output data\r\n * However anything that could be run as a \"program\"\r\n */\r\nexport interface Artifact {\r\n  programInfo: ProgramInfo;\r\n  program: WebGLProgram;\r\n  uniformLocations: UniformLocation[];\r\n  attribLocations: {position: number; textureCoord: number};\r\n}\r\nexport declare namespace Artifact {\r\n  type UniformLocations = Artifact['uniformLocations'];\r\n  type AttribLocations = Artifact['attribLocations'];\r\n}\r\n\r\nexport interface UniformData {\r\n  [name: string]: number|number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {assert} from '../../util';\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n\r\nexport async function repeatedTry(\r\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let tryCount = 0;\r\n\r\n    const tryFn = () => {\r\n      if (checkFn()) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      tryCount++;\r\n\r\n      const nextBackoff = delayFn(tryCount);\r\n\r\n      if (maxCounter != null && tryCount >= maxCounter) {\r\n        reject();\r\n        return;\r\n      }\r\n      setTimeout(tryFn, nextBackoff);\r\n    };\r\n\r\n    tryFn();\r\n  });\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name at output coordinates.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\r\n}\r\n\r\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\r\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\r\n  // Deep copy.\r\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\r\n  newInputShape = squeezedShape;\r\n  return newInputShape;\r\n}\r\n\r\n/** Returns a list of squeezed parameters for shader functions */\r\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\r\n  return keptDims.map(d => params[d]).join(', ');\r\n}\r\n\r\n/** Returns the data type for different ranks. */\r\nexport function getCoordsDataType(rank: number): string {\r\n  if (rank <= 1) {\r\n    return 'int';\r\n  } else if (rank === 2) {\r\n    return 'ivec2';\r\n  } else if (rank === 3) {\r\n    return 'ivec3';\r\n  } else if (rank === 4) {\r\n    return 'ivec4';\r\n  } else if (rank === 5) {\r\n    return 'ivec5';\r\n  } else if (rank === 6) {\r\n    return 'ivec6';\r\n  } else {\r\n    throw Error(`GPU for rank ${rank} is not yet supported`);\r\n  }\r\n}\r\n\r\nexport function getGlChannels(rank = 6): string[] {\r\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  context = context || createNewWebGLContext(contextId);\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const canvas = createCanvas();\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\nimport {repeatedTry} from './utils';\r\n\r\nexport interface FenceContext {\r\n  query: WebGLSync|null;\r\n  isFencePassed(): boolean;\r\n}\r\n\r\ntype PollItem = {\r\n  isDoneFn: () => boolean; resolveFn: () => void;\r\n};\r\n\r\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\r\n  let i = 0;\r\n  for (; i < arr.length; ++i) {\r\n    const isDone = arr[i]();\r\n    if (!isDone) {\r\n      break;\r\n    }\r\n  }\r\n  return i - 1;\r\n}\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  // eslint-disable-next-line camelcase\r\n  textureFloatExtension: OES_texture_float|null;\r\n  // eslint-disable-next-line camelcase\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: unknown|null;\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\r\nShader source:\r\n${shaderSource}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\r\n    ]);\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error('both float32 and float16 TextureType are not supported');\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n\r\n  beginTimer(): WebGLQuery {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      const query = gl2.createQuery() as WebGLQuery;\r\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n      return query;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported.');\r\n    }\r\n  }\r\n\r\n  endTimer() {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\r\n      return;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n  }\r\n\r\n  isTimerResultAvailable(query: WebGLQuery): boolean {\r\n    let available = false, disjoint = false;\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\r\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n\r\n    return available && !disjoint;\r\n  }\r\n\r\n  getTimerResult(query: WebGLQuery): number {\r\n    let timeElapsed = 0;\r\n    if (this.version === 2) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\r\n      gl2.deleteQuery(query);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n    // return miliseconds\r\n    return timeElapsed / 1000000;\r\n  }\r\n\r\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\r\n    await repeatedTry(() => this.isTimerResultAvailable(query));\r\n    return this.getTimerResult(query);\r\n  }\r\n\r\n  public async createAndWaitForFence(): Promise<void> {\r\n    const fenceContext = this.createFence(this.gl);\r\n    return this.pollFence(fenceContext);\r\n  }\r\n\r\n  private createFence(gl: WebGLRenderingContext): FenceContext {\r\n    let isFencePassed: () => boolean;\r\n    const gl2 = gl as WebGL2RenderingContext;\r\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n    gl.flush();\r\n    if (query === null) {\r\n      isFencePassed = () => true;\r\n    } else {\r\n      isFencePassed = () => {\r\n        const status = gl2.clientWaitSync(query, 0, 0);\r\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\r\n      };\r\n    }\r\n    return {query, isFencePassed};\r\n  }\r\n\r\n  async pollFence(fenceContext: FenceContext) {\r\n    return new Promise<void>(resolve => {\r\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\r\n    });\r\n  }\r\n\r\n  private itemsToPoll: PollItem[] = [];\r\n\r\n  pollItems(): void {\r\n    // Find the last query that has finished.\r\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\r\n    for (let i = 0; i <= index; ++i) {\r\n      const {resolveFn} = this.itemsToPoll[i];\r\n      resolveFn();\r\n    }\r\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\r\n  }\r\n\r\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\r\n    this.itemsToPoll.push({isDoneFn, resolveFn});\r\n    if (this.itemsToPoll.length > 1) {\r\n      // We already have a running loop that polls.\r\n      return;\r\n    }\r\n    // Start a new loop that polls.\r\n    await repeatedTry(() => {\r\n      this.pollItems();\r\n      // End the loop if no more items to poll.\r\n      return this.itemsToPoll.length === 0;\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event(\r\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\r\n        const outputIndex = this.graph.getOutputIndices()[i];\r\n        const outputTensor = this._values[outputIndex];\r\n        if (outputTensor === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        if (outputIndex === 0) {\r\n          await outputTensor.getData();\r\n        } else {\r\n          // eslint-disable-next-line no-unused-expressions\r\n          outputTensor.data;\r\n        }\r\n        output.push(outputTensor);\r\n      }\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Attribute} from './attribute';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil, ProtoUtil, MIN_CLIP, MAX_CLIP} from './util';\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: readonly number[];\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: readonly number[];\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: readonly number[];\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: readonly number[];\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    fuseConvActivationNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Graph {\r\n  getInputIndices(): readonly number[];\r\n  getInputNames(): readonly string[];\r\n  getOutputIndices(): readonly number[];\r\n  getOutputNames(): readonly string[];\r\n  getValues(): readonly Graph.Value[];\r\n  getNodes(): readonly Graph.Node[];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\r\n      new GraphImpl(graphProto, initializer),\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\r\n    if (_nodeProto instanceof onnx.NodeProto) {\r\n      this.name = _nodeProto.name;\r\n      this.opType = _nodeProto.opType;\r\n      this.attributes = new Attribute(_nodeProto.attribute);\r\n    } else if (_nodeProto instanceof ortFbs.Node) {\r\n      this.name = name ?? _nodeProto.name()!;\r\n      this.opType = _nodeProto.opType()!;\r\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\r\n    }\r\n\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): readonly number[] {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): readonly string[] {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): readonly number[] {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): readonly string[] {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): readonly Graph.Value[] {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): readonly Graph.Node[] {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    if (graph instanceof onnx.GraphProto) {\r\n      this.buildGraphFromOnnxFormat(graph);\r\n    } else if (graph instanceof ortFbs.Graph) {\r\n      this.buildGraphFromOrtFormat(graph);\r\n    } else {\r\n      throw new TypeError('Graph type is not supported.');\r\n    }\r\n  }\r\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    const inputValueNames = [];\r\n    for (let i = 0; i < graph.inputsLength(); i++) {\r\n      const inputName = graph.inputs(i);\r\n      if (dataIndices.has(inputName)) {\r\n        throw new Error(`duplicated input name: ${inputName}`);\r\n      }\r\n      // Find the input typeInfo from nodeargs\r\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\r\n        if (graph.nodeArgs(j)?.name() === inputName) {\r\n          const value = new Value();\r\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\r\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\r\n            throw new Error('Unexpected value type for the nodeArg.');\r\n          }\r\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\r\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\r\n          const shape = valueInfo.shape()!;\r\n          const dims = [];\r\n          for (let k = 0; k < shape.dimLength()!; k++) {\r\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\r\n          }\r\n          value.type = {shape: {dims}, tensorType: type};\r\n          const currentIndex = this._allData.push(value) - 1;\r\n          dataIndices.set(inputName, currentIndex);\r\n          inputValueNames.push(inputName);\r\n        }\r\n      }\r\n    }\r\n    // check initializers\r\n    for (let i = 0; i < graph.initializersLength(); i++) {\r\n      const initializer = graph.initializers(i)!;\r\n      let index = dataIndices.get(initializer.name()!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\r\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\r\n        value.type = {shape: {dims}, tensorType: type};\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(initializer.name()!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    for (let i = 0; i < graph.outputsLength(); i++) {\r\n      const outputName = graph.outputs(i);\r\n      if (dataIndices.has(outputName)) {\r\n        throw new Error(`duplicated output name: ${outputName}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value()) - 1;\r\n      dataIndices.set(outputName, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(outputName);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.nodes) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (let i = 0; i < graph.nodesLength(); i++) {\r\n      const nodeProto = graph.nodes(i);\r\n      let name = nodeProto!.name();\r\n      if (!name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            // an unique name is found. break.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(name)) {\r\n        throw new Error(`duplicated node name: ${name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\r\n      nodesIndices.set(name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i);\r\n      if (nodeProto == null) {\r\n        throw new Error(`No node exists at index ${i}`);\r\n      }\r\n      if (nodeProto?.outputsLength() === 0) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\r\n        const output = nodeProto?.outputs(j);\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType() === 'Constant') {\r\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (nodeProto.outputsLength() !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i)!;\r\n\r\n      if (nodeProto.inputsLength() === 0) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\r\n        const input = nodeProto.inputs(j)!;\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error('node outputs should not be initialized');\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error('model graph is cyclic');\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n    this.fuseConvActivationNodes();\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      if (!this._nodes[i].executeNode) {\r\n        // delete this node and shift all subsequent nodes up\r\n        offset++;\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n        this._nodes.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        // update the value table\r\n        this._nodes[i].inputs.forEach(value => {\r\n          const ind = this._allData[value]._to.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allData[value]._to[ind] = i;\r\n          }\r\n        });\r\n        this._nodes[i].outputs.forEach(value => {\r\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\r\n            this._allData[value]._from! = i;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\r\n   * An input validation must be done before calling this function.\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\r\n    // should not happen\r\n    if (delIndex === -1) {\r\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\r\n    }\r\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error('Dropout nodes should only contain one input. ');\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  isActivation(n: Node): boolean {\r\n    switch (n.opType) {\r\n      // TODO: add other activation methods\r\n      case 'Relu':\r\n      case 'Sigmoid':\r\n      case 'Clip':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  fuseConvActivationNodes() {\r\n    for (const node of this._nodes) {\r\n      if (node.opType === 'Conv') {\r\n        const next = this._allData[node.outputs[0]]._to;\r\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\r\n          const child = this._nodes[next[0]];\r\n          if (child.opType === 'Clip') {\r\n            if (child.inputs.length === 1) {\r\n              try {\r\n                node.attributes.set(\r\n                    'activation_params', 'floats',\r\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\r\n              } catch (e) {\r\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\r\n              }\r\n            } else if (\r\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\r\n                this._allData[child.inputs[2]].tensor !== undefined) {\r\n              node.attributes.set('activation_params', 'floats', [\r\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\r\n              ]);\r\n            } else {\r\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\r\n              continue;\r\n            }\r\n          }\r\n          node.attributes.set('activation', 'string', (child.opType));\r\n          this.deleteNode(next[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {WebGLContext} from './backends/webgl/webgl-context';\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n    fatal: 'f';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'warning' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n    fatal(content: string): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n  fatal(content: string): void;\r\n  fatal(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n\r\n  /**\r\n   * Set the logger's behavior from ort-common env\r\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\r\n   */\r\n  setWithEnv(env: Env): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      case 'fatal':\r\n        return '\\x1b[101mf\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000,\r\n  fatal: 6000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'warning',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category),\r\n    fatal: log.fatal.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n  export function fatal(content: string): void;\r\n  export function fatal(category: string, content: string): void;\r\n  export function fatal(arg0: string, arg1?: string) {\r\n    log('fatal', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n\r\n  export function setWithEnv(env: Env): void {\r\n    const config: Logger.Config = {};\r\n    if (env.logLevel) {\r\n      config.minimalSeverity = env.logLevel as Logger.Severity;\r\n    }\r\n    set('', config);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void|Promise<void>;\r\n  }\r\n}\r\n// TODO\r\n// class WebGLEvent implements Profiler.Event {}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\r\n\r\n  end() {\r\n    return this.endCallback(this);\r\n  }\r\n\r\n  async checkTimer(): Promise<number> {\r\n    if (this.ctx === undefined || this.timer === undefined) {\r\n      throw new Error('No webgl timer found');\r\n    } else {\r\n      this.ctx.endTimer();\r\n      return this.ctx.waitForQueryAndGetTime(this.timer);\r\n    }\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\r\n      |Promise<T> {\r\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\r\n    let isPromise = false;\r\n\r\n    const res = func();\r\n\r\n    // we consider a then-able object is a promise\r\n    if (res && typeof (res as Promise<T>).then === 'function') {\r\n      isPromise = true;\r\n      return new Promise<T>((resolve, reject) => {\r\n        (res as Promise<T>)\r\n            .then(\r\n                async value => {  // fulfilled\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  resolve(value);\r\n                },\r\n                async reason => {  // rejected\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  reject(reason);\r\n                });\r\n      });\r\n    }\r\n    if (!isPromise && event) {\r\n      const eventRes = event.end();\r\n      if (eventRes && typeof eventRes.then === 'function') {\r\n        return new Promise<T>((resolve, reject) => {\r\n          (eventRes).then(\r\n              () => {  // fulfilled\r\n                resolve(res);\r\n              },\r\n              (reason) => {  // rejected\r\n                reject(reason);\r\n              });\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    if (ctx === undefined) {\r\n      const startTime = now();\r\n      this.flush(startTime);\r\n      return new Event(category, name, startTime, e => this.endSync(e));\r\n    } else {\r\n      const timer: WebGLQuery = ctx.beginTimer();\r\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\r\n    }\r\n  }\r\n\r\n  // end the specific event\r\n  private async end(event: Event): Promise<void> {\r\n    const endTime: number = await event.checkTimer();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private endSync(event: Event): void {\r\n    const endTime: number = now();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {LongUtil} from './util';\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\r\n    if (!isOrtFormat) {\r\n      // isOrtFormat === false || isOrtFormat === undefined\r\n      try {\r\n        this.loadFromOnnxFormat(buf, graphInitializer);\r\n        return;\r\n      } catch (e) {\r\n        if (isOrtFormat !== undefined) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.loadFromOrtFormat(buf, graphInitializer);\r\n  }\r\n\r\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets =\r\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const fb = new flatbuffers.ByteBuffer(buf);\r\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\r\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n    this._opsets = [];\r\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\r\n      const opsetId = ortModel.opsetImport(i)!;\r\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\r\n    }\r\n\r\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): readonly OpSet[] {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\r\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\r\n\r\nexport interface Operator {\r\n  readonly impl: OperatorImplementation<unknown>;\r\n  readonly context: Graph.Node|unknown;\r\n}\r\n\r\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from './graph';\r\nimport {OperatorImplementation, OperatorInitialization} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\n\r\nexport declare namespace OpSet {\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\r\n\r\n  /**\r\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\r\n   * operatorInitialization (optional)\r\n   */\r\n  type ResolveRule = [\r\n    string, Domain, string, OperatorImplementation<Graph.Node>\r\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\r\n}\r\n\r\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opImpl = rule[3];\r\n    const opInit = rule[4];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return {opImpl, opInit};\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n/* eslint-disable */\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum AttributeType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    INT = 2,\r\n    STRING = 3,\r\n    TENSOR = 4,\r\n    GRAPH = 5,\r\n    FLOATS = 6,\r\n    INTS = 7,\r\n    STRINGS = 8,\r\n    TENSORS = 9,\r\n    GRAPHS = 10,\r\n    SPARSE_TENSOR = 11,\r\n    SPARSE_TENSORS = 12\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TensorDataType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    UINT8 = 2,\r\n    INT8 = 3,\r\n    UINT16 = 4,\r\n    INT16 = 5,\r\n    INT32 = 6,\r\n    INT64 = 7,\r\n    STRING = 8,\r\n    BOOL = 9,\r\n    FLOAT16 = 10,\r\n    DOUBLE = 11,\r\n    UINT32 = 12,\r\n    UINT64 = 13,\r\n    COMPLEX64 = 14,\r\n    COMPLEX128 = 15,\r\n    BFLOAT16 = 16\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum NodeType {Primitive = 0, Fused = 1}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\r\n}\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Shape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Shape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Dimension= obj\r\n     * @returns onnxruntime.experimental.fbs.Dimension\r\n     */\r\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimOffset\r\n     */\r\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, dimOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Shape.startShape(builder);\r\n      Shape.addDim(builder, dimOffset);\r\n      return Shape.endShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Dimension {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Dimension\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\r\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\r\n     */\r\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimension(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimension(\r\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\r\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Dimension.startDimension(builder);\r\n      Dimension.addValue(builder, valueOffset);\r\n      Dimension.addDenotation(builder, denotationOffset);\r\n      return Dimension.endDimension(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class DimensionValue {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns DimensionValue\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\r\n     */\r\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dimValue(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    dimParam(): string|null;\r\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimensionValue(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\r\n     */\r\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\r\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long dimValue\r\n     */\r\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimParamOffset\r\n     */\r\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimParamOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimensionValue(\r\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\r\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      DimensionValue.startDimensionValue(builder);\r\n      DimensionValue.addDimType(builder, dimType);\r\n      DimensionValue.addDimValue(builder, dimValue);\r\n      DimensionValue.addDimParam(builder, dimParamOffset);\r\n      return DimensionValue.endDimensionValue(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TensorTypeAndShape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\r\n        TensorTypeAndShape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Shape= obj\r\n     * @returns onnxruntime.experimental.fbs.Shape|null\r\n     */\r\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset shapeOffset\r\n     */\r\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, shapeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensorTypeAndShape(\r\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\r\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\r\n      TensorTypeAndShape.addElemType(builder, elemType);\r\n      TensorTypeAndShape.addShape(builder, shapeOffset);\r\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class MapType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns MapType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startMapType(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\r\n     */\r\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueTypeOffset\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, valueTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createMapType(\r\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\r\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      MapType.startMapType(builder);\r\n      MapType.addKeyType(builder, keyType);\r\n      MapType.addValueType(builder, valueTypeOffset);\r\n      return MapType.endMapType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SequenceType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SequenceType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSequenceType(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset elemTypeOffset\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, elemTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SequenceType.startSequenceType(builder);\r\n      SequenceType.addElemType(builder, elemTypeOffset);\r\n      return SequenceType.endSequenceType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class EdgeEnd {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns EdgeEnd\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      return this.bb!.readUint32(this.bb_pos);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    srcArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 4);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dstArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number node_index\r\n     * @param number src_arg_index\r\n     * @param number dst_arg_index\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createEdgeEnd(\r\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\r\n        dst_arg_index: number): flatbuffers.Offset {\r\n      builder.prep(4, 12);\r\n      builder.writeInt32(dst_arg_index);\r\n      builder.writeInt32(src_arg_index);\r\n      builder.writeInt32(node_index);\r\n      return builder.offset();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class NodeEdge {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns NodeEdge\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNodeEdge(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number nodeIndex\r\n     */\r\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\r\n      builder.addFieldInt32(0, nodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputEdgesOffset\r\n     */\r\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputEdgesOffset\r\n     */\r\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNodeEdge(\r\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\r\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      NodeEdge.startNodeEdge(builder);\r\n      NodeEdge.addNodeIndex(builder, nodeIndex);\r\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\r\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\r\n      return NodeEdge.endNodeEdge(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Node {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Node\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sinceVersion(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    index(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    opType(): string|null;\r\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    opType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.NodeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.NodeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    executionProviderType(): string|null;\r\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Attribute= obj\r\n     * @returns onnxruntime.experimental.fbs.Attribute\r\n     */\r\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\r\n        |null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    attributesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    inputArgCounts(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputArgCountsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Int32Array\r\n     */\r\n    inputArgCountsArray(): Int32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ?\r\n          new Int32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    implicitInputs(index: number): string;\r\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    implicitInputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNode(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number sinceVersion\r\n     */\r\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\r\n      builder.addFieldInt32(3, sinceVersion, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number index\r\n     */\r\n    static addIndex(builder: flatbuffers.Builder, index: number) {\r\n      builder.addFieldInt32(4, index, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opTypeOffset\r\n     */\r\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, opTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.NodeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\r\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset executionProviderTypeOffset\r\n     */\r\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset attributesOffset\r\n     */\r\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, attributesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputArgCountsOffset\r\n     */\r\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset implicitInputsOffset\r\n     */\r\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNode(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\r\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Node.startNode(builder);\r\n      Node.addName(builder, nameOffset);\r\n      Node.addDocString(builder, docStringOffset);\r\n      Node.addDomain(builder, domainOffset);\r\n      Node.addSinceVersion(builder, sinceVersion);\r\n      Node.addIndex(builder, index);\r\n      Node.addOpType(builder, opTypeOffset);\r\n      Node.addType(builder, type);\r\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\r\n      Node.addInputs(builder, inputsOffset);\r\n      Node.addOutputs(builder, outputsOffset);\r\n      Node.addAttributes(builder, attributesOffset);\r\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\r\n      Node.addImplicitInputs(builder, implicitInputsOffset);\r\n      return Node.endNode(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class ValueInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns ValueInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startValueInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset typeOffset\r\n     */\r\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, typeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createValueInfo(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      ValueInfo.startValueInfo(builder);\r\n      ValueInfo.addName(builder, nameOffset);\r\n      ValueInfo.addDocString(builder, docStringOffset);\r\n      ValueInfo.addType(builder, typeOffset);\r\n      return ValueInfo.endValueInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TypeInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TypeInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\r\n     */\r\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Table obj\r\n     * @returns ?flatbuffers.Table\r\n     */\r\n    value<T extends flatbuffers.Table>(obj: T): T|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTypeInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\r\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTypeInfo(\r\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\r\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TypeInfo.startTypeInfo(builder);\r\n      TypeInfo.addDenotation(builder, denotationOffset);\r\n      TypeInfo.addValueType(builder, valueType);\r\n      TypeInfo.addValue(builder, valueOffset);\r\n      return TypeInfo.endTypeInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class OperatorSetId {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns OperatorSetId\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    version(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startOperatorSetId(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long version\r\n     */\r\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createOperatorSetId(\r\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\r\n      OperatorSetId.startOperatorSetId(builder);\r\n      OperatorSetId.addDomain(builder, domainOffset);\r\n      OperatorSetId.addVersion(builder, version);\r\n      return OperatorSetId.endOperatorSetId(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Tensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Tensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    rawData(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    rawDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint8Array\r\n     */\r\n    rawDataArray(): Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ?\r\n          new Uint8Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    stringData(index: number): string;\r\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(6);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\r\n     */\r\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset rawDataOffset\r\n     */\r\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, rawDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(1, data.length, 1);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt8(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(1, numElems, 1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringDataOffset\r\n     */\r\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, stringDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensor(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\r\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Tensor.startTensor(builder);\r\n      Tensor.addName(builder, nameOffset);\r\n      Tensor.addDocString(builder, docStringOffset);\r\n      Tensor.addDims(builder, dimsOffset);\r\n      Tensor.addDataType(builder, dataType);\r\n      Tensor.addRawData(builder, rawDataOffset);\r\n      Tensor.addStringData(builder, stringDataOffset);\r\n      return Tensor.endTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SparseTensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SparseTensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSparseTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valuesOffset\r\n     */\r\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valuesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset indicesOffset\r\n     */\r\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, indicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSparseTensor(\r\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SparseTensor.startSparseTensor(builder);\r\n      SparseTensor.addValues(builder, valuesOffset);\r\n      SparseTensor.addIndices(builder, indicesOffset);\r\n      SparseTensor.addDims(builder, dimsOffset);\r\n      return SparseTensor.endSparseTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Attribute {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Attribute\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.AttributeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.AttributeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    f(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    i(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    s(): string|null;\r\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    s(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    floats(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    floatsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Float32Array\r\n     */\r\n    floatsArray(): Float32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ?\r\n          new Float32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    ints(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    intsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    strings(index: number): string;\r\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    tensorsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph\r\n     */\r\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    graphsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startAttribute(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.AttributeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\r\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number f\r\n     */\r\n    static addF(builder: flatbuffers.Builder, f: number) {\r\n      builder.addFieldFloat32(3, f, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long i\r\n     */\r\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\r\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sOffset\r\n     */\r\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, sOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tOffset\r\n     */\r\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, tOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset gOffset\r\n     */\r\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, gOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset floatsOffset\r\n     */\r\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, floatsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addFloat32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset intsOffset\r\n     */\r\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, intsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringsOffset\r\n     */\r\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, stringsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tensorsOffset\r\n     */\r\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, tensorsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphsOffset\r\n     */\r\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, graphsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createAttribute(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\r\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\r\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\r\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Attribute.startAttribute(builder);\r\n      Attribute.addName(builder, nameOffset);\r\n      Attribute.addDocString(builder, docStringOffset);\r\n      Attribute.addType(builder, type);\r\n      Attribute.addF(builder, f);\r\n      Attribute.addI(builder, i);\r\n      Attribute.addS(builder, sOffset);\r\n      Attribute.addT(builder, tOffset);\r\n      Attribute.addG(builder, gOffset);\r\n      Attribute.addFloats(builder, floatsOffset);\r\n      Attribute.addInts(builder, intsOffset);\r\n      Attribute.addStrings(builder, stringsOffset);\r\n      Attribute.addTensors(builder, tensorsOffset);\r\n      Attribute.addGraphs(builder, graphsOffset);\r\n      return Attribute.endAttribute(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Graph {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Graph\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    initializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.ValueInfo\r\n     */\r\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeArgsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Node= obj\r\n     * @returns onnxruntime.experimental.fbs.Node\r\n     */\r\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    maxNodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\r\n     * @returns onnxruntime.experimental.fbs.NodeEdge\r\n     */\r\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\r\n     * @returns onnxruntime.experimental.fbs.SparseTensor\r\n     */\r\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\r\n        onnxruntime.experimental.fbs.SparseTensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sparseInitializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startGraph(builder: flatbuffers.Builder) {\r\n      builder.startObject(8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset initializersOffset\r\n     */\r\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, initializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeArgsOffset\r\n     */\r\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodesOffset\r\n     */\r\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, nodesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number maxNodeIndex\r\n     */\r\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\r\n      builder.addFieldInt32(3, maxNodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeEdgesOffset\r\n     */\r\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sparseInitializersOffset\r\n     */\r\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createGraph(\r\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\r\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\r\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Graph.startGraph(builder);\r\n      Graph.addInitializers(builder, initializersOffset);\r\n      Graph.addNodeArgs(builder, nodeArgsOffset);\r\n      Graph.addNodes(builder, nodesOffset);\r\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\r\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\r\n      Graph.addInputs(builder, inputsOffset);\r\n      Graph.addOutputs(builder, outputsOffset);\r\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\r\n      return Graph.endGraph(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Model {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Model\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    irVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\r\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\r\n     */\r\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\r\n        onnxruntime.experimental.fbs.OperatorSetId|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    opsetImportLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerName(): string|null;\r\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerVersion(): string|null;\r\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    modelVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphDocString(): string|null;\r\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startModel(builder: flatbuffers.Builder) {\r\n      builder.startObject(9);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long irVersion\r\n     */\r\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opsetImportOffset\r\n     */\r\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, opsetImportOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerNameOffset\r\n     */\r\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, producerNameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerVersionOffset\r\n     */\r\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(3, producerVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long modelVersion\r\n     */\r\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphOffset\r\n     */\r\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, graphOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphDocStringOffset\r\n     */\r\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createModel(\r\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\r\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\r\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Model.startModel(builder);\r\n      Model.addIrVersion(builder, irVersion);\r\n      Model.addOpsetImport(builder, opsetImportOffset);\r\n      Model.addProducerName(builder, producerNameOffset);\r\n      Model.addProducerVersion(builder, producerVersionOffset);\r\n      Model.addDomain(builder, domainOffset);\r\n      Model.addModelVersion(builder, modelVersion);\r\n      Model.addDocString(builder, docStringOffset);\r\n      Model.addGraph(builder, graphOffset);\r\n      Model.addGraphDocString(builder, graphDocStringOffset);\r\n      return Model.endModel(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class KernelCreateInfos {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns KernelCreateInfos\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\r\n        KernelCreateInfos {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    nodeIndices(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndicesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint32Array\r\n     */\r\n    nodeIndicesArray(): Uint32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ?\r\n          new Uint32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    kernelDefHashes(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    kernelDefHashesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeIndicesOffset\r\n     */\r\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelDefHashesOffset\r\n     */\r\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createKernelCreateInfos(\r\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\r\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      KernelCreateInfos.startKernelCreateInfos(builder);\r\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\r\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\r\n      return KernelCreateInfos.endKernelCreateInfos(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SubGraphSessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SubGraphSessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\r\n        SubGraphSessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphId(): string|null;\r\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphIdOffset\r\n     */\r\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, graphIdOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      builder.requiredField(offset, 4);  // graph_id\r\n      return offset;\r\n    }\r\n\r\n    static createSubGraphSessionState(\r\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SubGraphSessionState.startSubGraphSessionState(builder);\r\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\r\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\r\n      return SubGraphSessionState.endSubGraphSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\r\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\r\n     */\r\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\r\n     */\r\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\r\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    subGraphSessionStatesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelsOffset\r\n     */\r\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, kernelsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\r\n     */\r\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSessionState(\r\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\r\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SessionState.startSessionState(builder);\r\n      SessionState.addKernels(builder, kernelsOffset);\r\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\r\n      return SessionState.endSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class InferenceSession {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns InferenceSession\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns boolean\r\n     */\r\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\r\n      return bb.__has_identifier('ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    ortVersion(): string|null;\r\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Model= obj\r\n     * @returns onnxruntime.experimental.fbs.Model|null\r\n     */\r\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startInferenceSession(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset ortVersionOffset\r\n     */\r\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, ortVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset modelOffset\r\n     */\r\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, modelOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM', true);\r\n    }\r\n\r\n    static createInferenceSession(\r\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      InferenceSession.startInferenceSession(builder);\r\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\r\n      InferenceSession.addModel(builder, modelOffset);\r\n      InferenceSession.addSessionState(builder, sessionStateOffset);\r\n      return InferenceSession.endInferenceSession(builder);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\nimport {Session} from './session';\r\nimport {Tensor as OnnxjsTensor} from './tensor';\r\n\r\nexport class OnnxjsSessionHandler implements SessionHandler {\r\n  constructor(private session: Session) {\r\n    this.inputNames = this.session.inputNames;\r\n    this.outputNames = this.session.outputNames;\r\n  }\r\n\r\n  async dispose(): Promise<void> {}\r\n  inputNames: readonly string[];\r\n  outputNames: readonly string[];\r\n  async run(\r\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\r\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\r\n    const inputMap = new Map<string, OnnxjsTensor>();\r\n    for (const name in feeds) {\r\n      if (Object.hasOwnProperty.call(feeds, name)) {\r\n        const feed = feeds[name];\r\n        inputMap.set(\r\n            name,\r\n            new OnnxjsTensor(\r\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\r\n                feed.data as OnnxjsTensor.NumberType));\r\n      }\r\n    }\r\n    const outputMap = await this.session.run(inputMap);\r\n    const output: SessionHandler.ReturnType = {};\r\n    outputMap.forEach((tensor, name) => {\r\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\r\n    });\r\n    return output;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {resolveBackend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<readonly number[]>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this._model.graph.getInputNames();\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this._model.graph.getOutputNames();\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await resolveBackend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        const isOrtFormat = arg.endsWith('.ort');\r\n        if (typeof fetch === 'undefined') {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(buf, isOrtFormat);\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(new Uint8Array(buf), isOrtFormat);\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(arr);\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\r\n      boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error('expected number of outputs do not match number of generated outputs');\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Guid} from 'guid-typescript';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export type Id = Guid;\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError('data type is not string');\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not float (float32, float64)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError('type cannot be non-number (string)');\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: readonly number[];\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): readonly number[] {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: readonly number[],\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Guid = Guid.create()) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError('Input dims doesn\\'t match data length.');\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError('cache should be a string array');\r\n      }\r\n\r\n      if (empty) {\r\n        this.cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        value.data[i] = decodeUtf8String(str);\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error('array length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n\r\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\r\n    if (!ortTensor) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\r\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\r\n        value.data[i] = ortTensor.stringData(i);\r\n      }\r\n\r\n    } else if (\r\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource = new DataView(\r\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\r\n      const elementSize = sizeofProto(ortTensor.dataType());\r\n      const length = ortTensor.rawDataLength() / elementSize;\r\n\r\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (\r\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\r\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Evaluates the given expression and asserts error message if condition is unmet.\r\nexport function assert(expr: boolean, msg: () => string) {\r\n  if (!expr) {\r\n    throw new Error(typeof msg === 'string' ? msg : msg());\r\n  }\r\n}\r\n\r\nexport class ArrayUtil {\r\n  /**\r\n   * Verifies if 2 input arrays contain the same elements.\r\n   * @param n1 Array 1\r\n   * @param n2 Array 2\r\n   * @returns Whether these 2 are equal\r\n   */\r\n  static arraysEqual(\r\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array,\r\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array) {\r\n    if (n1.length !== n2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n      if (n1[i] !== n2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\r\n      [readonly number[], readonly number[]] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]), b.get([])));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]);\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]);\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA);\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB);\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determine the broadcasted dims in input shape based on the given output shape.\r\n   * Note that this function only returns the broadcasted dims.\r\n   * @param inputShape The input shape\r\n   * @param outputShape The output shape\r\n   * @returns The broadcasted dims in input shape.\r\n   */\r\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\r\n    const inRank = inputShape.length;\r\n    const dims: number[] = [];\r\n    for (let i = 0; i < inRank; i++) {\r\n      const dim = inRank - 1 - i;\r\n      const a = inputShape[dim] || 1;\r\n      const b = outputShape[outputShape.length - 1 - i] || 1;\r\n      if (b > 1 && a === 1) {\r\n        dims.unshift(dim);\r\n      }\r\n    }\r\n    return dims;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error('sourceIndex out of bounds');\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error('targetIndex out of bounds');\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error('source indices to be copied are outside bounds');\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error('target array is too small to hold result');\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\r\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\r\n    switch (type) {\r\n      case 'int8':\r\n        return onnx.TensorProto.DataType.INT8;\r\n      case 'uint8':\r\n        return onnx.TensorProto.DataType.UINT8;\r\n      case 'bool':\r\n        return onnx.TensorProto.DataType.BOOL;\r\n      case 'int16':\r\n        return onnx.TensorProto.DataType.INT16;\r\n      case 'uint16':\r\n        return onnx.TensorProto.DataType.UINT16;\r\n      case 'int32':\r\n        return onnx.TensorProto.DataType.INT32;\r\n      case 'uint32':\r\n        return onnx.TensorProto.DataType.UINT32;\r\n      case 'float32':\r\n        return onnx.TensorProto.DataType.FLOAT;\r\n      case 'float64':\r\n        return onnx.TensorProto.DataType.DOUBLE;\r\n      case 'string':\r\n        return onnx.TensorProto.DataType.STRING;\r\n      case 'int64':\r\n        return onnx.TensorProto.DataType.INT64;\r\n      case 'uint64':\r\n        return onnx.TensorProto.DataType.UINT64;\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${type}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n\r\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\r\n    const dims = [];\r\n    for (let i = 0; i < tensor.dimsLength(); i++) {\r\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\r\n    const attributes = [];\r\n    for (let i = 0; i < node.attributesLength(); i++) {\r\n      attributes.push(node.attributes(i)!);\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\r\n  // which values are signed integers.\r\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\r\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\r\n    if (Long.isLong(n)) {\r\n      return n.toNumber();\r\n    } else if (n instanceof flatbuffers.Long) {\r\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\r\n    }\r\n    return n;\r\n  }\r\n  static isLong(n: unknown) {\r\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: readonly number[]): readonly number[] {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error('Index incrementing unsupported for scalar Tensor');\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error('Incorrect axis to increment on');\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error('cannot reshape to a scalar Tensor');\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error('squeeze an axis of size different than 1');\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error('\\'axes\\' has an out of range axis');\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error('\\'axes\\' has a duplicate axis');\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error('cannot split tensor to equal sized parts');\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      dilations: number[], pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust dilation value\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < dilations.length) {\r\n        if (dilations[dim] < 0) {\r\n          throw new Error('dilations should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        dilations.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\r\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport const MIN_CLIP = -3.4028234663852886e+38;\r\nexport const MAX_CLIP = 3.4028234663852886e+38;\r\n\r\nexport function decodeUtf8String(buffer: Uint8Array): string {\r\n  return new TextDecoder().decode(buffer);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\ninterface ExtraOptionsHandler {\r\n  (name: string, value: string): void;\r\n}\r\n\r\nexport const iterateExtraOptions =\r\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\r\n     handler: ExtraOptionsHandler): void => {\r\n      if (typeof options == 'object' && options !== null) {\r\n        if (seen.has(options)) {\r\n          throw new Error('Circular reference in options');\r\n        } else {\r\n          seen.add(options);\r\n        }\r\n      }\r\n\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        const name = (prefix) ? prefix + key : key;\r\n        if (typeof value === 'object') {\r\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\r\n        } else if (typeof value === 'string' || typeof value === 'number') {\r\n          handler(name, value.toString());\r\n        } else if (typeof value === 'boolean') {\r\n          handler(name, (value) ? '1' : '0');\r\n        } else {\r\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\r\n        }\r\n      });\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env, InferenceSession} from 'onnxruntime-common';\r\nimport {OrtWasmMessage, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport * as core from './wasm-core-impl';\r\nimport {initializeWebAssembly} from './wasm-factory';\r\n\r\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\r\nlet proxyWorker: Worker|undefined;\r\nlet initializing = false;\r\nlet initialized = false;\r\nlet aborted = false;\r\n\r\n// resolve; reject\r\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\r\n\r\nlet initWasmCallbacks: PromiseCallbacks;\r\nlet initOrtCallbacks: PromiseCallbacks;\r\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\r\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\r\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\r\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\r\n\r\nconst ensureWorker = (): void => {\r\n  if (initializing || !initialized || aborted || !proxyWorker) {\r\n    throw new Error('worker not ready');\r\n  }\r\n};\r\n\r\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\r\n  switch (ev.data.type) {\r\n    case 'init-wasm':\r\n      initializing = false;\r\n      if (ev.data.err) {\r\n        aborted = true;\r\n        initWasmCallbacks[1](ev.data.err);\r\n      } else {\r\n        initialized = true;\r\n        initWasmCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'init-ort':\r\n      if (ev.data.err) {\r\n        initOrtCallbacks[1](ev.data.err);\r\n      } else {\r\n        initOrtCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'create':\r\n      if (ev.data.err) {\r\n        createSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'release':\r\n      if (ev.data.err) {\r\n        releaseSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        releaseSessionCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    case 'run':\r\n      if (ev.data.err) {\r\n        runCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        runCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'end-profiling':\r\n      if (ev.data.err) {\r\n        endProfilingCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        endProfilingCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    default:\r\n  }\r\n};\r\n\r\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\r\n\r\nexport const initWasm = async(): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    if (initialized) {\r\n      return;\r\n    }\r\n    if (initializing) {\r\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\r\n    }\r\n    if (aborted) {\r\n      throw new Error('previous call to \\'initWasm()\\' failed.');\r\n    }\r\n\r\n    initializing = true;\r\n\r\n    // overwrite wasm filepaths\r\n    if (env.wasm.wasmPaths === undefined) {\r\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\r\n        env.wasm.wasmPaths = scriptSrc.substr(0, (scriptSrc as string).lastIndexOf('/') + 1);\r\n      }\r\n    }\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      proxyWorker?.terminate();\r\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\r\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\r\n      proxyWorker.onmessage = onProxyWorkerMessage;\r\n      initWasmCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\r\n      proxyWorker.postMessage(message);\r\n    });\r\n\r\n  } else {\r\n    return initializeWebAssembly(env.wasm);\r\n  }\r\n};\r\n\r\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      initOrtCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.initOrt(numThreads, loggingLevel);\r\n  }\r\n};\r\n\r\nexport const createSession =\r\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\r\n      createSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\r\n      proxyWorker!.postMessage(message, [model.buffer]);\r\n    });\r\n  } else {\r\n    return core.createSession(model, options);\r\n  }\r\n};\r\n\r\nexport const releaseSession = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      releaseSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.releaseSession(sessionId);\r\n  }\r\n};\r\n\r\nexport const run = async(\r\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\r\n      runCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\r\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\r\n    });\r\n  } else {\r\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\r\n  }\r\n};\r\n\r\nexport const endProfiling = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      endProfilingCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.endProfiling(sessionId);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {iterateExtraOptions} from './options-utils';\r\nimport {allocWasmString} from './string-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let runOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const runOptions: InferenceSession.RunOptions = options || {};\r\n\r\n  try {\r\n    if (options?.logSeverityLevel === undefined) {\r\n      runOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      runOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.terminate === undefined) {\r\n      runOptions.terminate = false;\r\n    }\r\n\r\n    let tagDataOffset = 0;\r\n    if (options?.tag !== undefined) {\r\n      tagDataOffset = allocWasmString(options.tag, allocs);\r\n    }\r\n\r\n    runOptionsHandle = wasm._OrtCreateRunOptions(\r\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\r\n    if (runOptionsHandle === 0) {\r\n      throw new Error('Can\\'t create run options');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [runOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    allocs.forEach(wasm._free);\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\n\r\nimport {createSession, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\r\n\r\nlet ortInit: boolean;\r\n\r\n\r\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\r\n  switch (logLevel) {\r\n    case 'verbose':\r\n      return 0;\r\n    case 'info':\r\n      return 1;\r\n    case 'warning':\r\n      return 2;\r\n    case 'error':\r\n      return 3;\r\n    case 'fatal':\r\n      return 4;\r\n    default:\r\n      throw new Error(`unsupported logging level: ${logLevel}`);\r\n  }\r\n};\r\n\r\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\r\n  private sessionId: number;\r\n\r\n  inputNames: string[];\r\n  outputNames: string[];\r\n\r\n  async loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\r\n    if (!ortInit) {\r\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\r\n      ortInit = true;\r\n    }\r\n\r\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\r\n  }\r\n\r\n  async dispose(): Promise<void> {\r\n    return releaseSession(this.sessionId);\r\n  }\r\n\r\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\r\n      Promise<SessionHandler.ReturnType> {\r\n    const inputArray: Tensor[] = [];\r\n    const inputIndices: number[] = [];\r\n    Object.entries(feeds).forEach(kvp => {\r\n      const name = kvp[0];\r\n      const tensor = kvp[1];\r\n      const index = this.inputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid input '${name}'`);\r\n      }\r\n      inputArray.push(tensor);\r\n      inputIndices.push(index);\r\n    });\r\n\r\n    const outputIndices: number[] = [];\r\n    Object.entries(fetches).forEach(kvp => {\r\n      const name = kvp[0];\r\n      // TODO: support pre-allocated output\r\n      const index = this.outputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid output '${name}'`);\r\n      }\r\n      outputIndices.push(index);\r\n    });\r\n\r\n    const outputs =\r\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\r\n\r\n    const result: SessionHandler.ReturnType = {};\r\n    for (let i = 0; i < outputs.length; i++) {\r\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  startProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n\r\n  endProfiling(): void {\r\n    void endProfiling(this.sessionId);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {iterateExtraOptions} from './options-utils';\r\nimport {allocWasmString} from './string-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\r\n  switch (graphOptimizationLevel) {\r\n    case 'disabled':\r\n      return 0;\r\n    case 'basic':\r\n      return 1;\r\n    case 'extended':\r\n      return 2;\r\n    case 'all':\r\n      return 99;\r\n    default:\r\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\r\n  }\r\n};\r\n\r\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\r\n  switch (executionMode) {\r\n    case 'sequential':\r\n      return 0;\r\n    case 'parallel':\r\n      return 1;\r\n    default:\r\n      throw new Error(`unsupported execution mode: ${executionMode}`);\r\n  }\r\n};\r\n\r\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\r\n  if (!options.extra) {\r\n    options.extra = {};\r\n  }\r\n  if (!options.extra.session) {\r\n    options.extra.session = {};\r\n  }\r\n  const session = options.extra.session as Record<string, string>;\r\n  if (!session.use_ort_model_bytes_directly) {\r\n    // eslint-disable-next-line camelcase\r\n    session.use_ort_model_bytes_directly = '1';\r\n  }\r\n};\r\n\r\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let sessionOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\r\n  appendDefaultOptions(sessionOptions);\r\n\r\n  try {\r\n    if (options?.graphOptimizationLevel === undefined) {\r\n      sessionOptions.graphOptimizationLevel = 'all';\r\n    }\r\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\r\n\r\n    if (options?.enableCpuMemArena === undefined) {\r\n      sessionOptions.enableCpuMemArena = true;\r\n    }\r\n\r\n    if (options?.enableMemPattern === undefined) {\r\n      sessionOptions.enableMemPattern = true;\r\n    }\r\n\r\n    if (options?.executionMode === undefined) {\r\n      sessionOptions.executionMode = 'sequential';\r\n    }\r\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\r\n\r\n    let logIdDataOffset = 0;\r\n    if (options?.logId !== undefined) {\r\n      logIdDataOffset = allocWasmString(options.logId, allocs);\r\n    }\r\n\r\n    if (options?.logSeverityLevel === undefined) {\r\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.enableProfiling === undefined) {\r\n      sessionOptions.enableProfiling = false;\r\n    }\r\n\r\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\r\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\r\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\r\n        sessionOptions.logVerbosityLevel!);\r\n    if (sessionOptionsHandle === 0) {\r\n      throw new Error('Can\\'t create session options');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [sessionOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (sessionOptionsHandle !== 0) {\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n    }\r\n    allocs.forEach(wasm._free);\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const allocWasmString = (data: string, allocs: number[]): number => {\r\n  const wasm = getInstance();\r\n\r\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\r\n  const dataOffset = wasm._malloc(dataLength);\r\n  wasm.stringToUTF8(data, dataOffset, dataLength);\r\n  allocs.push(dataOffset);\r\n\r\n  return dataOffset;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\r\nimport {SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport {setRunOptions} from './run-options';\r\nimport {setSessionOptions} from './session-options';\r\nimport {allocWasmString} from './string-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\n/**\r\n * initialize ORT environment.\r\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\r\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\r\n */\r\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\r\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\r\n  if (errorCode !== 0) {\r\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\r\n  }\r\n};\r\n\r\n/**\r\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\r\n */\r\ntype SessionMetadata = [number, number[], number[]];\r\n\r\nconst activeSessions = new Map<number, SessionMetadata>();\r\n\r\n/**\r\n * create an instance of InferenceSession.\r\n * @returns the metadata of InferenceSession. 0-value handle for failure.\r\n */\r\nexport const createSession =\r\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\r\n      const wasm = getInstance();\r\n      const modelDataOffset = wasm._malloc(model.byteLength);\r\n      let sessionHandle = 0;\r\n      let sessionOptionsHandle = 0;\r\n      let allocs: number[] = [];\r\n\r\n      try {\r\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\r\n\r\n        wasm.HEAPU8.set(model, modelDataOffset);\r\n        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\r\n        if (sessionHandle === 0) {\r\n          throw new Error('Can\\'t create a session');\r\n        }\r\n      } finally {\r\n        wasm._free(modelDataOffset);\r\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n        allocs.forEach(wasm._free);\r\n      }\r\n\r\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\r\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\r\n\r\n      const inputNames = [];\r\n      const inputNamesUTF8Encoded = [];\r\n      const outputNames = [];\r\n      const outputNamesUTF8Encoded = [];\r\n      for (let i = 0; i < inputCount; i++) {\r\n        const name = wasm._OrtGetInputName(sessionHandle, i);\r\n        if (name === 0) {\r\n          throw new Error('Can\\'t get an input name');\r\n        }\r\n        inputNamesUTF8Encoded.push(name);\r\n        inputNames.push(wasm.UTF8ToString(name));\r\n      }\r\n      for (let i = 0; i < outputCount; i++) {\r\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\r\n        if (name === 0) {\r\n          throw new Error('Can\\'t get an output name');\r\n        }\r\n        outputNamesUTF8Encoded.push(name);\r\n        outputNames.push(wasm.UTF8ToString(name));\r\n      }\r\n\r\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\r\n      return [sessionHandle, inputNames, outputNames];\r\n    };\r\n\r\nexport const releaseSession = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error('invalid session id');\r\n  }\r\n  const sessionHandle = session[0];\r\n  const inputNamesUTF8Encoded = session[1];\r\n  const outputNamesUTF8Encoded = session[2];\r\n\r\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n  wasm._OrtReleaseSession(sessionHandle);\r\n  activeSessions.delete(sessionId);\r\n};\r\n\r\n/**\r\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\r\n */\r\nconst enum DataType {\r\n  undefined = 0,\r\n  float = 1,\r\n  uint8 = 2,\r\n  int8 = 3,\r\n  uint16 = 4,\r\n  int16 = 5,\r\n  int32 = 6,\r\n  int64 = 7,\r\n  string = 8,\r\n  bool = 9,\r\n  float16 = 10,\r\n  double = 11,\r\n  uint32 = 12,\r\n  uint64 = 13,\r\n  complex64 = 14,\r\n  complex128 = 15,\r\n  bfloat16 = 16\r\n}\r\n\r\n\r\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\r\n  switch (type) {\r\n    case 'int8':\r\n      return DataType.int8;\r\n    case 'uint8':\r\n      return DataType.uint8;\r\n    case 'bool':\r\n      return DataType.bool;\r\n    case 'int16':\r\n      return DataType.int16;\r\n    case 'uint16':\r\n      return DataType.uint16;\r\n    case 'int32':\r\n      return DataType.int32;\r\n    case 'uint32':\r\n      return DataType.uint32;\r\n    case 'float32':\r\n      return DataType.float;\r\n    case 'float64':\r\n      return DataType.double;\r\n    case 'string':\r\n      return DataType.string;\r\n    case 'int64':\r\n      return DataType.int64;\r\n    case 'uint64':\r\n      return DataType.uint64;\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${type}`);\r\n  }\r\n};\r\n\r\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\r\n  switch (typeProto) {\r\n    case DataType.int8:\r\n      return 'int8';\r\n    case DataType.uint8:\r\n      return 'uint8';\r\n    case DataType.bool:\r\n      return 'bool';\r\n    case DataType.int16:\r\n      return 'int16';\r\n    case DataType.uint16:\r\n      return 'uint16';\r\n    case DataType.int32:\r\n      return 'int32';\r\n    case DataType.uint32:\r\n      return 'uint32';\r\n    case DataType.float:\r\n      return 'float32';\r\n    case DataType.double:\r\n      return 'float64';\r\n    case DataType.string:\r\n      return 'string';\r\n    case DataType.int64:\r\n      return 'int32';\r\n    case DataType.uint64:\r\n      return 'uint32';\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${typeProto}`);\r\n  }\r\n};\r\n\r\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\r\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\r\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\r\n      switch (type) {\r\n        case 'float32':\r\n          return Float32Array;\r\n        case 'uint8':\r\n          return Uint8Array;\r\n        case 'int8':\r\n          return Int8Array;\r\n        case 'uint16':\r\n          return Uint16Array;\r\n        case 'int16':\r\n          return Int16Array;\r\n        case 'int32':\r\n          return Int32Array;\r\n        case 'bool':\r\n          return Uint8Array;\r\n        case 'float64':\r\n          return Float64Array;\r\n        case 'uint32':\r\n          return Uint32Array;\r\n        case 'int64':\r\n          return BigInt64Array;\r\n        case 'uint64':\r\n          return BigUint64Array;\r\n        default:\r\n          throw new Error(`unsupported type: ${type}`);\r\n      }\r\n    };\r\n\r\n/**\r\n * perform inference run\r\n */\r\nexport const run =\r\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\r\n      const wasm = getInstance();\r\n      const session = activeSessions.get(sessionId);\r\n      if (!session) {\r\n        throw new Error('invalid session id');\r\n      }\r\n      const sessionHandle = session[0];\r\n      const inputNamesUTF8Encoded = session[1];\r\n      const outputNamesUTF8Encoded = session[2];\r\n\r\n      const inputCount = inputIndices.length;\r\n      const outputCount = outputIndices.length;\r\n\r\n      let runOptionsHandle = 0;\r\n      let runOptionsAllocs: number[] = [];\r\n\r\n      const inputValues: number[] = [];\r\n      const inputAllocs: number[] = [];\r\n\r\n      try {\r\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\r\n\r\n        // create input tensors\r\n        for (let i = 0; i < inputCount; i++) {\r\n          const dataType = inputs[i][0];\r\n          const dims = inputs[i][1];\r\n          const data = inputs[i][2];\r\n\r\n          let dataOffset: number;\r\n          let dataByteLength: number;\r\n\r\n          if (Array.isArray(data)) {\r\n            // string tensor\r\n            dataByteLength = 4 * data.length;\r\n            dataOffset = wasm._malloc(dataByteLength);\r\n            inputAllocs.push(dataOffset);\r\n            let dataIndex = dataOffset / 4;\r\n            for (let i = 0; i < data.length; i++) {\r\n              if (typeof data[i] !== 'string') {\r\n                throw new TypeError(`tensor data at index ${i} is not a string`);\r\n              }\r\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\r\n            }\r\n          } else {\r\n            dataByteLength = data.byteLength;\r\n            dataOffset = wasm._malloc(dataByteLength);\r\n            inputAllocs.push(dataOffset);\r\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\r\n          }\r\n\r\n          const stack = wasm.stackSave();\r\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\r\n          try {\r\n            let dimIndex = dimsOffset / 4;\r\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\r\n            const tensor = wasm._OrtCreateTensor(\r\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\r\n            if (tensor === 0) {\r\n              throw new Error('Can\\'t create a tensor');\r\n            }\r\n            inputValues.push(tensor);\r\n          } finally {\r\n            wasm.stackRestore(stack);\r\n          }\r\n        }\r\n\r\n        const beforeRunStack = wasm.stackSave();\r\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\r\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\r\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\r\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\r\n\r\n        try {\r\n          let inputValuesIndex = inputValuesOffset / 4;\r\n          let inputNamesIndex = inputNamesOffset / 4;\r\n          let outputValuesIndex = outputValuesOffset / 4;\r\n          let outputNamesIndex = outputNamesOffset / 4;\r\n          for (let i = 0; i < inputCount; i++) {\r\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\r\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\r\n          }\r\n          for (let i = 0; i < outputCount; i++) {\r\n            wasm.HEAPU32[outputValuesIndex++] = 0;\r\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\r\n          }\r\n\r\n          // support RunOptions\r\n          let errorCode = wasm._OrtRun(\r\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\r\n              outputValuesOffset, runOptionsHandle);\r\n\r\n          const output: SerializableTensor[] = [];\r\n\r\n          if (errorCode === 0) {\r\n            for (let i = 0; i < outputCount; i++) {\r\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\r\n\r\n              const beforeGetTensorDataStack = wasm.stackSave();\r\n              // stack allocate 4 pointer value\r\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\r\n\r\n              let type: Tensor.Type|undefined, dataOffset = 0;\r\n              try {\r\n                errorCode = wasm._OrtGetTensorData(\r\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\r\n                if (errorCode !== 0) {\r\n                  throw new Error(`Can't get a tensor data. error code = ${errorCode}`);\r\n                }\r\n                let tensorDataIndex = tensorDataOffset / 4;\r\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\r\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\r\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\r\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\r\n                const dims = [];\r\n                for (let i = 0; i < dimsLength; i++) {\r\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\r\n                }\r\n                wasm._OrtFree(dimsOffset);\r\n\r\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\r\n                type = tensorDataTypeEnumToString(dataType);\r\n                if (type === 'string') {\r\n                  const stringData: string[] = [];\r\n                  let dataIndex = dataOffset / 4;\r\n                  for (let i = 0; i < size; i++) {\r\n                    const offset = wasm.HEAPU32[dataIndex++];\r\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\r\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\r\n                  }\r\n                  output.push([type, dims, stringData]);\r\n                } else {\r\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\r\n                  const data = new typedArrayConstructor(size);\r\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\r\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\r\n                  output.push([type, dims, data]);\r\n                }\r\n              } finally {\r\n                wasm.stackRestore(beforeGetTensorDataStack);\r\n                if (type === 'string' && dataOffset) {\r\n                  wasm._free(dataOffset);\r\n                }\r\n                wasm._OrtReleaseTensor(tensor);\r\n              }\r\n            }\r\n          }\r\n\r\n          if (errorCode === 0) {\r\n            return output;\r\n          } else {\r\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\r\n          }\r\n        } finally {\r\n          wasm.stackRestore(beforeRunStack);\r\n        }\r\n      } finally {\r\n        inputValues.forEach(wasm._OrtReleaseTensor);\r\n        inputAllocs.forEach(wasm._free);\r\n\r\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n        runOptionsAllocs.forEach(wasm._free);\r\n      }\r\n    };\r\n\r\n/**\r\n * end profiling\r\n */\r\nexport const endProfiling = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error('invalid session id');\r\n  }\r\n  const sessionHandle = session[0];\r\n\r\n  // profile file name is not used yet, but it must be freed.\r\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\r\n  if (profileFileName === 0) {\r\n    throw new Error('Can\\'t get an profile file name');\r\n  }\r\n  wasm._OrtFree(profileFileName);\r\n};\r\n\r\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\r\n  const buffers: ArrayBufferLike[] = [];\r\n  for (const tensor of tensors) {\r\n    const data = tensor[2];\r\n    if (!Array.isArray(data) && data.buffer) {\r\n      buffers.push(data.buffer);\r\n    }\r\n  }\r\n  return buffers;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\nimport * as path from 'path';\r\n\r\nimport {OrtWasmModule} from './binding/ort-wasm';\r\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\r\nimport ortWasmFactory from './binding/ort-wasm.js';\r\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\r\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\r\n\r\nlet wasm: OrtWasmModule|undefined;\r\nlet initialized = false;\r\nlet initializing = false;\r\nlet aborted = false;\r\n\r\nconst isMultiThreadSupported = (): boolean => {\r\n  try {\r\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\r\n    if (typeof SharedArrayBuffer === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    // Test for transferability of SABs (for browsers. needed for Firefox)\r\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\r\n    if (typeof MessageChannel !== 'undefined') {\r\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\r\n    }\r\n\r\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing threaded instructions.\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\r\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isSimdSupported = (): boolean => {\r\n  try {\r\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing SIMD instructions.\r\n\r\n    // The binary data is generated from the following code by wat2wasm:\r\n    //\r\n    // (module\r\n    //   (type $t0 (func))\r\n    //   (func $f0 (type $t0)\r\n    //     (drop\r\n    //       (i32x4.dot_i16x8_s\r\n    //         (i8x16.splat\r\n    //           (i32.const 0))\r\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\r\n\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\r\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\r\n  if (useThreads) {\r\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\r\n  } else {\r\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\r\n  }\r\n};\r\n\r\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\r\n  }\r\n  if (aborted) {\r\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  // wasm flags are already initialized\r\n  const timeout = flags.initTimeout!;\r\n  const numThreads = flags.numThreads!;\r\n  const simd = flags.simd!;\r\n\r\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\r\n  const useSimd = simd && isSimdSupported();\r\n\r\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\r\n  const wasmFileName = getWasmFileName(false, useThreads);\r\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\r\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\r\n\r\n  let isTimeout = false;\r\n\r\n  const tasks: Array<Promise<void>> = [];\r\n\r\n  // promise for timeout\r\n  if (timeout > 0) {\r\n    tasks.push(new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        isTimeout = true;\r\n        resolve();\r\n      }, timeout);\r\n    }));\r\n  }\r\n\r\n  // promise for module initialization\r\n  tasks.push(new Promise((resolve, reject) => {\r\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\r\n    const config: Partial<OrtWasmModule> = {\r\n      locateFile: (fileName: string, scriptDirectory: string) => {\r\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\r\n            typeof Blob !== 'undefined') {\r\n          return URL.createObjectURL(new Blob(\r\n              [\r\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\r\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n                require('./binding/ort-wasm-threaded.worker.js')\r\n              ],\r\n              {type: 'text/javascript'}));\r\n        }\r\n\r\n        if (fileName === wasmFileName) {\r\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\r\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\r\n        }\r\n\r\n        return scriptDirectory + fileName;\r\n      }\r\n    };\r\n\r\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\r\n      if (typeof Blob === 'undefined') {\r\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\r\n      } else {\r\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\r\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\r\n      }\r\n    }\r\n\r\n    factory(config).then(\r\n        // wasm module initialized successfully\r\n        module => {\r\n          initializing = false;\r\n          initialized = true;\r\n          wasm = module;\r\n          resolve();\r\n        },\r\n        // wasm module failed to initialize\r\n        (what) => {\r\n          initializing = false;\r\n          aborted = true;\r\n          reject(what);\r\n        });\r\n  }));\r\n\r\n  await Promise.race(tasks);\r\n\r\n  if (isTimeout) {\r\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\r\n  }\r\n};\r\n\r\nexport const getInstance = (): OrtWasmModule => {\r\n  if (initialized && wasm) {\r\n    return wasm;\r\n  }\r\n\r\n  throw new Error('WebAssembly is not initialized yet.');\r\n};\r\n\r\nexport const dispose = (): void => {\r\n  if (initialized && !initializing && !aborted) {\r\n    initializing = true;\r\n\r\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\r\n    wasm = undefined;\r\n\r\n    initializing = false;\r\n    initialized = false;\r\n    aborted = true;\r\n  }\r\n};\r\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.10.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={474:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return R.buffer!=j&&J(R.buffer),L}function r(){return R.buffer!=j&&J(R.buffer),W}function a(){return R.buffer!=j&&J(R.buffer),H}function o(){return R.buffer!=j&&J(R.buffer),Y}function i(){return R.buffer!=j&&J(R.buffer),z}var u,s,c;e=e||{},u||(u=void 0!==e?e:{}),u.ready=new Promise((function(e,t){s=e,c=t}));var l,f={};for(l in u)u.hasOwnProperty(l)&&(f[l]=u[l]);var p=\\\"./this.program\\\";function d(e,t){throw t}var m,h,g,b,y,_=\\\"object\\\"==typeof window,v=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A=\\\"\\\";function E(e){return u.locateFile?u.locateFile(e,A):A+e}if(w){var T;A=v?n(908).dirname(A)+\\\"/\\\":\\\"//\\\",m=function(e,t){return b||(b=n(384)),y||(y=n(908)),e=y.normalize(e),b.readFileSync(e,t?null:\\\"utf8\\\")},g=function(e){return(e=m(e,!0)).buffer||(e=new Uint8Array(e)),F(e.buffer),e},h=function(e,t,r){b||(b=n(384)),y||(y=n(908)),e=y.normalize(e),b.readFile(e,(function(e,n){e?r(e):t(n.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof Bt))throw e})),process.on(\\\"unhandledRejection\\\",le),d=function(e,t){if(ae())throw process.exitCode=e,t;process.exit(e)},u.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{T=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=T.Worker}else(_||v)&&(v?A=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\\\"blob:\\\")?A.substr(0,A.lastIndexOf(\\\"/\\\")+1):\\\"\\\",w?(m=function(e,t){return b||(b=n(384)),y||(y=n(908)),e=y.normalize(e),b.readFileSync(e,t?null:\\\"utf8\\\")},g=function(e){return(e=m(e,!0)).buffer||(e=new Uint8Array(e)),F(e.buffer),e},h=function(e,t,r){b||(b=n(384)),y||(y=n(908)),e=y.normalize(e),b.readFile(e,(function(e,n){e?r(e):t(n.buffer)}))}):(m=function(e){var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},v&&(g=function(e){var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),h=function(e,t,n){var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var S,M,k=u.print||console.log.bind(console),D=u.printErr||console.warn.bind(console);for(l in f)f.hasOwnProperty(l)&&(u[l]=f[l]);f=null,u.thisProgram&&(p=u.thisProgram),u.quit&&(d=u.quit),u.wasmBinary&&(M=u.wasmBinary);var x=u.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&le(\\\"no native wasm support detected\\\");var R,C,P,I=!1;function F(e,t){e||le(\\\"Assertion failed: \\\"+t)}function U(e){var t=new TextDecoder(e);this.decode=function(e){return e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),t.decode.call(t,e)}}var j,L,W,H,Y,z,B=\\\"undefined\\\"!=typeof TextDecoder?new U(\\\"utf8\\\"):void 0;function G(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&B)return B.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function N(e,t){return e?G(r(),e,t):\\\"\\\"}function q(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++]=i}else{if(2047>=i){if(n+1>=r)break;t[n++]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++]=224|i>>12}else{if(n+3>=r)break;t[n++]=240|i>>18,t[n++]=128|i>>12&63}t[n++]=128|i>>6&63}t[n++]=128|63&i}}return t[n]=0,n-a}function V(e,t,n){return q(e,r(),t,n)}function $(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function X(e){var n=$(e)+1,r=bt(n);return r&&q(e,t(),r,n),r}function J(e){j=e,u.HEAP8=L=new Int8Array(e),u.HEAP16=new Int16Array(e),u.HEAP32=H=new Int32Array(e),u.HEAPU8=W=new Uint8Array(e),u.HEAPU16=new Uint16Array(e),u.HEAPU32=Y=new Uint32Array(e),u.HEAPF32=new Float32Array(e),u.HEAPF64=z=new Float64Array(e)}\\\"undefined\\\"!=typeof TextDecoder&&new U(\\\"utf-16le\\\"),O&&(j=u.buffer);var Q=u.INITIAL_MEMORY||16777216;if(O)R=u.wasmMemory,j=u.buffer;else if(u.wasmMemory)R=u.wasmMemory;else if(!((R=new WebAssembly.Memory({initial:Q/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw D(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");R&&(j=R.buffer),Q=j.byteLength,J(j);var Z,K=[],ee=[],te=[],ne=[],re=0;function ae(){return x||0<re}function oe(){var e=u.preRun.shift();K.unshift(e)}var ie,ue=0,se=null,ce=null;function le(e){throw u.onAbort&&u.onAbort(e),F(!O),D(e),I=!0,P=1,e=new WebAssembly.RuntimeError(\\\"abort(\\\"+e+\\\"). Build with -s ASSERTIONS=1 for more info.\\\"),c(e),e}function fe(){return ie.startsWith(\\\"data:application/octet-stream;base64,\\\")}function pe(){var e=ie;try{if(e==ie&&M)return new Uint8Array(M);if(g)return g(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){le(e)}}u.preloadedImages={},u.preloadedAudios={},ie=\\\"ort-wasm-threaded.wasm\\\",fe()||(ie=E(ie));var de={689380:function(){throw\\\"Canceled!\\\"}};function me(e){for(;0<e.length;){var t=e.shift();if(\\\"function\\\"==typeof t)t(u);else{var n=t.Nb;\\\"number\\\"==typeof n?void 0===t.ib?Z.get(n)():Z.get(n)(t.ib):n(void 0===t.ib?null:t.ib)}}}function he(e,n){if(0>=e||e>t().length||1&e||0>n)return-28;if(0==n)return 0;2147483647<=n&&(n=1/0);var r=Atomics.load(a(),zt>>2),o=0;if(r==e&&Atomics.compareExchange(a(),zt>>2,r,0)==r&&(o=1,0>=--n))return 1;if(0<=(e=Atomics.notify(a(),e>>2,n)))return e+o;throw\\\"Atomics.notify returned an unexpected value \\\"+e}function ge(e){if(O)throw\\\"Internal Error! cleanupThread() can only ever be called from main application thread!\\\";if(!e)throw\\\"Internal Error! Null pthread_ptr in cleanupThread!\\\";var t=ye.cb[e];t&&(a()[e+12>>2]=0,ye.sb(t.worker))}u._emscripten_futex_wake=he;var be,ye={gb:[],fb:[],zb:[],xc:function(){},Rb:function(){for(var e=bt(228),t=0;57>t;++t)o()[e/4+t]=0;a()[e+12>>2]=e,t=e+152,a()[t>>2]=t;var n=bt(512);for(t=0;128>t;++t)o()[n/4+t]=0;Atomics.store(o(),e+100>>2,n),Atomics.store(o(),e+40>>2,e),xt(e,!v,1),Ot(e)},Sb:function(){ye.receiveObjectTransfer=ye.Xb,ye.threadInit=ye.hc,ye.threadCancel=ye.fc,ye.threadExit=ye.Hb,ye.setExitStatus=ye.Zb},cb:{},yb:[],Eb:function(){for(;0<ye.yb.length;)ye.yb.pop()();Ct()},Fb:function(e,t){Atomics.store(o(),e+56>>2,1),Atomics.store(o(),e+60>>2,0),ye.Eb(),Atomics.store(o(),e+4>>2,t),Atomics.store(o(),e+0>>2,1),he(e+0,2147483647),xt(0,0,0)},Zb:function(e){P=e},Hb:function(e){var t=vt();t&&(ye.Fb(t,e),O&&postMessage({cmd:\\\"exit\\\"}))},fc:function(){ye.Fb(vt(),-1),postMessage({cmd:\\\"cancelDone\\\"})},Gb:function(){for(var e in ye.cb){var t=ye.cb[e];t&&t.worker&&ye.sb(t.worker)}for(ye.cb={},e=0;e<ye.gb.length;++e){var n=ye.gb[e];n.terminate()}for(ye.gb=[],e=0;e<ye.fb.length;++e)t=(n=ye.fb[e]).bb,ye.xb(t),n.terminate();ye.fb=[]},xb:function(e){if(e){if(e.eb){var t=a()[e.eb+100>>2];a()[e.eb+100>>2]=0,_t(t),_t(e.eb)}e.eb=0,e.wb&&e.hb&&_t(e.hb),e.hb=0,e.worker&&(e.worker.bb=null)}},sb:function(e){ye.Yb((function(){delete ye.cb[e.bb.eb],ye.gb.push(e),ye.fb.splice(ye.fb.indexOf(e),1),ye.xb(e.bb),e.bb=void 0}))},Yb:function(e){a()[Yt>>2]=0;try{e()}finally{a()[Yt>>2]=1}},Xb:function(){},hc:function(){for(var e in ye.zb)ye.zb[e]()},Ub:function(e,t){e.onmessage=function(n){var r=n.data,i=r.cmd;if(e.bb&&(ye.Lb=e.bb.eb),r.targetThread&&r.targetThread!=vt()){var u=ye.cb[r.Dc];u?u.worker.postMessage(n.data,r.transferList):D('Internal error! Worker sent a message \\\"'+i+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else if(\\\"processQueuedMainThreadWork\\\"===i)Tt();else if(\\\"spawnThread\\\"===i)Oe(n.data);else if(\\\"cleanupThread\\\"===i)ge(r.thread);else if(\\\"killThread\\\"===i){if(n=r.thread,O)throw\\\"Internal Error! killThread() can only ever be called from main application thread!\\\";if(!n)throw\\\"Internal Error! Null pthread_ptr in killThread!\\\";a()[n+12>>2]=0,r=ye.cb[n],delete ye.cb[n],r.worker.terminate(),ye.xb(r),ye.fb.splice(ye.fb.indexOf(r.worker),1),r.worker.bb=void 0}else if(\\\"cancelThread\\\"===i){if(n=r.thread,O)throw\\\"Internal Error! cancelThread() can only ever be called from main application thread!\\\";if(!n)throw\\\"Internal Error! Null pthread_ptr in cancelThread!\\\";ye.cb[n].worker.postMessage({cmd:\\\"cancel\\\"})}else if(\\\"loaded\\\"===i)e.loaded=!0,t&&t(e),e.mb&&(e.mb(),delete e.mb);else if(\\\"print\\\"===i)k(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text);else if(\\\"printErr\\\"===i)D(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text);else if(\\\"alert\\\"===i)alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text);else if(\\\"exit\\\"===i)e.bb&&Atomics.load(o(),e.bb.eb+64>>2)&&ye.sb(e);else if(\\\"exitProcess\\\"===i)try{Nt(r.returnCode)}catch(e){if(e instanceof Bt)return;throw e}else\\\"cancelDone\\\"===i?ye.sb(e):\\\"objectTransfer\\\"!==i&&(\\\"setimmediate\\\"===n.data.target?e.postMessage(n.data):D(\\\"worker sent an unknown command \\\"+i));ye.Lb=void 0},e.onerror=function(e){D(\\\"pthread sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message)},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"exit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:R,wasmModule:C})},Ib:function(){var e=E(\\\"ort-wasm-threaded.worker.js\\\");ye.gb.push(new Worker(e))},Ob:function(){return 0==ye.gb.length&&(ye.Ib(),ye.Ub(ye.gb[0])),ye.gb.pop()},nc:function(e){for(e=performance.now()+e;performance.now()<e;);}};function _e(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return a()[yt()>>2]=28,-1;e=be()}return a()[t>>2]=e/1e3|0,a()[t+4>>2]=e%1e3*1e6|0,0}function ve(e,t){if(O)return Ne(1,1,e,t);te.unshift({Nb:e,ib:t})}function we(e){this.lb=e-16,this.dc=function(e){a()[this.lb+4>>2]=e},this.ac=function(e){a()[this.lb+8>>2]=e},this.bc=function(){a()[this.lb>>2]=0},this.$b=function(){t()[this.lb+12>>0]=0},this.cc=function(){t()[this.lb+13>>0]=0},this.Pb=function(e,t){this.dc(e),this.ac(t),this.bc(),this.$b(),this.cc()}}function Oe(e){if(O)throw\\\"Internal Error! spawnThread() can only ever be called from main application thread!\\\";var t=ye.Ob();if(!t)return 6;if(void 0!==t.bb)throw\\\"Internal error!\\\";if(!e.rb)throw\\\"Internal error, no pthread ptr!\\\";ye.fb.push(t);for(var n=bt(512),r=0;128>r;++r)a()[n+4*r>>2]=0;var i=e.hb+e.jb,u=(r=ye.cb[e.rb]={worker:t,hb:e.hb,jb:e.jb,wb:e.wb,eb:e.rb}).eb>>2;Atomics.store(o(),u+16,e.detached),Atomics.store(o(),u+25,n),Atomics.store(o(),u+10,r.eb),Atomics.store(o(),u+20,e.jb),Atomics.store(o(),u+19,i),Atomics.store(o(),u+26,e.jb),Atomics.store(o(),u+28,i),Atomics.store(o(),u+29,e.detached),n=Rt()+40,Atomics.store(o(),u+43,n),t.bb=r;var s={cmd:\\\"run\\\",start_routine:e.ec,arg:e.ib,threadInfoStruct:e.rb,stackBase:e.hb,stackSize:e.jb};return t.mb=function(){s.time=performance.now(),t.postMessage(s,e.mc)},t.loaded&&(t.mb(),delete t.mb),0}function Ae(e,n,r){if(0>=e||e>t().length||1&e)return-28;if(_){if(Atomics.load(a(),e>>2)!=n)return-6;var o=performance.now();for(r=o+r,Atomics.exchange(a(),zt>>2,e);;){if((o=performance.now())>r)return Atomics.exchange(a(),zt>>2,0),-73;if(0==(o=Atomics.exchange(a(),zt>>2,0)))break;if(Tt(),Atomics.load(a(),e>>2)!=n)return-6;Atomics.exchange(a(),zt>>2,e)}return 0}if(\\\"timed-out\\\"===(e=Atomics.wait(a(),e>>2,n,r)))return-73;if(\\\"not-equal\\\"===e)return-6;if(\\\"ok\\\"===e)return 0;throw\\\"Atomics.wait returned an unexpected value \\\"+e}function Ee(){w||v||(S||(S={}),S[\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\"]||(S[\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\"]=1,D(\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\")))}u.establishStackSpace=function(e,t){Wt(e,t),jt(e)},u.invokeEntryPoint=function(e,t){return Z.get(e)(t)},be=w?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?function(){return performance.now()-u.__performance_now_clock_drift}:function(){return performance.now()};var Te={},Se=[null,[],[]];function Me(e,t){var n=Se[e];0===t||10===t?((1===e?k:D)(G(n,0)),n.length=0):n.push(t)}var ke={};function De(e,t){return O?Ne(2,1,e,t):(e=N(e),ke.rc(e,t))}function xe(e,t,n){return O?Ne(3,1,e,t,n):0}function Re(e,t){if(O)return Ne(4,1,e,t)}function Ce(e,t,n){if(O)return Ne(5,1,e,t,n)}function Pe(e,t,n){return O?Ne(6,1,e,t,n):0}function Ie(e,t){if(O)return Ne(7,1,e,t)}function Fe(e,t){return O?Ne(8,1,e,t):(e=N(e),ke.sc(e,t))}function Ue(e,t,n,a,o,i){if(O)t=Ne(9,1,e,t,n,a,o,i);else if(i<<=12,0!=(16&a)&&0!=e%65536)t=-28;else if(0!=(32&a)){var u=65536*Math.ceil(t/65536);(e=Ht(65536,u))?r().fill(0,e,e+u):e=0,e?(Te[e]={Wb:e,Tb:t,Jb:!0,fd:o,Ac:n,flags:a,offset:i},t=e):t=-48}else t=-52;return t}function je(e,t){if(O)e=Ne(10,1,e,t);else{var n=Te[e];0!==t&&n?(t===n.Tb&&(Te[e]=null,n.Jb&&_t(n.Wb)),e=0):e=-28}return e}function Le(e,t,n){if(O)return Ne(11,1,e,t,n)}function We(e,t,n){return O?Ne(12,1,e,t,n):(e=N(e),ke.tc(e,t,n))}function He(e){if(O)return Ne(13,1,e)}function Ye(e,t){if(O)return Ne(14,1,e,t)}function ze(e){if(O)return Ne(15,1,e)}function Be(){if(O)return Ne(16,1);le()}var Ge=[];function Ne(e,t){for(var n=arguments.length-2,r=Ut(),a=Lt(8*n),o=a>>3,u=0;u<n;u++){var s=arguments[2+u];i()[o+u]=s}return n=St(e,n,a,t),jt(r),n}var qe=[],Ve=[0,\\\"undefined\\\"!=typeof document?document:0,\\\"undefined\\\"!=typeof window?window:0];function $e(e){return e=2<e?N(e):e,Ve[e]||(\\\"undefined\\\"!=typeof document?document.querySelector(e):void 0)}function Xe(e,t,n){var r=$e(e);if(!r)return-4;if(r.qb&&(a()[r.qb>>2]=t,a()[r.qb+4>>2]=n),!r.Db&&r.pc){if(r.qb){r=a()[r.qb+8>>2],e=e?N(e):\\\"\\\";var o=Ut(),i=Lt(12),u=0;if(e){u=$(e)+1;var s=bt(u);V(e,s,u),u=s}return a()[i>>2]=u,a()[i+4>>2]=t,a()[i+8>>2]=n,Mt(0,r,657457152,0,u,i),jt(o),1}return-4}return r.Db&&(r=r.Db),e=!1,r.pb&&r.pb.ob&&(e=0===(e=r.pb.ob.getParameter(2978))[0]&&0===e[1]&&e[2]===r.width&&e[3]===r.height),r.width=t,r.height=n,e&&r.pb.ob.viewport(0,0,t,n),0}function Je(e,t,n){return O?Ne(17,1,e,t,n):Xe(e,t,n)}var Qe,Ze=[\\\"default\\\",\\\"low-power\\\",\\\"high-performance\\\"],Ke={};function et(){if(!Qe){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in Ke)void 0===Ke[e]?delete t[e]:t[e]=Ke[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Qe=n}return Qe}function tt(e,n){if(O)return Ne(18,1,e,n);var r=0;return et().forEach((function(o,i){var u=n+r;for(i=a()[e+4*i>>2]=u,u=0;u<o.length;++u)t()[i++>>0]=o.charCodeAt(u);t()[i>>0]=0,r+=o.length+1})),0}function nt(e,t){if(O)return Ne(19,1,e,t);var n=et();a()[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),a()[t>>2]=r,0}function rt(e){return O?Ne(20,1,e):0}function at(e,n){return O?Ne(21,1,e,n):(e=1==e||2==e?2:le(),t()[n>>0]=e,0)}function ot(e,t,n,r){return O?Ne(22,1,e,t,n,r):(e=ke.vc(e),t=ke.uc(e,t,n),a()[r>>2]=t,0)}function it(e,t,n,r,a){if(O)return Ne(23,1,e,t,n,r,a)}function ut(e,t,n,o){if(O)return Ne(24,1,e,t,n,o);for(var i=0,u=0;u<n;u++){for(var s=a()[t+8*u>>2],c=a()[t+(8*u+4)>>2],l=0;l<c;l++)Me(e,r()[s+l]);i+=c}return a()[o>>2]=i,0}function st(){function e(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return Ne(25,1);if(!st.Kb){st.Kb=!0;var t=(new Date).getFullYear(),n=new Date(t,0,1),r=new Date(t,6,1);t=n.getTimezoneOffset();var o=r.getTimezoneOffset(),i=Math.max(t,o);a()[Ft()>>2]=60*i,a()[It()>>2]=Number(t!=o),n=e(n),r=e(r),n=X(n),r=X(r),o<t?(a()[Pt()>>2]=n,a()[Pt()+4>>2]=r):(a()[Pt()>>2]=r,a()[Pt()+4>>2]=n)}}function ct(e){return 0==e%4&&(0!=e%100||0==e%400)}function lt(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ft=[31,29,31,30,31,30,31,31,30,31,30,31],pt=[31,28,31,30,31,30,31,31,30,31,30,31];function dt(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(ct(e.getFullYear())?ft:pt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function mt(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function u(e,t){return i(e,t,\\\"0\\\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){e=dt(new Date(e.ab+1900,0,1),e.vb);var t=new Date(e.getFullYear()+1,0,4),n=c(new Date(e.getFullYear(),0,4));return t=c(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2];for(var p in o={kc:a()[o>>2],jc:a()[o+4>>2],tb:a()[o+8>>2],nb:a()[o+12>>2],kb:a()[o+16>>2],ab:a()[o+20>>2],ub:a()[o+24>>2],vb:a()[o+28>>2],Ec:a()[o+32>>2],ic:a()[o+36>>2],lc:f?N(f):\\\"\\\"},r=N(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.ub].substring(0,3)},\\\"%A\\\":function(e){return d[e.ub]},\\\"%b\\\":function(e){return m[e.kb].substring(0,3)},\\\"%B\\\":function(e){return m[e.kb]},\\\"%C\\\":function(e){return u((e.ab+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.nb,2)},\\\"%e\\\":function(e){return i(e.nb,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return u(e.tb,2)},\\\"%I\\\":function(e){return 0==(e=e.tb)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){return u(e.nb+lt(ct(e.ab+1900)?ft:pt,e.kb-1),3)},\\\"%m\\\":function(e){return u(e.kb+1,2)},\\\"%M\\\":function(e){return u(e.jc,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.tb&&12>e.tb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.kc,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ub||7},\\\"%U\\\":function(e){var t=new Date(e.ab+1900,0,1),n=0===t.getDay()?t:dt(t,7-t.getDay());return 0>s(n,e=new Date(e.ab+1900,e.kb,e.nb))?u(Math.ceil((31-n.getDate()+(lt(ct(e.getFullYear())?ft:pt,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%V\\\":function(e){var t=new Date(e.ab+1901,0,4),n=c(new Date(e.ab+1900,0,4));t=c(t);var r=dt(new Date(e.ab+1900,0,1),e.vb);return 0>s(r,n)?\\\"53\\\":0>=s(t,r)?\\\"01\\\":u(Math.ceil((n.getFullYear()<e.ab+1900?e.vb+32-n.getDate():e.vb+1-n.getDate())/7),2)},\\\"%w\\\":function(e){return e.ub},\\\"%W\\\":function(e){var t=new Date(e.ab,0,1),n=1===t.getDay()?t:dt(t,0===t.getDay()?1:7-t.getDay()+1);return 0>s(n,e=new Date(e.ab+1900,e.kb,e.nb))?u(Math.ceil((31-n.getDate()+(lt(ct(e.getFullYear())?ft:pt,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%y\\\":function(e){return(e.ab+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.ab+1900},\\\"%z\\\":function(e){var t=0<=(e=e.ic);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.lc},\\\"%%\\\":function(){return\\\"%\\\"}})r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array($(e)+1);return q(e,t,0,t.length),t}(r),p.length>n?0:(function(e,n){t().set(e,n)}(p,e),p.length-1)}var ht=[null,ve,De,xe,Re,Ce,Pe,Ie,Fe,Ue,je,Le,We,He,Ye,ze,Be,Je,tt,nt,rt,at,ot,it,ut,st],gt={h:function(e,t,n,r){le(\\\"Assertion failed: \\\"+N(e)+\\\", at: \\\"+[t?N(t):\\\"unknown filename\\\",n,r?N(r):\\\"unknown function\\\"])},M:function(e,t){return _e(e,t)},b:function(e){return bt(e+16)+16},d:function(e,t){return ve(e,t)},e:function(e,t){ye.yb.push((function(){Z.get(e)(t)}))},c:function(e,t,n){throw new we(e).Pb(t,n),e},Z:function(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return D(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;if(!e)return D(\\\"pthread_create called with a null thread pointer!\\\"),28;var i=[];if(O&&0===i.length)return Et(687865856,e,t,n,r);var u=0,s=0;if(t&&-1!=t){var c=a()[t>>2];c+=81920,u=a()[t+8>>2],s=0!==a()[t+12>>2]}else c=2097152;(t=0==u)?u=Ht(16,c):F(0<(u-=c));for(var l=bt(228),f=0;57>f;++f)o()[(l>>2)+f]=0;return a()[e>>2]=l,a()[l+12>>2]=l,e=l+152,a()[e>>2]=e,n={hb:u,jb:c,wb:t,detached:s,ec:n,rb:l,ib:r,mc:i},O?(n.oc=\\\"spawnThread\\\",postMessage(n,i),0):Oe(n)},X:function(e){throw O?ye.Hb(e):(ye.Eb(),Nt(e)),\\\"unwind\\\"},Y:function(e,t){return function(e,t){if(!e)return D(\\\"pthread_join attempted on a null thread pointer!\\\"),71;if(O&&vt()==e)return D(\\\"PThread \\\"+e+\\\" is attempting to join to itself!\\\"),16;if(!O&&At()==e)return D(\\\"Main thread \\\"+e+\\\" is attempting to join to itself!\\\"),16;if(a()[e+12>>2]!==e)return D(\\\"pthread_join attempted on thread \\\"+e+\\\", which does not point to a valid thread, or does not exist anymore!\\\"),71;if(Atomics.load(o(),e+64>>2))return D(\\\"Attempted to join thread \\\"+e+\\\", which was already detached!\\\"),28;for(Ee();;){var n=Atomics.load(o(),e+0>>2);if(1==n)return n=Atomics.load(o(),e+4>>2),t&&(a()[t>>2]=n),Atomics.store(o(),e+64>>2,1),O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ge(e),0;kt(),O||Tt(),Ae(e+0,n,O?100:1)}}(e,t)},L:De,s:xe,S:Re,V:Ce,u:function(){return 42},F:Pe,Q:Ie,P:Fe,U:Ue,T:je,q:Le,K:We,N:He,v:Ye,O:ze,da:function(e,t){if(e==t)postMessage({cmd:\\\"processQueuedMainThreadWork\\\"});else if(O)postMessage({targetThread:e,cmd:\\\"processThreadQueue\\\"});else{if(!(e=(e=ye.cb[e])&&e.worker))return;e.postMessage({cmd:\\\"processThreadQueue\\\"})}return 1},f:Be,w:_e,ga:function(e,t){return e-t},A:function(){le(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){le(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},C:function(){le(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},z:function(){le(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},ea:function(e,t,n){var o;for(Ge.length=0,n>>=2;o=r()[t++];)(o=105>o)&&1&n&&n++,Ge.push(o?i()[n++>>1]:a()[n]),++n;return de[e].apply(null,Ge)},G:Ee,n:function(){},k:Ae,j:he,W:function(){return 2147483648},i:be,D:function(e,t,n){r().copyWithin(e,t,t+n)},o:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},aa:function(e,t,n){qe.length=t,n>>=3;for(var r=0;r<t;r++)qe[r]=i()[n+r];return(0>e?de[-e-1]:ht[e]).apply(null,qe)},E:function(e){var t=r().length;if((e>>>=0)<=t||2147483648<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296),0<(a=Math.max(e,a))%65536&&(a+=65536-a%65536);e:{try{R.grow(Math.min(2147483648,a)-j.byteLength+65535>>>16),J(R.buffer);var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},ba:function(e,t,n){return $e(e)?Xe(e,t,n):Je(e,t,n)},x:function(){},$:function(e,t,n){return re+=1,setTimeout((function(){--re,function(e){if(!I){try{e()}catch(e){if(e instanceof Bt)return;if(\\\"unwind\\\"!==e)throw e&&\\\"object\\\"==typeof e&&e.stack&&D(\\\"exception thrown: \\\"+[e,e.stack]),e}if(!ae())try{O?Dt(P):Nt(P)}catch(e){if(!(e instanceof Bt))throw e}}}((function(){Z.get(e)(n)}))}),t)},ca:function(e,t){t>>=2;var n=a()[t+6];return t={alpha:!!a()[t],depth:!!a()[t+1],stencil:!!a()[t+2],antialias:!!a()[t+3],premultipliedAlpha:!!a()[t+4],preserveDrawingBuffer:!!a()[t+5],powerPreference:Ze[n],failIfMajorPerformanceCaveat:!!a()[t+7],Vb:a()[t+8],yc:a()[t+9],Bb:a()[t+10],Mb:a()[t+11],Bc:a()[t+12],Cc:a()[t+13]},!(e=$e(e))||t.Mb?0:function(e,t){e.Cb||(e.Cb=e.getContext,e.getContext=function(t,n){return\\\"webgl\\\"==t==(n=e.Cb(t,n))instanceof WebGLRenderingContext?n:null});var n=e.getContext(\\\"webgl\\\",t);return n?function(e,t){var n=bt(8);a()[n+4>>2]=vt();var r={wc:n,attributes:t,version:t.Vb,ob:e};return e.canvas&&(e.canvas.pb=r),(void 0===t.Bb||t.Bb)&&function(e){if(e||(e=void 0),!e.Qb){e.Qb=!0;var t=e.ob;!function(e){var t=e.getExtension(\\\"ANGLE_instanced_arrays\\\");t&&(e.vertexAttribDivisor=function(e,n){t.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,r,a){t.drawArraysInstancedANGLE(e,n,r,a)},e.drawElementsInstanced=function(e,n,r,a,o){t.drawElementsInstancedANGLE(e,n,r,a,o)})}(t),function(e){var t=e.getExtension(\\\"OES_vertex_array_object\\\");t&&(e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)})}(t),function(e){var t=e.getExtension(\\\"WEBGL_draw_buffers\\\");t&&(e.drawBuffers=function(e,n){t.drawBuffersWEBGL(e,n)})}(t),t.qc=t.getExtension(\\\"EXT_disjoint_timer_query\\\"),t.zc=t.getExtension(\\\"WEBGL_multi_draw\\\"),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes(\\\"lose_context\\\")||e.includes(\\\"debug\\\")||t.getExtension(e)}))}}(r),n}(n,t):0}(e,t)},I:tt,J:nt,m:rt,H:at,t:ot,B:it,p:ut,R:function(e){var t=Date.now();return a()[e>>2]=t/1e3|0,a()[e+4>>2]=t%1e3*1e3|0,0},ha:function e(t,n){return t=new Date(1e3*a()[t>>2]),a()[n>>2]=t.getUTCSeconds(),a()[n+4>>2]=t.getUTCMinutes(),a()[n+8>>2]=t.getUTCHours(),a()[n+12>>2]=t.getUTCDate(),a()[n+16>>2]=t.getUTCMonth(),a()[n+20>>2]=t.getUTCFullYear()-1900,a()[n+24>>2]=t.getUTCDay(),a()[n+36>>2]=0,a()[n+32>>2]=0,t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[n+28>>2]=t,e.Ab||(e.Ab=X(\\\"GMT\\\")),a()[n+40>>2]=e.Ab,n},_:function(){ye.Rb()},r:function(e,t){st(),e=new Date(1e3*a()[e>>2]),a()[t>>2]=e.getSeconds(),a()[t+4>>2]=e.getMinutes(),a()[t+8>>2]=e.getHours(),a()[t+12>>2]=e.getDate(),a()[t+16>>2]=e.getMonth(),a()[t+20>>2]=e.getFullYear()-1900,a()[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;return a()[t+28>>2]=r,a()[t+36>>2]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2]=e,e=a()[Pt()+(e?4:0)>>2],a()[t+40>>2]=e,t},a:R||u.wasmMemory,y:function(e){st();var t=new Date(a()[e+20>>2]+1900,a()[e+16>>2],a()[e+12>>2],a()[e+8>>2],a()[e+4>>2],a()[e>>2],0),n=a()[e+32>>2],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);return 0>n?a()[e+32>>2]=Number(i!=u&&s==r):0<n!=(s==r)&&(i=Math.max(u,i),t.setTime(t.getTime()+6e4*((0<n?s:i)-r))),a()[e+24>>2]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2]=n,a()[e>>2]=t.getSeconds(),a()[e+4>>2]=t.getMinutes(),a()[e+8>>2]=t.getHours(),a()[e+12>>2]=t.getDate(),a()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},fa:mt,g:function(e,t,n,r){return mt(e,t,n,r)}};!function(){function e(e,t){u.asm=e.exports,Z=u.asm.Ca,ee.unshift(u.asm.ia),ye.zb.push(u.asm.Ha),C=t,O||(ue--,u.monitorRunDependencies&&u.monitorRunDependencies(ue),0==ue&&(null!==se&&(clearInterval(se),se=null),ce&&(e=ce,ce=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(_||v)){if(\\\"function\\\"==typeof fetch&&!ie.startsWith(\\\"file://\\\"))return fetch(ie,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+ie+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return pe()}));if(h)return new Promise((function(e,t){h(ie,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return pe()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){D(\\\"failed to asynchronously prepare wasm: \\\"+e),le(e)}))}var r={a:gt};if(O||(ue++,u.monitorRunDependencies&&u.monitorRunDependencies(ue)),u.instantiateWasm)try{return u.instantiateWasm(r,e)}catch(e){return D(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||fe()||ie.startsWith(\\\"file://\\\")||\\\"function\\\"!=typeof fetch?n(t):fetch(ie,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return D(\\\"wasm streaming compile failed: \\\"+e),D(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.ia).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.ja).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.ka).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.la).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm.ma).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.na).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.oa).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.pa).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.qa).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.ra).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.sa).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.ta).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.ua).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.va).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.wa).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.xa).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.ya).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.za).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.Aa).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.Ba).apply(null,arguments)};var bt=u._malloc=function(){return(bt=u._malloc=u.asm.Da).apply(null,arguments)},yt=u.___errno_location=function(){return(yt=u.___errno_location=u.asm.Ea).apply(null,arguments)},_t=u._free=function(){return(_t=u._free=u.asm.Fa).apply(null,arguments)},vt=u._pthread_self=function(){return(vt=u._pthread_self=u.asm.Ga).apply(null,arguments)};u._emscripten_tls_init=function(){return(u._emscripten_tls_init=u.asm.Ha).apply(null,arguments)},u._emscripten_current_thread_process_queued_calls=function(){return(u._emscripten_current_thread_process_queued_calls=u.asm.Ia).apply(null,arguments)};var wt,Ot=u._emscripten_register_main_browser_thread_id=function(){return(Ot=u._emscripten_register_main_browser_thread_id=u.asm.Ja).apply(null,arguments)},At=u._emscripten_main_browser_thread_id=function(){return(At=u._emscripten_main_browser_thread_id=u.asm.Ka).apply(null,arguments)},Et=u._emscripten_sync_run_in_main_thread_4=function(){return(Et=u._emscripten_sync_run_in_main_thread_4=u.asm.La).apply(null,arguments)},Tt=u._emscripten_main_thread_process_queued_calls=function(){return(Tt=u._emscripten_main_thread_process_queued_calls=u.asm.Ma).apply(null,arguments)},St=u._emscripten_run_in_main_runtime_thread_js=function(){return(St=u._emscripten_run_in_main_runtime_thread_js=u.asm.Na).apply(null,arguments)},Mt=u.__emscripten_call_on_thread=function(){return(Mt=u.__emscripten_call_on_thread=u.asm.Oa).apply(null,arguments)},kt=u._pthread_testcancel=function(){return(kt=u._pthread_testcancel=u.asm.Pa).apply(null,arguments)},Dt=u._pthread_exit=function(){return(Dt=u._pthread_exit=u.asm.Qa).apply(null,arguments)},xt=u.__emscripten_thread_init=function(){return(xt=u.__emscripten_thread_init=u.asm.Ra).apply(null,arguments)},Rt=u._emscripten_get_global_libc=function(){return(Rt=u._emscripten_get_global_libc=u.asm.Sa).apply(null,arguments)},Ct=u.___pthread_tsd_run_dtors=function(){return(Ct=u.___pthread_tsd_run_dtors=u.asm.Ta).apply(null,arguments)},Pt=u.__get_tzname=function(){return(Pt=u.__get_tzname=u.asm.Ua).apply(null,arguments)},It=u.__get_daylight=function(){return(It=u.__get_daylight=u.asm.Va).apply(null,arguments)},Ft=u.__get_timezone=function(){return(Ft=u.__get_timezone=u.asm.Wa).apply(null,arguments)},Ut=u.stackSave=function(){return(Ut=u.stackSave=u.asm.Xa).apply(null,arguments)},jt=u.stackRestore=function(){return(jt=u.stackRestore=u.asm.Ya).apply(null,arguments)},Lt=u.stackAlloc=function(){return(Lt=u.stackAlloc=u.asm.Za).apply(null,arguments)},Wt=u._emscripten_stack_set_limits=function(){return(Wt=u._emscripten_stack_set_limits=u.asm._a).apply(null,arguments)},Ht=u._memalign=function(){return(Ht=u._memalign=u.asm.$a).apply(null,arguments)},Yt=u.__emscripten_allow_main_runtime_queued_calls=688928,zt=u.__emscripten_main_thread_futex=694164;function Bt(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function Gt(){function e(){if(!wt&&(wt=!0,u.calledRun=!0,!I)&&(O||me(ee),s(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\\\"function\\\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var e=u.postRun.shift();ne.unshift(e)}me(ne)}}if(!(0<ue))if(O)s(u),O||me(ee),postMessage({cmd:\\\"loaded\\\"});else{if(!O){if(u.preRun)for(\\\"function\\\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)oe();me(K)}0<ue||(u.setStatus?(u.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){u.setStatus(\\\"\\\")}),1),e()}),1)):e())}}function Nt(e){if(P=e,O)throw postMessage({cmd:\\\"exitProcess\\\",returnCode:e}),new Bt(e);ae()||(ye.Gb(),O||(me(te),\\\"undefined\\\"!=typeof _fflush&&_fflush(0),Se[1].length&&Me(1,10),Se[2].length&&Me(2,10))),P=e,ae()||(ye.Gb(),u.onExit&&u.onExit(e),I=!0),d(e,new Bt(e))}if(u.UTF8ToString=N,u.stringToUTF8=V,u.lengthBytesUTF8=$,u.keepRuntimeAlive=ae,u.PThread=ye,u.stackSave=Ut,u.stackRestore=jt,u.stackAlloc=Lt,u.PThread=ye,u.wasmMemory=R,u.ExitStatus=Bt,ce=function e(){wt||Gt(),wt||(ce=e)},u.run=Gt,u.preInit)for(\\\"function\\\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return O&&(x=!1,ye.Sb()),Gt(),e.ready});e.exports=r},118:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={};if(\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node){var a=require(\\\"worker_threads\\\"),t=a.parentPort;t.on(\\\"message\\\",(function(e){onmessage({data:e})}));var r=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:a.Worker,importScripts:function(e){(0,eval)(r.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=function(a,t){var r=new WebAssembly.Instance(e.wasmModule,a);return t(r),e.wasmModule=null,r.exports},self.onmessage=function(a){try{if(\\\"load\\\"===a.data.cmd){if(e.wasmModule=a.data.wasmModule,e.wasmMemory=a.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof a.data.urlOrBlob)importScripts(a.data.urlOrBlob);else{var t=URL.createObjectURL(a.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e).then((function(a){e=a}))}else if(\\\"objectTransfer\\\"===a.data.cmd)e.PThread.receiveObjectTransfer(a.data);else if(\\\"run\\\"===a.data.cmd){e.__performance_now_clock_drift=performance.now()-a.data.time,e.__emscripten_thread_init(a.data.threadInfoStruct,0,0);var r=a.data.stackBase,o=a.data.stackBase+a.data.stackSize;e.establishStackSpace(o,r),e.PThread.receiveObjectTransfer(a.data),e.PThread.threadInit();try{var n=e.invokeEntryPoint(a.data.start_routine,a.data.arg);e.keepRuntimeAlive()?e.PThread.setExitStatus(n):e.PThread.threadExit(n)}catch(a){if(\\\"Canceled!\\\"===a)e.PThread.threadCancel();else if(\\\"unwind\\\"!=a){if(!(a instanceof e.ExitStatus))throw e.PThread.threadExit(-2),a;e.keepRuntimeAlive()||e.PThread.threadExit(a.status)}}}else\\\"cancel\\\"===a.data.cmd?e._pthread_self()&&e.PThread.threadCancel():\\\"setimmediate\\\"===a.data.target||(\\\"processThreadQueue\\\"===a.data.cmd?e._pthread_self()&&e._emscripten_current_thread_process_queued_calls():(s(\\\"worker.js received unknown command \\\"+a.data.cmd),s(a.data)))}catch(e){throw s(\\\"worker.js onmessage() captured an uncaught exception: \\\"+e),e&&e.stack&&s(e.stack),e}};\\\\n'},932:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i={};for(o in t)t.hasOwnProperty(o)&&(i[o]=t[o]);var u,s,c,l,f,p=\\\"./this.program\\\",d=\\\"object\\\"==typeof window,m=\\\"function\\\"==typeof importScripts,h=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,g=\\\"\\\";h?(g=m?n(908).dirname(g)+\\\"/\\\":\\\"//\\\",u=function(e,t){return l||(l=n(384)),f||(f=n(908)),e=f.normalize(e),l.readFileSync(e,t?null:\\\"utf8\\\")},c=function(e){return(e=u(e,!0)).buffer||(e=new Uint8Array(e)),e.buffer||B(\\\"Assertion failed: undefined\\\"),e},s=function(e,t,r){l||(l=n(384)),f||(f=n(908)),e=f.normalize(e),l.readFile(e,(function(e,n){e?r(e):t(n.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",B),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||m)&&(m?g=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(g=document.currentScript.src),_scriptDir&&(g=_scriptDir),g=0!==g.indexOf(\\\"blob:\\\")?g.substr(0,g.lastIndexOf(\\\"/\\\")+1):\\\"\\\",u=function(e){var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},m&&(c=function(e){var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),s=function(e,t,n){var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var b,y=t.print||console.log.bind(console),_=t.printErr||console.warn.bind(console);for(o in i)i.hasOwnProperty(o)&&(t[o]=i[o]);i=null,t.thisProgram&&(p=t.thisProgram),t.wasmBinary&&(b=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&B(\\\"no native wasm support detected\\\");var v,w,O,A,E,T=!1,S=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function M(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&S)return S.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function k(e,t){return e?M(A,e,t):\\\"\\\"}function D(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++]=i}else{if(2047>=i){if(n+1>=r)break;t[n++]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++]=224|i>>12}else{if(n+3>=r)break;t[n++]=240|i>>18,t[n++]=128|i>>12&63}t[n++]=128|i>>6&63}t[n++]=128|63&i}}return t[n]=0,n-a}function x(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function R(e){var t=x(e)+1,n=pe(t);return n&&D(e,O,n,t),n}function C(){var e=v.buffer;w=e,t.HEAP8=O=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=E=new Int32Array(e),t.HEAPU8=A=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var P,I=[],F=[],U=[],j=[];function L(){var e=t.preRun.shift();I.unshift(e)}var W,H=0,Y=null,z=null;function B(e){throw t.onAbort&&t.onAbort(e),_(e),T=!0,e=new WebAssembly.RuntimeError(\\\"abort(\\\"+e+\\\"). Build with -s ASSERTIONS=1 for more info.\\\"),a(e),e}function G(){return W.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(t.preloadedImages={},t.preloadedAudios={},W=\\\"ort-wasm.wasm\\\",!G()){var N=W;W=t.locateFile?t.locateFile(N,g):g+N}function q(){var e=W;try{if(e==W&&b)return new Uint8Array(b);if(c)return c(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){B(e)}}function V(e){for(;0<e.length;){var n=e.shift();if(\\\"function\\\"==typeof n)n(t);else{var r=n.Ea;\\\"number\\\"==typeof r?void 0===n.xa?P.get(r)():P.get(r)(n.xa):r(void 0===n.xa?null:n.xa)}}}function $(e){this.ya=e-16,this.Na=function(e){E[this.ya+4>>2]=e},this.Ka=function(e){E[this.ya+8>>2]=e},this.La=function(){E[this.ya>>2]=0},this.Ja=function(){O[this.ya+12>>0]=0},this.Ma=function(){O[this.ya+13>>0]=0},this.Ga=function(e,t){this.Na(e),this.Ka(t),this.La(),this.Ja(),this.Ma()}}var X,J={},Q=[null,[],[]],Z={};X=h?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:function(){return performance.now()};var K,ee,te={};function ne(){if(!K){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in te)void 0===te[e]?delete t[e]:t[e]=te[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);K=n}return K}function re(){function e(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(!ee){ee=!0;var t=(new Date).getFullYear(),n=new Date(t,0,1),r=new Date(t,6,1);t=n.getTimezoneOffset();var a=r.getTimezoneOffset(),o=Math.max(t,a);E[be()>>2]=60*o,E[ge()>>2]=Number(t!=a),n=e(n),r=e(r),n=R(n),r=R(r),a<t?(E[he()>>2]=n,E[he()+4>>2]=r):(E[he()>>2]=r,E[he()+4>>2]=n)}}function ae(e){return 0==e%4&&(0!=e%100||0==e%400)}function oe(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ie=[31,29,31,30,31,30,31,31,30,31,30,31],ue=[31,28,31,30,31,30,31,31,30,31,30,31];function se(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(ae(e.getFullYear())?ie:ue)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function ce(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){e=se(new Date(e.va+1900,0,1),e.Ca);var t=new Date(e.getFullYear()+1,0,4),n=u(new Date(e.getFullYear(),0,4));return t=u(t),0>=i(n,e)?0>=i(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=E[r+40>>2];for(var l in r={Qa:E[r>>2],Pa:E[r+4>>2],Aa:E[r+8>>2],za:E[r+12>>2],wa:E[r+16>>2],va:E[r+20>>2],Ba:E[r+24>>2],Ca:E[r+28>>2],Ya:E[r+32>>2],Oa:E[r+36>>2],Ra:c?k(c):\\\"\\\"},n=k(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.Ba].substring(0,3)},\\\"%A\\\":function(e){return f[e.Ba]},\\\"%b\\\":function(e){return p[e.wa].substring(0,3)},\\\"%B\\\":function(e){return p[e.wa]},\\\"%C\\\":function(e){return o((e.va+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.za,2)},\\\"%e\\\":function(e){return a(e.za,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.Aa,2)},\\\"%I\\\":function(e){return 0==(e=e.Aa)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){return o(e.za+oe(ae(e.va+1900)?ie:ue,e.wa-1),3)},\\\"%m\\\":function(e){return o(e.wa+1,2)},\\\"%M\\\":function(e){return o(e.Pa,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Aa&&12>e.Aa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.Qa,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ba||7},\\\"%U\\\":function(e){var t=new Date(e.va+1900,0,1),n=0===t.getDay()?t:se(t,7-t.getDay());return 0>i(n,e=new Date(e.va+1900,e.wa,e.za))?o(Math.ceil((31-n.getDate()+(oe(ae(e.getFullYear())?ie:ue,e.getMonth()-1)-31)+e.getDate())/7),2):0===i(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%V\\\":function(e){var t=new Date(e.va+1901,0,4),n=u(new Date(e.va+1900,0,4));t=u(t);var r=se(new Date(e.va+1900,0,1),e.Ca);return 0>i(r,n)?\\\"53\\\":0>=i(t,r)?\\\"01\\\":o(Math.ceil((n.getFullYear()<e.va+1900?e.Ca+32-n.getDate():e.Ca+1-n.getDate())/7),2)},\\\"%w\\\":function(e){return e.Ba},\\\"%W\\\":function(e){var t=new Date(e.va,0,1),n=1===t.getDay()?t:se(t,0===t.getDay()?1:7-t.getDay()+1);return 0>i(n,e=new Date(e.va+1900,e.wa,e.za))?o(Math.ceil((31-n.getDate()+(oe(ae(e.getFullYear())?ie:ue,e.getMonth()-1)-31)+e.getDate())/7),2):0===i(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%y\\\":function(e){return(e.va+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.va+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Oa);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Ra},\\\"%%\\\":function(){return\\\"%\\\"}})n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(x(e)+1);return D(e,t,0,t.length),t}(n),l.length>t?0:(O.set(l,e),l.length-1)}var le={a:function(e){return pe(e+16)+16},c:function(e,t){U.unshift({Ea:e,xa:t})},d:function(e,t){U.unshift({Ea:e,xa:t})},b:function(e,t,n){throw new $(e).Ga(t,n),e},D:function(e,t){return e=k(e),Z.Sa(e,t)},m:function(){return 0},I:function(){},L:function(){},o:function(){return 42},x:function(){return 0},H:function(){},G:function(e,t){return e=k(e),Z.Ta(e,t)},K:function(e,t,n,r,a,o){if(o<<=12,0!=(16&r)&&0!=e%65536)t=-28;else if(0!=(32&r)){e=65536*Math.ceil(t/65536);var i=we(65536,e);i?(A.fill(0,i,i+e),e=i):e=0,e?(J[e]={Ia:e,Ha:t,Fa:!0,fd:a,Xa:n,flags:r,offset:o},t=e):t=-48}else t=-52;return t},J:function(e,t){var n=J[e];return 0!==t&&n?(t===n.Ha&&(J[e]=null,n.Fa&&me(n.Ia)),e=0):e=-28,e},j:function(){},C:function(e,t,n){return e=k(e),Z.Ua(e,t,n)},E:function(){},r:function(){},F:function(){},h:function(){B()},p:function(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return E[de()>>2]=28,-1;e=X()}return E[t>>2]=e/1e3|0,E[t+4>>2]=e%1e3*1e6|0,0},s:function(e,t){return e-t},P:function(){B(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},g:function(){B(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},Q:function(){B(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},O:function(){B(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},M:function(){return 2147483648},v:function(e,t,n){A.copyWithin(e,t,t+n)},i:function(e){var t=A.length;if(2147483648<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296),0<(r=Math.max(e,r))%65536&&(r+=65536-r%65536);e:{try{v.grow(Math.min(2147483648,r)-w.byteLength+65535>>>16),C();var a=1;break e}catch(e){}a=void 0}if(a)return!0}return!1},B:function(e){for(var t=X();X()-t<e;);},z:function(e,t){var n=0;return ne().forEach((function(r,a){var o=t+n;for(a=E[e+4*a>>2]=o,o=0;o<r.length;++o)O[a++>>0]=r.charCodeAt(o);O[a>>0]=0,n+=r.length+1})),0},A:function(e,t){var n=ne();E[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),E[t>>2]=r,0},f:function(){return 0},y:function(e,t){return e=1==e||2==e?2:B(),O[t>>0]=e,0},n:function(e,t,n,r){return e=Z.Wa(e),t=Z.Va(e,t,n),E[r>>2]=t,0},u:function(){},q:function(e,t,n,r){for(var a=0,o=0;o<n;o++){for(var i=E[t+8*o>>2],u=E[t+(8*o+4)>>2],s=0;s<u;s++){var c=A[i+s],l=Q[e];0===c||10===c?((1===e?y:_)(M(l,0)),l.length=0):l.push(c)}a+=u}return E[r>>2]=a,0},w:function(e){var t=Date.now();return E[e>>2]=t/1e3|0,E[e+4>>2]=t%1e3*1e3|0,0},t:function e(t,n){return t=new Date(1e3*E[t>>2]),E[n>>2]=t.getUTCSeconds(),E[n+4>>2]=t.getUTCMinutes(),E[n+8>>2]=t.getUTCHours(),E[n+12>>2]=t.getUTCDate(),E[n+16>>2]=t.getUTCMonth(),E[n+20>>2]=t.getUTCFullYear()-1900,E[n+24>>2]=t.getUTCDay(),E[n+36>>2]=0,E[n+32>>2]=0,E[n+28>>2]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,e.Da||(e.Da=R(\\\"GMT\\\")),E[n+40>>2]=e.Da,n},l:function(e,t){re(),e=new Date(1e3*E[e>>2]),E[t>>2]=e.getSeconds(),E[t+4>>2]=e.getMinutes(),E[t+8>>2]=e.getHours(),E[t+12>>2]=e.getDate(),E[t+16>>2]=e.getMonth(),E[t+20>>2]=e.getFullYear()-1900,E[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1);E[t+28>>2]=(e.getTime()-n.getTime())/864e5|0,E[t+36>>2]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();return e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),E[t+32>>2]=e,e=E[he()+(e?4:0)>>2],E[t+40>>2]=e,t},k:function(e){re();var t=new Date(E[e+20>>2]+1900,E[e+16>>2],E[e+12>>2],E[e+8>>2],E[e+4>>2],E[e>>2],0),n=E[e+32>>2],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),u=Math.min(i,o);return 0>n?E[e+32>>2]=Number(o!=i&&u==r):0<n!=(u==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?u:o)-r))),E[e+24>>2]=t.getDay(),E[e+28>>2]=(t.getTime()-a.getTime())/864e5|0,E[e>>2]=t.getSeconds(),E[e+4>>2]=t.getMinutes(),E[e+8>>2]=t.getHours(),E[e+12>>2]=t.getDate(),E[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},N:ce,e:function(e,t,n,r){return ce(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,v=t.asm.R,C(),P=t.asm.ua,F.unshift(t.asm.S),H--,t.monitorRunDependencies&&t.monitorRunDependencies(H),0==H&&(null!==Y&&(clearInterval(Y),Y=null),z&&(e=z,z=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!b&&(d||m)){if(\\\"function\\\"==typeof fetch&&!W.startsWith(\\\"file://\\\"))return fetch(W,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+W+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return q()}));if(s)return new Promise((function(e,t){s(W,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return q()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then(e,(function(e){_(\\\"failed to asynchronously prepare wasm: \\\"+e),B(e)}))}var o={a:le};if(H++,t.monitorRunDependencies&&t.monitorRunDependencies(H),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return _(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(b||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||G()||W.startsWith(\\\"file://\\\")||\\\"function\\\"!=typeof fetch?r(n):fetch(W,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return _(\\\"wasm streaming compile failed: \\\"+e),_(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.S).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.T).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.U).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.V).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.W).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.X).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.Y).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.Z).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm._).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.$).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.aa).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.ba).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.ca).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.da).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.ea).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.fa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.ga).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ha).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.ia).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ja).apply(null,arguments)};var fe,pe=t._malloc=function(){return(pe=t._malloc=t.asm.ka).apply(null,arguments)},de=t.___errno_location=function(){return(de=t.___errno_location=t.asm.la).apply(null,arguments)},me=t._free=function(){return(me=t._free=t.asm.ma).apply(null,arguments)},he=t.__get_tzname=function(){return(he=t.__get_tzname=t.asm.na).apply(null,arguments)},ge=t.__get_daylight=function(){return(ge=t.__get_daylight=t.asm.oa).apply(null,arguments)},be=t.__get_timezone=function(){return(be=t.__get_timezone=t.asm.pa).apply(null,arguments)},ye=t.stackSave=function(){return(ye=t.stackSave=t.asm.qa).apply(null,arguments)},_e=t.stackRestore=function(){return(_e=t.stackRestore=t.asm.ra).apply(null,arguments)},ve=t.stackAlloc=function(){return(ve=t.stackAlloc=t.asm.sa).apply(null,arguments)},we=t._memalign=function(){return(we=t._memalign=t.asm.ta).apply(null,arguments)};function Oe(){function e(){if(!fe&&(fe=!0,t.calledRun=!0,!T)){if(V(F),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();j.unshift(e)}V(j)}}if(!(0<H)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)L();V(I),0<H||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.UTF8ToString=k,t.stringToUTF8=function(e,t,n){return D(e,A,t,n)},t.lengthBytesUTF8=x,t.stackSave=ye,t.stackRestore=_e,t.stackAlloc=ve,z=function e(){fe||Oe(),fe||(z=e)},t.run=Oe,t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return Oe(),e.ready});e.exports=r},967:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,n,r,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(r.has(e))throw new Error(\\\"Circular reference in options\\\");r.add(e)}Object.entries(e).forEach((([e,o])=>{const i=n?n+e:e;if(\\\"object\\\"==typeof o)t.iterateExtraOptions(o,i+\\\".\\\",r,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))}},586:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const r=n(967),a=n(983),o=n(361);t.setRunOptions=e=>{const t=o.getInstance();let n=0;const i=[],u=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(u.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=a.allocWasmString(e.tag,i)),n=t._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,o),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=a.allocWasmString(e,i),u=a.allocWasmString(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,u))throw new Error(`Can't set a run config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},919:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const r=n(967),a=n(983),o=n(361);t.setSessionOptions=e=>{const t=o.getInstance();let n=0;const i=[],u=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")})(u);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(u.graphOptimizationLevel=\\\"all\\\");const o=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(u.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(u.executionMode=\\\"sequential\\\");const s=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(u.executionMode);let c=0;if(void 0!==(null==e?void 0:e.logId)&&(c=a.allocWasmString(e.logId,i)),void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);if(void 0===(null==e?void 0:e.enableProfiling)&&(u.enableProfiling=!1),n=t._OrtCreateSessionOptions(o,!!u.enableCpuMemArena,!!u.enableMemPattern,s,!!u.enableProfiling,0,c,u.logSeverityLevel,u.logVerbosityLevel),0===n)throw new Error(\\\"Can't create session options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=a.allocWasmString(e,i),u=a.allocWasmString(r,i);if(0!==t._OrtAddSessionConfigEntry(n,o,u))throw new Error(`Can't set a session config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),i.forEach(t._free),e}}},983:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;const r=n(361);t.allocWasmString=(e,t)=>{const n=r.getInstance(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},349:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.initOrt=void 0;const r=n(586),a=n(919),o=n(983),i=n(361);t.initOrt=(e,t)=>{const n=i.getInstance()._OrtInit(e,t);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const u=new Map;t.createSession=(e,t)=>{const n=i.getInstance(),r=n._malloc(e.byteLength);let o=0,s=0,c=[];try{if([s,c]=a.setSessionOptions(t),n.HEAPU8.set(e,r),o=n._OrtCreateSession(r,e.byteLength,s),0===o)throw new Error(\\\"Can't create a session\\\")}finally{n._free(r),n._OrtReleaseSessionOptions(s),c.forEach(n._free)}const l=n._OrtGetInputCount(o),f=n._OrtGetOutputCount(o),p=[],d=[],m=[],h=[];for(let e=0;e<l;e++){const t=n._OrtGetInputName(o,e);if(0===t)throw new Error(\\\"Can't get an input name\\\");d.push(t),p.push(n.UTF8ToString(t))}for(let e=0;e<f;e++){const t=n._OrtGetOutputName(o,e);if(0===t)throw new Error(\\\"Can't get an output name\\\");h.push(t),m.push(n.UTF8ToString(t))}return u.set(o,[o,d,h]),[o,p,m]},t.releaseSession=e=>{const t=i.getInstance(),n=u.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),u.delete(e)};const s=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},c=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:case 7:return\\\"int32\\\";case 12:case 13:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";default:throw new Error(`unsupported data type: ${e}`)}},l=e=>{switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}};t.run=(e,t,n,a,f)=>{const p=i.getInstance(),d=u.get(e);if(!d)throw new Error(\\\"invalid session id\\\");const m=d[0],h=d[1],g=d[2],b=t.length,y=a.length;let _=0,v=[];const w=[],O=[];try{[_,v]=r.setRunOptions(f);for(let e=0;e<b;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let i,u;if(Array.isArray(a)){u=4*a.length,i=p._malloc(u),O.push(i);let e=i/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);p.HEAPU32[e++]=o.allocWasmString(a[t],O)}}else u=a.byteLength,i=p._malloc(u),O.push(i),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),i);const c=p.stackSave(),l=p.stackAlloc(4*r.length);try{let e=l/4;r.forEach((t=>p.HEAP32[e++]=t));const n=p._OrtCreateTensor(s(t),i,u,l,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");w.push(n)}finally{p.stackRestore(c)}}const e=p.stackSave(),i=p.stackAlloc(4*b),u=p.stackAlloc(4*b),d=p.stackAlloc(4*y),A=p.stackAlloc(4*y);try{let n=i/4,r=u/4,o=d/4,s=A/4;for(let e=0;e<b;e++)p.HEAPU32[n++]=w[e],p.HEAPU32[r++]=h[t[e]];for(let e=0;e<y;e++)p.HEAPU32[o++]=0,p.HEAPU32[s++]=g[a[e]];let f=p._OrtRun(m,u,i,b,A,y,d,_);const v=[];if(0===f)for(let e=0;e<y;e++){const t=p.HEAPU32[d/4+e],n=p.stackSave(),r=p.stackAlloc(16);let a,o=0;try{if(f=p._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==f)throw new Error(`Can't get a tensor data. error code = ${f}`);let e=r/4;const i=p.HEAPU32[e++];o=p.HEAPU32[e++];const u=p.HEAPU32[e++],s=p.HEAPU32[e++],d=[];for(let e=0;e<s;e++)d.push(p.HEAPU32[u/4+e]);p._OrtFree(u);const m=0===d.length?1:d.reduce(((e,t)=>e*t));if(a=c(i),\\\"string\\\"===a){const e=[];let t=o/4;for(let n=0;n<m;n++){const r=p.HEAPU32[t++],a=n===m-1?void 0:p.HEAPU32[t]-r;e.push(p.UTF8ToString(r,a))}v.push([a,d,e])}else{const e=new(l(a))(m);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(p.HEAPU8.subarray(o,o+e.byteLength)),v.push([a,d,e])}}finally{p.stackRestore(n),\\\"string\\\"===a&&o&&p._free(o),p._OrtReleaseTensor(t)}}if(0===f)return v;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(e)}}finally{w.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(_),v.forEach(p._free)}},t.endProfiling=e=>{const t=i.getInstance(),n=u.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}))},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const s=o(n(449)),c=u(n(932)),l=n(474);let f,p=!1,d=!1,m=!1;const h=(e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\";t.initializeWebAssembly=e=>i(void 0,void 0,void 0,(function*(){if(p)return Promise.resolve();if(d)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(m)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");d=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),i=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),u=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,g=h(!1,o),b=h(i,o),y=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[b]:void 0;let _=!1;const v=[];if(t>0&&v.push(new Promise((e=>{setTimeout((()=>{_=!0,e()}),t)}))),v.push(new Promise(((e,t)=>{const r=o?l:c.default,a={locateFile:(e,t)=>{if(o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob)return URL.createObjectURL(new Blob([n(118)],{type:\\\"text/javascript\\\"}));if(e===g){const e=null!=u?u:t;return null!=y?y:e+b}return t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}r(a).then((t=>{d=!1,p=!0,f=t,e()}),(e=>{d=!1,m=!0,t(e)}))}))),yield Promise.race(v),_)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)})),t.getInstance=()=>{if(p&&f)return f;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!p||d||m||(d=!0,null===(e=f.PThread)||void 0===e||e.terminateAllThreads(),f=void 0,d=!1,p=!1,m=!0)}},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const e=n(349),t=n(361);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":t.initializeWebAssembly(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})));break;case\\\"init-ort\\\":try{const{numThreads:t,loggingLevel:r}=n.data.in;e.initOrt(t,r),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:r}=n.data.in,a=e.createSession(t,r);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;e.releaseSession(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:o,options:i}=n.data.in,u=e.run(t,r,a,o,i);postMessage({type:\\\"run\\\",out:u},e.extractTransferableBuffers(u))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;e.endProfiling(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}