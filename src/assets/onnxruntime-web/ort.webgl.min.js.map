{"version":3,"sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","length","splice","push","env","constructor","this","wasm","webgl","logLevelInternal","logLevel","value","indexOf","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","set","Tensor","arg0","arg1","arg2","type","data","dims","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","reshape","InferenceSession","handler","async","feeds","fetches","options","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","static","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","buffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","initializing","aborted","e","err","join","resolveBackend","startProfiling","endProfiling","fn","ctx","params","arguments","offset","index","pending","Promise","resolve","reject","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","encode","start","end","t","parts","chunk","j","b","String","fromCharCode","slice","invalidEncoding","decode","c","charCodeAt","test","EventEmitter","_listeners","prototype","on","evt","off","listeners","emit","args","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","replace","keys","alloc","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","s","codePoint","a","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","EMPTY","isGuid","toString","validator","gen","createEmpty","parse","raw","count","out","random","substring","isEmpty","toJSON","RegExp","WebAssembly","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","radixToPower","min","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","f","newBuffer","g","emptyArray","message","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","error","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","node","initializer","valueInfo","quantizationAnnotation","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","response","setTimeout","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","process","versions","global","window","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","AttributeWithCacheKeyImpl","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","attr","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","o","initialize","dispose","isBackend","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","decodeUint8","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActicationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","adjustedAttributes","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","newAttributes","activationAttributes","parseInternalActivationAttributes","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","canvas","document","createElement","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","Date","toISOString","previousConfig","Event","startTime","endCallback","timer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","__init","builder","numElems","startShape","addDim","endShape","DimensionValue","optionalEncoding","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","UNKNOWN","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","NONE","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","rawDataOffset","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","floatsLength","graphsLength","sOffset","tOffset","gOffset","floatsOffset","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"ort.webgl.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nconst backends = {};\r\nconst backendsSortedByPriority = [];\r\n/**\r\n * Register a backend.\r\n *\r\n * @param name - the name as a key to lookup as an execution provider.\r\n * @param backend - the backend object.\r\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\r\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\r\n *\r\n * @internal\r\n */\r\nexport const registerBackend = (name, backend, priority) => {\r\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\r\n        const currentBackend = backends[name];\r\n        if (currentBackend === undefined) {\r\n            backends[name] = { backend, priority };\r\n        }\r\n        else if (currentBackend.backend === backend) {\r\n            return;\r\n        }\r\n        else {\r\n            throw new Error(`backend \"${name}\" is already registered`);\r\n        }\r\n        if (priority >= 0) {\r\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\r\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\r\n                    backendsSortedByPriority.splice(i, 0, name);\r\n                    return;\r\n                }\r\n            }\r\n            backendsSortedByPriority.push(name);\r\n        }\r\n        return;\r\n    }\r\n    throw new TypeError('not a valid backend');\r\n};\r\n/**\r\n * Resolve backend by specified hints.\r\n *\r\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\r\n * @returns a promise that resolves to the backend.\r\n *\r\n * @internal\r\n */\r\nexport const resolveBackend = async (backendHints) => {\r\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\r\n    const errors = [];\r\n    for (const backendName of backendNames) {\r\n        const backendInfo = backends[backendName];\r\n        if (backendInfo) {\r\n            if (backendInfo.initialized) {\r\n                return backendInfo.backend;\r\n            }\r\n            else if (backendInfo.initializing) {\r\n                throw new Error(`backend \"${backendName}\" is being initialized; cannot initialize multiple times.`);\r\n            }\r\n            else if (backendInfo.aborted) {\r\n                continue; // current backend is unavailable; try next\r\n            }\r\n            try {\r\n                backendInfo.initializing = true;\r\n                await backendInfo.backend.init();\r\n                backendInfo.initialized = true;\r\n                return backendInfo.backend;\r\n            }\r\n            catch (e) {\r\n                errors.push({ name: backendName, err: e });\r\n                backendInfo.aborted = true;\r\n            }\r\n            finally {\r\n                backendInfo.initializing = false;\r\n            }\r\n        }\r\n    }\r\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\r\n};\r\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { EnvImpl } from './env-impl';\r\n/**\r\n * Represent a set of flags as a global singleton.\r\n */\r\nexport const env = new EnvImpl();\r\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport class EnvImpl {\r\n    constructor() {\r\n        this.wasm = {};\r\n        this.webgl = {};\r\n        this.logLevelInternal = 'warning';\r\n    }\r\n    // TODO standadize the getter and setter convention in env for other fields.\r\n    set logLevel(value) {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\r\n            throw new Error(`Unsupported logging level: ${value}`);\r\n        }\r\n        this.logLevelInternal = value;\r\n    }\r\n    get logLevel() {\r\n        return this.logLevelInternal;\r\n    }\r\n}\r\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\r\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\r\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\r\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\r\n    ['float32', Float32Array],\r\n    ['uint8', Uint8Array],\r\n    ['int8', Int8Array],\r\n    ['uint16', Uint16Array],\r\n    ['int16', Int16Array],\r\n    ['int32', Int32Array],\r\n    ['bool', Uint8Array],\r\n    ['float64', Float64Array],\r\n    ['uint32', Uint32Array],\r\n]);\r\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\r\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\r\n    [Float32Array, 'float32'],\r\n    [Uint8Array, 'uint8'],\r\n    [Int8Array, 'int8'],\r\n    [Uint16Array, 'uint16'],\r\n    [Int16Array, 'int16'],\r\n    [Int32Array, 'int32'],\r\n    [Float64Array, 'float64'],\r\n    [Uint32Array, 'uint32'],\r\n]);\r\nif (isBigInt64ArrayAvailable) {\r\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\r\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\r\n}\r\nif (isBigUint64ArrayAvailable) {\r\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\r\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\r\n}\r\n/**\r\n * calculate size from dims.\r\n *\r\n * @param dims the dims array. May be an illegal input.\r\n */\r\nconst calculateSize = (dims) => {\r\n    let size = 1;\r\n    for (let i = 0; i < dims.length; i++) {\r\n        const dim = dims[i];\r\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\r\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\r\n        }\r\n        if (dim < 0) {\r\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\r\n        }\r\n        size *= dim;\r\n    }\r\n    return size;\r\n};\r\nexport class Tensor {\r\n    constructor(arg0, arg1, arg2) {\r\n        let type;\r\n        let data;\r\n        let dims;\r\n        // check whether arg0 is type or data\r\n        if (typeof arg0 === 'string') {\r\n            //\r\n            // Override: constructor(type, data, ...)\r\n            //\r\n            type = arg0;\r\n            dims = arg2;\r\n            if (arg0 === 'string') {\r\n                // string tensor\r\n                if (!Array.isArray(arg1)) {\r\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\r\n                }\r\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\r\n                // error will be populated at inference\r\n                data = arg1;\r\n            }\r\n            else {\r\n                // numeric tensor\r\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\r\n                if (typedArrayConstructor === undefined) {\r\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\r\n                }\r\n                if (Array.isArray(arg1)) {\r\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\r\n                    // incorrect results.\r\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    data = typedArrayConstructor.from(arg1);\r\n                }\r\n                else if (arg1 instanceof typedArrayConstructor) {\r\n                    data = arg1;\r\n                }\r\n                else {\r\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //\r\n            // Override: constructor(data, ...)\r\n            //\r\n            dims = arg1;\r\n            if (Array.isArray(arg0)) {\r\n                // only boolean[] and string[] is supported\r\n                if (arg0.length === 0) {\r\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\r\n                }\r\n                const firstElementType = typeof arg0[0];\r\n                if (firstElementType === 'string') {\r\n                    type = 'string';\r\n                    data = arg0;\r\n                }\r\n                else if (firstElementType === 'boolean') {\r\n                    type = 'bool';\r\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\r\n                    // wrong type. We use 'as any' to make it happy.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    data = Uint8Array.from(arg0);\r\n                }\r\n                else {\r\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\r\n                }\r\n            }\r\n            else {\r\n                // get tensor type from TypedArray\r\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\r\n                if (mappedType === undefined) {\r\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\r\n                }\r\n                type = mappedType;\r\n                data = arg0;\r\n            }\r\n        }\r\n        // type and data is processed, now processing dims\r\n        if (dims === undefined) {\r\n            // assume 1-D tensor if dims omitted\r\n            dims = [data.length];\r\n        }\r\n        else if (!Array.isArray(dims)) {\r\n            throw new TypeError('A tensor\\'s dims must be a number array');\r\n        }\r\n        // perform check\r\n        const size = calculateSize(dims);\r\n        if (size !== data.length) {\r\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\r\n        }\r\n        this.dims = dims;\r\n        this.type = type;\r\n        this.data = data;\r\n        this.size = size;\r\n    }\r\n    //#endregion\r\n    //#region tensor utilities\r\n    reshape(dims) {\r\n        return new Tensor(this.type, this.data, dims);\r\n    }\r\n}\r\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Tensor as TensorImpl } from './tensor-impl';\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const Tensor = TensorImpl;\r\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { resolveBackend } from './backend-impl';\r\nimport { Tensor } from './tensor';\r\nexport class InferenceSession {\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    async run(feeds, arg1, arg2) {\r\n        const fetches = {};\r\n        let options = {};\r\n        // check inputs\r\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\r\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\r\n        }\r\n        let isFetchesEmpty = true;\r\n        // determine which override is being used\r\n        if (typeof arg1 === 'object') {\r\n            if (arg1 === null) {\r\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\r\n            }\r\n            if (arg1 instanceof Tensor) {\r\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\r\n            }\r\n            if (Array.isArray(arg1)) {\r\n                if (arg1.length === 0) {\r\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\r\n                }\r\n                isFetchesEmpty = false;\r\n                // output names\r\n                for (const name of arg1) {\r\n                    if (typeof name !== 'string') {\r\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\r\n                    }\r\n                    if (this.outputNames.indexOf(name) === -1) {\r\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\r\n                    }\r\n                    fetches[name] = null;\r\n                }\r\n                if (typeof arg2 === 'object' && arg2 !== null) {\r\n                    options = arg2;\r\n                }\r\n                else if (typeof arg2 !== 'undefined') {\r\n                    throw new TypeError('\\'options\\' must be an object.');\r\n                }\r\n            }\r\n            else {\r\n                // decide whether arg1 is fetches or options\r\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\r\n                let isFetches = false;\r\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\r\n                for (const name of this.outputNames) {\r\n                    if (arg1Keys.indexOf(name) !== -1) {\r\n                        const v = arg1[name];\r\n                        if (v === null || v instanceof Tensor) {\r\n                            isFetches = true;\r\n                            isFetchesEmpty = false;\r\n                            fetches[name] = v;\r\n                        }\r\n                    }\r\n                }\r\n                if (isFetches) {\r\n                    if (typeof arg2 === 'object' && arg2 !== null) {\r\n                        options = arg2;\r\n                    }\r\n                    else if (typeof arg2 !== 'undefined') {\r\n                        throw new TypeError('\\'options\\' must be an object.');\r\n                    }\r\n                }\r\n                else {\r\n                    options = arg1;\r\n                }\r\n            }\r\n        }\r\n        else if (typeof arg1 !== 'undefined') {\r\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\r\n        }\r\n        // check if all inputs are in feed\r\n        for (const name of this.inputNames) {\r\n            if (typeof feeds[name] === 'undefined') {\r\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\r\n            }\r\n        }\r\n        // if no fetches is specified, we use the full output names list\r\n        if (isFetchesEmpty) {\r\n            for (const name of this.outputNames) {\r\n                fetches[name] = null;\r\n            }\r\n        }\r\n        // feeds, fetches and options are prepared\r\n        const results = await this.handler.run(feeds, fetches, options);\r\n        const returnValue = {};\r\n        for (const key in results) {\r\n            if (Object.hasOwnProperty.call(results, key)) {\r\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\r\n            }\r\n        }\r\n        return returnValue;\r\n    }\r\n    static async create(arg0, arg1, arg2, arg3) {\r\n        // either load from a file or buffer\r\n        let filePathOrUint8Array;\r\n        let options = {};\r\n        if (typeof arg0 === 'string') {\r\n            filePathOrUint8Array = arg0;\r\n            if (typeof arg1 === 'object' && arg1 !== null) {\r\n                options = arg1;\r\n            }\r\n            else if (typeof arg1 !== 'undefined') {\r\n                throw new TypeError('\\'options\\' must be an object.');\r\n            }\r\n        }\r\n        else if (arg0 instanceof Uint8Array) {\r\n            filePathOrUint8Array = arg0;\r\n            if (typeof arg1 === 'object' && arg1 !== null) {\r\n                options = arg1;\r\n            }\r\n            else if (typeof arg1 !== 'undefined') {\r\n                throw new TypeError('\\'options\\' must be an object.');\r\n            }\r\n        }\r\n        else if (arg0 instanceof ArrayBuffer ||\r\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\r\n            const buffer = arg0;\r\n            let byteOffset = 0;\r\n            let byteLength = arg0.byteLength;\r\n            if (typeof arg1 === 'object' && arg1 !== null) {\r\n                options = arg1;\r\n            }\r\n            else if (typeof arg1 === 'number') {\r\n                byteOffset = arg1;\r\n                if (!Number.isSafeInteger(byteOffset)) {\r\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\r\n                }\r\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\r\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\r\n                }\r\n                byteLength = arg0.byteLength - byteOffset;\r\n                if (typeof arg2 === 'number') {\r\n                    byteLength = arg2;\r\n                    if (!Number.isSafeInteger(byteLength)) {\r\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\r\n                    }\r\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\r\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\r\n                    }\r\n                    if (typeof arg3 === 'object' && arg3 !== null) {\r\n                        options = arg3;\r\n                    }\r\n                    else if (typeof arg3 !== 'undefined') {\r\n                        throw new TypeError('\\'options\\' must be an object.');\r\n                    }\r\n                }\r\n                else if (typeof arg2 !== 'undefined') {\r\n                    throw new TypeError('\\'byteLength\\' must be a number.');\r\n                }\r\n            }\r\n            else if (typeof arg1 !== 'undefined') {\r\n                throw new TypeError('\\'options\\' must be an object.');\r\n            }\r\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\r\n        }\r\n        else {\r\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\r\n        }\r\n        // get backend hints\r\n        const eps = options.executionProviders || [];\r\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\r\n        const backend = await resolveBackend(backendHints);\r\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\r\n        return new InferenceSession(handler);\r\n    }\r\n    startProfiling() {\r\n        this.handler.startProfiling();\r\n    }\r\n    endProfiling() {\r\n        this.handler.endProfiling();\r\n    }\r\n    get inputNames() {\r\n        return this.handler.inputNames;\r\n    }\r\n    get outputNames() {\r\n        return this.handler.outputNames;\r\n    }\r\n}\r\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const InferenceSession = InferenceSessionImpl;\r\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable import/no-internal-modules */\r\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {Session} from './onnxjs/session';\r\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\r\n\r\nclass OnnxjsBackend implements Backend {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  async init(): Promise<void> {}\r\n\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\r\n    // onnxruntime-common).\r\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\r\n    //       Currently we allow this to happen to make test runner work.\r\n    const session = new Session(options as unknown as Session.Config);\r\n\r\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\r\n    if (typeof pathOrBuffer === 'string') {\r\n      await session.loadModel(pathOrBuffer);\r\n    } else {\r\n      await session.loadModel(pathOrBuffer);\r\n    }\r\n\r\n    return new OnnxjsSessionHandler(session);\r\n  }\r\n}\r\n\r\nexport const onnxjsBackend = new OnnxjsBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\r\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\r\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\r\n// So we import code inside the if-clause to allow terser remove the code safely.\r\n\r\nexport * from 'onnxruntime-common';\r\nimport {registerBackend} from 'onnxruntime-common';\r\n\r\nif (!BUILD_DEFS.DISABLE_WEBGL) {\r\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\r\n  registerBackend('webgl', onnxjsBackend, -1);\r\n}\r\nif (!BUILD_DEFS.DISABLE_WASM) {\r\n  const wasmBackend = require('./backend-wasm').wasmBackend;\r\n  registerBackend('wasm', wasmBackend, 0);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nclass AttributeWithCacheKeyImpl {\r\n  constructor(attribute: Record<string, unknown>) {\r\n    Object.assign(this, attribute);\r\n  }\r\n\r\n  private _cacheKey: string;\r\n  public get cacheKey(): string {\r\n    if (!this._cacheKey) {\r\n      this._cacheKey =\r\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\r\n    }\r\n    return this._cacheKey;\r\n  }\r\n}\r\n\r\nexport interface AttributeWithCacheKey {\r\n  readonly cacheKey: string;\r\n}\r\n\r\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\r\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {Tensor} from './tensor';\r\nimport {decodeUtf8String, LongUtil} from './util';\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        if (attr instanceof onnx.AttributeProto) {\r\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        } else if (attr instanceof ortFbs.Attribute) {\r\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        }\r\n      }\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\r\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\r\n    switch (type) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\r\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\r\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\r\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const tensorProtos = value as onnx.ITensorProto[];\r\n        return tensorProtos.map(value => Tensor.fromProto(value));\r\n      } else if (attr instanceof ortFbs.Attribute) {\r\n        const tensorProtos = value as ortFbs.Tensor[];\r\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\r\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\r\n      // string attributes are returned as string, so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8String = value as Uint8Array;\r\n        return decodeUtf8String(utf8String);\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\r\n      // format strings attributes are returned as string[], so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8Strings = value as Uint8Array[];\r\n        return utf8Strings.map(decodeUtf8String);\r\n      }\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\r\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\r\n  }\r\n\r\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\r\n    switch (attr.type()) {\r\n      case ortFbs.AttributeType.FLOAT:\r\n        return attr.f();\r\n      case ortFbs.AttributeType.INT:\r\n        return attr.i();\r\n      case ortFbs.AttributeType.STRING:\r\n        return attr.s();\r\n      case ortFbs.AttributeType.TENSOR:\r\n        return attr.t();\r\n      case ortFbs.AttributeType.GRAPH:\r\n        return attr.g();\r\n      case ortFbs.AttributeType.FLOATS:\r\n        return attr.floatsArray();\r\n      case ortFbs.AttributeType.INTS: {\r\n        const ints = [];\r\n        for (let i = 0; i < attr.intsLength(); i++) {\r\n          ints.push(attr.ints(i)!);\r\n        }\r\n        return ints;\r\n      }\r\n      case ortFbs.AttributeType.STRINGS: {\r\n        const strings = [];\r\n        for (let i = 0; i < attr.stringsLength(); i++) {\r\n          strings.push(attr.strings(i));\r\n        }\r\n        return strings;\r\n      }\r\n      case ortFbs.AttributeType.TENSORS: {\r\n        const tensors = [];\r\n        for (let i = 0; i < attr.tensorsLength(); i++) {\r\n          tensors.push(attr.tensors(i)!);\r\n        }\r\n        return tensors;\r\n      }\r\n      // case ortFbs.AttributeType.GRAPHS:\r\n      // TODO: Subgraph not supported yet.\r\n      // const graphs = [];\r\n      // for (let i = 0; i < attr.graphsLength(); i++) {\r\n      //   graphs.push(attr.graphs(i)!);\r\n      // }\r\n      // return graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGLBackend} from './backends/backend-webgl';\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\nexport const backend: {[name: string]: Backend} = {\r\n  webgl: new WebGLBackend(),\r\n};\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\r\n  if (!hint) {\r\n    return resolveBackend(['webgl']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    const backend = backendObj[backendHint];\r\n    let init = backend.initialize();\r\n    if (typeof init === 'object' && 'then' in init) {\r\n      init = await init;\r\n    }\r\n    if (init) {\r\n      backendsCache.set(backendHint, backend);\r\n      return backend;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend {\r\n  glContext: WebGLContext;\r\n\r\n  get contextId(): 'webgl'|'webgl2'|undefined {\r\n    return env.webgl.contextId;\r\n  }\r\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\r\n    env.webgl.contextId = value;\r\n  }\r\n\r\n  get matmulMaxBatchSize(): number|undefined {\r\n    return env.webgl.matmulMaxBatchSize;\r\n  }\r\n  set matmulMaxBatchSize(value: number|undefined) {\r\n    env.webgl.matmulMaxBatchSize = value;\r\n  }\r\n\r\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\r\n    return env.webgl.textureCacheMode;\r\n  }\r\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\r\n    env.webgl.textureCacheMode = value;\r\n  }\r\n\r\n  get pack(): boolean|undefined {\r\n    return env.webgl.pack;\r\n  }\r\n  set pack(value: boolean|undefined) {\r\n    env.webgl.pack = value;\r\n  }\r\n\r\n  get async(): boolean|undefined {\r\n    return env.webgl.async;\r\n  }\r\n  set async(value: boolean|undefined) {\r\n    env.webgl.async = value;\r\n  }\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      if (typeof this.pack !== 'boolean') {\r\n        this.pack = false;\r\n      }\r\n      if (typeof this.async !== 'boolean') {\r\n        this.async = false;\r\n      }\r\n\r\n      Logger.setWithEnv(env);\r\n\r\n      Logger.verbose(\r\n          'WebGLBackend',\r\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\r\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\r\n              this.async}.`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\nimport {squeezeShape} from './texture-layout-strategy';\r\nimport {TextureLayout} from './types';\r\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.offsetToCoords(),\r\n      ...this.coordsToOffset(),\r\n      ...this.toVec(),\r\n      ...this.valueFrom(),\r\n      // TODO return these only when packing is enabled.\r\n      ...this.getCommonUtilFuncs(),\r\n      ...this.getInputsSamplingSnippets(),\r\n      ...this.getOutputSamplingSnippet()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'offsetToCoords';\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'coordsToOffset';\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates code for output sampler.\r\n   */\r\n\r\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    if (outputLayout.isPacked) {\r\n      return this.getPackedOutputSamplingSnippet(outputLayout);\r\n    } else {\r\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates code for packed output sampler.\r\n   */\r\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRGBASource = `\r\n      void setOutput(vec4 val) {\r\n        ${glsl.output} = val;\r\n      }\r\n    `;\r\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\r\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates code for unpacked output sampler.\r\n   */\r\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] =\r\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 4:\r\n        result[funcName] = this.getOutputUnpacked4DCoords(\r\n            outShape as [number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 5:\r\n        result[funcName] = this.getOutputUnpacked5DCoords(\r\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 6:\r\n        result[funcName] = this.getOutputUnpacked6DCoords(\r\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRSource = `\r\n        void setOutput(float val) {\r\n          ${glsl.output} = vec4(val, 0, 0, 0);\r\n        }\r\n    `;\r\n    const floatTextureSetRFuncName = 'floatTextureSetR';\r\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Scalar output coordinates.\r\n   */\r\n  protected getOutputScalarCoords(): GlslLibRoutine {\r\n    return new GlslLibRoutine(`\r\n      int getOutputCoords() {\r\n        return 0;\r\n      }\r\n    `);\r\n  }\r\n\r\n  /**\r\n   * 1D packed output coordinates.\r\n   */\r\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = texShape;\r\n    let source = '';\r\n    if (packedTexShape[0] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    if (packedTexShape[1] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 2D packed output coordinates.\r\n   */\r\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\r\n      source = `\r\n        ivec2 getOutputCoords() {\r\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    const packedTexShape = texShape;\r\n    // texels needed to accommodate a logical row\r\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\r\n\r\n    /**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */\r\n    source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 3D packed output coordinates.\r\n   */\r\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\r\n    const source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          int b = index / ${texelsInBatch};\r\n          index -= b * ${texelsInBatch};\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec3(b, r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * ND packed output coordinates.\r\n   */\r\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n\r\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\r\n    let texelsInBatchN = texelsInBatch;\r\n    let batches = '';\r\n    let coords = 'b, r, c';\r\n\r\n    for (let b = 2; b < shape.length - 1; b++) {\r\n      texelsInBatchN *= shape[shape.length - b - 1];\r\n      batches = `\r\n      int b${b} = index / ${texelsInBatchN};\r\n      index -= b${b} * ${texelsInBatchN};\r\n    ` + batches;\r\n      coords = `b${b}, ` + coords;\r\n    }\r\n    const source = `\r\n      ivec${shape.length} getOutputCoords() {\r\n        ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n        ${batches}\r\n\r\n        int b = index / ${texelsInBatch};\r\n        index -= b * ${texelsInBatch};\r\n\r\n        // reverse r and c order for packed texture\r\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n        int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n        return ivec${shape.length}(${coords});\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D output coordinates.\r\n   */\r\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D output coordinates.\r\n   */\r\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          int r = index / ${shape[1]};\r\n          int c = index - r * ${shape[1]};\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D output coordinates.\r\n   */\r\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec3(r, c, d);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D output coordinates.\r\n   */\r\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec4 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec4(r, c, d, d2);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D output coordinates.\r\n   */\r\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec5 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec5(r, c, d, d2, d3);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D output coordinates.\r\n   */\r\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\r\n    number, number\r\n  ]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n     ivec6 getOutputCoords() {\r\n         ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                               vec2(${texShape[0]}, ${texShape[1]}));\r\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n         ${coordsFromIndexSnippet}\r\n         return ivec6(r, c, d, d2, d3, d4);\r\n       }\r\n     `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Generates code for common UV coords computation utility functions.\r\n   */\r\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    let funcName = 'uvFromFlat';\r\n    result[funcName] = new GlslLibRoutine(`\r\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\r\n      int texC = index / texNumR;\r\n      int texR = index - texC * texNumR;\r\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\r\n      //       v.\r\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\r\n    }\r\n    `);\r\n    funcName = 'packedUVfrom1D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\r\n        int texelIndex = index / 2;\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom2D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\r\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom3D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\r\n          int texelsInBatch, int texelsInLogicalRow, int b,\r\n          int row, int col) {\r\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = index / texNumC;\r\n        int texC = index - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'sampleTexture';\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    result[funcName] = new GlslLibRoutine(`\r\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\r\n            return ${glsl.texture2D}(textureSampler, uv).r;\r\n        }`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for inputs\r\n   */\r\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\r\n      const inputLayout = this.context.inputTextureLayouts[i];\r\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\r\n      if (inputLayout.isPacked) {\r\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      } else {\r\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      }\r\n\r\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\r\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\r\n        if (inputLayout.isPacked) {\r\n          result[outCoordFuncName] =\r\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        } else {\r\n          result[outCoordFuncName] =\r\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for output coordinates of samplers\r\n   */\r\n  protected getPackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texName = name;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\r\n\r\n    const inRank = inShape.length;\r\n    const outRank = outShape.length;\r\n\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n\r\n    let output = 'return outputValue;';\r\n    const inSize = ShapeUtil.size(inShape);\r\n    const isInputScalar = inSize === 1;\r\n    const outSize = ShapeUtil.size(outShape);\r\n    const isOutputScalar = outSize === 1;\r\n\r\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\r\n      output = `\r\n        return vec4(outputValue.xy, outputValue.xy);\r\n      `;\r\n    } else if (isInputScalar && !isOutputScalar) {\r\n      if (outRank === 1) {\r\n        output = `\r\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\r\n        `;\r\n      } else {\r\n        output = `\r\n          return vec4(outputValue.x);\r\n        `;\r\n      }\r\n    } else if (broadcastDims.length) {\r\n      const rows = inRank - 2;\r\n      const cols = inRank - 1;\r\n\r\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.x);';\r\n      } else if (broadcastDims.indexOf(rows) > -1) {\r\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\r\n            'outputValue.x, outputValue.y);';\r\n      } else if (broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\r\n      }\r\n    }\r\n\r\n    const swapLastDimsSnippet = `\r\n        int lastDim = coords.${fields[outRank - 1]};\r\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\r\n        coords.${fields[outRank - 2]} = lastDim;\r\n      `;\r\n    const source = `\r\n      vec4 ${funcName}() {\r\n        ${type} coords = getOutputCoords();\r\n        ${swapLastDimsSnippet}\r\n        ${coordsSnippet}\r\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        ${output}\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked output coordinates of samplers\r\n   */\r\n  protected getUnpackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const inTexShape = [inputLayout.width, inputLayout.height];\r\n    const inRank = inputLayout.unpackedShape.length;\r\n    const outRank = outputLayout.unpackedShape.length;\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\r\n\r\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, TexCoords);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n    const source = `\r\n        float ${funcName}() {\r\n          ${type} coords = getOutputCoords();\r\n          ${coordsSnippet}\r\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for packed operations.\r\n   */\r\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    switch (inputLayout.unpackedShape.length) {\r\n      case 0:\r\n        return this.getPackedSamplerScalar(funcName, name);\r\n      case 1:\r\n        return this.getPackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getPackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getPackedSampler3D(funcName, name, inputLayout);\r\n      default:\r\n        return this.getPackedSamplerND(funcName, name, inputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked operations.\r\n   */\r\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    switch (shape.length) {\r\n      case 0:\r\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\r\n      case 1:\r\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\r\n      case 4:\r\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\r\n      case 5:\r\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\r\n      case 6:\r\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\r\n      default:\r\n        // TODO support more dimensionalities\r\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Packed scalar snippet.\r\n   */\r\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const source = `\r\n          vec4 ${funcName}() {\r\n            return ${glsl.texture2D}(${name}, halfCR);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Packed 1D snippet.\r\n   */\r\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[1], texShape[0]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int index) {\r\n      vec2 uv = packedUVfrom1D(\r\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 2D snippet.\r\n   */\r\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const texNumR = texShape[0];\r\n    const texNumC = texShape[1];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\r\n        return ${glsl.texture2D}(${name}, uv);\r\n      }`;\r\n\r\n      return new GlslLibRoutine(packedSampler);\r\n    }\r\n    const packedTexShape = texShape;\r\n    const valuesPerRow = Math.ceil(shape[1] / 2);\r\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 3D snippet.\r\n   */\r\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    if (shape[0] === 1) {\r\n      const squeezedShape = shape.slice(1);\r\n      const keptDims = [1, 2];\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['b', 'row', 'col'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\r\n      const packedSampler = `${samplerRoutine.routineBody}\r\n      vec4 ${funcName}(int b, int row, int col) {\r\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n      } `;\r\n      const source = packedSampler;\r\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\r\n    }\r\n    const texNumR = packedTexShape[0];\r\n    const texNumC = packedTexShape[1];\r\n\r\n    const valuesPerRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\r\n      vec2 uv = packedUVfrom3D(\r\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);}`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\r\n  }\r\n  /*\r\n   * Packed ND snippet.\r\n   */\r\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const rank = shape.length;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texNumR = packedTexShape[1];\r\n    const texNumC = packedTexShape[0];\r\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\r\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\r\n    let params = 'int b, int row, int col';\r\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\r\n    for (let b = 2; b < rank - 1; b++) {\r\n      params = `int b${b}, ` + params;\r\n      texelsInBatch *= shape[rank - b - 1];\r\n      index = `b${b} * ${texelsInBatch} + ` + index;\r\n    }\r\n    const packedSampler = `vec4 ${funcName}(${params}) {\r\n      int index = ${index};\r\n      int texR = index / ${texNumC};\r\n      int texC = index - texR * ${texNumC};\r\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked scalar snippet.\r\n   */\r\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\r\n    if (texNumR === 1 && texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, halfCR);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}() {\r\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D snippet.\r\n   */\r\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const tNumR = inputLayout.width;\r\n    const tNumC = inputLayout.height;\r\n\r\n    if (tNumC === 1 && tNumR === 1) {\r\n      const source = `\r\n        float ${funcName}(int index) {\r\n          return sampleTexture(${name}, halfCR);\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    if (tNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    if (tNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    const source = `\r\n        float ${funcName}(int index) {\r\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n\r\n    // TODO: modify row/col order for other dimensions.\r\n    const texShape = [inputLayout.height, inputLayout.width];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const texNumR = texShape[1];\r\n      const texNumC = texShape[0];\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const params = ['col', 'row'];\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const texNumR = texShape[1];\r\n    const texNumC = texShape[0];\r\n    if (texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    if (texNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}(int row, int col) {\r\n          int index = col * ${shape[1]} + row;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride0 = shape[1] * shape[2];\r\n    const stride1 = shape[2];\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['batch', 'col', 'row'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\r\n      // TODO: revisit the logic here to make it simpler\r\n      const revDims = keptDims.reverse();\r\n      const source = `\r\n          ${routine.routineBody}\r\n          float ${funcName}(int batch, int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, revDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, routine.dependencies);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int depth, int row, int col) {\r\n            // Explicitly use integer operations as dot() only works on floats.\r\n            int index = depth * ${stride0} + col * ${stride1} + row;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride2 = shape[3];\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    //\r\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\r\n    //\r\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    // if (newShape.length < shape.length) {\r\n    //   const newInputShape = squeezeInputShape(shape, newShape);\r\n    //   const params = ['row', 'col', 'depth', 'depth2'];\r\n    //   // Deep copy of input texture layout.\r\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n    //   newInputLayout.unpackedShape = newInputShape;\r\n    //   const source = `\r\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\r\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n    //       }\r\n    //     `;\r\n    //   return new GlslLibRoutine(\r\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    // }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2) {\r\n          int index = row * ${stride0} + col * ${stride1} +\r\n              depth2 * ${stride2} + depth;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D snippet.\r\n   */\r\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride3 = shape[4];\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n          depth3 * ${stride3} + depth2;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D snippet.\r\n   */\r\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride4 = shape[5];\r\n    const stride3 = shape[4] * stride4;\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n            float ${funcName}(int row, int col, int depth,\r\n              int depth2, int depth3, int depth4) {\r\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n            }\r\n          `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int row, int col, int depth,\r\n            int depth2, int depth3, int depth4) {\r\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine} {\r\n    const output = this.context.outputTextureLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const layout = this.context.inputTextureLayouts[i];\r\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n\r\n  /**\r\n   * Produces a packed value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}_Pack`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        vec4 ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset_${varName}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          return ${glsl.texture2D}(${varName}, coords);\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ProgramInfo, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: readonly number[];\r\n  outputShape: readonly number[];\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(\r\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\r\n      public outputTextureLayout: TextureLayout) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(\r\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\r\n      outputTextureLayout: TextureLayout) {\r\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = '';\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + '\\n';\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n    const vec2 halfCR = vec2(0.5, 0.5);\r\n\r\n    // Custom vector types to handle higher dimenalities.\r\n    struct ivec5\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n    };\r\n\r\n    struct ivec6\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n      int v;\r\n    };\r\n\r\n    int imod(int x, int y) {\r\n      return x - y * (x / y);\r\n    }\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {createPackProgramInfoLoader} from './ops/pack';\r\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\r\n\r\nimport {encodeAsUint8} from './ops/uint8-encode';\r\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\r\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\r\n\r\nconst getProgramInfoUniqueKey =\r\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\r\n      const inputs =\r\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\r\n              .join('_');\r\n      let key = programInfo.name;\r\n      if (programInfo.cacheHint) {\r\n        key += '[' + programInfo.cacheHint + ']';\r\n      }\r\n      key += ':' + inputs;\r\n      return key;\r\n    };\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  /**\r\n   * @returns [width, height]\r\n   */\r\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\r\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\r\n  }\r\n\r\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\r\n    if (inputs.length < program.inputNames.length) {\r\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\r\n    }\r\n    if (program.inputNames.length !== program.inputTypes.length) {\r\n      throw new Error('input names size does not match input types');\r\n    }\r\n\r\n    // create texture info for input\r\n    const inputTextureDatas: TextureData[] = [];\r\n    for (let i = 0; i < program.inputNames.length; ++i) {\r\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\r\n    }\r\n\r\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\r\n    let artifact = this.session.programManager.getArtifact(key);\r\n    const programInfo = artifact ?\r\n        artifact.programInfo :\r\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\r\n                                                                    (program as ProgramInfo));\r\n\r\n    // create texture info for output\r\n    const outputTextureLayout = createTextureLayoutFromTextureType(\r\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\r\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\r\n\r\n    if (!artifact) {\r\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\r\n      this.session.programManager.setArtifact(key, artifact);\r\n    }\r\n\r\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\r\n    return outputTextureData;\r\n  }\r\n\r\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\r\n    const outputTextureData = this.executeProgram(program, inputs);\r\n    return outputTextureData.tensor;\r\n  }\r\n\r\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    // input should match\r\n    for (let i = 0; i < inputs.length; ++i) {\r\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\r\n        throw new Error(`input[${i}] property packed inconsistent`);\r\n      }\r\n    }\r\n\r\n    // output should match\r\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\r\n      throw new Error('output property packed inconsistent');\r\n    }\r\n\r\n    this.session.programManager.run(artifact, inputs, output);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\r\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\r\n\r\n    if (!td) {\r\n      // check if we have texture data in different type\r\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\r\n      if (td) {\r\n        if (textureType === TextureType.packed) {\r\n          return this.pack(td);\r\n        } else {\r\n          return this.unpack(td);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!td) {\r\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\r\n\r\n      if (textureType === TextureType.packedLastDimension) {\r\n        const group = 1;\r\n        const channels = 4;\r\n        const shape = tensor.dims;\r\n        if (shape.length === 4) {\r\n          // pre-processing for kernel data of Conv.\r\n          //\r\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\r\n          // 1. implement texture based const-folding\r\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\r\n          // 3. run the program before dotProduct.\r\n          //\r\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\r\n          const adjustedLayout =\r\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\r\n          let buffer = tensor.numberData;\r\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\r\n            const numFeatureMaps = shape[0];\r\n            const oldRowSize = shape[1] * shape[2] * shape[3];\r\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n            const newSize = numFeatureMaps * newRowSize;\r\n            buffer = new Float32Array(newSize);\r\n            for (let f = 0; f < numFeatureMaps; ++f) {\r\n              const oldOffset = f * oldRowSize;\r\n              const newOffset = f * newRowSize + f % group * oldRowSize;\r\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n            }\r\n          }\r\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\r\n        }\r\n      }\r\n\r\n      if (textureType === TextureType.packed) {\r\n        const unpackedTextureLayout =\r\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\r\n        const unpackedTextureData = this.createTextureData(\r\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n        td = this.pack(unpackedTextureData);\r\n      } else {\r\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n      }\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureLayout: TextureLayout = {\r\n      channels: inputTD.channels,\r\n      height: inputTD.height,\r\n      width: inputTD.width,\r\n      // handle reshaping into scalar Tensors\r\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n      strides: ShapeUtil.computeStrides(reshapedDims),\r\n      unpackedShape: reshapedDims,\r\n    };\r\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\r\n\r\n    // check if the reshape is 'cheap'\r\n    if (isReshapeCheap(input.dims, reshapedDims)) {\r\n      const newTextureLayout: TextureLayout = {\r\n        channels: inputTD.channels,\r\n        height: inputTD.height,\r\n        width: inputTD.width,\r\n        // handle reshaping into scalar Tensors\r\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n        strides: ShapeUtil.computeStrides(reshapedDims),\r\n        unpackedShape: reshapedDims,\r\n        isPacked: true\r\n      };\r\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n      return newTextureData.tensor;\r\n    }\r\n\r\n    const squeezedInputShape = processDims3D(input.dims);\r\n    const squeezedOutputShape = processDims3D(reshapedDims);\r\n\r\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\r\n    const squeezedOutputTensor = this.run(\r\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\r\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\r\n    return outputTensor;\r\n  }\r\n\r\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\r\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\r\n    return textureData;\r\n  }\r\n\r\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ?\r\n        this.session.getTextureData(tensorId, isPacked) :\r\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td, isPacked);\r\n    } else {\r\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\r\n    }\r\n  }\r\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\r\n    return !!this.getTextureData(tensor.dataId, isPacked);\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (textureData.isPacked) {\r\n      return this.readTexture(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\r\n    if (textureData.isPacked) {\r\n      return this.readTextureAsync(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  pack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n\r\n  unpack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {cast, parseCastAttributes} from './ops/cast';\r\nimport {concat, parseConcatAttributes} from './ops/concat';\r\nimport {conv, parseConvAttributes} from './ops/conv';\r\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\r\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\r\nimport {gather, parseGatherAttributes} from './ops/gather';\r\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\r\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\r\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\r\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\r\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\r\nimport {averagePool, parseAveragePoolAttributes} from './ops/pool';\r\nimport {globalAveragePool, parseGlobalAveragePoolAttributes} from './ops/pool';\r\nimport {maxPool, parseMaxPoolAttributes} from './ops/pool';\r\nimport {globalMaxPool} from './ops/pool';\r\nimport {reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\r\nimport {parseReduceAttributes} from './ops/reduce';\r\nimport {reshape} from './ops/reshape';\r\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\r\nimport {shape} from './ops/shape';\r\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\r\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\r\nimport {parseSplitAttributes, split} from './ops/split';\r\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\r\nimport {sum} from './ops/sum';\r\nimport {tile} from './ops/tile';\r\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\r\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\r\n  ['Abs', '', '6+', unaryOps.abs],\r\n  ['Acos', '', '7+', unaryOps.acos],\r\n  ['Add', '', '7+', binaryOps.add],\r\n  ['And', '', '7+', binaryOps.and],\r\n  ['Asin', '', '7+', unaryOps.asin],\r\n  ['Atan', '', '7+', unaryOps.atan],\r\n  // TODO: support new attributes for AveragePool-10\r\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\r\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\r\n  ['Cast', '', '6+', cast, parseCastAttributes],\r\n  ['Ceil', '', '6+', unaryOps.ceil],\r\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\r\n  ['Clip', '', '11+', unaryOps.clipV11],\r\n  ['Concat', '', '4+', concat, parseConcatAttributes],\r\n  ['Conv', '', '1+', conv, parseConvAttributes],\r\n  ['Cos', '', '7+', unaryOps.cos],\r\n  ['Div', '', '7+', binaryOps.div],\r\n  ['Dropout', '', '7+', unaryOps.identity],\r\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\r\n  ['Equal', '', '7+', binaryOps.equal],\r\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\r\n  ['Exp', '', '6+', unaryOps.exp],\r\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\r\n  ['Floor', '', '6+', unaryOps.floor],\r\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\r\n  ['Gather', '', '1+', gather, parseGatherAttributes],\r\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\r\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\r\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\r\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\r\n  ['Greater', '', '7+', binaryOps.greater],\r\n  ['Identity', '', '1+', unaryOps.identity],\r\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\r\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\r\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\r\n  ['Less', '', '7+', binaryOps.less],\r\n  ['Log', '', '6+', unaryOps.log],\r\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\r\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\r\n  ['Mul', '', '7+', binaryOps.mul],\r\n  ['Neg', '', '6+', unaryOps.neg],\r\n  ['Not', '', '1+', unaryOps.not],\r\n  ['Or', '', '7+', binaryOps.or],\r\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\r\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\r\n  ['Pow', '', '7+', binaryOps.pow],\r\n  ['PRelu', '', '7+', binaryOps.pRelu],\r\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\r\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\r\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\r\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\r\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\r\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\r\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\r\n  ['Relu', '', '6+', unaryOps.relu],\r\n  ['Reshape', '', '5+', reshape],\r\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\r\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\r\n  ['Shape', '', '1+', shape],\r\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\r\n  ['Sin', '', '7+', unaryOps.sin],\r\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\r\n  // The \"semantic\" meaning of axis has changed in opset-13.\r\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\r\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data is split.\r\n  // When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2-12', split, parseSplitAttributes],\r\n  ['Sqrt', '', '6+', unaryOps.sqrt],\r\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\r\n  ['Squeeze', '', '13+', squeezeV13],\r\n  ['Sub', '', '7+', binaryOps.sub],\r\n  ['Sum', '', '6+', sum],\r\n  ['Tan', '', '7+', unaryOps.tan],\r\n  ['Tanh', '', '6+', unaryOps.tanh],\r\n  ['Tile', '', '6+', tile],\r\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\r\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\r\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\r\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\r\n  ['Unsqueeze', '', '13+', unsqueezeV13],\r\n  ['Xor', '', '7+', binaryOps.xor],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n  momentum: number;\r\n  spatial: number;\r\n}\r\n\r\nconst batchNormalizationProgramMetadata = {\r\n  name: 'BatchNormalization',\r\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n  inputTypes:\r\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\r\n};\r\n\r\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...batchNormalizationProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\r\n    (node: Graph.Node): BatchNormalizationAttributes => {\r\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\r\n      const momentum = node.attributes.getFloat('momentum', 0.9);\r\n      const spatial = node.attributes.getInt('spatial', 1);\r\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\r\n    };\r\n\r\nconst createBatchNormalizationProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\r\n        ProgramInfo => {\r\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n          const rank = inputs[0].dims.length;\r\n          const [scaleWidth, scaleHeight] =\r\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\r\n          const shaderSource = `\r\n  float process(int[${rank}] indices) {\r\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\r\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\r\n  }`;\r\n          return {\r\n            ...batchNormalizationProgramMetadata,\r\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 5) {\r\n    throw new Error('BatchNormalization requires 5 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n  const mean = inputs[3];\r\n  const var_ = inputs[4];\r\n\r\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n      var_.dims.length !== 1) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n      var_.dims[0] !== X.dims[1]) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = 'add_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = 'div_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = 'mul_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = 'sub_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = 'equal_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(equal(v1, v2));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = 'greater_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = 'less_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = 'and_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = 'or_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = 'xor_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = 'prelu_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nconst createBinaryProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        cacheHint: cacheKey,\r\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\r\n      };\r\n    };\r\n\r\nconst createBinaryProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      let outputShape = inputs[0].dims;\r\n\r\n      const usePackedTexture = handler.session.pack;\r\n\r\n      if (isBroadcast) {\r\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n        if (!calculatedShape) {\r\n          throw new Error('Can\\'t perform binary op on the given tensors');\r\n        }\r\n        outputShape = calculatedShape;\r\n        const outputRank = outputShape.length;\r\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\r\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\r\n\r\n        const glsl = getGlsl(handler.session.backend.glContext.version);\r\n        const shaderSource = usePackedTexture ? `\r\n      ${glslFunc.body}\r\n      void main() {\r\n        vec4 a = getAAtOutCoords();\r\n        vec4 b = getBAtOutCoords();\r\n        vec4 result = ${glslFunc.name}(a, b);\r\n        ${glsl.output} = result;\r\n      }` :\r\n                                                `\r\n      ${glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\r\n      }`;\r\n\r\n        return {\r\n          name: glslFunc.name,\r\n          inputNames: ['A', 'B'],\r\n          inputTypes: [textureType, textureType],\r\n          output: {dims: outputShape, type: outputTensorType, textureType},\r\n          shaderSource,\r\n          hasMain: usePackedTexture\r\n        };\r\n      }\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n    ${glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\r\n\r\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\r\n\r\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\r\n\r\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\r\n\r\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\r\n\r\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\r\n\r\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\r\n\r\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\r\n\r\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\r\n\r\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\r\n\r\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\r\n\r\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ProtoUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const cast: OperatorImplementation<Tensor.DataType> =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\r\n      validateInputs(inputs);\r\n      return [handler.cast(inputs[0], to)];\r\n    };\r\n\r\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\r\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Cast requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\nimport {ConcatAttributes} from './concat';\r\n\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat (packed)',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.packed),\r\n  cacheHint\r\n});\r\n\r\nconst createPackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const coords = getChannels('coords', rank);\r\n      const dtype = getCoordsDataType(rank);\r\n      const unpackChannel = unpackFromChannel();\r\n\r\n      const shapes = inputs.map(i => i.dims);\r\n      const channels = getGlChannels(rank);\r\n      const offsets: number[] = new Array(shapes.length - 1);\r\n\r\n      offsets[0] = shapes[0][axis];\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\r\n      }\r\n\r\n      const channel = channels[axis];\r\n      const lastChannels = channels.slice(-2);\r\n      const allChannels = channels.join();\r\n\r\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\r\n        return getChannel(\r\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\r\n        }`;\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        const shift = offsets[i - 1];\r\n        getValueSnippet += `\r\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\r\n              return getChannel(\r\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\r\n            }`;\r\n      }\r\n      const lastIndex = offsets.length;\r\n      const shift = offsets[offsets.length - 1];\r\n      getValueSnippet += `\r\n            return getChannel(\r\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\r\n\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n      const shaderSource = `\r\n          ${unpackChannel}\r\n          float getValue(${channels.map(x => 'int ' + x)}) {\r\n            ${getValueSnippet}\r\n          }\r\n\r\n          void main() {\r\n            ${dtype} coords = getOutputCoords();\r\n            int lastDim = coords.${channels[rank - 1]};\r\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\r\n            coords.${channels[rank - 2]} = lastDim;\r\n\r\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\r\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.g = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\r\n              result.a = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\r\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.b = getValue(${coords});\r\n            }\r\n            ${glsl.output} = result;\r\n          }\r\n        `;\r\n\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createPackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\r\n  const channelIdx = channels.indexOf(channel);\r\n  const res = channels.map((c, idx) => {\r\n    if (idx === channelIdx) {\r\n      return `${c} - ${shift}`;\r\n    } else {\r\n      return c;\r\n    }\r\n  });\r\n  return res.join();\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\r\n\r\nexport interface ConcatAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const concat: OperatorImplementation<ConcatAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\r\n        const output =\r\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      } else {\r\n        const output =\r\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      }\r\n    };\r\n\r\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n\r\n      const sizeInConcatAxis = new Array<number>(inputs.length);\r\n      let previousSum = 0;\r\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n        previousSum += inputs[i].dims[axis];\r\n        sizeInConcatAxis[i] = previousSum;\r\n      }\r\n\r\n      let getTextureIndexWhereDataResidesMethod = '';\r\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n      if (inputs.length < 5) {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n      } else {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\r\n      }\r\n\r\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\r\n      const shaderSource = `\r\n        ${fetchDataFromCorrectTextureMethod}\r\n        ${getSizeInConcatAxisValueFromIndexMethod}\r\n        ${getTextureIndexWhereDataResidesMethod}\r\n        float process(int indices[${rank}]) {\r\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\r\n\r\n          if(textureIndex != 0) {\r\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\r\n          }\r\n\r\n          return fetchDataFromCorrectTexture(textureIndex, indices);\r\n        }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\r\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\r\n`);\r\n  return `int getTextureWhereDataResides(int index) {\r\n      ${searchAxis.join('')}\r\n    }`;\r\n};\r\n\r\n// TODO: Implement BinarySearch in GLSL\r\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\r\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n\r\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\r\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return _X${i}(indices); }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\r\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\r\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    } else if (i === sizeInConcatAxis.length - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return ${sizeInConcatAxis[i]}; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n\r\n  const inputType = inputs[0].type;\r\n  const inputDimensionality = inputs[0].dims.length;\r\n\r\n  // TODO: Support string concat\r\n  if (inputType === 'string') {\r\n    throw new Error('string tensor is not supported yet');\r\n  }\r\n\r\n  for (const input of inputs) {\r\n    // make sure types of all inputs match\r\n    if (input.type !== inputType) {\r\n      throw new Error('input tensors should be one type');\r\n    }\r\n\r\n    // make sure the dimensionality of all inputs are the same\r\n    if (input.dims.length !== inputDimensionality) {\r\n      throw new Error('input tensors should have the same shape');\r\n    }\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'GroupedConv',\r\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedGroupedConvProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\r\n      const xShape = inputs[0].dims.slice();\r\n      const wShape = inputs[1].dims.slice();\r\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\r\n      Logger.verbose(\r\n          'GroupedConv',\r\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\r\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\r\n      const outputShape =\r\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n    ivec2 xRCCorner = coords.zw * strides - pads;\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n\r\n    float value = 0.0;\r\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\r\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\r\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\r\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\r\n\r\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\r\n          continue;\r\n        }\r\n\r\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\r\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\r\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\r\n            continue;\r\n          }\r\n\r\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\r\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\r\n          value += xVal*wVal;\r\n        }\r\n      }\r\n    }\r\n    ${processBias}\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createUnpackedGroupedConvProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const conv2DPackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n    };\r\n\r\nexport const conv2DPacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n\r\n      // run im2col\r\n      const im2colOutput = inferenceHandler.run(\r\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\r\n          [inputs[0]]);\r\n\r\n      // reshape kernel\r\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\r\n\r\n      // run matmul\r\n      const matmulInputs =\r\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n\r\n      // reshape output\r\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n      return outputReshaped;\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\r\nimport {conv2DPacked} from './conv-pack';\r\nimport {createDotProductProgramInfoLoader} from './dot-product';\r\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createIm2ColProgramInfoLoader} from './im2col';\r\nimport {createMatmulProgramInfoLoader} from './matmul';\r\n\r\n\r\nexport const calculateOutputShape =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\r\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\r\n      const batchSize = inputShape[0];\r\n      const inputSpatialShape = inputShape.slice(2);\r\n      const spatialRank = inputSpatialShape.length;\r\n      const outChannels = kernelShape[0];\r\n      const kernelSpatialShape = kernelShape.slice(2);\r\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n      const outputSpatialShape =\r\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n      return outputShape;\r\n    };\r\n\r\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly dilations: readonly number[];\r\n  readonly group: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly pads: readonly number[];\r\n  readonly strides: readonly number[];\r\n}\r\n\r\nexport const conv: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\r\n      return conv2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst conv2d: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\r\n      const packMode = inferenceHandler.session.pack;\r\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\r\n      if (adjustedAttributes.group > 1) {\r\n        const result = inferenceHandler.run(\r\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\r\n        return [result];\r\n      } else if (isPointwise && packMode) {\r\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\r\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else {\r\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      }\r\n    };\r\n\r\nconst conv2DUnpackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\r\n    };\r\n\r\nconst conv2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const xIm2Col = inferenceHandler.run(\r\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\r\n\r\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\r\n      const output = inferenceHandler.run(\r\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\r\n      return output;\r\n    };\r\n\r\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\r\n  const attributes = node.attributes;\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n  const dilations = attributes.getInts('dilations', [1, 1]);\r\n  const group = attributes.getInt('group', 1);\r\n  const kernelShape = attributes.getInts('kernel_shape', []);\r\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n  const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('Conv input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('Conv input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface DepthToSpaceAttributes {\r\n  mode: 'DCR'|'CRD';\r\n  blocksize: number;\r\n}\r\n\r\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const blocksize = attributes.blocksize;\r\n      const blocksizeSqr = blocksize * blocksize;\r\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\r\n      const firstReshapeShape = attributes.mode === 'DCR' ?\r\n          [\r\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ] :\r\n          [\r\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ];\r\n\r\n      // const transpose = new WebGLTranspose();\r\n      // const attributes = new Attribute(undefined);\r\n      // attributes.set('perm', 'ints', transposePerm);\r\n      // transpose.initialize(attributes);\r\n\r\n      // First reshape\r\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\r\n\r\n      // transpose\r\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\r\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\r\n\r\n      // Second reshape\r\n      const secondReshapeShape = [\r\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\r\n        inputs[0].dims[3] * blocksize\r\n      ];\r\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\r\n      return [result];\r\n    };\r\n\r\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\r\n    (node: Graph.Node): DepthToSpaceAttributes => {\r\n      // processing node attributes\r\n      const blocksize = node.attributes.getInt('blocksize');\r\n      if (blocksize < 1) {\r\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\r\n      }\r\n      const mode = node.attributes.getString('mode', 'DCR');\r\n      if (mode !== 'DCR' && mode !== 'CRD') {\r\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\r\n      }\r\n      return {mode, blocksize};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (inputs.length !== 1) {\r\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\r\n  }\r\n\r\n  // Input has to be a 4-D tensor\r\n  // TODO: Support string depth-to-space.\r\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\r\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {calculateIm2ColDims} from './im2col';\r\n\r\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\r\n  name: 'ConvDotProduct',\r\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.packedLastDimension],\r\n  cacheKey: attributes.activationCacheKey\r\n});\r\n\r\nconst createDotProductProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\r\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\r\n      const [kWidth, kHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\r\n\r\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\r\n      const [im2colWidth, im2colHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\r\n      const rank = outputShape.length;\r\n\r\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\r\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n${activationFunction}\r\nfloat process(int indices[${rank}]) {\r\n  int b[1];\r\n  b[0] = indices[1];\r\n  int im2col[4];\r\n  im2col[0] = indices[0];\r\n  im2col[1] = indices[2];\r\n  im2col[2] = indices[3];\r\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\r\n          im2colStrides[2]};\r\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\r\n  float value = ${initValue};\r\n  for (int i = 0; i < ${sharedDim}; ++i) {\r\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\r\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\r\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n    ++im2colOffset;\r\n    ++kernelOffset;\r\n  }\r\n  ${applyActivation}\r\n  return value;\r\n}`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createDotProductProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\r\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\r\n      return {\r\n        ...metadata,\r\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const flatten: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\r\n      validateInputs(inputs, axis);\r\n\r\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\r\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\r\n    };\r\n\r\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getInt('axis', 1);  // default axis is 1\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Flatten requires 1 input.');\r\n  }\r\n\r\n  const r = inputs[0].dims.length;\r\n  if (r === 0) {\r\n    throw new Error('scalar tensor is not supported.');\r\n  }\r\n\r\n  if (axis < -r || axis > r) {\r\n    throw new Error('Invalid axis');\r\n  }\r\n\r\n  // TODO: Support string type\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('string tensor is not supported.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {GlslValueFunction} from '../glsl-definitions';\r\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\r\n\r\nexport interface InternalActivationAttributes {\r\n  readonly activation: string;\r\n  readonly clipMin?: number;\r\n  readonly clipMax?: number;\r\n  readonly activationCacheKey: string;\r\n}\r\n\r\nexport function getActicationSnippet(attributes: InternalActivationAttributes) {\r\n  let func: GlslValueFunction;\r\n  switch (attributes.activation) {\r\n    case 'Relu':\r\n      func = glslRelu();\r\n      break;\r\n    case 'Sigmoid':\r\n      func = glslSigmoid();\r\n      break;\r\n    case 'Clip':\r\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\r\n      break;\r\n    // TODO: adding other activations that can be fused.\r\n    default:\r\n      return {activationFunction: '', applyActivation: ''};\r\n  }\r\n\r\n  const activationName = func.name;\r\n  const activationFunction = func.body;\r\n  const applyActivation = `value = ${activationName}_(value);`;\r\n  return {activationFunction, applyActivation};\r\n}\r\n\r\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\r\n  const activation = attributes.getString('activation', '');\r\n\r\n  if (activation === 'Clip') {\r\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\r\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\r\n  }\r\n  return {activation, activationCacheKey: activation};\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\ninterface GatherAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const gather: OperatorImplementation<GatherAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes.axis);\r\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\r\n\r\nconst gatherProgramMetadata = {\r\n  name: 'Gather',\r\n  inputNames: ['A', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createGatherProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const indexDataShape = inputs[1].dims.slice();\r\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\r\n      const indexCopyOps: string[] = [];\r\n      for (let i = 0; i < outputShape.length; i++) {\r\n        // outputShape is divided into three parts: A, B, C\r\n        // |0        axis|  axis + indexDataShape.length |          end|\r\n        // |     A       |             B                 |      C      |\r\n        //\r\n        // inputIdx: [A, inputs[1][B], C]\r\n        if (i < axis) {  // A\r\n          outputShape[i] = inputShape[i];\r\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n        } else {\r\n          if (i < axis + indexDataShape.length) {  // B\r\n            outputShape[i] = indexDataShape[i - axis];\r\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n          } else {                                                       // C\r\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n          }\r\n        }\r\n      }\r\n\r\n      const orank = outputShape.length || 1;\r\n      const irank = inputShape.length;\r\n      const iDrank = indexDataShape.length || 1;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createGatherProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\r\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Gather requires 2 inputs.');\r\n  }\r\n  const tensorRank = inputs[0].dims.length;\r\n  if (tensorRank < 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (axis < -tensorRank || axis > tensorRank - 1) {\r\n    throw new Error('Invalid axis.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface GemmAttributes extends AttributeWithCacheKey {\r\n  transA: boolean;\r\n  transB: boolean;\r\n  alpha: number;\r\n  beta: number;\r\n  isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n\r\nexport const gemm: OperatorImplementation<GemmAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\r\n  const transA = node.attributes.getInt('transA', 0) !== 0;\r\n  const transB = node.attributes.getInt('transB', 0) !== 0;\r\n  const alpha = node.attributes.getFloat('alpha', 1.0);\r\n  const beta = node.attributes.getFloat('beta', 1.0);\r\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\r\n};\r\n\r\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, false);\r\n\r\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, true);\r\n\r\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\r\n  const metadata = {\r\n    name: 'Gemm',\r\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                                      [TextureType.unpacked, TextureType.unpacked],\r\n    key: attributes.cacheKey\r\n  };\r\n\r\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\r\n};\r\n\r\nconst createGemmProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\r\n      const aShape = inputs[0].dims.slice();\r\n      const bShape = inputs[1].dims.slice();\r\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n      const outputShape = [M, N];\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use gemm on the given tensors');\r\n      }\r\n      let sharedDim = aShape[aShape.length - 1];\r\n      let line = '';\r\n      if (attributes.transA) {\r\n        sharedDim = aShape[0];\r\n      }\r\n      if (attributes.transA && attributes.transB) {\r\n        line = 'value += _A_T(a) * _B_T(b);';\r\n      } else if (attributes.transA && !attributes.transB) {\r\n        line = 'value += _A_T(a) * _B(b);';\r\n      } else if (!attributes.transA && attributes.transB) {\r\n        line = 'value += _A(a) * _B_T(b);';\r\n      } else if (!attributes.transA && !attributes.transB) {\r\n        line = 'value += _A(a) * _B(b);';\r\n      }\r\n      const rank = outputShape.length;\r\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\r\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\r\n      const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        variables: [\r\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\r\n        ],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\r\n  if (!inputs) {\r\n    throw new Error('Input is missing');\r\n  }\r\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n    throw new Error('Invaid input shape.');\r\n  }\r\n  if (!attributes.isOptionalC && inputs.length !== 3) {\r\n    throw new Error('Gemm requires 3 inputs');\r\n  }\r\n\r\n  // 'C' can be of dimensionality 1 or 2 only\r\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n    throw new Error('Invalid input shape of C');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n\r\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n    throw new Error('Input types are mismatched');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {ConvAttributes} from './conv';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col (packed)',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed],\r\n  cacheHint,\r\n});\r\n\r\nconst createPackedIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n      const rowDim = 2;\r\n      const colDim = 3;\r\n      const rank = outputShape.length;\r\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\r\n      const kernelSize = wshape[2] * wshape[3];\r\n      const unpackChannel = unpackFromChannel();\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      let unrolled = '';\r\n\r\n      for (let row = 0; row <= 1; row++) {\r\n        for (let col = 0; col <= 1; col++) {\r\n          unrolled += `\r\n            blockIndex = rc.x + ${col};\r\n            pos = rc.y + ${row};\r\n\r\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\r\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\r\n                ${attributes.pads[0]};\r\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\r\n\r\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\r\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\r\n                  ${attributes.pads[1]};\r\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\r\n\r\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\r\n\r\n                  ch = int(float(pos)/ ${kernelSize}.);\r\n                    innerDims = vec2(d0, d1);\r\n                    result[${row * 2 + col}] = getChannel(\r\n                      getA(0, ch, int(innerDims.x),\r\n                      int(innerDims.y)), innerDims);\r\n                }\r\n              }\r\n            }\r\n\r\n          `;\r\n        }\r\n      }\r\n\r\n      const shaderSource = `\r\n      ${unpackChannel}\r\n\r\n      void main() {\r\n        ivec2 rc = getOutputCoords();\r\n          vec4 result = vec4(0.0);\r\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n          vec2 innerDims;\r\n          ${unrolled}\r\n          ${glsl.output} = result;\r\n      }\r\n            `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {ConvAttributes} from './conv';\r\n\r\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n  cacheHint,\r\n});\r\n\r\nconst createIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n\r\n      const rank = outputShape.length;\r\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\r\n\r\n      const shaderSource = `\r\n        const int XC = ${xshape[1]};\r\n        const int XH = ${xshape[2]};\r\n        const int XW = ${xshape[3]};\r\n        const int KH = ${attributes.kernelShape[0]};\r\n        const int KW = ${attributes.kernelShape[1]};\r\n        const int dilationH = ${attributes.dilations[0]};\r\n        const int dilationW = ${attributes.dilations[1]};\r\n        const int strideH = ${attributes.strides[0]};\r\n        const int strideW = ${attributes.strides[1]};\r\n        const int padH = ${attributes.pads[0]};\r\n        const int padW = ${attributes.pads[1]};\r\n        const int KHKW = KH*KW;\r\n        const int XCKHKW = XC * KHKW;\r\n        const int outputChannels = 4;\r\n        vec4 process(int indices[${rank}]) {\r\n          int b  = indices[0]; // batch size\r\n          int oh = indices[1] * strideH - padH; //output height\r\n          int ow = indices[2] * strideW - padW; //output width\r\n          int p = indices[3] * outputChannels; //patch\r\n          vec4 value = vec4(0.0);\r\n          for(int i=0; i < outputChannels; ++i) {\r\n            if(p < XCKHKW) {\r\n              int patchC = p / KHKW;\r\n              int patchH = (p - patchC*KHKW) / KW;\r\n              int patchW = (p - patchC*KHKW) - patchH * KW;\r\n              int xh2 = oh + patchH * dilationH;\r\n              int xw2 = ow + patchW * dilationW;\r\n              int x[${xshape.length}];\r\n              x[0] = b;\r\n              x[1] = patchC;\r\n              x[2] = xh2;\r\n              x[3] = xw2;\r\n              if(xh2 >= 0 &&\r\n                  xh2 < XH &&\r\n                  xw2 >= 0 &&\r\n                  xw2 < XW) {\r\n                value[i] = _X(x);\r\n              }\r\n            }\r\n            ++p;\r\n          }\r\n          return value;\r\n        }\r\n        `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n\r\n\r\nexport const calculateIm2ColDims =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\r\n        number[] =>\r\n            [outputShape[0], outputShape[2], outputShape[3],\r\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\r\n  scale: number;\r\n  bias: number[];\r\n}\r\n\r\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output =\r\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\r\n    (node: Graph.Node): ImageScalerAttributes => {\r\n      const scale = node.attributes.getFloat('scale');\r\n      const bias = node.attributes.getFloats('bias');\r\n      return createAttributeWithCacheKey({scale, bias});\r\n    };\r\n\r\nconst imageScalerProgramMetadata = {\r\n  name: 'ImageScaler',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createImageScalerProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\r\n        ProgramInfo => {\r\n          const outputShape = inputs[0].dims.slice();\r\n          const rank = outputShape.length;\r\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\r\n          const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            variables: [\r\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\r\n              {name: 'scale', type: 'float', data: attributes.scale}\r\n            ],\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst createImageScalerProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\r\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\r\n    };\r\n\r\nconst createGetBiasMethod = (numChannels: number): string => {\r\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n  for (let i = 0; i < numChannels; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (channel == ${i}) { return bias[${i}]; }`);\r\n    } else if (i === numChannels - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return bias[${i}]; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (channel == ${i}) { return bias[${i}]; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('ImageScaler requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const instanceNormalization: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\r\n      const output = inferenceHandler.run(\r\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\r\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\r\n      return [output];\r\n    };\r\n\r\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getFloat('epsilon', 1e-5);\r\n\r\nconst meanAndVarianceProgramMetadata = {\r\n  name: 'InstanceNormalization_MeanAndVariance',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\r\n  const xDims = input.dims.slice();\r\n  const channel = xDims[1];\r\n  const channelSize = xDims[2] * xDims[3];\r\n  const outputShape = [xDims[0], channel];\r\n\r\n  const shaderSource = `\r\n      vec4 process(int[2] indices) {\r\n        vec4 v = vec4(0.0);\r\n        int a[4];\r\n        a[0] = indices[0];\r\n        a[1] = indices[1];\r\n        float temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += x;\r\n          }\r\n        }\r\n        float mean = temp / float(${channelSize});\r\n        temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += (x - mean) * (x - mean);\r\n          }\r\n        }\r\n        v.r = mean;\r\n        v.g = temp / float(${channelSize});\r\n\r\n        return v;\r\n      }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\r\n  ...meanAndVarianceProgramMetadata,\r\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\r\n});\r\n\r\nconst computeOutputProgramMetadata = {\r\n  name: 'InstanceNormalization_ComputeOutput',\r\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createComputeOutputProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\r\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\r\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\r\n      const shaderSource = `\r\n      vec4 get_MeanAndVariance(int[2] mv) {\r\n        int offset = indicesToOffset_MeanAndVariance(mv);\r\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\r\n        return ${glsl.texture2D}(MeanAndVariance, coords);\r\n      }\r\n\r\n      float process(int[4] indices) {\r\n        int mv[2];\r\n        mv[0] = indices[0];\r\n        mv[1] = indices[1];\r\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\r\n        float mean = mean_and_variance.r;\r\n        float variance = mean_and_variance.g;\r\n\r\n        int sb[1];\r\n        sb[0] = indices[1];\r\n        float scale = _Scale(sb);\r\n        float b = _B(sb);\r\n\r\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createComputeOutputProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\r\n        ProgramInfoLoader => {\r\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\r\n          return {\r\n            ...metadata,\r\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 3) {\r\n    throw new Error('InstanceNormalization requires 3 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n\r\n  // input should at least have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n    throw new Error('Input shapes are mismatched.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Only support 4-D input shape.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {getBiasForMatmul} from './matmul';\r\n\r\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul (packed)',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\r\n                        [TextureType.packed, TextureType.packed],\r\n  cacheHint\r\n});\r\n\r\nconst createPackedMatmulProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n      const aShape = inputs[0].dims;\r\n      const bShape = inputs[1].dims;\r\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use matmul on the given tensors');\r\n      }\r\n      const sharedDim = aShape[aShape.length - 1];\r\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\r\n      const aRank = aShape.length;\r\n      const bRank = bShape.length;\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const coordsDataType = getCoordsDataType(outputShape.length);\r\n      const outRank = outputShape.length;\r\n      const allGlChannels = getGlChannels();\r\n      const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\r\n\r\n      const getBiasForMatmulSnippet =\r\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\r\n\r\n      const getBcastedSamplerForMatmulSnippet =\r\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\r\n\r\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\r\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\r\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\r\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\r\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\r\n      `;\r\n      const shaderSource = `\r\n            ${getBcastedSamplerForMatmulSnippet}\r\n            ${getBiasForMatmulSnippet}\r\n            ${activationFunction}\r\n            void main() {\r\n              ${getOutputCoordsSnippet}\r\n\r\n              vec4 value = vec4(0);\r\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\r\n                vec4 a = ${getSamplerAInLoopSnippet};\r\n                vec4 b = ${getSamplerBInLoopSnippet};\r\n\r\n                value += (a.rrbb * b.rgrg);\r\n                value += (a.ggaa * b.baba);\r\n              }\r\n              ${processBias}\r\n              ${applyActivation}\r\n              ${glsl.output} = value;\r\n            }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedMatmulProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\r\n      };\r\n    };\r\n\r\nfunction getBcastSamplerForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\r\n  let unpackedACoordsSnippet = [];\r\n  let unpackedBCoordsSnippet = [];\r\n\r\n  const inAShape = inputs[0].dims;\r\n  const inBShape = inputs[1].dims;\r\n\r\n  const inARank = inAShape.length;\r\n  const inBRank = inBShape.length;\r\n\r\n  const outRank = outShape.length;\r\n  const rankADiff = outRank - inARank;\r\n  const rankBDiff = outRank - inBRank;\r\n\r\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\r\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\r\n  unpackedACoordsSnippet.join(', ');\r\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\r\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\r\n  unpackedBCoordsSnippet.join(', ');\r\n\r\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\r\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\r\n\r\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\r\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\r\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\r\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\r\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\r\n\r\n  const getBcastSamplerMatmulSource = `\r\nvec4 getAAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsASnippet}\r\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\r\n  return outputValue;\r\n}\r\n\r\nvec4 getBAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsBSnippet}\r\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\r\n  return outputValue;\r\n}`;\r\n\r\n  return getBcastSamplerMatmulSource;\r\n}\r\n\r\nfunction getA(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += `rc.${allGlChannels[rank - 2]}, ` +\r\n      'i*2';\r\n  return res;\r\n}\r\n\r\nfunction getB(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += 'i*2, ' +\r\n      `rc.${allGlChannels[rank - 1]}`;\r\n  return res;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\nimport {getActicationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      if (inferenceHandler.session.pack) {\r\n        return [inferenceHandler.run(\r\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\r\n      } else {\r\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\r\n      }\r\n    };\r\n\r\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\r\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\r\n\r\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nfunction createMatmulProgramInfo(\r\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\r\n  const aShape = inputs[0].dims;\r\n  const bShape = inputs[1].dims;\r\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n  if (!outputShape) {\r\n    throw new Error('Can\\'t use matmul on the given tensors');\r\n  }\r\n  const coordsDataType = getCoordsDataType(outputShape.length);\r\n  const allGlChannels = getGlChannels();\r\n  const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\r\n\r\n  const hasBias = inputs.length > 2;\r\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n  const getBiasForMatmulSnippet =\r\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\r\n\r\n  const rank = outputShape.length;\r\n  const arank = aShape.length;\r\n  const brank = bShape.length;\r\n  const sharedDim = aShape[aShape.length - 1];\r\n  const shaderSource = `\r\n    ${activationFunction}\r\n    ${getBiasForMatmulSnippet}\r\n    float process(int indices[${rank}]) {\r\n        int a[${arank}];\r\n        int b[${brank}];\r\n        bcastMatmulIndices_A(indices, a);\r\n        bcastMatmulIndices_B(indices, b);\r\n\r\n        float value;\r\n        for (int k=0; k<${sharedDim}; ++k) {\r\n            a[${arank - 1}] = k;\r\n            b[${brank - 2}] = k;\r\n            value += _A(a) * _B(b);\r\n        }\r\n        ${processBias}\r\n        ${applyActivation}\r\n        return value;\r\n    }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createMatmulProgramInfoLoader(\r\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\r\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('MatMul requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n    throw new Error('shared dimension does not match.');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n\r\n  if (inputs[0].type !== inputs[1].type) {\r\n    throw new Error('inputs types should match');\r\n  }\r\n};\r\n\r\nexport function getBiasForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\r\n    isPacked: boolean): string {\r\n  let unpackedCoordsSnippet = '';\r\n  const inRank = inShape.length;\r\n  const outRank = outShape.length;\r\n  const rankDiff = outRank - inRank;\r\n  if (outRank < 2 && inRank > 0) {\r\n    unpackedCoordsSnippet = 'coords';\r\n  } else {\r\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\r\n  }\r\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\r\n  const inSize = ShapeUtil.size(inShape);\r\n  const isInputScalar = inSize === 1;\r\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\r\n  if (isInputScalar) {\r\n    output = 'vec4(outputValue.x)';\r\n  }\r\n  const getBiasForMatmulSource = isPacked ? `\r\nvec4 getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\r\n  return ${output};\r\n}` :\r\n                                            `\r\nfloat getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  return getBias(coords.x);\r\n}`;\r\n\r\n  return getBiasForMatmulSource;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels} from './packing-utils';\r\n\r\nconst packProgramMetadata = {\r\n  name: 'pack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpackedReversed]\r\n};\r\n\r\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const inputShape = input.dims;\r\n\r\n  const inputRank = inputShape.length;\r\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\r\n  const outputRank = input.dims.length;\r\n\r\n  const coordsDataType = getCoordsDataType(outputRank);\r\n  const channels = getChannels('rc', outputRank);\r\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\r\n\r\n  let reversedInputWH;\r\n  if (inputRank === 0) {\r\n    reversedInputWH = [1, 1];\r\n  } else if (inputRank === 1) {\r\n    reversedInputWH = [inputShape[0], 1];\r\n  } else {\r\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\r\n  }\r\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\r\n  const output = getOutput(inputShape, channels);\r\n\r\n  const shaderSource = `\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          if(${outOfBoundsCondition}) {\r\n            ${glsl.output} = vec4(0);\r\n          } else {\r\n            ${setup}\r\n\r\n            ${glsl.output} = vec4(${output});\r\n          }\r\n        }\r\n      `;\r\n  return {\r\n    ...packProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\r\n\r\n/**\r\n * check output coordinate location and return false if it is outside input's width/height boundary\r\n */\r\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\r\n  if (rank === 0) {\r\n    return 'false';\r\n  }\r\n  if (rank === 1) {\r\n    return `rc > ${shape[0]}`;\r\n  }\r\n\r\n  let cond = '';\r\n  for (let i = rank - 2; i < rank; i++) {\r\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\r\n    if (i < rank - 1) {\r\n      cond += '||';\r\n    }\r\n  }\r\n\r\n  return cond;\r\n}\r\n\r\n/**\r\n * code snippet to sample input texture with output coordiantes\r\n */\r\nfunction getOutput(shape: readonly number[], dims: string[]): string {\r\n  const rank = shape.length;\r\n\r\n  if (rank === 0) {\r\n    return 'getA(), 0, 0, 0';\r\n  }\r\n\r\n  if (rank === 1) {\r\n    return `getA(rc),\r\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\r\n            0, 0`;\r\n  }\r\n\r\n  const coord00 = 'r, c';\r\n  const coord01 = 'r, cp1';\r\n  const coord10 = 'rp1, c';\r\n  const coord11 = 'rp1, cp1';\r\n  let D = '';\r\n  if (rank > 2) {\r\n    for (let i = 0; i < rank - 2; ++i) {\r\n      D = D + `${dims[i]},`;\r\n    }\r\n  }\r\n  return `getA(${D}${coord00}),\r\n          rEdge ? 0. : getA(${D}${coord10}),\r\n          cEdge ? 0. : getA(${D}${coord01}),\r\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\r\n}\r\n\r\n/**\r\n * code snippet to setup 4 coordinates and edge conditions\r\n */\r\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\r\n  if (rank === 0 || rank === 1) {\r\n    return '';\r\n  }\r\n  // rank >= 2 for width+height pack.\r\n  else {\r\n    const setup = `\r\n    int r = ${dims[rank - 2]};\r\n    int c = ${dims[rank - 1]};\r\n    int rp1 = ${dims[rank - 2]} + 1;\r\n    int cp1 = ${dims[rank - 1]} + 1;\r\n    bool rEdge = rp1 >= ${cols};\r\n    bool cEdge = cp1 >= ${rows};\r\n    `;\r\n    return setup;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlChannels} from '../utils';\r\n\r\nexport function getVecChannels(name: string, rank: number): string[] {\r\n  return getGlChannels(rank).map(d => `${name}.${d}`);\r\n}\r\n\r\nexport function getChannels(name: string, rank: number): string[] {\r\n  if (rank === 1) {\r\n    return [name];\r\n  }\r\n  return getVecChannels(name, rank);\r\n}\r\n\r\nexport function unpackFromChannel(): string {\r\n  return `\r\n    float getChannel(vec4 frag, int dim) {\r\n      int modCoord = imod(dim, 2);\r\n      return modCoord == 0 ? frag.r : frag.g;\r\n    }\r\n\r\n    float getChannel(vec4 frag, vec2 innerDims) {\r\n      vec2 modCoord = mod(innerDims, 2.);\r\n      return modCoord.x == 0. ?\r\n        (modCoord.y == 0. ? frag.r : frag.g) :\r\n        (modCoord.y == 0. ? frag.b : frag.a);\r\n    }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface PadAttributes extends AttributeWithCacheKey {\r\n  readonly mode: string;\r\n  readonly pads: number[];\r\n  readonly value: number;\r\n}\r\n\r\nconst padProgramMetadata = {\r\n  name: 'Pad',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const padV2: OperatorImplementation<PadAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\r\n      validateInputsV2(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...padProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\r\n  const mode = node.attributes.getString('mode', 'constant');\r\n  const value = node.attributes.getFloat('value', 0.0);\r\n  const pads = node.attributes.getInts('pads');\r\n  return createAttributeWithCacheKey({mode, value, pads});\r\n};\r\n\r\nexport const padV11: OperatorImplementation<string> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\r\n      validateInputsV11(inputs);\r\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\r\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\r\n    };\r\n\r\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\r\n    node.attributes.getString('mode', 'constant');\r\n\r\nconst generatePadAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\r\n        throw new Error('dynamic pad attributes are not allowed');\r\n      }\r\n\r\n      const pads = Array.from(inputs[1].integerData);\r\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\r\n\r\n      return createAttributeWithCacheKey({mode, pads, value});\r\n    };\r\n\r\nconst createPadProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\r\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\r\n      const rank = outputShape.length;\r\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\r\n      const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n      return {\r\n        name: 'Pad',\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputsV2 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pad requires 1 input');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst validateInputsV11 = (inputs: Tensor[]): void => {\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Pad requires 2 or 3 inputs');\r\n  }\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n  const strides = ShapeUtil.computeStrides(input.dims);\r\n\r\n  switch (attributes.mode) {\r\n    case 'constant':\r\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\r\n    case 'reflect':\r\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\r\n    case 'edge':\r\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n};\r\n\r\nconst getPadConstant =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\r\n     value: number): string => {\r\n      const rank = shape.length;\r\n      let block = '';\r\n      for (let i = rank - 1; i >= 0; --i) {\r\n        block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  return constant;\r\n        if (k >= ${shape[i]}) return constant;\r\n        offset += k * ${strides[i]};\r\n        `;\r\n      }\r\n      return `\r\n      float padA(int m[${rank}]) {\r\n        const float constant = float(${value});\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n    };\r\n\r\nconst getPadReflect =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n\r\nconst getPadEdge =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  k = 0;\r\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n        offset += k * ${strides[i]};\r\n      `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly ceilMode: number;\r\n  readonly countIncludePad: boolean;\r\n  readonly kernelShape: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly pads: readonly number[];\r\n}\r\n\r\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n\r\n      // TODO: support attribute 'ceil_mode'\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\r\n    };\r\n\r\nconst createAveragePoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\r\n          const op1 = 'value += _X(x);';\r\n          let op2 = '';\r\n          if (adjustedAttributes.countIncludePad) {\r\n            op2 += `value /= float(${kernelSize});`;\r\n          } else {\r\n            op2 += `value /= float(${kernelSize} - pad);`;\r\n          }\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\r\n          const shaderSource = `\r\n        ${poolingCode}\r\n      `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata = {\r\n        name: 'GlobalAveragePool',\r\n        inputNames: ['X'],\r\n        inputTypes: [TextureType.unpacked],\r\n        cacheHint: `${attributes.countIncludePad}`\r\n      };\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      return createAttributeWithCacheKey(\r\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\r\n    };\r\n\r\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\r\n  readonly storageOrder: number;\r\n  readonly dilations: number[];\r\n}\r\n\r\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\r\n    (node: Graph.Node): MaxPoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n      const storageOrder = node.attributes.getInt('storage_order', 0);\r\n      const dilations = node.attributes.getInts('dilations', []);\r\n\r\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n      if (storageOrder !== 0) {\r\n        throw new Error('column major storage order is not yet supported for MaxPool');\r\n      }\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\r\n    };\r\n\r\nconst createMaxPoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const op1 = `\r\n      value = max(_X(x), value);\r\n    `;\r\n          const op2 = '';\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\r\n          const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst getAdjustedPoolAttributesAndOutputShape =\r\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\r\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\r\n          const inputShape = inputs[0].dims.slice();\r\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\r\n          const kernelShape = attributes.kernelShape.slice();\r\n          const strides = attributes.strides.slice();\r\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\r\n          const pads = attributes.pads.slice();\r\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\r\n\r\n          const outputShape = PoolConvUtil.computePoolOutputShape(\r\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n          const newAttributes = Object.assign({}, attributes);\r\n          if (hasDilations) {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\r\n          } else {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\r\n          }\r\n          return [newAttributes, outputShape];\r\n        };\r\n\r\nconst globalMaxPoolAttributes = {\r\n  autoPad: '',\r\n  ceilMode: 0,\r\n  countIncludePad: false,\r\n  kernelShape: [],\r\n  strides: [],\r\n  pads: [],\r\n  storageOrder: 0,\r\n  dilations: [],\r\n  cacheKey: ''\r\n};\r\n\r\nconst globalMaxPoolMetadata = {\r\n  name: 'GlobalMaxPool',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...globalMaxPoolMetadata,\r\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\r\n      },\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pool ops requires 1 input.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst generatePoolingCode =\r\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\r\n        string => {\r\n          const rank = inputDims.length;\r\n          if (attributes.kernelShape.length <= 2) {\r\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\r\n            const sw = attributes.strides[attributes.strides.length - 1];\r\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\r\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\r\n            const dimW = inputDims[rank - 1];\r\n            let codeW = '';\r\n            let codeH = '';\r\n            let codeHEnd = '';\r\n            if (pwStart + pwEnd !== 0) {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n              pad++;\r\n              continue;\r\n            }\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            ${op1}\r\n          }`;\r\n            }\r\n\r\n            if (attributes.kernelShape.length === 2) {\r\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\r\n              const sh = attributes.strides[attributes.strides.length - 2];\r\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\r\n              const phEnd = attributes.pads[attributes.pads.length - 2];\r\n              const dimH = inputDims[rank - 2];\r\n              if (phStart + phEnd !== 0) {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                pad+= ${kw};\r\n                continue;\r\n              }\r\n          `;\r\n              } else {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n            `;\r\n              }\r\n              codeHEnd = `\r\n          }\r\n        `;\r\n            }\r\n\r\n            const poolingCode = `\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          ${codeH}\r\n          ${codeW}\r\n          ${codeHEnd}\r\n          ${op2}\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          } else {\r\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\r\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\r\n            const stridesRank = kernelStrides.length;\r\n            const padsRank = attributes.pads.length;\r\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n            const copyInputDims = copyArray(inputDims, 'inputDims');\r\n            const copyPads = copyArray(attributes.pads, 'pads');\r\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n            const copyStrides = copyArray(attributes.strides, 'strides');\r\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\r\n            let padCode = '';\r\n            if (hasPads) {\r\n              padCode = `\r\n            if (x[j] >= inputDims[j] || x[j] < 0) {\r\n              pad++;\r\n              isPad = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!isPad) {\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              padCode = `\r\n          }\r\n          ${op1}\r\n        `;\r\n            }\r\n            const poolingCode = `\r\n        ${offsetToIndicesFunction}\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n          int offset[${stridesRank}];\r\n          int pads[${padsRank}];\r\n          int inputDims[${rank}];\r\n          int kernelStrides[${stridesRank}];\r\n          int strides[${stridesRank}];\r\n          ${copyPads}\r\n          ${copyInputDims}\r\n          ${copyStrides}\r\n          ${copyKernelStrides}\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          bool isPad = false;\r\n          for (int i = 0; i < ${kernelSize}; i++) {\r\n            offsetToIndices(i, kernelStrides, offset);\r\n            isPad = false;\r\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n              ${padCode}\r\n          }\r\n          ${op2}\r\n\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          }\r\n        };\r\n\r\nconst copyArray = (array: readonly number[], arrayName: string): string => {\r\n  let block = '';\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n};\r\n\r\nconst offsetToIndices = (rank: number): string => `\r\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n    if (${rank} == 0) {\r\n      return;\r\n    }\r\n    for (int i = 0; i < ${rank} - 1; ++i) {\r\n      indices[i] = offset / strides[i];\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[${rank} - 1] = offset;\r\n  }`;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ReduceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly keepDims: boolean;\r\n}\r\n\r\n// return [init ops, reduce ops, final ops]\r\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\r\n\r\nconst reduce =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\r\n     reduceOp: ReduceOp): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const reduceProgramMetadata = {\r\n        name,\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n      };\r\n\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...reduceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () =>\r\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\r\n  const axes = node.attributes.getInts('axes', []);\r\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\r\n  return createAttributeWithCacheKey({axes, keepDims});\r\n};\r\n\r\nconst createReduceProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\r\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const outputShape: number[] = [];\r\n      const iRank = inputs[0].dims.length || 1;\r\n\r\n      const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\r\n      const ops = reduceOp(inputs, axes);\r\n      let reduceOps = ops[1];\r\n\r\n      for (let k = 0; k < inputs[0].dims.length; k++) {\r\n        // if this axis is reduced\r\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n          if (attributes.keepDims) {\r\n            outputShape.push(1);\r\n          }  // else { remove the axis from outputShape; }\r\n\r\n          // loop over the d-th axis\r\n          reduceOps = `\r\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n            inputIdx[${k}] = j${k};\r\n            ${reduceOps}\r\n          }`;\r\n        } else {\r\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n          outputShape.push(inputs[0].dims[k]);\r\n        }\r\n      }\r\n\r\n      const oRank = outputShape.length || 1;\r\n\r\n      const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n      return {\r\n        ...reduceProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Reduce op requires 1 input.');\r\n  }\r\n\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\r\n    };\r\n\r\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        let size = 1.0;\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            size *= inputs[0].dims[k];\r\n          }\r\n        }\r\n\r\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\r\n    };\r\n\r\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\r\n    };\r\n\r\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\r\n    };\r\n\r\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\r\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\r\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\r\n\r\nconst createPackedReshape3DProgramInfo =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\r\n        ProgramInfo => {\r\n          const inputShape3D = input3D.dims as [number, number, number];\r\n          const squeezedOutputShape = outputShape3D as [number, number, number];\r\n\r\n          let mainLoop = '';\r\n          for (let i = 0; i < 4; i++) {\r\n            let outputCoords = '';\r\n            switch (i) {\r\n              case 0:\r\n                outputCoords = 'outputCoords = rc;';\r\n                break;\r\n              case 1:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\r\n                break;\r\n              case 2:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\r\n                break;\r\n              case 3:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\r\n                break;\r\n              default:\r\n                throw new Error();\r\n            }\r\n\r\n            mainLoop += `\r\n        ${outputCoords}\r\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\r\n          int flattenedIndex = getFlattenedIndex(outputCoords);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\r\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\r\n\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n          }\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n          const shaderSource = `\r\n      ${getReshapedInputCoords(inputShape3D)}\r\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\r\n      ${unpackFromChannel()}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.0);\r\n\r\n        ivec3 outputCoords;\r\n        int rows = ${squeezedOutputShape[2]};\r\n        int cols = ${squeezedOutputShape[1]};\r\n\r\n        ${mainLoop}\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n\r\n          return {\r\n            ...metadata,\r\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\r\n            shaderSource,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nexport const createPackedReshape3DProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\r\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\r\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\r\n    };\r\n\r\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\r\n  if (shape.length === 0) {\r\n    return [1, 1, 1];\r\n  }\r\n  // TODO: squeeze other shapes to 2D case\r\n  let batch = 1;\r\n  for (let i = 0; i < shape.length - 2; ++i) {\r\n    batch *= shape[i];\r\n  }\r\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\n\r\n// For packed reshape, we need to re-arrange texel data for output shape.\r\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\r\n// for the reshaped new tensor, we just need to re-arrange the last h and\r\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\r\n// first convert it to 3D by collapsing other dimension to batch dim, then\r\n// process with the last two dimensions.\r\n// Note: we only need the shape tensor to calculate output shape, so the\r\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\r\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\r\n// the same between input shape and output shape, the packed reshape can be\r\n// treated as no-op.\r\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\r\n  let isCheapReshape = false;\r\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\r\n    isCheapReshape = true;\r\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\r\n  } else {  // 2D +\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\r\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\r\n  }\r\n\r\n  return isCheapReshape;\r\n}\r\n\r\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n  const coords = ['b', 'r', 'c'];\r\n  const index = 'index';\r\n  const coordsFromIndexSnippet = strides\r\n                                     .map((stride, i) => {\r\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\r\n                                       const line2 = i === strides.length - 1 ?\r\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\r\n                                           `index -= ${coords[i]} * ${stride}`;\r\n                                       return `${line1}; ${line2};`;\r\n                                     })\r\n                                     .join('');\r\n\r\n  return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(b, r, c);\r\n    }\r\n  `;\r\n}\r\n\r\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n\r\n  return `\r\n  int getFlattenedIndex(ivec3 coords) {\r\n    // reverse y, z order\r\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\r\n  }\r\n`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n  if (handler.session.pack) {\r\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\r\n  } else {\r\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\r\n\r\nconst resizeProgramMetadata = {\r\n  name: 'Resize',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const resize: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...resizeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\r\n\r\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\r\n\r\nconst createPackedResizeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\r\n\r\n      const isSame =\r\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\r\n      if (isSame) {\r\n        return {\r\n          ...resizeProgramMetadata,\r\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n          hasMain: true,\r\n          shaderSource: `void main() {\r\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\r\n                    ${glsl.output} = v;\r\n                }`\r\n        };\r\n      }\r\n\r\n      const dim = outputShape.length;\r\n      if (dim < 2) {\r\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\r\n      }\r\n\r\n      const outputHeight = outputShape[dim - 2];\r\n      const outputWidth = outputShape[dim - 1];\r\n\r\n      const inputShape = inputs[0].dims;\r\n      if (dim !== inputShape.length) {\r\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\r\n      }\r\n      const inputHeight = inputShape[dim - 2];\r\n      const inputWidth = inputShape[dim - 1];\r\n\r\n      const scalesHeight = scales[dim - 2];\r\n      const scalesWidth = scales[dim - 1];\r\n\r\n      let getSourceFracIndex = '';\r\n\r\n      if (attributes.mode !== 'linear') {\r\n        // TODO: support other modes\r\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\r\n      }\r\n      switch (attributes.coordinateTransformMode) {\r\n        case 'asymmetric':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return vec4(coords) / scaleWHWH;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'align_corners':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\r\n                            ${outputHeight}.0 - 1.0);\r\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\r\n                            ${inputHeight}.0 - 1.0);\r\n                        vec4 new_scale = original / resized;\r\n                        return vec4(coords) * new_scale;\r\n                    }\r\n                `;\r\n          break;\r\n        default:\r\n          // TODO:supporting other coordinateTransformModes\r\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\r\n                                '${attributes.coordinateTransformMode}'`);\r\n      }\r\n\r\n      const coordsDataType = getCoordsDataType(dim);\r\n      const unpackChannel = unpackFromChannel();\r\n      const shaderSource = `\r\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\r\n            const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\r\n            ${unpackChannel}\r\n            ${getSourceFracIndex}\r\n            float getAValue(int x10, int r, int c, int d) {\r\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\r\n            }\r\n            void main() {\r\n                ${coordsDataType} rc = getOutputCoords();\r\n\r\n                int batch = rc[0];\r\n                int depth = rc[1];\r\n\r\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\r\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\r\n\r\n                // calculate the source index in fraction\r\n                vec4 sourceFrac = getSourceFracIndex(coords);\r\n\r\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\r\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\r\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\r\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\r\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\r\n\r\n                bool hasNextRow = rc.w < ${outputHeight - 1};\r\n                bool hasNextCol = rc.z < ${outputWidth - 1};\r\n\r\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\r\n                vec4 topLeft = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\r\n                vec4 topRight = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\r\n                vec4 bottomLeft = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\r\n                vec4 bottomRight = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\r\n\r\n                // calculate the interpolation fraction on u and v direction\r\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\r\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\r\n\r\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\r\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\r\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\r\n\r\n                ${glsl.output} = vec4(newValue);\r\n            }\r\n        `;\r\n      return {\r\n        ...resizeProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n\r\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\r\n  const x = inputs[0];\r\n  const xDims = x.dims;\r\n\r\n  let scales = attributes.scales;\r\n  let outputSizes: number[]|undefined;\r\n  if (scales.length === 0) {\r\n    const scalesTensor = inputs[attributes.scalesInputIdx];\r\n    if (scalesTensor && scalesTensor.size !== 0) {\r\n      if (inputs[attributes.sizesInputIdx]) {\r\n        throw new Error('Only one of scales or sizes must be provided as input.');\r\n      }\r\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\r\n    } else {\r\n      const sizesTensor = inputs[attributes.sizesInputIdx];\r\n      if (!sizesTensor || sizesTensor.size === 0) {\r\n        throw new Error('Either scales or sizes MUST be provided as input.');\r\n      }\r\n\r\n      outputSizes = Array.from(sizesTensor.integerData);\r\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\r\n    }\r\n  } else {\r\n    if (inputs[attributes.sizesInputIdx]) {\r\n      throw new Error('Only one of scales or sizes must be provided as input.');\r\n    }\r\n  }\r\n\r\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\r\n\r\n  return [scales, yDims];\r\n};\r\n\r\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\r\n  const scales = Array.from(scale.floatData);\r\n  scalesValidation(scales, mode, isResize);\r\n  return scales;\r\n};\r\n\r\nconst parseScalesDataFromOutputSize =\r\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\r\n      const length = xDims.length;\r\n      const scales = new Array<number>(length);\r\n\r\n      for (let i = 0, end = length; i < end; i++) {\r\n        if (xDims[i] === 0) {\r\n          if (yDims[i] !== 0) {\r\n            throw new Error('Input dim is zero but required output dim is non-zero.');\r\n          }\r\n          scales[i] = 1;\r\n        } else {\r\n          scales[i] = yDims[i] / xDims[i];\r\n        }\r\n      }\r\n      scalesValidation(scales, mode, isResize);\r\n      return scales;\r\n    };\r\n\r\n// roi data is not used yet. but leave here for future usage.\r\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\r\n//     let roi: number[] = [];\r\n//     if (attributes.needRoiInput) {\r\n//         if (attributes.roiInputIdx <= 0) {\r\n//             throw new Error('Invalid roi input index.');\r\n//         }\r\n//         const roiTensor = inputs[attributes.roiInputIdx];\r\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\r\n//     } else {\r\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\r\n//     }\r\n//     return roi;\r\n// };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Shape requires 1 input.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SliceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly ends: number[];\r\n  readonly starts: number[];\r\n}\r\n\r\nconst sliceProgramMetadata = {\r\n  name: 'Slice',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const slice: OperatorImplementation<SliceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...sliceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\r\n  const starts = node.attributes.getInts('starts');\r\n  const ends = node.attributes.getInts('ends');\r\n  const axes = node.attributes.getInts('axes', []);\r\n  return createAttributeWithCacheKey({starts, ends, axes});\r\n};\r\n\r\nconst createSliceProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\r\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\r\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\r\n      const starts = attributes.starts.map((start, i) => {\r\n        if (start > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\r\n      });\r\n      const ends = attributes.ends.map((end, i) => {\r\n        if (end > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\r\n      });\r\n\r\n      const outputShape = input.dims.slice();\r\n\r\n      const sliceOps: string[] = [];\r\n      for (let i = 0; i < normalizedAxes.length; i++) {\r\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\r\n        if (starts[i] > 0) {\r\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\r\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n      return {\r\n        ...sliceProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Slice requires 1 input.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV10(inputs);\r\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...sliceProgramMetadata,\r\n        cacheHint: attributes.cacheKey,\r\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n      },\r\n      [inputs[0]]);\r\n  return [output];\r\n};\r\n\r\nconst generateSliceAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\r\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\r\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\r\n        throw new Error('dynamic slice attributes are not allowed');\r\n      }\r\n\r\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n        throw new Error('currently non-1 steps is not supported for Slice');\r\n      }\r\n\r\n      const starts = Array.from(inputs[1].integerData);\r\n      const ends = Array.from(inputs[2].integerData);\r\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n      const cacheKey = `${axes};${starts};${ends}`;\r\n      return {starts, ends, axes, cacheKey};\r\n    };\r\n\r\nconst validateInputsV10 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n    throw new Error('Invalid input number.');\r\n  }\r\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nconst softmaxComputeMaxProgramMetadata = {\r\n  name: 'SoftmaxComputeMax',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst softmaxComputeScaleProgramMetadata = {\r\n  name: 'SoftmaxComputeScale',\r\n  inputNames: ['A', 'Max'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst softmaxProgramMetadata = {\r\n  name: 'SoftMax',\r\n  inputNames: ['A', 'Max', 'Norm'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\r\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n\r\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\r\n      return output;\r\n    };\r\n\r\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\r\n\r\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\r\n\r\n// The \"semantic\" meaning of axis has changed in opset-13.\r\n// Please compare: https://github.com/onnx/onnx/blob/master/docs/Operators.md#Softmax\r\n// with https://github.com/onnx/onnx/blob/master/docs/Changelog.md#Softmax-11 for detailed explanations\r\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\r\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\r\n// the innermost dim\r\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const rank = inputShape.length;\r\n\r\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\r\n      const transposedInputShape: number[] = [];\r\n      let perm: number[] = [];\r\n      let transposedInputs: Tensor[] = [];\r\n      let transposeAttribute: TransposeAttributes;\r\n\r\n      if (isTransposeRequired) {\r\n        perm = Array.from({length: rank}).map((_, i) => i);\r\n\r\n        // swap the innermost dim with the dim corresponding to axis\r\n        perm[axis] = rank - 1;\r\n        perm[rank - 1] = axis;\r\n\r\n        perm.map(p => transposedInputShape.push(inputShape[p]));\r\n\r\n        transposeAttribute = createAttributeWithCacheKey({perm});\r\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\r\n      }\r\n\r\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\r\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\r\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\r\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\r\n\r\n      const output = computeSoftmax(\r\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\r\n\r\n      if (isTransposeRequired) {\r\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\r\n        return reversedOutput;\r\n      } else {\r\n        return output;\r\n      }\r\n    };\r\n\r\nconst computeSoftmax =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\r\n     featureCount: number): Tensor[] => {\r\n      const computeMaxProgramInfo =\r\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\r\n      const max = inferenceHandler.run(\r\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\r\n          inputs);\r\n\r\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          [logicalRowCount]);\r\n      const scale = inferenceHandler.run(\r\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\r\n          [inputs[0], max]);\r\n\r\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          computeScaleProgramInfo.output.dims);\r\n      const output = inferenceHandler.run(\r\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\r\n          [inputs[0], max, scale]);\r\n      return [output];\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the maximum value of each of the 'N' rows\r\n */\r\nconst createComputeMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\r\n        ${textureHeight} )));\r\n        for(int i=1; i<${featureCount}; ++i)\r\n        {\r\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight})));\r\n          if(current > max)\r\n          max = current;\r\n        }\r\n\r\n        return max;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeMaxProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the normalization factor for each of the 'N' rows\r\n */\r\nconst createComputScaleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float norm_factor = 0.0;\r\n        float max = _Max(indices);\r\n        for(int i=0; i<${featureCount}; ++i)\r\n        {\r\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight}))) - max);\r\n        }\r\n\r\n        return norm_factor;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeScaleProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createSoftMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = input.dims.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${featureCount};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n      return {\r\n        ...softmaxProgramMetadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Softmax requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SplitAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n  readonly split: number[];\r\n  readonly numOutputs: number;\r\n}\r\n\r\nconst splitProgramMetadata = {\r\n  name: 'Split',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const split: OperatorImplementation<SplitAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\r\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < count; ++i) {\r\n        output.push(inferenceHandler.run(\r\n            {\r\n              ...splitProgramMetadata,\r\n              cacheHint: `${attributes.cacheKey};${i}`,\r\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\r\n            },\r\n            inputs));\r\n      }\r\n\r\n      return output;\r\n    };\r\n\r\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\r\n  const axis = node.attributes.getInt('axis', 0);\r\n  const split = node.attributes.getInts('split', []);\r\n  const numOutputs = node.outputs.length;\r\n  return createAttributeWithCacheKey({axis, split, numOutputs});\r\n};\r\n\r\nconst getProgramCount =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\r\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\r\n      return offsets.length;\r\n    };\r\n\r\nconst createSplitProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\r\n        ProgramInfo => {\r\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\r\n          const offset = offsets[index];\r\n          const outputShape = shapes[index];\r\n          const rank = outputShape.length;\r\n          const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }\r\n    `;\r\n          return {\r\n            ...splitProgramMetadata,\r\n            cacheHint: `${attributes.cacheKey}:${index}`,\r\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Split requires one input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const squeeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Squeeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Squeeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const sumProgramMetadata = {\r\n    name: 'Sum',\r\n    inputNames: inputs.map((v, i) => `X${i}`),\r\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\r\n  return [output];\r\n};\r\n\r\nconst createSumProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const outputShape = inputs[0].dims.slice();\r\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n      const shaderSource = `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n      return {\r\n        ...sumProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length === 0) {\r\n    throw new Error('Sum requires inputs.');\r\n  }\r\n\r\n  const length = inputs[0].dims.length;\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (length !== inputs[i].dims.length) {\r\n      throw new Error('Input shapes are mismatched.');\r\n    }\r\n\r\n    for (let j = 0; j < length; j++) {\r\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n        throw new Error('Input shapes are not matched.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (inputs[0].type !== inputs[i].type) {\r\n      throw new Error('Input types are not matched.');\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {NUMBER_TYPES} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const tileProgramMetadata = {\r\n    name: 'Tile',\r\n    inputNames: ['A'],\r\n    inputTypes: [TextureType.unpacked],\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst createTileProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const outputShape = new Array(inputShape.length);\r\n\r\n      const tileOps: string[] = [];\r\n      for (let i = 0; i < inputShape.length; i++) {\r\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        int inputIdx[${rank}];\r\n        ${tileOps.join('\\n')}\r\n        return _A(inputIdx);\r\n      }\r\n    `;\r\n      return {\r\n        ...tileProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Tile requires 2 input.');\r\n  }\r\n  if (inputs[1].dims.length !== 1) {\r\n    throw new Error('The second input shape must 1 dimension.');\r\n  }\r\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invalid repeat type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface TransposeAttributes extends AttributeWithCacheKey {\r\n  readonly perm: number[];\r\n}\r\n\r\nconst transposeProgramMetadata = {\r\n  name: 'Transpose',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const transpose: OperatorImplementation<TransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...transposeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\r\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\r\n\r\nconst createTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\r\n      const inputShape = input.dims;\r\n      perm = getAdjustedPerm(inputShape, perm);\r\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\r\n      const rank = inputShape.length;\r\n      // A dims=[${inputs[0].dims.toString()}]\r\n      // out Dims=[${unpackedOutputShape.toString()}]\r\n      // based on perm=[${perm.toString()}]\r\n      const shaderSource = `\r\n      ${getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n      return {\r\n        ...transposeProgramMetadata,\r\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\r\n  if (perm && perm.length !== inputShape.length) {\r\n    perm = [...(inputShape.keys())].reverse();\r\n  }\r\n  return perm;\r\n};\r\n\r\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\r\n  perm = getAdjustedPerm(inputShape, perm);\r\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\r\n};\r\n\r\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\r\n  const reverseFunc = [];\r\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n  for (let i = 0; i < rank; ++i) {\r\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n  }\r\n  reverseFunc.push('\\t}');\r\n  return reverseFunc.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Transpose requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('input should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureType} from '../types';\r\n\r\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\r\n  const outputShape = input.shape;\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  /**\r\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n   */\r\n  const shaderSource = `\r\n    const float FLOAT_MAX = 1.70141184e38;\r\n    const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n    bool isNaN(float val) {\r\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n    }\r\n\r\n    highp vec4 encodeAsUint8(highp float v) {\r\n      if (isNaN(v)) {\r\n        return vec4(255, 255, 255, 255);\r\n      }\r\n\r\n      highp float av = abs(v);\r\n\r\n      if(av < FLOAT_MIN) {\r\n        return vec4(0.0, 0.0, 0.0, 0.0);\r\n      } else if(v > FLOAT_MAX) {\r\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n      } else if(v < -FLOAT_MAX) {\r\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n      }\r\n\r\n      highp vec4 c = vec4(0,0,0,0);\r\n\r\n      highp float e = floor(log2(av));\r\n      highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n      c[2] = floor(128.0 * m);\r\n      m -= c[2] / 128.0;\r\n      c[1] = floor(32768.0 * m);\r\n      m -= c[1] / 32768.0;\r\n      c[0] = floor(8388608.0 * m);\r\n\r\n      highp float ebias = e + 127.0;\r\n      c[3] = floor(ebias / 2.0);\r\n      ebias -= c[3] * 2.0;\r\n      c[2] += floor(ebias) * 128.0;\r\n\r\n      c[3] += 128.0 * step(0.0, -v);\r\n\r\n      return c / 255.0;\r\n    }\r\n\r\n    void main() {\r\n      float value = ${glsl.texture2D}(X,TexCoords).r;\r\n      ${glsl.output} = encodeAsUint8(value);\r\n    }`;\r\n  const programInfo = {\r\n    name: 'Uint8Encode',\r\n    inputTypes: [TextureType.unpacked],\r\n    inputNames: ['X'],\r\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\r\n    shaderSource,\r\n    hasMain: true\r\n  };\r\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {Tensor} from '../../../tensor';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslElu(alpha: number): GlslValueFunction {\r\n  const name = 'elu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslClip(min: number, max: number): GlslValueFunction {\r\n  const name = 'clip';\r\n  const body = `\r\n  const float min = float(${min});\r\n  const float max = float(${max});\r\n\r\n  float ${name}_(float a) {\r\n    return clamp(a, min, max);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return clamp(v, min, max);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = 'indentity';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\r\n  const name = 'leakyRelu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a < 0.0 ? a * alpha : a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = 'neg';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = 'not';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}_(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}_(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = 'relu';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = 'sigmoid';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = 'tanh';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return ${name}(a);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return ${name}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\n/////\r\n/////\r\n/////\r\n\r\nconst createElementwiseProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\r\n        ProgramInfo => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n          return {\r\n            ...metadata,\r\n            output: {dims: input.dims, type: input.type, textureType},\r\n            shaderSource: `\r\n     ${glslFunc.body}\r\n     void main() {\r\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n       v = ${glslFunc.name}_(v);\r\n       ${glsl.output} = v;\r\n     }\r\n     `,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nconst createElementwiseProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\r\n        ProgramInfoLoader => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\r\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\r\n        };\r\n\r\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\r\n\r\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\r\n\r\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\r\n\r\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\r\n\r\nexport interface ClipAttributes extends AttributeWithCacheKey {\r\n  readonly min: number;\r\n  readonly max: number;\r\n}\r\n\r\nexport const clip =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(\r\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\r\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\r\n\r\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\r\n  return clip(handler, [inputs[0]], attributes);\r\n};\r\n\r\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\r\n  if (inputs.length >= 3 &&\r\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\r\n    throw new Error('dynamic clip attributes are not allowed');\r\n  }\r\n\r\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\r\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\r\n  return createAttributeWithCacheKey({min, max});\r\n};\r\n\r\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\r\n\r\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\r\n\r\nexport interface EluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const elu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\r\n\r\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\r\n\r\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\r\n\r\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\r\n\r\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const leakyRelu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\r\n\r\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\r\n\r\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\r\n\r\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\r\n\r\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\r\n\r\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\r\n\r\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\r\n\r\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\r\n\r\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\r\n\r\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst unpackProgramMetadata = {\r\n  name: 'unpack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const rank = input.dims.length;\r\n\r\n  const channels = getChannels('rc', rank);\r\n  const innerDims = channels.slice(-2);\r\n  const coordsDataType = getCoordsDataType(rank);\r\n  const unpackChannel = unpackFromChannel();\r\n  const isScalar = (input.dims.length === 0);\r\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\r\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const shaderSource = `\r\n    ${unpackChannel}\r\n    void main() {\r\n      ${coordsDataType} rc = getOutputCoords();\r\n\r\n       // Sample the texture with the coords to get the rgba channel value.\r\n       vec4 packedInput = getA(${sourceCoords});\r\n\r\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\r\n     }\r\n   `;\r\n\r\n  return {\r\n    ...unpackProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\r\n\r\nfunction getSourceCoords(rank: number, dims: string[]): string {\r\n  if (rank === 1) {\r\n    return 'rc';\r\n  }\r\n\r\n  let coords = '';\r\n  for (let i = 0; i < rank; i++) {\r\n    coords += dims[i];\r\n    if (i < rank - 1) {\r\n      coords += ',';\r\n    }\r\n  }\r\n  return coords;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const unsqueeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Unsqueeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Unsqueeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\r\n  readonly opset: number;\r\n  readonly isResize: boolean;\r\n  readonly mode: string;\r\n  readonly scales: number[];\r\n  readonly extrapolationValue: number;\r\n  readonly coordinateTransformMode: string;\r\n  readonly useExtrapolation: boolean;\r\n  readonly needRoiInput: boolean;\r\n  readonly nearestMode: string;\r\n  readonly cubicCoefficientA: number;\r\n  readonly excludeOutside: boolean;\r\n  readonly useNearest2xOptimization: boolean;\r\n  readonly roiInputIdx: number;\r\n  readonly scalesInputIdx: number;\r\n  readonly sizesInputIdx: number;\r\n}\r\n\r\nconst upsampleProgramMetadata = {\r\n  name: 'Upsample',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...upsampleProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\r\n\r\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\r\n\r\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\r\n  const isResize = (opset >= 10);\r\n\r\n  // processing node attributes\r\n  const mode = node.attributes.getString('mode', 'nearest');\r\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\r\n    throw new Error(`unrecognized mode: ${mode}`);\r\n  }\r\n\r\n  let scales: number[] = [];\r\n  if (opset < 9) {\r\n    scales = node.attributes.getFloats('scales');\r\n    scalesValidation(scales, mode, isResize);\r\n  }\r\n\r\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\r\n\r\n  const coordinateTransformMode =\r\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\r\n  if ([\r\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\r\n      ].indexOf(coordinateTransformMode) === -1) {\r\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\r\n  }\r\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\r\n  const useExtrapolation = needRoiInput;\r\n\r\n  const nearestMode =\r\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\r\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\r\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\r\n  }\r\n\r\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\r\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\r\n  if (excludeOutside && mode !== 'cubic') {\r\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\r\n  }\r\n\r\n  const useNearest2xOptimization =\r\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\r\n\r\n  let roiInputIdx = 0;\r\n  let scalesInputIdx = 0;\r\n  let sizesInputIdx = 0;\r\n\r\n  if (opset > 10) {\r\n    roiInputIdx = 1;\r\n    scalesInputIdx = 2;\r\n    sizesInputIdx = 3;\r\n  } else if (opset === 9) {\r\n    scalesInputIdx = 1;\r\n  }\r\n\r\n  return createAttributeWithCacheKey({\r\n    opset,\r\n    isResize,\r\n    mode,\r\n    scales,\r\n    extrapolationValue,\r\n    coordinateTransformMode,\r\n    useExtrapolation,\r\n    needRoiInput,\r\n    nearestMode,\r\n    cubicCoefficientA,\r\n    excludeOutside,\r\n    useNearest2xOptimization,\r\n    roiInputIdx,\r\n    scalesInputIdx,\r\n    sizesInputIdx\r\n  });\r\n};\r\n\r\nconst createUpsampleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [inputWidth, inputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\r\n\r\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\r\n      const [outputWidth, outputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\r\n      const dim = outputShape.length;\r\n\r\n      const outputPitches = new Array<number>(dim);\r\n      const inputPitches = new Array<number>(dim);\r\n      let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n      for (let d = dim - 1; d >= 0; d--) {\r\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n        precalculatedPitches += `\r\n        output_pitches[${d}] = ${outputPitches[d]};\r\n        input_pitches[${d}] = ${inputPitches[d]};\r\n        `;\r\n      }\r\n      const getInputFloatFunction = `\r\n      float getInputFloat(int index) {\r\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\r\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n        return value;\r\n      }\r\n      `;\r\n\r\n      const shaderSource = attributes.mode === 'nearest' ?\r\n          // nearest\r\n          `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[${dim}]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int d, m;\r\n      for (int dim = 0; dim < ${dim}; ++dim) {\r\n        d = output_index / output_pitches[dim];\r\n        m = output_index - d * output_pitches[dim];\r\n        output_index = m;\r\n\r\n        if (scales[dim] != 1 && d > 0) {\r\n          int d2 = d / scales[dim];\r\n          m = d - d2 * scales[dim];\r\n          d = d2;\r\n        }\r\n        input_index += input_pitches[dim] * d;\r\n      }\r\n\r\n      return getInputFloat(input_index);\r\n    }` :\r\n          dim === 4 ?\r\n          // bilinear 4D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[4]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m / output_pitches[1];\r\n      m = m - index_of_dim1 * output_pitches[1];\r\n      index_of_dim2 = m / output_pitches[2];\r\n      m = m - index_of_dim2 * output_pitches[2];\r\n      index_of_dim3 = m;\r\n\r\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n      index_of_input_dim2 = index_of_dim2 / scales[2];\r\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n      index_of_input_dim3 = index_of_dim3 / scales[3];\r\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n      input_index = index_of_dim0 * input_pitches[0] +\r\n            index_of_dim1 * input_pitches[1] +\r\n            index_of_input_dim2 * input_pitches[2] +\r\n            index_of_input_dim3;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim2 = false;\r\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n        // It's the end in dimension 2\r\n        x01 = x00;\r\n        end_of_dim2 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[2]);\r\n      }\r\n\r\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n        // It's the end in dimension 3\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n    }` :\r\n              // bilinear 2D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[2]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m;\r\n\r\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n      index_of_input_dim0 = index_of_dim0 / scales[0];\r\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n      index_of_input_dim1 = index_of_dim1 / scales[1];\r\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim0 = false;\r\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n        // It's the end in dimension 0\r\n        x01 = x00;\r\n        end_of_dim0 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[0]);\r\n      }\r\n\r\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n        // It's the end in dimension 1\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n    }`;\r\n      return {\r\n        ...upsampleProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        variables: [{\r\n          name: 'scales',\r\n          type: 'int',\r\n          arrayLength: attributes.scales.length,\r\n          data: attributes.scales.map(x => Math.ceil(x))\r\n        }]\r\n      };\r\n    };\r\n\r\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\r\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\r\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\r\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\r\n    throw new Error('invalid inputs.');\r\n  }\r\n\r\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input tensor types.');\r\n  }\r\n};\r\n\r\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\r\n  if (!isResize) {\r\n    for (const scale of scales) {\r\n      if (scale < 1) {\r\n        throw new Error('Scale value should be greater than or equal to 1.');\r\n      }\r\n    }\r\n  } else {\r\n    for (const scale of scales) {\r\n      if (scale <= 0) {\r\n        throw new Error('Scale value should be greater than 0.');\r\n      }\r\n    }\r\n  }\r\n  if (mode === 'linear' || mode === 'cubic') {\r\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\r\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\r\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\r\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(\r\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\r\n      public textureLayoutStrategy: TextureLayoutStrategy) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(output);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.glContext.draw();\r\n      });\r\n    }, this.glContext);\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    const width = td.width;\r\n    const height = td.height;\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, width, height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\r\n      void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      const value = variables.find(v => v.name === name)?.data;\r\n      if (type !== 'sampler2D' && !value) {\r\n        throw new Error(`variable '${name}' does not have data defined in program info`);\r\n      }\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1f(location, value as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1i(location, value as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  initializers: Set<Tensor.Id>;\r\n  pack?: boolean;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n    this.pack = backend.pack;\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  addInitializer(tensorId: Tensor.Id): void {\r\n    this.initializers.add(tensorId);\r\n  }\r\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\r\n    if (isPacked) {\r\n      return this.packedTextureDataCache.get(tensorId);\r\n    } else {\r\n      return this.unpackedTextureDataCache.get(tensorId);\r\n    }\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    if (isPacked) {\r\n      this.packedTextureDataCache.set(tensorId, textureData);\r\n    } else {\r\n      this.unpackedTextureDataCache.set(tensorId, textureData);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  /* eslint-disable @typescript-eslint/naming-convention */\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\nimport {assert} from '../../util';\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis?: number;\r\n  isPacked?: boolean;\r\n  reverseWH?: boolean;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n\r\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const wh = this.computeTexture(shape, prefs);\r\n    if (prefs && prefs.isPacked) {\r\n      wh[0] /= 2;\r\n      wh[1] /= 2;\r\n    }\r\n    if (prefs && prefs.reverseWH) {\r\n      return [wh[1], wh[0]];\r\n    }\r\n    return wh;\r\n  }\r\n\r\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const isPacked = prefs && prefs.isPacked;\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return isPacked ? [2, 2] : [1, 1];\r\n    }\r\n    let maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    let logShape = shape.slice(0);\r\n    if (isPacked) {\r\n      maxTextureSize = maxTextureSize * 2;\r\n\r\n      // This logic ensures we accurately count the number of packed texels needed\r\n      // to accommodate the tensor. We can only pack values in the same texel if\r\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\r\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\r\n      // fact that the texels containing the third row are half empty.\r\n      logShape = logShape.map(\r\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\r\n\r\n      // Packed texture height is at least 2 (the channel height of a single\r\n      // texel).\r\n      if (logShape.length === 1) {\r\n        logShape = [2, logShape[0]];\r\n      }\r\n    }\r\n\r\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\r\n    if (logShape.length !== 2) {\r\n      const squeezeResult = squeezeShape(logShape);\r\n      logShape = squeezeResult.newShape;\r\n    }\r\n\r\n    const size = sizeFromShape(logShape);\r\n    if (logShape.length <= 1 && size <= maxTextureSize) {\r\n      return [1, size];\r\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\r\n      return logShape as [number, number];\r\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1], logShape[2]];\r\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\r\n        logShape[3] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\r\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\r\n    } else {\r\n      if (isPacked) {\r\n        // For packed textures size equals the number of channels required to\r\n        // accommodate the texture data. However in order to squarify such that\r\n        // inner dimensions stay even, we rewrite size to equal the number of\r\n        // texels. Then in the return statement we rehydrate the squarified\r\n        // dimensions to channel units.\r\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\r\n      }\r\n      return sizeToSquarishShape(size);\r\n    }\r\n  }\r\n}\r\n\r\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\r\n  const newShape: number[] = [];\r\n  const keptDims: number[] = [];\r\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\r\n  let j = 0;\r\n  for (let i = 0; i < shape.length; ++i) {\r\n    if (axes != null) {\r\n      if (axes[j] === i && shape[i] !== 1) {\r\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n      }\r\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n        newShape.push(shape[i]);\r\n        keptDims.push(i);\r\n      }\r\n      if (axes[j] <= i) {\r\n        j++;\r\n      }\r\n    }\r\n    if (shape[i] !== 1) {\r\n      newShape.push(shape[i]);\r\n      keptDims.push(i);\r\n    }\r\n  }\r\n  return {newShape, keptDims};\r\n}\r\n\r\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\r\n  const rank = shape.length;\r\n\r\n  // Normalize input\r\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\r\n\r\n  // Check for valid range\r\n  assert(\r\n      axis.every(ax => ax >= -rank && ax < rank),\r\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n          `got axis ${axis}`);\r\n\r\n  // Check for only integers\r\n  assert(\r\n      axis.every(isInt),\r\n      () => 'All values in axis param must be integers but ' +\r\n          `got axis ${axis}`);\r\n\r\n  // Handle negative axis.\r\n  return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\nexport function isInt(a: number): boolean {\r\n  return a % 1 === 0;\r\n}\r\nexport function sizeFromShape(shape: number[]): number {\r\n  if (shape.length === 0) {\r\n    // Scalar.\r\n    return 1;\r\n  }\r\n  let size = shape[0];\r\n  for (let i = 1; i < shape.length; i++) {\r\n    size *= shape[i];\r\n  }\r\n  return size;\r\n}\r\nexport function getRowsCols(shape: number[]): [number, number] {\r\n  if (shape.length === 0) {\r\n    throw Error('Cannot get rows and columns of an empty shape array.');\r\n  }\r\n\r\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nexport function sizeToSquarishShape(size: number): [number, number] {\r\n  const width = Math.ceil(Math.sqrt(size));\r\n  return [width, Math.ceil(size / width)];\r\n}\r\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\r\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ShapeUtil} from '../../util';\r\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureLayout, TextureType} from './types';\r\n\r\nexport const createTextureLayoutFromTextureType =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\r\n     textureType: TextureType): TextureLayout => {\r\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\r\n      const isPacked = textureType === TextureType.packed;\r\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\r\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\r\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\r\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\r\n          undefined;\r\n      return createTextureLayoutFromShape(\r\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\r\n    };\r\n\r\nexport const calculateTextureWidthAndHeight =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\r\n        [number, number] => {\r\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\r\n          return [layout.width, layout.height];\r\n        };\r\n\r\n/**\r\n * Create a TextureLayout object from shape.\r\n */\r\nexport const createTextureLayoutFromShape =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\r\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\r\n      const isPacked = !!(prefs && prefs.isPacked);\r\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\r\n      const rank = shape.length;\r\n      let inferredDims = shape.slice(0);\r\n      if (rank === 0) {\r\n        inferredDims = [1];\r\n      }\r\n      if (channels === 1) {\r\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n        unpackedShape = shape;\r\n      } else if (isPacked) {\r\n        if (channels !== 4) {\r\n          throw new Error('a packed texture must be 4-channel');\r\n        }\r\n        unpackedShape = shape;\r\n        if (rank > 0) {\r\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\r\n        }\r\n        if (rank > 1) {\r\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\r\n        }\r\n      } else if (!unpackedShape) {\r\n        throw new Error('Unpacked shape is needed when using channels > 1');\r\n      }\r\n      return {\r\n        width,\r\n        height,\r\n        channels,\r\n        isPacked,\r\n        shape: inferredDims,\r\n        strides: ShapeUtil.computeStrides(inferredDims),\r\n        unpackedShape,\r\n        reversedWH: (prefs && prefs.reverseWH)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\r\n      throw new Error('not implemented');\r\n    }\r\n    const width = layout.width;\r\n    const height = layout.height;\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\r\n    const dataId = td.tensor.dataId;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (this.pendingRead.has(dataId)) {\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\r\n      this.pendingRead.set(dataId, []);\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      // add a fence waiting for the data to be ready\r\n      await this.glContext.createAndWaitForFence();\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      const tensorData = this.toTensorData(dataType, data);\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      this.pendingRead.delete(dataId);\r\n      subscribers?.forEach(resolve => resolve(tensorData));\r\n      return tensorData;\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return data instanceof Int16Array ? data : Int16Array.from(data);\r\n      case 'int32':\r\n        return data instanceof Int32Array ? data : Int32Array.from(data);\r\n      case 'int8':\r\n        return data instanceof Int8Array ? data : Int8Array.from(data);\r\n      case 'uint16':\r\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\r\n      case 'uint32':\r\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\r\n      case 'float32':\r\n        return data instanceof Float32Array ? data : Float32Array.from(data);\r\n      case 'float64':\r\n        return data instanceof Float64Array ? data : Float64Array.from(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../tensor';\r\n\r\n/**\r\n * Layout info is used for mapping n-dimensional array to 2D textures\r\n * The layout is created by the TextureLayoutStrategy based on\r\n * the Tensor's dimensions and strides\r\n */\r\nexport interface TextureLayout {\r\n  width: number;\r\n  height: number;\r\n  /**\r\n   * specify the number of value that encoded in a single pixel\r\n   */\r\n  channels: 1|2|3|4;\r\n  /**\r\n   * whether in packed mode or not\r\n   */\r\n  isPacked?: boolean;\r\n  /**\r\n   * the normalized shape\r\n   */\r\n  shape: readonly number[];\r\n  /**\r\n   * the stride of each dimensions, calculated according to shape\r\n   */\r\n  strides: readonly number[];\r\n  /**\r\n   * the original shape(dims) of the corresponding tensor\r\n   */\r\n  unpackedShape: readonly number[];\r\n\r\n  reversedWH?: boolean;\r\n}\r\nexport interface TextureData extends TextureLayout {\r\n  tensor: Tensor;\r\n  texture: WebGLTexture;\r\n}\r\n\r\nexport enum TextureType {\r\n  unpacked,              // <-- normal unpacked texture\r\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\r\n  packed,                // <-- normal packed texture\r\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\r\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\r\n}\r\n\r\nexport interface TensorInfo {\r\n  id?: Tensor.Id;\r\n  dims: readonly number[];\r\n  type: Tensor.DataType;\r\n  textureType: TextureType;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * A set of metadata of a shader program.\r\n */\r\nexport interface ProgramMetadata {\r\n  /**\r\n   * the name of the program. used for debugging and profiling\r\n   */\r\n  name: string;\r\n  /**\r\n   * texture types for each input\r\n   */\r\n  inputTypes: TextureType[];\r\n  /**\r\n   * names of each input\r\n   */\r\n  inputNames: string[];\r\n  /**\r\n   * an optional string as a cache hint in the artifact cache\r\n   */\r\n  cacheHint?: string;\r\n}\r\n\r\n/**\r\n * A ProgramInfoLoader allows\r\n */\r\nexport interface ProgramInfoLoader extends ProgramMetadata {\r\n  /**\r\n   * a function to get the program info\r\n   */\r\n  get(): ProgramInfo;\r\n}\r\n\r\n/**\r\n * A set of data that represent a shader program\r\n */\r\nexport interface ProgramInfo extends ProgramMetadata {\r\n  /**\r\n   * information of uniform variables\r\n   */\r\n  variables?: ProgramVariable[];\r\n  /**\r\n   * tensor info for output\r\n   */\r\n  output: TensorInfo;\r\n  /**\r\n   * the shader's processing source code\r\n   */\r\n  shaderSource: string;\r\n  /**\r\n   * whether the shader source contains a customized main function implementation\r\n   */\r\n  hasMain?: boolean;\r\n}\r\n\r\nexport interface VariableInfo {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * Information of uniforms that shader uses\r\n */\r\nexport interface UniformInfo {\r\n  type: 'sampler2D'|VariableInfo['type'];\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface UniformLocation extends UniformInfo {\r\n  location: WebGLUniformLocation;\r\n}\r\n\r\n/**\r\n * Artifact is the result of compilation\r\n * It does not contain input of output data\r\n * However anything that could be run as a \"program\"\r\n */\r\nexport interface Artifact {\r\n  programInfo: ProgramInfo;\r\n  program: WebGLProgram;\r\n  uniformLocations: UniformLocation[];\r\n  attribLocations: {position: number; textureCoord: number};\r\n}\r\nexport declare namespace Artifact {\r\n  type UniformLocations = Artifact['uniformLocations'];\r\n  type AttribLocations = Artifact['attribLocations'];\r\n}\r\n\r\nexport interface UniformData {\r\n  [name: string]: number|number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {assert} from '../../util';\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n\r\nexport async function repeatedTry(\r\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let tryCount = 0;\r\n\r\n    const tryFn = () => {\r\n      if (checkFn()) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      tryCount++;\r\n\r\n      const nextBackoff = delayFn(tryCount);\r\n\r\n      if (maxCounter != null && tryCount >= maxCounter) {\r\n        reject();\r\n        return;\r\n      }\r\n      setTimeout(tryFn, nextBackoff);\r\n    };\r\n\r\n    tryFn();\r\n  });\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name at output coordinates.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\r\n}\r\n\r\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\r\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\r\n  // Deep copy.\r\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\r\n  newInputShape = squeezedShape;\r\n  return newInputShape;\r\n}\r\n\r\n/** Returns a list of squeezed parameters for shader functions */\r\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\r\n  return keptDims.map(d => params[d]).join(', ');\r\n}\r\n\r\n/** Returns the data type for different ranks. */\r\nexport function getCoordsDataType(rank: number): string {\r\n  if (rank <= 1) {\r\n    return 'int';\r\n  } else if (rank === 2) {\r\n    return 'ivec2';\r\n  } else if (rank === 3) {\r\n    return 'ivec3';\r\n  } else if (rank === 4) {\r\n    return 'ivec4';\r\n  } else if (rank === 5) {\r\n    return 'ivec5';\r\n  } else if (rank === 6) {\r\n    return 'ivec6';\r\n  } else {\r\n    throw Error(`GPU for rank ${rank} is not yet supported`);\r\n  }\r\n}\r\n\r\nexport function getGlChannels(rank = 6): string[] {\r\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  context = context || createNewWebGLContext(contextId);\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const canvas = createCanvas();\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\nimport {repeatedTry} from './utils';\r\n\r\nexport interface FenceContext {\r\n  query: WebGLSync|null;\r\n  isFencePassed(): boolean;\r\n}\r\n\r\ntype PollItem = {\r\n  isDoneFn: () => boolean; resolveFn: () => void;\r\n};\r\n\r\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\r\n  let i = 0;\r\n  for (; i < arr.length; ++i) {\r\n    const isDone = arr[i]();\r\n    if (!isDone) {\r\n      break;\r\n    }\r\n  }\r\n  return i - 1;\r\n}\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  // eslint-disable-next-line camelcase\r\n  textureFloatExtension: OES_texture_float|null;\r\n  // eslint-disable-next-line camelcase\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: unknown|null;\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\r\nShader source:\r\n${shaderSource}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\r\n    ]);\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error('both float32 and float16 TextureType are not supported');\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n\r\n  beginTimer(): WebGLQuery {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      const query = gl2.createQuery() as WebGLQuery;\r\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n      return query;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported.');\r\n    }\r\n  }\r\n\r\n  endTimer() {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\r\n      return;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n  }\r\n\r\n  isTimerResultAvailable(query: WebGLQuery): boolean {\r\n    let available = false, disjoint = false;\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\r\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n\r\n    return available && !disjoint;\r\n  }\r\n\r\n  getTimerResult(query: WebGLQuery): number {\r\n    let timeElapsed = 0;\r\n    if (this.version === 2) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\r\n      gl2.deleteQuery(query);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n    // return miliseconds\r\n    return timeElapsed / 1000000;\r\n  }\r\n\r\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\r\n    await repeatedTry(() => this.isTimerResultAvailable(query));\r\n    return this.getTimerResult(query);\r\n  }\r\n\r\n  public async createAndWaitForFence(): Promise<void> {\r\n    const fenceContext = this.createFence(this.gl);\r\n    return this.pollFence(fenceContext);\r\n  }\r\n\r\n  private createFence(gl: WebGLRenderingContext): FenceContext {\r\n    let isFencePassed: () => boolean;\r\n    const gl2 = gl as WebGL2RenderingContext;\r\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n    gl.flush();\r\n    if (query === null) {\r\n      isFencePassed = () => true;\r\n    } else {\r\n      isFencePassed = () => {\r\n        const status = gl2.clientWaitSync(query, 0, 0);\r\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\r\n      };\r\n    }\r\n    return {query, isFencePassed};\r\n  }\r\n\r\n  async pollFence(fenceContext: FenceContext) {\r\n    return new Promise<void>(resolve => {\r\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\r\n    });\r\n  }\r\n\r\n  private itemsToPoll: PollItem[] = [];\r\n\r\n  pollItems(): void {\r\n    // Find the last query that has finished.\r\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\r\n    for (let i = 0; i <= index; ++i) {\r\n      const {resolveFn} = this.itemsToPoll[i];\r\n      resolveFn();\r\n    }\r\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\r\n  }\r\n\r\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\r\n    this.itemsToPoll.push({isDoneFn, resolveFn});\r\n    if (this.itemsToPoll.length > 1) {\r\n      // We already have a running loop that polls.\r\n      return;\r\n    }\r\n    // Start a new loop that polls.\r\n    await repeatedTry(() => {\r\n      this.pollItems();\r\n      // End the loop if no more items to poll.\r\n      return this.itemsToPoll.length === 0;\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event(\r\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\r\n        const outputIndex = this.graph.getOutputIndices()[i];\r\n        const outputTensor = this._values[outputIndex];\r\n        if (outputTensor === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        if (outputIndex === 0) {\r\n          await outputTensor.getData();\r\n        } else {\r\n          // eslint-disable-next-line no-unused-expressions\r\n          outputTensor.data;\r\n        }\r\n        output.push(outputTensor);\r\n      }\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Attribute} from './attribute';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil, ProtoUtil, MIN_CLIP, MAX_CLIP} from './util';\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: readonly number[];\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: readonly number[];\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: readonly number[];\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: readonly number[];\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    fuseConvActivationNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Graph {\r\n  getInputIndices(): readonly number[];\r\n  getInputNames(): readonly string[];\r\n  getOutputIndices(): readonly number[];\r\n  getOutputNames(): readonly string[];\r\n  getValues(): readonly Graph.Value[];\r\n  getNodes(): readonly Graph.Node[];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\r\n      new GraphImpl(graphProto, initializer),\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\r\n    if (_nodeProto instanceof onnx.NodeProto) {\r\n      this.name = _nodeProto.name;\r\n      this.opType = _nodeProto.opType;\r\n      this.attributes = new Attribute(_nodeProto.attribute);\r\n    } else if (_nodeProto instanceof ortFbs.Node) {\r\n      this.name = name ?? _nodeProto.name()!;\r\n      this.opType = _nodeProto.opType()!;\r\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\r\n    }\r\n\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): readonly number[] {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): readonly string[] {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): readonly number[] {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): readonly string[] {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): readonly Graph.Value[] {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): readonly Graph.Node[] {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    if (graph instanceof onnx.GraphProto) {\r\n      this.buildGraphFromOnnxFormat(graph);\r\n    } else if (graph instanceof ortFbs.Graph) {\r\n      this.buildGraphFromOrtFormat(graph);\r\n    } else {\r\n      throw new TypeError('Graph type is not supported.');\r\n    }\r\n  }\r\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    const inputValueNames = [];\r\n    for (let i = 0; i < graph.inputsLength(); i++) {\r\n      const inputName = graph.inputs(i);\r\n      if (dataIndices.has(inputName)) {\r\n        throw new Error(`duplicated input name: ${inputName}`);\r\n      }\r\n      // Find the input typeInfo from nodeargs\r\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\r\n        if (graph.nodeArgs(j)?.name() === inputName) {\r\n          const value = new Value();\r\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\r\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\r\n            throw new Error('Unexpected value type for the nodeArg.');\r\n          }\r\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\r\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\r\n          const shape = valueInfo.shape()!;\r\n          const dims = [];\r\n          for (let k = 0; k < shape.dimLength()!; k++) {\r\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\r\n          }\r\n          value.type = {shape: {dims}, tensorType: type};\r\n          const currentIndex = this._allData.push(value) - 1;\r\n          dataIndices.set(inputName, currentIndex);\r\n          inputValueNames.push(inputName);\r\n        }\r\n      }\r\n    }\r\n    // check initializers\r\n    for (let i = 0; i < graph.initializersLength(); i++) {\r\n      const initializer = graph.initializers(i)!;\r\n      let index = dataIndices.get(initializer.name()!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\r\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\r\n        value.type = {shape: {dims}, tensorType: type};\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(initializer.name()!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    for (let i = 0; i < graph.outputsLength(); i++) {\r\n      const outputName = graph.outputs(i);\r\n      if (dataIndices.has(outputName)) {\r\n        throw new Error(`duplicated output name: ${outputName}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value()) - 1;\r\n      dataIndices.set(outputName, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(outputName);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.nodes) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (let i = 0; i < graph.nodesLength(); i++) {\r\n      const nodeProto = graph.nodes(i);\r\n      let name = nodeProto!.name();\r\n      if (!name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            // an unique name is found. break.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(name)) {\r\n        throw new Error(`duplicated node name: ${name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\r\n      nodesIndices.set(name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i);\r\n      if (nodeProto == null) {\r\n        throw new Error(`No node exists at index ${i}`);\r\n      }\r\n      if (nodeProto?.outputsLength() === 0) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\r\n        const output = nodeProto?.outputs(j);\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType() === 'Constant') {\r\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (nodeProto.outputsLength() !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i)!;\r\n\r\n      if (nodeProto.inputsLength() === 0) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\r\n        const input = nodeProto.inputs(j)!;\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error('node outputs should not be initialized');\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error('model graph is cyclic');\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n    this.fuseConvActivationNodes();\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      if (!this._nodes[i].executeNode) {\r\n        // delete this node and shift all subsequent nodes up\r\n        offset++;\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n        this._nodes.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        // update the value table\r\n        this._nodes[i].inputs.forEach(value => {\r\n          const ind = this._allData[value]._to.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allData[value]._to[ind] = i;\r\n          }\r\n        });\r\n        this._nodes[i].outputs.forEach(value => {\r\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\r\n            this._allData[value]._from! = i;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\r\n   * An input validation must be done before calling this function.\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\r\n    // should not happen\r\n    if (delIndex === -1) {\r\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\r\n    }\r\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error('Dropout nodes should only contain one input. ');\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  isActivation(n: Node): boolean {\r\n    switch (n.opType) {\r\n      // TODO: add other activation methods\r\n      case 'Relu':\r\n      case 'Sigmoid':\r\n      case 'Clip':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  fuseConvActivationNodes() {\r\n    for (const node of this._nodes) {\r\n      if (node.opType === 'Conv') {\r\n        const next = this._allData[node.outputs[0]]._to;\r\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\r\n          const child = this._nodes[next[0]];\r\n          if (child.opType === 'Clip') {\r\n            if (child.inputs.length === 1) {\r\n              try {\r\n                node.attributes.set(\r\n                    'activation_params', 'floats',\r\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\r\n              } catch (e) {\r\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\r\n              }\r\n            } else if (\r\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\r\n                this._allData[child.inputs[2]].tensor !== undefined) {\r\n              node.attributes.set('activation_params', 'floats', [\r\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\r\n              ]);\r\n            } else {\r\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\r\n              continue;\r\n            }\r\n          }\r\n          node.attributes.set('activation', 'string', (child.opType));\r\n          this.deleteNode(next[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {WebGLContext} from './backends/webgl/webgl-context';\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n    fatal: 'f';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'warning' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n    fatal(content: string): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n  fatal(content: string): void;\r\n  fatal(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n\r\n  /**\r\n   * Set the logger's behavior from ort-common env\r\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\r\n   */\r\n  setWithEnv(env: Env): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      case 'fatal':\r\n        return '\\x1b[101mf\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000,\r\n  fatal: 6000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'warning',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category),\r\n    fatal: log.fatal.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n  export function fatal(content: string): void;\r\n  export function fatal(category: string, content: string): void;\r\n  export function fatal(arg0: string, arg1?: string) {\r\n    log('fatal', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n\r\n  export function setWithEnv(env: Env): void {\r\n    const config: Logger.Config = {};\r\n    if (env.logLevel) {\r\n      config.minimalSeverity = env.logLevel as Logger.Severity;\r\n    }\r\n    set('', config);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void|Promise<void>;\r\n  }\r\n}\r\n// TODO\r\n// class WebGLEvent implements Profiler.Event {}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\r\n\r\n  end() {\r\n    return this.endCallback(this);\r\n  }\r\n\r\n  async checkTimer(): Promise<number> {\r\n    if (this.ctx === undefined || this.timer === undefined) {\r\n      throw new Error('No webgl timer found');\r\n    } else {\r\n      this.ctx.endTimer();\r\n      return this.ctx.waitForQueryAndGetTime(this.timer);\r\n    }\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\r\n      |Promise<T> {\r\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\r\n    let isPromise = false;\r\n\r\n    const res = func();\r\n\r\n    // we consider a then-able object is a promise\r\n    if (res && typeof (res as Promise<T>).then === 'function') {\r\n      isPromise = true;\r\n      return new Promise<T>((resolve, reject) => {\r\n        (res as Promise<T>)\r\n            .then(\r\n                async value => {  // fulfilled\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  resolve(value);\r\n                },\r\n                async reason => {  // rejected\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  reject(reason);\r\n                });\r\n      });\r\n    }\r\n    if (!isPromise && event) {\r\n      const eventRes = event.end();\r\n      if (eventRes && typeof eventRes.then === 'function') {\r\n        return new Promise<T>((resolve, reject) => {\r\n          (eventRes).then(\r\n              () => {  // fulfilled\r\n                resolve(res);\r\n              },\r\n              (reason) => {  // rejected\r\n                reject(reason);\r\n              });\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    if (ctx === undefined) {\r\n      const startTime = now();\r\n      this.flush(startTime);\r\n      return new Event(category, name, startTime, e => this.endSync(e));\r\n    } else {\r\n      const timer: WebGLQuery = ctx.beginTimer();\r\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\r\n    }\r\n  }\r\n\r\n  // end the specific event\r\n  private async end(event: Event): Promise<void> {\r\n    const endTime: number = await event.checkTimer();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private endSync(event: Event): void {\r\n    const endTime: number = now();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {LongUtil} from './util';\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\r\n    if (!isOrtFormat) {\r\n      // isOrtFormat === false || isOrtFormat === undefined\r\n      try {\r\n        this.loadFromOnnxFormat(buf, graphInitializer);\r\n        return;\r\n      } catch (e) {\r\n        if (isOrtFormat !== undefined) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.loadFromOrtFormat(buf, graphInitializer);\r\n  }\r\n\r\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets =\r\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const fb = new flatbuffers.ByteBuffer(buf);\r\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\r\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n    this._opsets = [];\r\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\r\n      const opsetId = ortModel.opsetImport(i)!;\r\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\r\n    }\r\n\r\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): readonly OpSet[] {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\r\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\r\n\r\nexport interface Operator {\r\n  readonly impl: OperatorImplementation<unknown>;\r\n  readonly context: Graph.Node|unknown;\r\n}\r\n\r\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from './graph';\r\nimport {OperatorImplementation, OperatorInitialization} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\n\r\nexport declare namespace OpSet {\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\r\n\r\n  /**\r\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\r\n   * operatorInitialization (optional)\r\n   */\r\n  type ResolveRule = [\r\n    string, Domain, string, OperatorImplementation<Graph.Node>\r\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\r\n}\r\n\r\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opImpl = rule[3];\r\n    const opInit = rule[4];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return {opImpl, opInit};\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n/* eslint-disable */\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum AttributeType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    INT = 2,\r\n    STRING = 3,\r\n    TENSOR = 4,\r\n    GRAPH = 5,\r\n    FLOATS = 6,\r\n    INTS = 7,\r\n    STRINGS = 8,\r\n    TENSORS = 9,\r\n    GRAPHS = 10,\r\n    SPARSE_TENSOR = 11,\r\n    SPARSE_TENSORS = 12\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TensorDataType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    UINT8 = 2,\r\n    INT8 = 3,\r\n    UINT16 = 4,\r\n    INT16 = 5,\r\n    INT32 = 6,\r\n    INT64 = 7,\r\n    STRING = 8,\r\n    BOOL = 9,\r\n    FLOAT16 = 10,\r\n    DOUBLE = 11,\r\n    UINT32 = 12,\r\n    UINT64 = 13,\r\n    COMPLEX64 = 14,\r\n    COMPLEX128 = 15,\r\n    BFLOAT16 = 16\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum NodeType {Primitive = 0, Fused = 1}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\r\n}\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Shape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Shape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Dimension= obj\r\n     * @returns onnxruntime.experimental.fbs.Dimension\r\n     */\r\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimOffset\r\n     */\r\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, dimOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Shape.startShape(builder);\r\n      Shape.addDim(builder, dimOffset);\r\n      return Shape.endShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Dimension {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Dimension\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\r\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\r\n     */\r\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimension(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimension(\r\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\r\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Dimension.startDimension(builder);\r\n      Dimension.addValue(builder, valueOffset);\r\n      Dimension.addDenotation(builder, denotationOffset);\r\n      return Dimension.endDimension(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class DimensionValue {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns DimensionValue\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\r\n     */\r\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dimValue(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    dimParam(): string|null;\r\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimensionValue(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\r\n     */\r\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\r\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long dimValue\r\n     */\r\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimParamOffset\r\n     */\r\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimParamOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimensionValue(\r\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\r\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      DimensionValue.startDimensionValue(builder);\r\n      DimensionValue.addDimType(builder, dimType);\r\n      DimensionValue.addDimValue(builder, dimValue);\r\n      DimensionValue.addDimParam(builder, dimParamOffset);\r\n      return DimensionValue.endDimensionValue(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TensorTypeAndShape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\r\n        TensorTypeAndShape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Shape= obj\r\n     * @returns onnxruntime.experimental.fbs.Shape|null\r\n     */\r\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset shapeOffset\r\n     */\r\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, shapeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensorTypeAndShape(\r\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\r\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\r\n      TensorTypeAndShape.addElemType(builder, elemType);\r\n      TensorTypeAndShape.addShape(builder, shapeOffset);\r\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class MapType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns MapType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startMapType(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\r\n     */\r\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueTypeOffset\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, valueTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createMapType(\r\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\r\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      MapType.startMapType(builder);\r\n      MapType.addKeyType(builder, keyType);\r\n      MapType.addValueType(builder, valueTypeOffset);\r\n      return MapType.endMapType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SequenceType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SequenceType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSequenceType(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset elemTypeOffset\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, elemTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SequenceType.startSequenceType(builder);\r\n      SequenceType.addElemType(builder, elemTypeOffset);\r\n      return SequenceType.endSequenceType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class EdgeEnd {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns EdgeEnd\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      return this.bb!.readUint32(this.bb_pos);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    srcArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 4);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dstArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number node_index\r\n     * @param number src_arg_index\r\n     * @param number dst_arg_index\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createEdgeEnd(\r\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\r\n        dst_arg_index: number): flatbuffers.Offset {\r\n      builder.prep(4, 12);\r\n      builder.writeInt32(dst_arg_index);\r\n      builder.writeInt32(src_arg_index);\r\n      builder.writeInt32(node_index);\r\n      return builder.offset();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class NodeEdge {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns NodeEdge\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNodeEdge(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number nodeIndex\r\n     */\r\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\r\n      builder.addFieldInt32(0, nodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputEdgesOffset\r\n     */\r\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputEdgesOffset\r\n     */\r\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNodeEdge(\r\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\r\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      NodeEdge.startNodeEdge(builder);\r\n      NodeEdge.addNodeIndex(builder, nodeIndex);\r\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\r\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\r\n      return NodeEdge.endNodeEdge(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Node {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Node\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sinceVersion(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    index(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    opType(): string|null;\r\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    opType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.NodeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.NodeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    executionProviderType(): string|null;\r\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Attribute= obj\r\n     * @returns onnxruntime.experimental.fbs.Attribute\r\n     */\r\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\r\n        |null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    attributesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    inputArgCounts(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputArgCountsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Int32Array\r\n     */\r\n    inputArgCountsArray(): Int32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ?\r\n          new Int32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    implicitInputs(index: number): string;\r\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    implicitInputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNode(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number sinceVersion\r\n     */\r\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\r\n      builder.addFieldInt32(3, sinceVersion, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number index\r\n     */\r\n    static addIndex(builder: flatbuffers.Builder, index: number) {\r\n      builder.addFieldInt32(4, index, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opTypeOffset\r\n     */\r\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, opTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.NodeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\r\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset executionProviderTypeOffset\r\n     */\r\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset attributesOffset\r\n     */\r\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, attributesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputArgCountsOffset\r\n     */\r\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset implicitInputsOffset\r\n     */\r\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNode(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\r\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Node.startNode(builder);\r\n      Node.addName(builder, nameOffset);\r\n      Node.addDocString(builder, docStringOffset);\r\n      Node.addDomain(builder, domainOffset);\r\n      Node.addSinceVersion(builder, sinceVersion);\r\n      Node.addIndex(builder, index);\r\n      Node.addOpType(builder, opTypeOffset);\r\n      Node.addType(builder, type);\r\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\r\n      Node.addInputs(builder, inputsOffset);\r\n      Node.addOutputs(builder, outputsOffset);\r\n      Node.addAttributes(builder, attributesOffset);\r\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\r\n      Node.addImplicitInputs(builder, implicitInputsOffset);\r\n      return Node.endNode(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class ValueInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns ValueInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startValueInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset typeOffset\r\n     */\r\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, typeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createValueInfo(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      ValueInfo.startValueInfo(builder);\r\n      ValueInfo.addName(builder, nameOffset);\r\n      ValueInfo.addDocString(builder, docStringOffset);\r\n      ValueInfo.addType(builder, typeOffset);\r\n      return ValueInfo.endValueInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TypeInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TypeInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\r\n     */\r\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Table obj\r\n     * @returns ?flatbuffers.Table\r\n     */\r\n    value<T extends flatbuffers.Table>(obj: T): T|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTypeInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\r\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTypeInfo(\r\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\r\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TypeInfo.startTypeInfo(builder);\r\n      TypeInfo.addDenotation(builder, denotationOffset);\r\n      TypeInfo.addValueType(builder, valueType);\r\n      TypeInfo.addValue(builder, valueOffset);\r\n      return TypeInfo.endTypeInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class OperatorSetId {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns OperatorSetId\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    version(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startOperatorSetId(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long version\r\n     */\r\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createOperatorSetId(\r\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\r\n      OperatorSetId.startOperatorSetId(builder);\r\n      OperatorSetId.addDomain(builder, domainOffset);\r\n      OperatorSetId.addVersion(builder, version);\r\n      return OperatorSetId.endOperatorSetId(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Tensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Tensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    rawData(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    rawDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint8Array\r\n     */\r\n    rawDataArray(): Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ?\r\n          new Uint8Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    stringData(index: number): string;\r\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(6);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\r\n     */\r\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset rawDataOffset\r\n     */\r\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, rawDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(1, data.length, 1);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt8(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(1, numElems, 1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringDataOffset\r\n     */\r\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, stringDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensor(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\r\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Tensor.startTensor(builder);\r\n      Tensor.addName(builder, nameOffset);\r\n      Tensor.addDocString(builder, docStringOffset);\r\n      Tensor.addDims(builder, dimsOffset);\r\n      Tensor.addDataType(builder, dataType);\r\n      Tensor.addRawData(builder, rawDataOffset);\r\n      Tensor.addStringData(builder, stringDataOffset);\r\n      return Tensor.endTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SparseTensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SparseTensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSparseTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valuesOffset\r\n     */\r\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valuesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset indicesOffset\r\n     */\r\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, indicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSparseTensor(\r\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SparseTensor.startSparseTensor(builder);\r\n      SparseTensor.addValues(builder, valuesOffset);\r\n      SparseTensor.addIndices(builder, indicesOffset);\r\n      SparseTensor.addDims(builder, dimsOffset);\r\n      return SparseTensor.endSparseTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Attribute {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Attribute\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.AttributeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.AttributeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    f(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    i(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    s(): string|null;\r\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    s(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    floats(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    floatsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Float32Array\r\n     */\r\n    floatsArray(): Float32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ?\r\n          new Float32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    ints(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    intsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    strings(index: number): string;\r\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    tensorsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph\r\n     */\r\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    graphsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startAttribute(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.AttributeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\r\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number f\r\n     */\r\n    static addF(builder: flatbuffers.Builder, f: number) {\r\n      builder.addFieldFloat32(3, f, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long i\r\n     */\r\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\r\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sOffset\r\n     */\r\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, sOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tOffset\r\n     */\r\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, tOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset gOffset\r\n     */\r\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, gOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset floatsOffset\r\n     */\r\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, floatsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addFloat32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset intsOffset\r\n     */\r\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, intsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringsOffset\r\n     */\r\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, stringsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tensorsOffset\r\n     */\r\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, tensorsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphsOffset\r\n     */\r\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, graphsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createAttribute(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\r\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\r\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\r\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Attribute.startAttribute(builder);\r\n      Attribute.addName(builder, nameOffset);\r\n      Attribute.addDocString(builder, docStringOffset);\r\n      Attribute.addType(builder, type);\r\n      Attribute.addF(builder, f);\r\n      Attribute.addI(builder, i);\r\n      Attribute.addS(builder, sOffset);\r\n      Attribute.addT(builder, tOffset);\r\n      Attribute.addG(builder, gOffset);\r\n      Attribute.addFloats(builder, floatsOffset);\r\n      Attribute.addInts(builder, intsOffset);\r\n      Attribute.addStrings(builder, stringsOffset);\r\n      Attribute.addTensors(builder, tensorsOffset);\r\n      Attribute.addGraphs(builder, graphsOffset);\r\n      return Attribute.endAttribute(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Graph {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Graph\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    initializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.ValueInfo\r\n     */\r\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeArgsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Node= obj\r\n     * @returns onnxruntime.experimental.fbs.Node\r\n     */\r\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    maxNodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\r\n     * @returns onnxruntime.experimental.fbs.NodeEdge\r\n     */\r\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\r\n     * @returns onnxruntime.experimental.fbs.SparseTensor\r\n     */\r\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\r\n        onnxruntime.experimental.fbs.SparseTensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sparseInitializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startGraph(builder: flatbuffers.Builder) {\r\n      builder.startObject(8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset initializersOffset\r\n     */\r\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, initializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeArgsOffset\r\n     */\r\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodesOffset\r\n     */\r\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, nodesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number maxNodeIndex\r\n     */\r\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\r\n      builder.addFieldInt32(3, maxNodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeEdgesOffset\r\n     */\r\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sparseInitializersOffset\r\n     */\r\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createGraph(\r\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\r\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\r\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Graph.startGraph(builder);\r\n      Graph.addInitializers(builder, initializersOffset);\r\n      Graph.addNodeArgs(builder, nodeArgsOffset);\r\n      Graph.addNodes(builder, nodesOffset);\r\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\r\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\r\n      Graph.addInputs(builder, inputsOffset);\r\n      Graph.addOutputs(builder, outputsOffset);\r\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\r\n      return Graph.endGraph(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Model {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Model\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    irVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\r\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\r\n     */\r\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\r\n        onnxruntime.experimental.fbs.OperatorSetId|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    opsetImportLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerName(): string|null;\r\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerVersion(): string|null;\r\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    modelVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphDocString(): string|null;\r\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startModel(builder: flatbuffers.Builder) {\r\n      builder.startObject(9);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long irVersion\r\n     */\r\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opsetImportOffset\r\n     */\r\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, opsetImportOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerNameOffset\r\n     */\r\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, producerNameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerVersionOffset\r\n     */\r\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(3, producerVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long modelVersion\r\n     */\r\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphOffset\r\n     */\r\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, graphOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphDocStringOffset\r\n     */\r\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createModel(\r\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\r\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\r\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Model.startModel(builder);\r\n      Model.addIrVersion(builder, irVersion);\r\n      Model.addOpsetImport(builder, opsetImportOffset);\r\n      Model.addProducerName(builder, producerNameOffset);\r\n      Model.addProducerVersion(builder, producerVersionOffset);\r\n      Model.addDomain(builder, domainOffset);\r\n      Model.addModelVersion(builder, modelVersion);\r\n      Model.addDocString(builder, docStringOffset);\r\n      Model.addGraph(builder, graphOffset);\r\n      Model.addGraphDocString(builder, graphDocStringOffset);\r\n      return Model.endModel(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class KernelCreateInfos {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns KernelCreateInfos\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\r\n        KernelCreateInfos {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    nodeIndices(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndicesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint32Array\r\n     */\r\n    nodeIndicesArray(): Uint32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ?\r\n          new Uint32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    kernelDefHashes(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    kernelDefHashesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeIndicesOffset\r\n     */\r\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelDefHashesOffset\r\n     */\r\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createKernelCreateInfos(\r\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\r\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      KernelCreateInfos.startKernelCreateInfos(builder);\r\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\r\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\r\n      return KernelCreateInfos.endKernelCreateInfos(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SubGraphSessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SubGraphSessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\r\n        SubGraphSessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphId(): string|null;\r\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphIdOffset\r\n     */\r\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, graphIdOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      builder.requiredField(offset, 4);  // graph_id\r\n      return offset;\r\n    }\r\n\r\n    static createSubGraphSessionState(\r\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SubGraphSessionState.startSubGraphSessionState(builder);\r\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\r\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\r\n      return SubGraphSessionState.endSubGraphSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\r\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\r\n     */\r\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\r\n     */\r\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\r\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    subGraphSessionStatesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelsOffset\r\n     */\r\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, kernelsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\r\n     */\r\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSessionState(\r\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\r\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SessionState.startSessionState(builder);\r\n      SessionState.addKernels(builder, kernelsOffset);\r\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\r\n      return SessionState.endSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class InferenceSession {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns InferenceSession\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns boolean\r\n     */\r\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\r\n      return bb.__has_identifier('ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    ortVersion(): string|null;\r\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Model= obj\r\n     * @returns onnxruntime.experimental.fbs.Model|null\r\n     */\r\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startInferenceSession(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset ortVersionOffset\r\n     */\r\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, ortVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset modelOffset\r\n     */\r\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, modelOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM', true);\r\n    }\r\n\r\n    static createInferenceSession(\r\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      InferenceSession.startInferenceSession(builder);\r\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\r\n      InferenceSession.addModel(builder, modelOffset);\r\n      InferenceSession.addSessionState(builder, sessionStateOffset);\r\n      return InferenceSession.endInferenceSession(builder);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\nimport {Session} from './session';\r\nimport {Tensor as OnnxjsTensor} from './tensor';\r\n\r\nexport class OnnxjsSessionHandler implements SessionHandler {\r\n  constructor(private session: Session) {\r\n    this.inputNames = this.session.inputNames;\r\n    this.outputNames = this.session.outputNames;\r\n  }\r\n\r\n  async dispose(): Promise<void> {}\r\n  inputNames: readonly string[];\r\n  outputNames: readonly string[];\r\n  async run(\r\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\r\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\r\n    const inputMap = new Map<string, OnnxjsTensor>();\r\n    for (const name in feeds) {\r\n      if (Object.hasOwnProperty.call(feeds, name)) {\r\n        const feed = feeds[name];\r\n        inputMap.set(\r\n            name,\r\n            new OnnxjsTensor(\r\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\r\n                feed.data as OnnxjsTensor.NumberType));\r\n      }\r\n    }\r\n    const outputMap = await this.session.run(inputMap);\r\n    const output: SessionHandler.ReturnType = {};\r\n    outputMap.forEach((tensor, name) => {\r\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\r\n    });\r\n    return output;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {resolveBackend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<readonly number[]>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this._model.graph.getInputNames();\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this._model.graph.getOutputNames();\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await resolveBackend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        const isOrtFormat = arg.endsWith('.ort');\r\n        if (typeof fetch === 'undefined') {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(buf, isOrtFormat);\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(new Uint8Array(buf), isOrtFormat);\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(arr);\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\r\n      boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error('expected number of outputs do not match number of generated outputs');\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Guid} from 'guid-typescript';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export type Id = Guid;\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError('data type is not string');\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not float (float32, float64)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError('type cannot be non-number (string)');\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: readonly number[];\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): readonly number[] {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: readonly number[],\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Guid = Guid.create()) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError('Input dims doesn\\'t match data length.');\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError('cache should be a string array');\r\n      }\r\n\r\n      if (empty) {\r\n        this.cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        value.data[i] = decodeUtf8String(str);\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error('array length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n\r\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\r\n    if (!ortTensor) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\r\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\r\n        value.data[i] = ortTensor.stringData(i);\r\n      }\r\n\r\n    } else if (\r\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource = new DataView(\r\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\r\n      const elementSize = sizeofProto(ortTensor.dataType());\r\n      const length = ortTensor.rawDataLength() / elementSize;\r\n\r\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (\r\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\r\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Evaluates the given expression and asserts error message if condition is unmet.\r\nexport function assert(expr: boolean, msg: () => string) {\r\n  if (!expr) {\r\n    throw new Error(typeof msg === 'string' ? msg : msg());\r\n  }\r\n}\r\n\r\nexport class ArrayUtil {\r\n  /**\r\n   * Verifies if 2 input arrays contain the same elements.\r\n   * @param n1 Array 1\r\n   * @param n2 Array 2\r\n   * @returns Whether these 2 are equal\r\n   */\r\n  static arraysEqual(\r\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array,\r\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array) {\r\n    if (n1.length !== n2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n      if (n1[i] !== n2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\r\n      [readonly number[], readonly number[]] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]), b.get([])));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]);\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]);\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA);\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB);\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determine the broadcasted dims in input shape based on the given output shape.\r\n   * Note that this function only returns the broadcasted dims.\r\n   * @param inputShape The input shape\r\n   * @param outputShape The output shape\r\n   * @returns The broadcasted dims in input shape.\r\n   */\r\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\r\n    const inRank = inputShape.length;\r\n    const dims: number[] = [];\r\n    for (let i = 0; i < inRank; i++) {\r\n      const dim = inRank - 1 - i;\r\n      const a = inputShape[dim] || 1;\r\n      const b = outputShape[outputShape.length - 1 - i] || 1;\r\n      if (b > 1 && a === 1) {\r\n        dims.unshift(dim);\r\n      }\r\n    }\r\n    return dims;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error('sourceIndex out of bounds');\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error('targetIndex out of bounds');\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error('source indices to be copied are outside bounds');\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error('target array is too small to hold result');\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\r\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\r\n    switch (type) {\r\n      case 'int8':\r\n        return onnx.TensorProto.DataType.INT8;\r\n      case 'uint8':\r\n        return onnx.TensorProto.DataType.UINT8;\r\n      case 'bool':\r\n        return onnx.TensorProto.DataType.BOOL;\r\n      case 'int16':\r\n        return onnx.TensorProto.DataType.INT16;\r\n      case 'uint16':\r\n        return onnx.TensorProto.DataType.UINT16;\r\n      case 'int32':\r\n        return onnx.TensorProto.DataType.INT32;\r\n      case 'uint32':\r\n        return onnx.TensorProto.DataType.UINT32;\r\n      case 'float32':\r\n        return onnx.TensorProto.DataType.FLOAT;\r\n      case 'float64':\r\n        return onnx.TensorProto.DataType.DOUBLE;\r\n      case 'string':\r\n        return onnx.TensorProto.DataType.STRING;\r\n      case 'int64':\r\n        return onnx.TensorProto.DataType.INT64;\r\n      case 'uint64':\r\n        return onnx.TensorProto.DataType.UINT64;\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${type}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n\r\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\r\n    const dims = [];\r\n    for (let i = 0; i < tensor.dimsLength(); i++) {\r\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\r\n    const attributes = [];\r\n    for (let i = 0; i < node.attributesLength(); i++) {\r\n      attributes.push(node.attributes(i)!);\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\r\n  // which values are signed integers.\r\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\r\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\r\n    if (Long.isLong(n)) {\r\n      return n.toNumber();\r\n    } else if (n instanceof flatbuffers.Long) {\r\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\r\n    }\r\n    return n;\r\n  }\r\n  static isLong(n: unknown) {\r\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: readonly number[]): readonly number[] {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error('Index incrementing unsupported for scalar Tensor');\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error('Incorrect axis to increment on');\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error('cannot reshape to a scalar Tensor');\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error('squeeze an axis of size different than 1');\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error('\\'axes\\' has an out of range axis');\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error('\\'axes\\' has a duplicate axis');\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error('cannot split tensor to equal sized parts');\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      dilations: number[], pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust dilation value\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < dilations.length) {\r\n        if (dilations[dim] < 0) {\r\n          throw new Error('dilations should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        dilations.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\r\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport const MIN_CLIP = -3.4028234663852886e+38;\r\nexport const MAX_CLIP = 3.4028234663852886e+38;\r\n\r\nexport function decodeUtf8String(buffer: Uint8Array): string {\r\n  return new TextDecoder().decode(buffer);\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}